function ValidateDrop(contType,ctrlName,event){var currentData=$("#"+ctrlName.id).val(),pastedData="";"drop"==event.type&&(pastedData=event.dataTransfer.getData("Text"));var currentData=ProcessDataForCorrection(contType,ctrlName.id,pastedData),$scope=getScope("askCustomerServiceContrl");$scope.askCustomerServiceFormValue[ctrlName]=currentData;var charLength=$("#"+ctrlName.id).attr("maxLength");currentData.length>charLength&&(currentData=currentData.slice(0,charLength),$("#"+ctrlName.id).val(currentData)),$scope.$apply(),event.preventDefault()}function getScope(ctrlName){var sel='article[ng-controller="'+ctrlName+'"]';return angular.element(sel).scope()}function changeDetails(sildeCount){$(window).width()<1e3&&hideSummary(),nextCount=sildeCount,$(".dot"+sildeCount).css("background-color","#777").css("border","1px solid #777").nextAll().css("background-color","#FFF").css("border","1px solid #777"),$(".dot"+sildeCount).prevAll().css("background-color","#3C6").css("border","1px solid #3C6"),$(window).width()<751&&($(".lostPolicyFinderFRM1").hide(),$(".lostPolicyFinderFRM2").hide(),$(".lostPolicyFinderFRM3").hide(),$(".lostPolicyFinderFRM4").hide(),$(".lostPolicyFinderFRM"+nextCount).show()),$(".lbxslider").css("transform","translateX("+sildeCount*-$(".policy-container").width()+"px)")}function showSummary(){window.innerWidth<1e3&&($(".policy-right-rail-head").addClass("showSummaryDetails"),$(".policy-right-rail-head").css("margin-left",$(".ArticleContent").width()-$(".policy-right-rail-head").width()+"px"),$(".showSummaryLink").fadeOut(function(){$(".policy-right-rail-head").toggle("slide",{direction:"right"},100)}),$(".field-md").attr("readonly",!0),$(".field-lg").attr("readonly",!0),$(".UIButton").attr("disabled",!0),$(".lpPrev").attr("disabled",!0),$(".date-wrapper .date-field-container .custom-selectbox-wrap .custom-selectbox").addClass("inactive")),window.innerWidth<751&&($(".policy-container").addClass("hidePolicyForm"),$(".policy-right-rail-head").css("margin-left","0px")),$(".showSummaryLink").css("display","none"),$(".lbxslider").css("transform","translateX("+nextCount*-$(".policy-container").width()+"px)")}function hideSummary(){$(".policy-right-rail-head").removeClass("showSummaryDetails"),$(".policy-right-rail-head").toggle("slide",{direction:"right"},0,function(){$(".showSummaryLink").fadeIn()}),$(".policy-container").removeClass("hidePolicyForm"),$(".showSummaryLink").css("display","block"),$(".lbxslider").css("transform","translateX("+nextCount*-$(".policy-container").width()+"px)"),$(".field-md").attr("readonly",!1),$(".field-lg").attr("readonly",!1),$(".UIButton").attr("disabled",!1),$(".lpPrev").attr("disabled",!1),$(".date-wrapper .date-field-container .custom-selectbox-wrap .custom-selectbox").removeClass("inactive")}function showHideSummary(){window.innerWidth<751?$(".policy-right-rail-head").hasClass("showSummaryDetails")?($(".policy-container").addClass("hidePolicyForm"),$(".policy-right-rail-head").css("margin-left","0px")):$(".showSummaryLink").css("display","block"):($(".lostPolicyFinderFRM1").show(),$(".lostPolicyFinderFRM2").show(),$(".lostPolicyFinderFRM3").show(),$(".lostPolicyFinderFRM4").show()),window.innerWidth>750&&window.innerWidth<1e3&&$(".policy-right-rail-head").hasClass("showSummaryDetails")&&($(".policy-container").removeClass("hidePolicyForm"),$(".policy-right-rail-head").css("margin-left",$(".ArticleContent").width()-$(".policy-right-rail-head").width()+"px"),$(".field-md").attr("readonly",!0),$(".field-lg").attr("readonly",!0),$(".UIButton").attr("disabled",!0),$(".lpPrev").attr("disabled",!0),$(".date-wrapper .date-field-container .custom-selectbox-wrap .custom-selectbox").addClass("inactive")),window.innerWidth>=1e3&&($(".policy-right-rail-head").addClass("showSummaryDetails"),$(".policy-right-rail-head").css("margin-left","0px"),$(".policy-right-rail-head").css("display","block"),$(".showSummaryLink").css("display","none"),$(".field-md").attr("readonly",!1),$(".field-lg").attr("readonly",!1),$(".UIButton").attr("disabled",!1),$(".lpPrev").attr("disabled",!1),$(".date-wrapper .date-field-container .custom-selectbox-wrap .custom-selectbox").removeClass("inactive"))}function ValidateDrop(contType,ctrlName,event){var currentData=$("#"+ctrlName.id).val(),pastedData="";"drop"==event.type&&(pastedData=event.dataTransfer.getData("Text"));var currentData=ProcessDataForCorrection(contType,ctrlName.id,pastedData),$scope=getScope("lostPolicyFinderContrl"),charLength=$("#"+ctrlName.id).attr("maxLength");currentData.length>charLength&&(currentData=currentData.slice(0,charLength),$("#"+ctrlName.id).val(currentData)),$scope.lostPolicyData[ctrlName]=currentData,$scope.$apply(),event.preventDefault()}function getScope(ctrlName){var sel='article[ng-controller="'+ctrlName+'"]';return angular.element(sel).scope()}function changeType(event){return commonFunctions.isNumber(event)}function changeSSNType(){setTimeout(function(){if(0==$("#ssn").val().length){$("#ssn").attr("type","password");getScope("lostPolicyFinderContrl").showSsn=!1}},500)}function getMobileOperatingSystem(){var userAgent=navigator.userAgent||navigator.vendor||window.opera;userAgent.match(/iPad/i)||userAgent.match(/iPhone/i)||userAgent.match(/iPod/i)?$(".fancybox").fancybox({autoSize:!1,beforeLoad:function(){this.minHeight="mobile"==deviceState?$(window).height():"",void 0!==this.width&&""!==this.width||(this.width=parseInt(this.element.data("fancybox-width")),this.height=parseInt(this.element.data("fancybox-height"))),$("html, body").scrollTop(0)},helpers:{overlay:{closeClick:!1},title:{type:"inside"}},beforeClose:function(){callCloseAnalytics()},afterLoad:function(){this.element.hasClass("curved--fancybox")&&curvedFancyModal(this)}}):userAgent.match(/Android/i)?$(".fancybox").fancybox({autoSize:!1,width:"80%",padding:5,margin:0,beforeLoad:function(){$("html, body").scrollTop(20)},helpers:{overlay:{closeClick:!1},title:{type:"inside"}},beforeClose:function(){callCloseAnalytics()},afterLoad:function(){this.element.hasClass("curved--fancybox")&&curvedFancyModal(this)}}):$(".fancybox").fancybox({autoSize:!1,beforeLoad:function(){$("html, body").scrollTop(0)},helpers:{overlay:{closeClick:!1},title:{type:"inside"}},beforeClose:function(){callCloseAnalytics()},afterLoad:function(){this.element.hasClass("curved--fancybox")&&curvedFancyModal(this)}})}function callCloseAnalytics(){if(isLlavaFancy){var data={event_action:"link",event_name:"close",event_type:"leveladvantage",event_version:angular.element($(".contact-wholesaler-llava-container")).scope().displaySuccessMsg?"contact wholesaler confirmation":"contact wholesaler"};utag.link(data)}}function modalScroll(){var fancy=$(".fancybox-opened"),modalCheckInterval=setInterval(function(){(fancy.find("form[name=contact_wholesaler_form]")[0]||window.innerWidth<=750)&&"auto"!==fancy.find(".fancybox-inner").css("height")&&(fancy.find(".fancybox-inner").css("overflow","hidden"),$(".fancybox-inner").css("height","auto"),fancy.find(".fancybox-skin").css("margin-bottom",30))},100);checkIE()&&setTimeout(function(){modalScroll()},500),setTimeout(function(){clearInterval(modalCheckInterval)},2e3)}function curvedFancyModal(ele){ele.minHeight="mobile"==deviceState?$(window).height():"",fancyWidth=ele.element.data("fancybox-width"),fancyHeight=ele.element.data("fancybox-height"),ele.element.hasClass("curved--fancybox")?(setTimeout(function(){$(".curved--border").parents(".fancybox-wrap").addClass("curved--border--modal")},100),""==fancyWidth&&void 0==fancyWidth||(ele.width=parseInt(fancyWidth)),"auto"===fancyHeight||""===fancyHeight?modalScroll():""!=fancyHeight&&(ele.height=parseInt(fancyHeight))):void 0!==ele.width&&""!==ele.width||(ele.width=parseInt(fancyWidth),ele.height=parseInt(fancyHeight)),setTimeout(function(){isLlavaFancy=!!$(".fancybox-opened").find(".contact-wholesaler-llava-container")[0]},500)}function isIE(version,comparison){var $div=$('<div style="display:none;"/>').appendTo($("body"));$div.html("\x3c!--[if "+(comparison||"")+" IE "+(version||"")+"]><a>&nbsp;</a><![endif]--\x3e");var ieTest=$div.find("a").length;return $div.remove(),ieTest}function checkIE(){var checkIE=!1;return(-1!==navigator.userAgent.indexOf("MSIE")||navigator.appVersion.indexOf("Trident/")>0)&&(checkIE=!0),checkIE}function ValidateChar(contType,e){var currentData=e.target.value;if(void 0!==e.target.value[e.target.value.length-1]){for(var newData="",totalLen=currentData.length,iCnt=0;iCnt<totalLen;iCnt++)"alpha"==contType&&validate_alpha(currentData.charAt(iCnt))&&(newData+=currentData.charAt(iCnt)),"alphanum"==contType&&validate_alphaNum(currentData.charAt(iCnt))&&(newData+=currentData.charAt(iCnt)),"initial"==contType&&validate_initial(currentData.charAt(iCnt))&&(newData+=currentData.charAt(iCnt)),"addnl"==contType&&validate_addnl(currentData.charAt(iCnt))&&(newData+=currentData.charAt(iCnt)),"contract"==contType&&validate_contract(currentData.charAt(iCnt))&&(newData+=currentData.charAt(iCnt));"ssn"==contType&&(validate_ssn(currentData.charAt(iCnt))||(newData+=currentData.charAt(iCnt))),e.target.value=newData}}function letters_Dash_Apostrophe_Accents_Only(evt){evt=evt||window.event;evt.which?evt.which:evt.keyCode;return validate_alpha(evt.key)}function validate_alpha(charToValidate){var charCode=charToValidate.charCodeAt(0);return!!/[ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜáíóúñÑ]/g.test(charToValidate)||(!(charCode<65||charCode>90)||!(charCode<97||charCode>122)||45==charCode||39==charCode||32==charCode)}function letters_Accents_Only(evt){evt=evt||window.event;evt.which?evt.which:evt.keyCode;return validate_initial(evt.key)}function validate_initial(charToValidate){var charCode=charToValidate.charCodeAt(0);return!!/[ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜáíóúñÑ]/g.test(charToValidate)||(!(charCode<65||charCode>90)||!(charCode<97||charCode>122)||32==charCode)}function alphanum_Dash_Apostrophe_Accents_Only(evt){evt=evt||window.event;evt.which?evt.which:evt.keyCode;return validate_alphaNum(evt.key)}function validate_alphaNum(charToValidate){var charCode=charToValidate.charCodeAt(0);return!!/[ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜáíóúñÑ]/g.test(charToValidate)||!(charCode>31&&(charCode<65||charCode>90)&&(charCode<97||charCode>122)&&45!=charCode&&39!=charCode&&32!=charCode&&(charCode<48||charCode>57))}function addnl_Info_Only(evt){evt=evt||window.event;evt.which?evt.which:evt.keyCode;return validate_addnl(evt.key)}function validate_addnl(charToValidate){var charCode=charToValidate.charCodeAt(0);return!!/[ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜáíóúñÑ]/g.test(charToValidate)||!(charCode>31&&(charCode<63||charCode>90)&&(charCode<97||charCode>122)&&222!=charCode&&(charCode<32||charCode>57))}function contract_Number_Only(evt){evt=evt||window.event;evt.which?evt.which:evt.keyCode;return validate_contract(evt.key)}function validate_contract(charToValidate){var charCode=charToValidate.charCodeAt(0);return!(charCode>31&&(charCode<65||charCode>90)&&(charCode<97||charCode>122)&&(charCode<48||charCode>57))}function validate_ssn(charToValidate){var charCode=charToValidate.charCodeAt(0);return 45==charCode||!(charCode<48||charCode>57)}function ProcessDataForCorrection(contType,ctrlName,pastedData){for(var currentData=$("#"+ctrlName).val(),iCnt=0;iCnt<pastedData.length;iCnt++)"alpha"==contType&&validate_alpha(pastedData.charAt(iCnt))&&(currentData+=pastedData.charAt(iCnt)),"alphanum"==contType&&validate_alphaNum(pastedData.charAt(iCnt))&&(currentData+=pastedData.charAt(iCnt)),"initial"==contType&&validate_initial(pastedData.charAt(iCnt))&&(currentData+=pastedData.charAt(iCnt)),"addnl"==contType&&validate_addnl(pastedData.charAt(iCnt))&&(currentData+=pastedData.charAt(iCnt)),"contract"==contType&&validate_contract(pastedData.charAt(iCnt))&&(currentData+=pastedData.charAt(iCnt)),"ssn"==contType&&validate_ssn(pastedData.charAt(iCnt))&&(currentData+=pastedData.charAt(iCnt));return $("#"+ctrlName).val(currentData.trim()),currentData.trim()}function setHub2Cookie(name,value,expires,path,domain,secure){document.cookie=name+"="+escape(value)+(expires?";expires="+expires.toGMTString():"")+(path?";path="+path:"")+(domain?";domain="+domain:"")+(secure?";secure":"")}function setCookie(cname,cvalue,exdays){var d=new Date;d.setTime(d.getTime()+24*exdays*60*60*1e3);var expires="expires="+d.toUTCString();document.cookie=cname+"="+cvalue+"; "+expires+"; path=/"}function setSessionCookie(cname,cvalue){document.cookie=cname+"="+cvalue+"; path=/"}function updateCookie(cname,cvalue,exdays){var d=new Date;d.setTime(d.getTime()+24*exdays*60*60*1e3);var expires="expires="+d.toUTCString();document.cookie=cname+"="+cvalue+"; "+expires+"; path=/"}function getCookie(cname){for(var name=cname+"=",ca=document.cookie.split(";"),i=0;i<ca.length;i++){for(var c=ca[i];" "==c.charAt(0);)c=c.substring(1);if(0==c.indexOf(name))return c.substring(name.length,c.length)}return""}function setUserCookie(userName){document.cookie="SiteUserID = "+userName+";path=/;secure;domain = lfg.com",window.location.href=hubDomain}function updateAnalytics(ele){if(!$(ele).hasClass("lfgAnalytics")&&!$(ele).hasClass("customAnalytics")){var dataInfo={},evtTypeFlag=!1,eventName=$(ele).data("eventname");if(void 0!==eventName&&null!==eventName&&""!==eventName)dataInfo.event_name=eventName.trim();else{var linkText=$(ele).text();void 0!==linkText&&null!==linkText&&""!==linkText.trim()&&(dataInfo.event_name=linkText.trim())}var assetId=$(ele).data("assetid");void 0!==assetId&&null!==assetId&&""!==assetId&&(dataInfo.event_assetid=""+assetId);var eventAction=$(ele).data("eventaction");dataInfo.event_action=null!==eventAction&&void 0!==eventAction&&""!==eventAction?eventAction:"link";var eventType=$(ele).data("eventtype");void 0!==eventType&&null!==eventType&&""!==eventType&&(dataInfo.event_type=eventType,evtTypeFlag=!0),$(ele).parents().each(function(index,parent){var parentId=$(parent).data("parentid");void 0!==parentId&&null!==parentId&&""!==parentId&&(dataInfo.event_parentid=parentId);var eventVersion=$(parent).data("eventversion");if(void 0!==eventVersion&&null!==eventVersion&&""!==eventVersion&&(dataInfo.event_version=eventVersion),evtTypeFlag)return"undefined"!=typeof utag&&void 0!==utag&&null!==utag&&utag.link(dataInfo),!1;var eventType=$(parent).data("eventtype");return void 0!==eventType&&null!==eventType&&""!==eventType?(dataInfo.event_type=eventType,"undefined"!=typeof utag&&void 0!==utag&&null!==utag&&utag.link(dataInfo),!1):void 0})}}function linkAnalytics(links){$(links).on("click",function(){updateAnalytics(this)})}function applyExpandCollapseButton(el){$(el).find("a.questionnaire-result-expand-collapse-button:not(.ready)").each(function(){$(this).on("click",function(event){event.preventDefault(),$(this).parents("section.questionnaire-expand-collapse").hasClass("questionnaire-result-expand-collapse--collapsed")||!$(this).siblings(".column-one").is(":visible")?$(this).parents("section.questionnaire-expand-collapse").addClass("questionnaire-result-expand-collapse--expanded").removeClass("questionnaire-result-expand-collapse--collapsed"):$(this).parents("section.questionnaire-expand-collapse").removeClass("questionnaire-result-expand-collapse--expanded").addClass("questionnaire-result-expand-collapse--collapsed")}),$(this).addClass("ready")})}function updateStatus(){if(window.popupReference&&window.popupReference.closed){var cname="c2cTabValue"+c2cClickCount;"c2cTrue"===getCookie(cname)&&(setCookie(cname,"c2cFalse",1),setCookie("c2cOpenValue",null,1),clearInterval(timer))}}function annuityWindowStatus(){if(window.annuityChatWindow&&window.annuityChatWindow.closed){var cname="Ac2cTabValue"+Ac2cClickCount;"c2cTrue"===getCookie(cname)&&(setCookie(cname,"c2cFalse",1),setCookie("Ac2cOpenValue",null,1),clearInterval(timer))}}function checker(){for(var checkerValue=!1,clickCountChecker=String(c2cClickCount),i=0;i<document.cookie.split(";").length;i++){if("c2cTrue"===getCookie("c2cTabValue"+c2cClickCount)){if(getCookie("c2cOpenValue")===clickCountChecker)continue;setCookie("c2cTabValue"+c2cClickCount,"c2cFalse",1),checkerValue=!1;break}if("null"===getCookie("c2cOpenValue")){updateCookie("c2cTabValue"+c2cClickCount,"c2cTrue",1),setCookie("c2cOpenValue",c2cClickCount,1),checkerValue=!0;break}}return checkerValue}function checkerAnnuity(){for(var checkerValue=!1,clickCountChecker=String(Ac2cClickCount),i=0;i<document.cookie.split(";").length;i++){if("c2cTrue"===getCookie("Ac2cTabValue"+Ac2cClickCount)){if(getCookie("Ac2cOpenValue")===clickCountChecker)continue;setCookie("Ac2cTabValue"+Ac2cClickCount,"c2cFalse",1),checkerValue=!1;break}if("null"===getCookie("Ac2cOpenValue")){updateCookie("Ac2cTabValue"+Ac2cClickCount,"c2cTrue",1),setCookie("Ac2cOpenValue",Ac2cClickCount,1),checkerValue=!0;break}}return checkerValue}function calcDate(custDate,custMonth,custYear,custHiddn,divDate,divMonth,divYear,err){var selectedDayValue,isValidDate,lastDayOfMonth,divMonths=void 0===divMonth?"":divMonth,nw=new Date,curYear=nw.getFullYear(),li="<li>Day</li>";""!==divMonths&&"Day"===divDate&&"Year"===divYear?lastDayOfMonth="Year"!==divYear?new Date(divYear,divMonths,0).getDate():new Date(curYear,divMonths,0).getDate():""===divMonths&&"Day"===divDate&&"Year"!==divYear?lastDayOfMonth=new Date(divYear,1,0).getDate():""===divMonths&&"Day"!==divDate&&"Year"===divYear?lastDayOfMonth=new Date(curYear,1,0).getDate():""!==divMonths&&"Day"!==divDate&&"Year"===divYear?lastDayOfMonth=new Date(curYear,divMonths,0).getDate():""!==divMonths&&"Day"!==divDate&&"Year"!==divYear?lastDayOfMonth=new Date(divYear,divMonths,0).getDate():""!==divMonths&&"Day"===divDate&&"Year"!==divYear?lastDayOfMonth=new Date(divYear,divMonths,0).getDate():""===divMonths&&"Day"!==divDate&&"Year"!==divYear?lastDayOfMonth=new Date(divYear,1,0).getDate():""===divMonths&&"Day"===divDate&&"Year"===divYear&&(lastDayOfMonth=new Date(curYear,1,0).getDate());for(var i=1;i<=lastDayOfMonth;i++)li+="<li tabindex='0' data-val="+i+" data-flag='date'>"+i+"</li>";setTimeout(function(){document.getElementById(custDate).innerHTML=li},50),selectedDayValue=$("#"+custDate)[0].previousElementSibling.innerHTML,submitClicked&&!err.hasClass("cls-optional-date")&&(isValidDate=!!(lastDayOfMonth<selectedDayValue&&"Day"!==selectedDayValue),lastDayOfMonth<selectedDayValue&&"Day"!==selectedDayValue&&(angular.element(".lostPolicy").addClass("ng-hide"),angular.element(".ValidDate").removeClass("ng-hide"),err.addClass("c-err-box-noimg")));var elemScop=angular.element($("#"+custHiddn)).scope();if(""===divMonths||"Day"===divDate||"Year"===divYear||isValidDate)"notifierDob"===custHiddn?elemScop.lostPolicyData.notifierDob="":"ClaimDob"===custHiddn||"deceasedPerDOB"===custHiddn?elemScop.claimInfoFormData.deceasedPerDOB="":"DisabilityDOB"===custHiddn?elemScop.disabilityWaiverData.insuredDateOfBirth="":"insured_disability_date"===custHiddn?elemScop.disabilityWaiverData.insuredDisabilityDate="":"lifeDOBoptional"===custHiddn?elemScop.lifeInsuranceDeathData.insuredDob="":"insured_life_date"===custHiddn?elemScop.lifeInsuranceDeathData.insuredDeathDate="":"LongDOBoptional"===custHiddn?elemScop.longTermCareData.insuredDob="":"insuredCareOnset"===custHiddn&&(elemScop.longTermCareData.insuredCareOnset=""),submitClicked&&!err.hasClass("cls-optional-date")&&(err.addClass("c-err-box-noimg"),isValidDate||(angular.element(".lostPolicy").removeClass("ng-hide"),angular.element(".ValidDate").addClass("ng-hide")));else{var dt=divMonths+"/"+divDate+"/"+divYear;document.getElementById(custHiddn).value=dt,"notifierDob"===custHiddn?elemScop.lostPolicyData.notifierDob=dt:"ClaimDob"===custHiddn||"deceasedPerDOB"===custHiddn?elemScop.claimInfoFormData.deceasedPerDOB=dt:"ClaimDod"===custHiddn||"insuredDeathDate"===custHiddn?elemScop.claimInfoFormData.insuredDeathDate=dt:"DisabilityDOB"===custHiddn?elemScop.disabilityWaiverData.insuredDateOfBirth=dt:"insured_disability_date"===custHiddn?elemScop.disabilityWaiverData.insuredDisabilityDate=dt:"lifeDOBoptional"===custHiddn?elemScop.lifeInsuranceDeathData.insuredDob=dt:"insured_life_date"===custHiddn?elemScop.lifeInsuranceDeathData.insuredDeathDate=dt:"LongDOBoptional"===custHiddn?elemScop.longTermCareData.insuredDob=dt:"insuredCareOnset"===custHiddn&&(elemScop.longTermCareData.insuredCareOnset=dt),err.hasClass("cls-optional-date")||(err.removeClass("c-err-box-noimg"),angular.element(".lostPolicy").addClass("ng-hide"),angular.element(".ValidDate").addClass("ng-hide"))}}function carouselresize(){arrParentWid=$(".carousel-sidenav-right-arrow").parent().outerWidth();var carouselArrTop,marginLeft=parseInt($carouselContWidList.css("margin-right")),arrParentWidhalf=arrParentWid/2;$(".left.carousel-sidenav-control").removeClass("carousel-sidenav-left-arrow"),$(".carousel-sidenav-cont").css({left:"0","margin-left":arrParentWidhalf+"px"}),$(".carousel-sidenav-count").val(0),count=0;var windWid=$(window).width();$(".left.carousel-sidenav-control").removeClass("carousel-sidenav-left-arrow"),$(".right.carousel-sidenav-control").addClass("carousel-sidenav-right-arrow"),showList=windWid<=mobileWid?2:windWid<=tabletWid?$(".ArticleContent").hasClass("noRightRail")?4:3:$(".ArticleContent").hasClass("noRightRail")?5:4,showMarg=arrParentWid/showList,marginLeft=parseInt(marginLeft*(showList-1)),updatedWid=($carouselContWid.width()-marginLeft)/showList,updatedWid-=showMarg,carouselContULWid=updatedWid*carouselContWidListLength+marginLeft*carouselContWidListLength,$(".carousel-sidenav-cont").css("width",carouselContULWid+"px").find("li").css("width",updatedWid+"px").promise().done(function(){carouselFirstImgHgt=$carouselContWidList.find("img").height(),carouselArrTop=carouselFirstImgHgt/2+parseInt(carouselFirstImgMtop)+$(".carousel-sidenav-right-arrow").outerHeight()/2,carouselContWidListLength<=showList?$(".carousel-sidenav-arr-cont").css("visibility","hidden"):$(".carousel-sidenav-arr-cont").css({visibility:"visible"}).find("a").css({top:carouselArrTop+"px"})})}function checkFloatingLabels(element){0!==$(element).find("span.floating-label").length&&setTimeout(function(){applyFloatingLabels(element)},1e3)}function applyFloatingLabels(element){$(element).find("span.floating-label").each(function(){$(this).prevAll("input").addClass("has-floating-label"),$(this).prevAll("input").val()&&$(this).addClass("pull-up"),$(this).prevAll("select").addClass("has-floating-label")}),$("input.has-floating-label").on("focus",function(){$(this).nextAll(".floating-label").addClass("pull-up")}),$("input.has-floating-label").on("blur",function(){$(this).val()?$(this).nextAll(".floating-label").addClass("pull-up"):$(this).nextAll(".floating-label").removeClass("pull-up")}),$("select.has-floating-label").on("change",function(){0!==$(this)[0].selectedIndex?$(this).nextAll(".floating-label").addClass("pull-up"):$(this).nextAll(".floating-label").removeClass("pull-up")})}function lfgElqInit(){window.isLoginForm=!1,window.customVal=!1,window.elqGUID="",(window.location.host.indexOf("ca-dev")>-1||window.location.host.indexOf("wcs-dev")>-1||window.location.host.indexOf("wcs-rss-dev")>-1||window.location.host.indexOf("wcs-preprod")>-1||window.location.host.indexOf("wcs-rss-preprod")>-1)&&(window.elqLookupKey="8f99b73620304cac95196caf8ed2e2e3"),(window.location.host.indexOf("ca.lfg.com")>-1||window.location.host.indexOf("wcs-ca.lfg.com")>-1||window.location.host.indexOf("wcs-rss-12c")>-1||window.location.host.indexOf("www")>-1)&&(window.elqLookupKey="109abf0e-4a3a-49cf-b520-b5fabe6dc8fb");localStorage.elqUserData?window.elqUserData=JSON.parse(localStorage.elqUserData):window.elqUserData={},window.altElqUserData={},$("section#secured-content-login form.elq-form")[0]&&(window.isLoginForm=!0,window.formName=$("form.elq-form").attr("name"),$("form.elq-form").addClass("isLoginForm"))}function elqFormFormat(){if($("form.elq-form label").each(function(){var fieldTxt=$(this).text();-1!==fieldTxt.indexOf("*")?fieldTxt=fieldTxt.replace("*",""):fieldTxt+=" (optional)",$(this).next("input").after('<span class="floating-label">'+fieldTxt+"</span>");var licProfSelectID=$('select[name="licensed"]').attr("id"),riaSelectID=$('select[name*="registeredInvestmentAdvisor"]').attr("id");$(this).attr("for")===licProfSelectID||$(this).attr("for")===riaSelectID||$(this).hasClass("instructions")||$(this).css("position","absolute")}),$("form.elq-form select").each(function(){var firstOptionTxt=$(this)[0].options[0].text;$(this).after('<span class="floating-label floating-label--select-option">'+firstOptionTxt+"</span>")}),window.elqRecaptchaEnabled){$("form.elq-form .submit-button").parents("div.field-wrapper").before('<div id="eloquaRecaptcha" class="g-recaptcha" data-sitekey="6LeLmBwUAAAAAA1w5qzI4idpXBHP_EfrUXhtYEc-"></div>'),$("form.elq-form .g-recaptcha").after('<div class="gr-error err-cont" style="display:none">Please assure us you are a human.</div>')}var rwdReCaptchaData={mq:window.matchMedia("(max-width: 1024px) and (orientation: portrait)"),form:$("form.elq-form"),widthContainer:$("form.elq-form .g-recaptcha").parent(),maxScale:1.2},checkForReCaptchaRender=setInterval(function(){$(".g-recaptcha").children().length>0&&(ReCaptchaUtils.rwdReCaptcha(rwdReCaptchaData),clearInterval(checkForReCaptchaRender))},100);$("form.elq-form input.submit-button").attr("style",""),$("form.elq-form").parent("div").css("margin-top","0px"),$("form.elq-form").parents("body").append('<section id="mini-preloader" style="display:none"><div id="mini-status"></div></section>'),elqFormBinding($("form.elq-form")),$(window).on("resize orientationchange",function(){ReCaptchaUtils.rwdReCaptcha(rwdReCaptchaData)})}function elqFormBinding(form){function phValidation(ph){var number=ph.replace(/[^\d]/g,"");return 10==number.length&&(number=number.replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),number}form.on("keypress",'input[name="firstName"], input[name="lastName"]',function(event){/^[A-Za-z]+$/.test(event.key)||event.preventDefault()}),form.on("keypress",'input[name="company"]',function(event){/^[a-zA-Z0-9-'& ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜáíóúñÑ]+$/.test(event.key)||event.preventDefault()}),form.on("blur",'input[name="emailAddress"]',function(){var elqLOB=$('input[name="elqLOB"]').val();void 0!==elqLOB&&null!==elqLOB&&""!==elqLOB&&"LFD"!==elqLOB||elqcheckSharedEmails($(this))}),form.on("mousedown keydown","input.submit-button",function(){elqAllowSubmit($(this).parents("form"))}),form.on("focus",'input[name="firstName"], input[name="lastName"], input[name="emailAddress"]',function(){setInterval(function(){window.lockSubmit?form.find("input.submit-button").attr("disabled","disabled"):form.find("input.submit-button").removeAttr("disabled")},500)}),$('input[name="company"]').attr("maxlength",40),form.on("keypress",'input[name="busPhone"]',function(evt){var charCode=evt.which?evt.which:event.keyCode;return!(charCode<48||charCode>57||evt.currentTarget.value.length>10)}),form.on("input",'input[name="busPhone"]',function(e){var phFld=$(this),val=phFld.val();phFld.val(phValidation(val))}),$(document).on("lookupStart",function(){window.lockSubmit=!0,window.currElqForm=form,form.find("input.submit-button").attr("disabled","disabled")}),$(document).on("lookupComplete lookupEmpty",function(){window.lockSubmit=!1,form.find("input.submit-button").removeAttr("disabled");setTimeout(function(){clearInterval(checkForDisabledSubmit)},12e4)})}function elqcheckSharedEmails(field){var thisForm=field.parents("form");if(console.log(thisForm),!field.hasClass("LV_invalid_field")&&""!==field.val().trim()){var dataStore;"altEmailAddress"===field.attr("name")?(window.altElqUserData=window.elqUserData,dataStore=window.altElqUserData):dataStore=window.elqUserData,dataStore.email=field.val().trim(),field.addClass("searching disabled"),field.attr("disabled","true"),doEloquaLookup(thisForm),showMiniLoader(field),$(document).on("lookupComplete",function(){clearTimeout(noUserFoundTimeout),hideMiniLoader(),field.removeClass("searching disabled"),field.removeAttr("disabled");if(void 0!==dataStore.contactID&&null!==dataStore.contactID&&dataStore.contactID.length>0){var inputFirstName=thisForm.find('input[name="firstName"]').val().trim().toLowerCase(),inputLastName=thisForm.find('input[name="lastName"]').val().trim().toLowerCase();if(inputFirstName!==dataStore.firstName.toLowerCase()||inputLastName!==dataStore.lastName.toLowerCase()){if(!useExisting){showLFGErrorMsg(field,"");var inputEmail=thisForm.find('input[name="emailAddress"]');inputEmail.addClass("disabled"),inputEmail.attr("disabled","true")}thisForm.find('input[name="shared_flag"]').val("1"),""===thisForm.find('input[name="shared_email"]').val().trim()&&(thisForm.find('input[name="shared_email"]').val(dataStore.email),thisForm.find('input[name="shared_first_name"]').val(dataStore.firstName),thisForm.find('input[name="shared_last_name"]').val(dataStore.lastName)),thisForm.find("div#sharedEmailOverlay")[0]?(thisForm.find("#sharedEmailOverlay").show(),thisForm.find("#sharedEmailOverlay h3").show()):(inputEmail.css("margin-bottom","0px"),popSharedEmailOverlay(thisForm)),thisForm.find(".currentEmail").html(field.val()),"altEmailAddress"===field.attr("name")&&thisForm.find("div#sharedEmailOverlay h3 span.warning-msg").text("ALTERNATE email also exists.")}else hideLFGErrorMsg(field),""===thisForm.find('input[name="shared_flag"]').val()&&thisForm.find('input[name="shared_flag"]').val("0"),thisForm.find("#sharedEmailOverlay h3").hide()}});var noUserFoundTimeout=setTimeout(function(){$(document).trigger("lookupEmpty"),hideMiniLoader(),hideLFGErrorMsg(field),""===thisForm.find('input[name="shared_flag"]').val()&&thisForm.find('input[name="shared_flag"]').val("0"),"altEmailAddress"===field.attr("name")&&(useExisting?elqcheckSharedEmails(thisForm.find('input[name="emailAddress"]')):thisForm.find('input[name="emailAddress"]').val(thisForm.find('input[name="altEmailAddress"]').val()),hideLFGErrorMsg(thisForm.find('input[name="emailAddress"]'))),thisForm.find('input[name="emailAddress"]').removeClass("disabled"),thisForm.find('input[name="emailAddress"]').removeAttr("disabled"),field.removeClass("searching"),thisForm.find("#sharedEmailOverlay h3").hide()},7e3)}}function popSharedEmailOverlay(form){var altEmailRadioHTML='<section class="lfg-radio-box yesnoblock">';altEmailRadioHTML+="<section>",altEmailRadioHTML+='<input type="radio" class="css-checkbox" id="radio1" value="Yes" name="AltEmailChoice">',altEmailRadioHTML+='<label class="css-label radGroup1" for="radio1"><div>Yes, that&apos;s me! Please continue using <span class="currentEmail"></span></div></label>',altEmailRadioHTML+="</section>",altEmailRadioHTML+="<section>",altEmailRadioHTML+='<input type="radio" class="css-checkbox" id="radio2" value="No" name="AltEmailChoice">',altEmailRadioHTML+='<label class="css-label radGroup1" for="radio2"><div>Use this alternate email address ...</div></label>',altEmailRadioHTML+="</section>",altEmailRadioHTML+="</section>";form.find('input[name="emailAddress"]').parent().append('<input type="text" name="altEmailAddress" value="" placeholder="Alternate Email Address*">'),form.find('input[name="altEmailAddress"]').wrap('<div id="sharedEmailOverlay" class="frm-b3"></div>'),form.find("#sharedEmailOverlay").prepend(altEmailRadioHTML),form.find("#sharedEmailOverlay").prepend('<h3><span class="warning-msg">This email already exists.</span> Select an option to proceed:</h3>'),form.on("blur",'input[name="altEmailAddress"]',function(){elqcheckSharedEmails($(this))}),form.find("#sharedEmailOverlay input#radio1").on("click",function(){$(this).next("label").css("font-weight","500"),form.find('label[for="radio2"]').css("font-weight","normal"),form.find('input[name="altEmailAddress"]').addClass("disabled"),form.find('input[name="altEmailAddress"]').attr("disabled","true"),form.find('input[name="emailAddress"]').removeClass("disabled"),form.find('input[name="emailAddress"]').removeAttr("disabled"),""===form.find('input[name="shared_email"]').val()&&form.find('input[name="shared_email"]').val(form.find('input[name="emailAddress"]').val()),
""!==form.find("span.currentEmail").text()&&form.find('input[name="emailAddress"]').val(form.find("span.currentEmail").text()),useExisting=!0,hideLFGErrorMsg(form.find('input[name="emailAddress"]')),hideLFGErrorMsg(form.find('input[name="altEmailAddress"]')),form.find("input.submit-button").removeAttr("disabled")}),form.find("#sharedEmailOverlay input#radio2").on("click",function(){$(this).next("label").css("font-weight","500"),form.find('label[for="radio1"]').css("font-weight","normal"),form.find('input[name="altEmailAddress"]').removeClass("disabled"),form.find('input[name="altEmailAddress"]').removeAttr("disabled"),form.find('input[name="emailAddress"]').addClass("disabled"),form.find('input[name="emailAddress"]').attr("disabled","true"),useExisting=!1,showLFGErrorMsg(form.find('input[name="emailAddress"]'),""),elqcheckSharedEmails(form.find('input[name="altEmailAddress"]'))})}function checkRecaptcha(form){if(window.elqRecaptchaEnabled){var elqRecaptchaVal="",lastRecaptchaVal="";if(form.find(".g-recaptcha-response").each(function(){void 0!==$(this).val()&&null!==$(this).val()&&""!==$(this).val()&&(elqRecaptchaVal=$(this).val())}),void 0!==sessionStorage.elqRecaptcha&&null!==sessionStorage.elqRecaptcha&&(lastRecaptchaVal=sessionStorage.elqRecaptcha),elqRecaptchaVal.length>100)if(elqRecaptchaVal!==lastRecaptchaVal){var reCaptchaData={SERVICE_ID:"INT_CAPTCHA_VERIFY_RECAPTCHA",CAPTCHA:elqRecaptchaVal};commonFunctions.loaderShow(),$.ajax({url:"/pbl-gateway-service-app/rest/pbl-gateway/gatewayData",type:"POST",data:JSON.stringify(reCaptchaData),dataType:"json",contentType:"application/json",async:!1}).done(function(data){"SUCCESS"===data.status?"VALID"===data.captchaStatus?(commonFunctions.loaderHide(),sessionStorage.setItem("elqRecaptcha",elqRecaptchaVal),setElqCompletion(form)):(commonFunctions.loaderHide(),form.find(".g-recaptcha").css("margin-bottom","0"),form.find("div.gr-error").show()):(form.find("div.gr-error").html(data.errorDescription),form.find(".g-recaptcha").css("margin-bottom","0"),form.find("div.gr-error").show(),commonFunctions.loaderHide())})}else setElqCompletion(form);else commonFunctions.loaderHide(),form.find(".g-recaptcha").css("margin-bottom","0"),form.find("div.gr-error").show()}else setElqCompletion(form)}function disableHTMLSubmit(form){form.attr("onsubmit").indexOf("return handleFormSubmit(this)")>-1&&form.attr("onsubmit",form.attr("onsubmit").replace("return handleFormSubmit(this)","return false")),form.attr("onsubmit").indexOf("return true")>-1&&form.attr("onsubmit",form.attr("onsubmit").replace("return true","return false"))}function elqAllowSubmit(form){disableHTMLSubmit(form),$("form.elq-form input[type=text], form.elq-form textarea").each(function(){""===$(this).val().trim()&&($(this).blur(),console.log($(this).val()))}),$("form.elq-form select").change(),window.customVal?(console.log("customVal triggered"),form.find("span.LV_invalid")[0]?console.log("validation error found: submit disabled"):window.elqRecaptchaEnabled?(checkRecaptcha(form),console.log("no validation errors/recaptcha enabled: submit disabled, recaptcha checked")):(window.elqUserData.email=form.find("input[name='emailAddress']").val(),console.log("no validation errors/recaptcha disabled: submit disabled, recaptcha checked"),setElqCompletion(form))):form.find("span.LV_invalid")[0]||(console.log("no customVal triggered/no validation errors: submit disabled, recaptcha checked"),setTimeout(function(){checkRecaptcha(form)},300));var checkForCaptchaError=setInterval(function(){var captchaRes=form.find(".g-recaptcha-response").val();void 0!==captchaRes&&null!==captchaRes&&captchaRes.length>0&&(form.find(".g-recaptcha").css("margin-bottom","20px"),form.find(".gr-error").hide(),clearInterval(checkForCaptchaError))},1e3)}function setElqCompletion(form){console.log("setElqCompletion triggered");var email=form.find('input[name="altEmailAddress"]').val();if(useExisting||void 0===email||null===email||""===email||(window.elqUserData=window.altElqUserData),!form.find("span.LV_invalid")[0]){var isLicensed=!1;if(form.find('select[name="licensed"]')[0]&&"yes"===form.find('select[name="licensed"]').val().toLowerCase()&&(isLicensed=!0),form.find('input[name="licensed"]')[0]){var licenseChk=form.find('input[name="licensed"]:checked').val();void 0!==licenseChk&&null!==licenseChk&&"on"===licenseChk.toLowerCase()&&(isLicensed=!0)}isLicensed&&(window.isLoginForm?localStorage.setItem("elq_"+form.attr("name")+"_redirect","1"):localStorage.setItem("elq_complete","1"),window.elqUserData.email=form.find("input[name='emailAddress']").val(),window.elqUserData.enteredFirstName=form.find('input[name="firstName"]').val(),window.elqUserData.enteredLastName=form.find('input[name="lastName"]').val(),useExisting&&(form.find('input[name="firstName"]').val().trim().toLowerCase()===window.elqUserData.firstName.toLowerCase()&&form.find('input[name="lastName"]').val().trim().toLowerCase()===window.elqUserData.lastName.toLowerCase()||(form.find('input[name="firstName"]').val(window.elqUserData.firstName),form.find('input[name="lastName"]').val(window.elqUserData.lastName),form.find('input[name="company"]').val(window.elqUserData.company)),form.find('input[name="shared_flag"]').val("0"),form.find('input[name="shared_email"]').val(""),form.find('input[name="shared_first_name"]').val(""),form.find('input[name="shared_last_name"]').val("")),null!==window.elqUserData.contactID&&""!==window.elqUserData.contactID||(window.elqUserData.firstName=form.find('input[name="firstName"]').val(),window.elqUserData.lastName=form.find('input[name="lastName"]').val(),window.elqUserData.company=form.find('input[name="company"]').val()),localStorage.setItem("elqUserData",JSON.stringify(window.elqUserData)));var data={event_action:"form",event_name:form.attr("name"),event_type:"eloqua",event_status:"submit"};"undefined"!=typeof utag&&utag.link(data),console.log("lockSubmit:",window.lockSubmit),window.lockSubmit||form[0].submit()}}function doEloquaLookup(form){var dataStore,altEmail=$(form).find('input[name="altEmailAddress"]').val();dataStore=useExisting||void 0===altEmail||null===altEmail||""===altEmail?window.elqUserData:window.altElqUserData,dataStore.contactID="",dataStore.firstName="",dataStore.lastName="",dataStore.company="",dataStore.lastCampaign="",window._elqQ.push(["elqDataLookup",escape(window.elqLookupKey),"<C_EmailAddress>"+dataStore.email+"</C_EmailAddress>"]),$(document).trigger("lookupStart")}function SetElqContent(){var dataStore,altEmail=window.currElqForm.find('input[name="altEmailAddress"]').val();dataStore=useExisting||void 0===altEmail||null===altEmail||""===altEmail?window.elqUserData:window.altElqUserData,dataStore.contactID=GetElqContentPersonalizationValue("ContactIDExt"),dataStore.firstName=GetElqContentPersonalizationValue("C_FirstName"),dataStore.lastName=GetElqContentPersonalizationValue("C_LastName"),dataStore.company=GetElqContentPersonalizationValue("C_Company"),dataStore.lastCampaign=GetElqContentPersonalizationValue("C_utm_campaign1"),$(document).trigger("lookupComplete"),passData(dataStore)}function passData(userData){if(userData.contactID||userData.campaign){var paramStr="utm_campaign="+userData.campaign+"&elqid="+userData.contactID,bounceLinkFound=!1;if($("a, button").each(function(){var linkUrl=null;if($(this).attr("href")&&(linkUrl=$(this).attr("href").trim().toLowerCase()),linkUrl&&linkUrl.indexOf("public/bounce")>-1){var queryStr;bounceLinkFound=!0,queryStr=linkUrl.indexOf("?")>-1?"&"+paramStr:"?"+paramStr,$(this).attr("href",$(this).attr("href")+queryStr)}}),(2===parseInt(localStorage.elq_complete)||parseInt(localStorage.getItem("elq_"+window.formName+"_redirect"))>0)&&!bounceLinkFound&&location.href.indexOf("public/bounce")<0){var elqDataInfo={utm_campaign_udo:userData.campaign,elqid_udo:userData.contactID};utag.link(elqDataInfo),$(document).trigger("externalRedirect")}}}function showLFGErrorMsg(field,msg){window.customVal=!0,field.addClass("LV_invalid_field"),setTimeout(function(){field.removeClass("LV_valid_field"),field.siblings(".LFG_validation_message")[0]||field.siblings(".LV_validation_message.LV_invalid")[0]||(field.parent().append('<span class="LFG_validation_message LV_invalid">'+msg+"</span>"),""!==msg&&null!==msg||field.siblings("span.LFG_validation_message").addClass("empty"))},300)}function hideLFGErrorMsg(field){field.removeAttr("style"),field.siblings("span.LFG_validation_message").remove()}function showMiniLoader(field){$("#mini-preloader").show();var topPos=$(field).offset().top+"px";$("#mini-preloader").css("top",topPos)}function hideMiniLoader(){$("#mini-preloader").hide()}function doBounce(){if(location.search.indexOf("dest_url=")>-1)var checkForUtag=setInterval(function(){utag.data["qp.dest_url"].length>0&&(clearInterval(checkForUtag),location.href=utag.data["qp.dest_url"])},500)}!function(){angular.module("custom-slider",[]).directive("customSlider",["$window",function($window){return{restrict:"E",scope:{customSlider:"=csModel"},link:function($scope){function setMaxLegendValue(){$scope.customSlider.options.maxValue>=100?(console.log("greater than 100",$scope.customSlider),console.log($scope.customSlider.options.maxValue),$scope.customSlider.maxLegendValue="100+"):(console.log("less than 100"),$scope.customSlider.maxLegendValue=$scope.customSlider.options.maxValue)}function setLocalValues(){minValue=$scope.customSlider.options.minValue,maxValue=$scope.customSlider.options.maxValue,valueDiff=maxValue-minValue,minRange=$scope.customSlider.options.minRange,maxRange=$scope.customSlider.options.maxRange,value=$scope.customSlider.options.value,rangeDiff=maxRange-minRange}function calBarGradient(){var tickWidth=tickEle.offsetWidth,minValueRange="linear-gradient(to right,#edf6f8 0,#edf6f8 "+(parseInt($scope.customSlider.ticks.minValueTick.left)+2*tickWidth)+"px,#0480b6 "+(parseInt($scope.customSlider.ticks.minValueTick.left)+2*tickWidth)+"px,",maxValueRange="#0480b6 "+(parseInt($scope.customSlider.ticks.maxValueTick.left)+3*tickWidth)+"px,#edf6f8 "+(parseInt($scope.customSlider.ticks.maxValueTick.left)+3*tickWidth)+"px,#edf6f8 "+parseInt($scope.customSlider.ticks.maxRangeTick.left)+"px)";$scope.customSlider.barGradient={background:minValueRange+maxValueRange}}function calTicksPosition(){var barWidth=customSliderBarEle.offsetWidth,tickWidth=tickEle.offsetWidth;$scope.customSlider.ticks.minValueTick={left:Math.round(barWidth*((minValue-minRange)/rangeDiff)-1*tickWidth)+"px"},$scope.customSlider.ticks.valueTick={left:barWidth*((value-minRange)/rangeDiff)-2*tickWidth+"px"},$scope.customSlider.ticks.maxValueTick=maxValue>=100?{left:barWidth*((maxRange-minRange)/rangeDiff)-4*tickWidth+"px"}:{left:Math.round(barWidth*((maxValue-minRange)/rangeDiff)-3*tickWidth)+"px"},$scope.customSlider.ticks.maxRangeTick={left:barWidth*((maxRange-minRange)/rangeDiff)-4*tickWidth+"px"}}function calLegendsPos(){var barWidth=customSliderBarEle.offsetWidth,legendWidth=legendEle.offsetWidth;$scope.customSlider.legends.minRangeLegend={left:-legendWidth/2+"px"},valueDiff<=5?($scope.customSlider.legends.minValueLegend={"text-align":"right",left:barWidth*((minValue-minRange)/rangeDiff)-1*legendWidth-legendWidth+"px"},$scope.customSlider.legends.maxValueLegend={"text-align":"left",left:barWidth*((maxValue-minRange)/rangeDiff)-2*legendWidth+"px"}):($scope.customSlider.legends.minValueLegend={left:barWidth*((minValue-minRange)/rangeDiff)-1*legendWidth-legendWidth/2+"px"},$scope.customSlider.legends.maxValueLegend={left:barWidth*((maxValue-minRange)/rangeDiff)-2*legendWidth-legendWidth/2+"px"}),maxValue<97?$scope.customSlider.legends.maxRangeLegend={left:barWidth*((maxRange-minRange)/rangeDiff)-3*legendWidth-legendWidth/1.5+"px"}:maxValue>=100?($scope.customSlider.legends.maxValueLegend={left:barWidth*((maxValue-minRange)/rangeDiff)-2*legendWidth-legendWidth/2*2+"px"},$scope.customSlider.legends.maxRangeLegend={display:"none"}):$scope.customSlider.legends.maxRangeLegend={display:"none"}}function calValBoxPos(){var barWidth=customSliderBarEle.offsetWidth,iconWidth=(valBoxEle.offsetWidth,valTextEle.offsetWidth,valTextIconEle.offsetWidth),tickWidth=tickEle.offsetWidth;if(parseInt($scope.customSlider.ticks.valueTick.left)>barWidth/2){var valueBoxWidth=parseInt($scope.customSlider.ticks.valueTick.left)+iconWidth/2+3*tickWidth;$scope.customSlider.valueTextStyle={"text-align":"right","padding-right":"10px",width:valueBoxWidth-iconWidth+"px"},$scope.customSlider.valueBoxStyle={width:valueBoxWidth+"px"}}else{var valueBoxWidth=barWidth-parseInt($scope.customSlider.ticks.valueTick.left)+iconWidth/2,valueBoxPos=parseInt($scope.customSlider.ticks.valueTick.left)-iconWidth/2+3*tickWidth;$scope.customSlider.valueBoxStyle={left:valueBoxPos+"px",width:valueBoxWidth+"px"},$scope.customSlider.valueTextStyle={float:"right","padding-left":"10px","text-align":"left",width:valueBoxWidth-iconWidth+"px"},$scope.customSlider.valueTextIconStyle={float:"left"}}}function calRangeTextPos(){var rangeTextWidth=rangeTextEle.offsetWidth,barWidth=customSliderBarEle.offsetWidth,minValPos=barWidth*((minValue-minRange)/rangeDiff),maxValPos=barWidth*((maxValue-minRange)/rangeDiff),rangeTextLeftPos=minValPos+(maxValPos-minValPos)/2-rangeTextWidth/2;$scope.customSlider.rangeTextStyle=rangeTextLeftPos>0?rangeTextLeftPos+rangeTextWidth>=barWidth?{left:barWidth-rangeTextWidth+"px"}:{left:rangeTextLeftPos+"px"}:{left:"0px"}}$scope.customSlider.ticks={},$scope.customSlider.legends={};var minValue,maxValue,valueDiff,minRange,maxRange,value,rangeDiff,customSliderBarEle=angular.element(".custom-slider")[0],valBoxEle=angular.element(customSliderBarEle).find(".value-box")[0],valTextEle=angular.element(customSliderBarEle).find(".value-text")[0],valTextIconEle=angular.element(valBoxEle).find(".value-text-icon")[0],tickEle=angular.element(customSliderBarEle).find(".ticks li")[0],legendEle=angular.element(customSliderBarEle).find(".legends li")[0],rangeTextEle=angular.element(customSliderBarEle).find(".range-text")[0];$scope.$watch("customSlider.options",function(newValue,oldValue){newValue!==oldValue&&(setMaxLegendValue(),setLocalValues(),calTicksPosition(),calBarGradient(),calLegendsPos(),calRangeTextPos(),calValBoxPos())}),angular.element($window).on("resize",function(){setLocalValues(),$scope.$apply(calTicksPosition()),$scope.$apply(calBarGradient()),$scope.$apply(calLegendsPos()),$scope.$apply(calValBoxPos()),$scope.$apply(calRangeTextPos())})},template:'<section id="custom-slider" class="custom-slider" ng-cloak><div class="slider-bar"><div ng-style=customSlider.valueBoxStyle id="value-box" class="value-box"><div ng-style=customSlider.valueTextStyle class="value-text">{{customSlider.options.valueText}}</div><div ng-style=customSlider.valueTextIconStyle class="value-text-icon">{{customSlider.options.value}}</div></div><span class="bar" ng-style=customSlider.barGradient></span><ul class="ticks"><li style="left: 0px"></li><li ng-style=customSlider.ticks.minValueTick class="min-value"></li><li ng-style=customSlider.ticks.valueTick class="actual-value"></li><li ng-style=customSlider.ticks.maxValueTick class="max-value"></li><li ng-style=customSlider.ticks.maxRangeTick></li></ul><div class="range-text" ng-style=customSlider.rangeTextStyle>{{customSlider.options.rangeText}}</div><ul class="legends"><li aria-hidden="true" ng-style=customSlider.legends.minRangeLegend>{{customSlider.options.minRange}}</li><li ng-style=customSlider.legends.minValueLegend class="min-value">{{customSlider.options.minValue}}</li><li ng-style=customSlider.legends.maxValueLegend class="max-value">{{customSlider.maxLegendValue}}</li><li aria-hidden="true" ng-style=customSlider.legends.maxRangeLegend>{{customSlider.options.maxRange}}+</li></ul></div></section>'}}])}(),function(){angular.module("LFGHeader",[]).controller("LFGHeaderController",[function(){function blackOverlay(){var overlay=document.getElementsByClassName("black-overlay")[0];lfgHeaderVM.showContactSupport||lfgHeaderVM.showSearch||lfgHeaderVM.showMegamenu?overlay.classList.add("black-overlay--show"):setTimeout(function(){overlay.classList.remove("black-overlay--show")},500)}function toggleMenu(menuType){switch(lfgHeaderVM.noTransition=null,menuType){case"contactSupport":lfgHeaderVM.showSearch&&(lfgHeaderVM.noTransition="search",lfgHeaderVM.showSearch=!1),lfgHeaderVM.showMegamenu&&(lfgHeaderVM.noTransition="megaMenu",lfgHeaderVM.showMegamenu=!1),lfgHeaderVM.showContactSupport?lfgHeaderVM.showContactSupport=!1:lfgHeaderVM.showContactSupport=!0;break;case"search":lfgHeaderVM.showContactSupport&&(lfgHeaderVM.noTransition="contactSupport",lfgHeaderVM.showContactSupport=!1),lfgHeaderVM.showContactSupport=!1,lfgHeaderVM.showMegamenu&&(lfgHeaderVM.noTransition="megaMenu",lfgHeaderVM.showMegamenu=!1),lfgHeaderVM.showSearch?lfgHeaderVM.showSearch=!1:lfgHeaderVM.showSearch=!0;break;case"megaMenu":lfgHeaderVM.showSearch&&(lfgHeaderVM.noTransition="search",lfgHeaderVM.showSearch=!1),lfgHeaderVM.showContactSupport&&(lfgHeaderVM.noTransition="contactSupport",lfgHeaderVM.showContactSupport=!1),lfgHeaderVM.showMegamenu?lfgHeaderVM.showMegamenu=!1:lfgHeaderVM.showMegamenu=!0;break;default:lfgHeaderVM.showSearch=!1,lfgHeaderVM.showContactSupport=!1,lfgHeaderVM.showMegamenu=!1}}var lfgHeaderVM=this;lfgHeaderVM.showSearch=!1,lfgHeaderVM.showMegamenu=!1,lfgHeaderVM.showContactSupport=!1,lfgHeaderVM.noTransition=null,$(document).mouseup(function(event){0===$(".topheader-menu__item--show").has(event.target).length&&$(".topheader-menu__item--show").removeClass("topheader-menu__item--show"),0===$("topheader-menu__item--login-register-selected-bg").has(event.target).length&&0===$(".topheader-menu__item--show").has(event.target).length&&0===$(".topheader-menu__item--login-register-new").has(event.target).length&&($(".topheader-menu__item--login-register-selected-bg").addClass("topheader-menu__item--login-register-bg"),$(".topheader-menu__item--login-register-selected-bg").removeClass("topheader-menu__item--login-register-selected-bg"))}),lfgHeaderVM.init=function(){null===getCookie("DefaultAudience")||void 0===getCookie("DefaultAudience")||""===getCookie("DefaultAudience")?setCookie("DefaultAudience",audience_top_nav_id,365):updateCookie("DefaultAudience",audience_top_nav_id,365)},lfgHeaderVM.contactSupportExpCol=function(){toggleMenu("contactSupport"),blackOverlay()},lfgHeaderVM.searchExpCol=function(){toggleMenu("search"),blackOverlay()},lfgHeaderVM.megaMenuExpCol=function(){toggleMenu("megaMenu"),blackOverlay()},lfgHeaderVM.search=function(searchPageURL){if(console.log("value:"+lfgHeaderVM.searchParam),searchPageURL&&void 0!==lfgHeaderVM.searchParam&&""!==lfgHeaderVM.searchParam){console.log("inside");var data={event_name:"search",event_action:"search",event_type:"global"};utag.link(data),searchPageURL=searchPageURL+"&q="+lfgHeaderVM.searchParam,window.location.href=searchPageURL}},lfgHeaderVM.inpSearch=function($event,searchPageURL){13===$event.keyCode&&lfgHeaderVM.search(searchPageURL)},lfgHeaderVM.audienceMenuExpCol=function(){lfgHeaderVM.showAudienceMenu?lfgHeaderVM.showAudienceMenu=!1:lfgHeaderVM.showAudienceMenu=!0},lfgHeaderVM.audienceAgeSelector=function(){lfgHeaderVM.showAudienceAgeSelector?lfgHeaderVM.showAudienceAgeSelector=!1:lfgHeaderVM.showAudienceAgeSelector=!0},lfgHeaderVM.supportMenuExpCol=function(event){var supportmenu=event.currentTarget.parentElement;supportmenu.classList.contains("topheader-menu__item--show")?supportmenu.classList.remove("topheader-menu__item--show"):supportmenu.classList.add("topheader-menu__item--show")},lfgHeaderVM.supportMenuExpCol_new=function(event){var supportmenu=event.currentTarget.parentElement;supportmenu.classList.contains("topheader-menu__item--show")?supportmenu.classList.remove("topheader-menu__item--show"):supportmenu.classList.add("topheader-menu__item--show"),supportmenu.classList.contains("topheader-menu__item--show")?(supportmenu.classList.remove("topheader-menu__item--login-register-bg"),supportmenu.classList.add("topheader-menu__item--login-register-selected-bg")):(supportmenu.classList.remove("topheader-menu__item--login-register-selected-bg"),supportmenu.classList.add("topheader-menu__item--login-register-bg"))},lfgHeaderVM.menuClick=function(index){lfgHeaderVM.currMenu===index?lfgHeaderVM.currMenu=null:lfgHeaderVM.currMenu=index},lfgHeaderVM.menuExpCol=function(currMenu,menuList){if(currMenu.display)currMenu.display?currMenu.display=!1:currMenu.display=!0;else{for(var menu in menuList)menu.display=!1;currMenu.display?currMenu.display=!1:currMenu.display=!0}}}])}();var lfgapp;lfgapp=angular.module("lfgapp",["ngSanitize","ngAnimate","angular.filter","ngStorage","rzModule","custom-slider","LFGHeader"]),lfgapp.directive("lfgRadioFocus",function(){return{restrict:"A",link:function(){var radioElement=$("input[type=radio]");radioElement.focus(function(){$(this).next().addClass("lfg-focus")}),radioElement.blur(function(){$(this).next().removeClass("lfg-focus")})}}}),lfgapp.directive("lfgCheckFocus",function(){"use strict";return{restrict:"A",link:function(){var radioElement=$("input[type=checkbox]");radioElement.focus(function(){$(this).next().addClass("lfg-focus")}),radioElement.blur(function(){$(this).next().removeClass("lfg-focus")})}}}),function(){"use strict";function contactWholesalerController($scope,$timeout,contactWholesalerService,$window){function isTwoZipCode(name,booleanValue){"zipCode"==name&&($scope.isCorrectZipFormat=booleanValue)}function validForm(){return $scope.isPreprod||$scope.validateReCaptcha(),console.log("validForm - Start"),console.log("isEmailValid: "+$scope.isEmailValid),console.log("reCaptchaError: "+$scope.reCaptchaError),$scope.contact_wholesaler_form.$valid&&!$scope.reCaptchaError&&$scope.isEmailValid?($scope.getFormData(),console.log("from form"+JSON.stringify(requestBody)),commonFunctions.loaderShow(),$scope.displayErrorMsg=!1,!0):($scope.displayError(),!1)}$scope.isPreprod=!1,$scope.isPreprodEnv=function(){window.location.host.indexOf("wcs-rss-preprod")>-1&&($scope.isPreprod=!0),console.log("isPreprod: "+$scope.isPreprod)};var warningMsg,formFactor,requestBody={};$scope.recaptchaSiteKey=globalConstant.recaptchaSiteKey,$scope.init=function(){if($scope.isPreprodEnv(),null===localStorage.elqUserData&&void 0===localStorage.elqUserData||(localStorage.elqUserData?$scope.requestInfoData=JSON.parse(localStorage.elqUserData):$scope.requestInfoData={},$timeout(function(){angular.element("input[type=text]").each(function(){$(this).focus().blur()})},100)),null!==sessionStorage.LISData||void 0!==sessionStorage.LISData){if(sessionStorage.LISData){var sessionLISData=JSON.parse(sessionStorage.LISData);$scope.requestInfoData.primaryBenefit=sessionLISData.primaryBenefit,$scope.requestInfoData.secondaryBenefit=sessionLISData.secondaryBenefit}$timeout(function(){angular.element("input[type=text]").each(function(){$(this).focus().blur()})},100),console.log("requestInfoData:"+JSON.stringify($scope.requestInfoData))}else{var LISData={primaryBenefit:"primary",secondaryBenefit:"secondary",answer1:"Answer1",answer2:"Answer2",answer3:"Answer3",answer4:"Answer4"};Object.assign(requestBody,LISData),console.log("*****"+requestBody)}},$scope.isFormSubmitted=!1,$scope.displayErrorMsg=!1,$scope.reCaptchaError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,$scope.isEmailValid=!1,$(document).on("responsive:statechanged",function(e,param){formFactor=param}),$scope.validateEmail=function(emailValue){var EMAIL_REGEXP=/^[_a-z0-9!#$%&'*=?^_+-`{|}~]*[^:><;()",\[\]]+(\.[_a-z0-9]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/i;return"none"===emailValue||EMAIL_REGEXP.test(emailValue)?($scope.isEmailValid=!0,!0):($scope.isEmailValid=!1,!1)},$scope.numberFormat=function(evt,inputValue,name,zipOrPhone){if(void 0==inputValue)return"";if($scope.requestInfoData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"==zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if($scope.isCorrectFormat=!patt.test($scope.requestInfoData[name]),3==$scope.requestInfoData[name].length&&8!=evt.keyCode?($scope.requestInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})/,"$1-")):7==$scope.requestInfoData[name].length&&8!=evt.keyCode?($scope.requestInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12==$scope.requestInfoData[name].length?($scope.requestInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10==$scope.requestInfoData[name].length&&($scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectFormat&&$scope.requestInfoData[name].length>=12){var str=$scope.requestInfoData[name];$scope.requestInfoData[name]=str.slice(0,12),$scope.isCorrectFormat=!1}}else if("zip"==zipOrPhone)if(5==$scope.requestInfoData[name].length)$scope.requestInfoData[name]=inputValue.replace(/[^0-9-]/g,""),109!=evt.keyCode&&189!=evt.keyCode||($scope.requestInfoData[name]=$scope.requestInfoData[name]+"-"),isTwoZipCode(name,!1);else if($scope.requestInfoData[name].length>5&&$scope.requestInfoData[name].length<=10)if(new RegExp("-").test($scope.requestInfoData[name]))if(10==$scope.requestInfoData[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"zipCode"==name&&($scope.isCorrectZipFormat=!pattZip.test($scope.requestInfoData[name]))}else isTwoZipCode(name,!0);else 9==$scope.requestInfoData[name].length?(109!=evt.keyCode&&189!=evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},$scope.getFormData=function(){requestBody.identity="CONTACT_WHOLE_SALER",requestBody.formFactor=formFactor,requestBody.firstName=$scope.requestInfoData.firstName,requestBody.lastName=$scope.requestInfoData.lastName,requestBody.emailID=$scope.requestInfoData.email,requestBody.firmName=$scope.requestInfoData.company,requestBody.phone=$scope.requestInfoData.phoneNumber,requestBody.zipCode=$scope.requestInfoData.zipCode,requestBody.primaryBenefit=$scope.requestInfoData.primaryBenefit,requestBody.secondaryBenefit=$scope.requestInfoData.secondaryBenefit},$scope.displayError=function(){$scope.displayErrorMsg=!0,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1},$scope.validateReCaptcha=function(){var gRecaptchaVal="";$("form .g-recaptcha-response").each(function(){console.log(".g-recaptcha-response:",$(this).val()),""!==$(this).val()&&(gRecaptchaVal=$(this).val())}),null!==gRecaptchaVal&&""!==gRecaptchaVal&&gRecaptchaVal.length>100?($scope.reCaptchaError=!1,requestBody.gRecaptchaResponse=gRecaptchaVal):$scope.reCaptchaError=!0},$scope.submitContactWholesalerForm=function(){$scope.isFormSubmitted=!0,console.log("submitForm - Start"),console.log("$scope.displayErrorMsg: "+JSON.stringify($scope.displayErrorMsg)),console.log("$scope.reCaptchaError: "+JSON.stringify($scope.reCaptchaError)),console.log("$scope.displayWarningMsg: "+JSON.stringify($scope.displayWarningMsg)),console.log("$scope.displaySuccessMsg: "+JSON.stringify($scope.displaySuccessMsg)),console.log("$scope.isEmailValid: "+JSON.stringify($scope.isEmailValid)),$scope.validateEmail($scope.requestInfoData.email),validForm()&&contactWholesalerService.contactWholesalerService($scope,requestBody,function(response){var dataResponse=response.data.responseStatusCode;if(console.log("dataResponse"+dataResponse),dataResponse){if($scope.isSuccess=!0,"TIMED_OUT"===dataResponse)$scope.errorMsg="TIMED OUT",warningMsg=!0;else if("INTERNAL_ERROR"===dataResponse)$scope.errorMsg="INTERNAL ERROR",warningMsg=!0;else if("CAPTCHA_ERROR"===dataResponse)$scope.errorMsg="INVALID CAPTCHA",warningMsg=!0;else if("SERVICE_ERROR"===dataResponse)$scope.errorMsg="SERVICE ERROR",warningMsg=!0;else if("SUCCESS"===dataResponse){$scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayErrorMsg=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.isFormSubmitted=!1;var data={event_action:"form",event_name:"send information",event_type:"lifetime income selector",event_version:"modal",event_status:"complete",product_name:requestBody.primaryBenefit};utag.link(data)}commonFunctions.loaderHide()}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0)})}}lfgapp.controller("contactWholesalerController",["$scope","$timeout","contactWholesalerService","$window",contactWholesalerController])}(),function(){"use strict";function contactWholesalerLlavaController($scope,$timeout,contactWholesalerLlavaService,$window){function validForm(){return $scope.isPreprod||$scope.validateReCaptcha(),$scope.contact_wholesaler_form.$valid&&!$scope.reCaptchaError&&$scope.isEmailValid?($scope.getFormData(),commonFunctions.loaderShow(),$scope.displayErrorMsg=!1,!0):($scope.displayError(),!1)}$scope.isPreprod=!1,$scope.isPreprodEnv=function(){window.location.host.indexOf("wcs-rss-preprod")>-1&&($scope.isPreprod=!0),console.log("isPreprod: "+$scope.isPreprod)};var warningMsg,formFactor,requestBody={};$scope.recaptchaSiteKey=globalConstant.recaptchaSiteKey,$scope.init=function(){$scope.isPreprodEnv(),$scope.requestInfoData={}},$scope.isFormSubmitted=!1,$scope.displayErrorMsg=!1,$scope.reCaptchaError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,$scope.isEmailValid=!1,$(document).on("responsive:statechanged",function(e,param){formFactor=param}),$(document).ready(function(){var isFormTouched=!1;$('form[name="contact_wholesaler_form"] input[name="firstName"]').on("focus",function(){if(!isFormTouched){var data={event_action:"focus",event_name:"first name",event_type:"leveladvantage",event_version:"contact wholesaler",event_status:"start",product_name:"Lincoln Level Advantage"};utag&&utag.link(data),isFormTouched=!0}})}),$scope.validateEmail=function(emailValue){var EMAIL_REGEXP=/^[_a-z0-9!#$%&'*=?^_+-`{|}~]*[^:><;()",\[\]]+(\.[_a-z0-9]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/i;return"none"===emailValue||EMAIL_REGEXP.test(emailValue)?($scope.isEmailValid=!0,!0):($scope.isEmailValid=!1,!1)},$scope.numberFormat=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.requestInfoData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if("contactNumber"===name&&($scope.isCorrectPhoneFormat=!patt.test($scope.requestInfoData[name])),3===$scope.requestInfoData[name].length&&8!==evt.keyCode?($scope.requestInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})/,"$1-")):7===$scope.requestInfoData[name].length&&8!==evt.keyCode?($scope.requestInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.requestInfoData[name].length?($scope.requestInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.requestInfoData[name].length&&($scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectPhoneFormat&&$scope.requestInfoData[name].length>=12){var str=$scope.requestInfoData[name];$scope.requestInfoData[name]=str.slice(0,12),$scope.isCorrectPhoneFormat=!1}}else if("zip"===zipOrPhone)if(5===$scope.requestInfoData[name].length)$scope.requestInfoData[name]=inputValue.replace(/[^0-9-]/g,""),109!==evt.keyCode&&189!==evt.keyCode||($scope.requestInfoData[name]=$scope.requestInfoData[name]+"-"),isTwoZipCode(name,!1);else if($scope.requestInfoData[name].length>5&&$scope.requestInfoData[name].length<=10)if(new RegExp("-").test($scope.requestInfoData[name]))if(10===$scope.requestInfoData[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"requestorZipCode"===name&&($scope.isCorrectZipFormat=!pattZip.test($scope.requestInfoData[name]))
}else isTwoZipCode(name,!0);else 9===$scope.requestInfoData[name].length?(109!==evt.keyCode&&189!==evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},$scope.getFormData=function(){requestBody.identity="LLAVA_CONTACT_WHOLE_SALER",requestBody.formFactor=formFactor,requestBody.firstName=$scope.requestInfoData.firstName,requestBody.lastName=$scope.requestInfoData.lastName,requestBody.email=$scope.requestInfoData.email,void 0==$scope.requestInfoData.contactNumber?requestBody.contactNumber="":requestBody.contactNumber=$scope.requestInfoData.contactNumber,console.log(requestBody),requestBody.firmName=$scope.requestInfoData.company,requestBody.financialPro=$scope.requestInfoData.financialPro},$scope.displayError=function(){$scope.displayErrorMsg=!0,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1},$scope.validateReCaptcha=function(){var gRecaptchaVal="";$("form .g-recaptcha-response").each(function(){console.log(".g-recaptcha-response:",$(this).val()),""!==$(this).val()&&(gRecaptchaVal=$(this).val())}),null!==gRecaptchaVal&&""!==gRecaptchaVal&&gRecaptchaVal.length>100?($scope.reCaptchaError=!1,requestBody.gRecaptchaResponse=gRecaptchaVal):$scope.reCaptchaError=!0},$scope.RedirectToURL=function(){var host=$window.location.origin,landingUrl=host+globalConstant.llavaRedirect;$window.location.href=landingUrl},$scope.submitLlavaContactWholesalerForm=function(){$scope.requestInfoData.firstName||$scope.requestInfoData.lastName||$scope.requestInfoData.email||$scope.requestInfoData.company?$scope.requestInfoData.financialPro?($scope.isFormSubmitted=!0,$scope.validateEmail($scope.requestInfoData.email),validForm()&&contactWholesalerLlavaService.contactWholesalerLlavaService($scope,requestBody,function(response){var dataResponse=response.data.responseStatusCode;if(dataResponse){if($scope.isSuccess=!0,"TIMED_OUT"===dataResponse)$scope.errorMsg="TIMED OUT",warningMsg=!0;else if("INTERNAL_ERROR"===dataResponse)$scope.errorMsg="INTERNAL ERROR",warningMsg=!0;else if("CAPTCHA_ERROR"===dataResponse)$scope.errorMsg="INVALID CAPTCHA",warningMsg=!0;else if("SERVICE_ERROR"===dataResponse)$scope.errorMsg="SERVICE ERROR",warningMsg=!0;else if("SUCCESS"===dataResponse){$scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayErrorMsg=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.isFormSubmitted=!1;var data={event_action:"button",event_name:"submit",event_type:"leveladvantage",event_version:"contact wholesaler",event_status:"complete",product_name:"Lincoln Level Advantage"};utag.link(data)}commonFunctions.loaderHide()}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0)})):$scope.RedirectToURL():(console.log("should not be able to click submit"),$scope.isFormSubmitted=!1)}}lfgapp.controller("contactWholesalerLlavaController",["$scope","$timeout","contactWholesalerLlavaService","$window",contactWholesalerLlavaController])}(),function(){angular.module("lfgapp").controller("faaController",["$timeout","$scope","GoogleMapService","RestService","CommonService","$filter",function($timeout,$scope,googleMapService,restService,commonService,$filter){function stickyMap(){if(window.matchMedia("(min-width: 751px)").matches){var stickyEle=document.getElementsByClassName("map-cont")[0];stickyEle.style.position="relative";var stickyEleHeight=0;Array.prototype.slice.call(stickyEle.children).forEach(function(childEle){stickyEleHeight+=childEle.clientHeight});var parentEle=stickyEle.parentElement,parentEleHeight=parentEle.clientHeight,scrollY=window.scrollY,contTop=parentEle.offsetTop,stickyTop=scrollY-contTop+150;scrollY+150>contTop&&stickyTop+stickyEleHeight<parentEleHeight?$(".map-cont")[0].style.top=stickyTop+"px":scrollY+150<contTop&&($(".map-cont")[0].style.top="0px")}}function nonStickyMap(){if(window.matchMedia("(max-width: 750px)").matches){document.getElementsByClassName("map-cont")[0].style.position="static"}}var faaVM=this;faaVM.limitTo=5,faaVM.init=function(){document.getElementById("searchAnAdvisor").reset(),faaVM.resultsMode=!1,faaVM.searchResults=[],faaVM.filterOptions={dafp:!1,pfmfltc:!1,pmfwli:!1,pomw:!1,sfc:!1,mmril:!1},faaVM.filterText="Select a filter",faaVM.filterBtnText="Continue",faaVM.searchByPh="ZIP code",faaVM.searchBy="zipCode",faaVM.commonService=commonService},faaVM.loadMore=function(){faaVM.limitTo=faaVM.limitTo+5},faaVM.triggerMarker=function(advisor,index){googleMapService.listScroll(index),googleMapService.triggerMarker(advisor)},faaVM.isValidSearchForm=function(){return!(void 0===faaVM.searchParam||null===faaVM.searchParam||""===faaVM.searchParam||!(faaVM.filterOptions.dafp||faaVM.filterOptions.pfmfltc||faaVM.filterOptions.pmfwli||faaVM.filterOptions.pomw||faaVM.filterOptions.sfc||faaVM.filterOptions.mmril))&&("lastName"===faaVM.searchBy||"zipCode"===faaVM.searchBy&&5===faaVM.searchParam.replace(/[^0-9]/g,"").length)},faaVM.triggerAnalytics=function(index,version,eventName){if(utag){var data={event_action:"link",event_name:eventName,event_type:"findanadvisor",event_version:version,event_position:index};utag.link(data)}},faaVM.triggerAnalyticsWithDistance=function(index,version,eventName,distance){if(utag){var data={event_action:"link",event_name:eventName,event_type:"findanadvisor",event_version:version,event_position:index,event_results:distance};utag.link(data)}},faaVM.clickEnter=function(evt){evt=evt||window.event,13===(evt.which?evt.which:evt.keyCode)&&faaVM.isValidSearchForm()&&faaVM.searchAdvisor()},faaVM.clickEnterContactYou=function(evt){evt=evt||window.event,13===(evt.which?evt.which:evt.keyCode)&&faaVM.isValidContactForm()&&faaVM.contactYou()},faaVM.isValidContactForm=function(){var phoneNoPtrn=/^(\d{3}\-\d{3}-\d{4})$/;return!(!faaVM.firstName||!phoneNoPtrn.test(faaVM.phoneNo))},faaVM.contactYou=function(){var contactYou={firstName:faaVM.firstName,phoneNo:faaVM.phoneNo};if(utag){var data={event_action:"button",event_name:"continue",event_type:"findanadvisor"};utag.link(data)}sessionStorage.setItem("faaContact",JSON.stringify(contactYou)),window.location="/public/individual/contactformsclaims/findanadvisor"},faaVM.updateResults=function(searchResults){faaVM.searchResults=searchResults},faaVM.noResults=function(){angular.element("#fade").hide(),angular.element("#status").hide(),faaVM.resultsMode=!1,faaVM.filterText="Select a filter",faaVM.filterBtnText="Continue",faaVM.searchResults=[],faaVM.noResultsMode=!0},faaVM.searchAdvisor=function(){if(angular.element("#fade").show(),angular.element("#status").show(),"zipCode"===faaVM.searchBy)var geocodePromise=googleMapService.geocodeLatLng(faaVM.searchParam);else if("lastName"===faaVM.searchBy){var illegalChrRegex=new RegExp("^[_%]+$");if(illegalChrRegex.test(faaVM.searchParam))var geocodePromise=Promise.resolve(!1);else{var geocodePromise=Promise.resolve({});-1!=faaVM.searchParam.indexOf("%")&&(faaVM.searchParam=faaVM.searchParam.replace("%","[%]")),-1!=faaVM.searchParam.indexOf("_")&&(faaVM.searchParam=faaVM.searchParam.replace("_","[_]"))}}geocodePromise.then(function(location){if("object"==typeof location){var requestBody={zipCode:"",lastName:"",filter:faaVM.filterOptions};"zipCode"===faaVM.searchBy?(requestBody.zipCode=faaVM.searchParam,requestBody.location=location):requestBody.lastName=faaVM.searchParam,restService.post("/pbl-faa-service-app/rest/pbl-faa/faa/agentsearch",requestBody,function(response){if(faaVM.q=faaVM.searchParam,200===response.status&&"SUCCESS"===response.data.response.response&&response.data.agents.length>0){faaVM.noResultsMode=!1,faaVM.resultsMode=!0,faaVM.filterText="Filter",faaVM.filterBtnText="Apply filters",commonService.scrollTop(".faa-search");var searchResults=response.data.agents;"zipCode"===faaVM.searchBy&&(searchResults=$filter("orderBy")(searchResults,"distance")),$timeout(function(){var mapInit={results:searchResults,searchBy:faaVM.searchBy,zipCode:faaVM.searchParam,scope:$scope,vm:faaVM,listPrntId:"advisorList",listChildName:"advisorDetails",interval:1};if(googleMapService.initMap(mapInit),faaVM.searchResults=searchResults,window.onscroll=stickyMap,window.resize=nonStickyMap,angular.element("#fade").hide(),angular.element("#status").hide(),utag){var filterOpts="";angular.forEach(faaVM.filterOptions,function(value,key){value&&(filterOpts=""!==filterOpts?filterOpts+","+key:key)});var data={event_action:"search",event_name:faaVM.searchBy,event_type:"findanadvisor",form_mc:filterOpts,event_search_terms:faaVM.searchParam,event_search_results:searchResults.length,event_results:searchResults[0].distance};utag.link(data)}},100)}else faaVM.noResults()})}else faaVM.noResults();-1!=faaVM.searchParam.indexOf("[%]")&&(faaVM.searchParam=faaVM.searchParam.replace("[%]","%")),-1!=faaVM.searchParam.indexOf("[_]")&&(faaVM.searchParam=faaVM.searchParam.replace("[_]","_"))})}}])}(),lfgapp.controller("annualFilingsContrl",["$scope",function($scope){$scope.annualTextPath=globalConstant.lfgSitePath+globalConstant.annualFilingsPath,$scope.annualTextPath2001=globalConstant.lfgSitePath+globalConstant.annualFilingsPath,$scope.annualPdfPath=globalConstant.lfgSitePath+globalConstant.annualFilingsPath+"10k/"}]),lfgapp.controller("askCustomerServiceContrl",["$scope","$timeout","$window","askCustomerServiceServices",function($scope,$timeout,$window,askCustomerServiceServices){function getCaptchaData(){angular.element("#nucaptcha-answer-enter")&&angular.element("#nucaptcha-answer-enter").val(),angular.element("#nucaptcha-answer-exit")&&angular.element("#nucaptcha-answer-exit").val(),$scope.askCustomerServiceFormValue.gRecaptchaResponse=$("#g-recaptcha-response").val()}function getFormData(){$scope.askCustomerServiceFormValue.identity="CONTACT_US_RS",$scope.askCustomerServiceFormValue.formFactor=formFactor,$scope.askCustomerServiceFormValue.product=productName,$scope.askCustomerServiceFormValue.productName=$scope.customerServiceData.product,$scope.askCustomerServiceFormValue.name=$scope.customerServiceData.username,$scope.askCustomerServiceFormValue.question=$scope.customerServiceData.question,$scope.askCustomerServiceFormValue.contactBy=$scope.customerServiceData.contactmethod,$scope.askCustomerServiceFormValue.policyNumber=$scope.customerServiceData.policyContact,$scope.askCustomerServiceFormValue.phone=$scope.customerServiceData.phone,$scope.askCustomerServiceFormValue.email=$scope.customerServiceData.email,$scope.askCustomerServiceFormValue.topic=angular.element("#selectTopic").text(),$scope.askCustomerServiceFormValue.time=angular.element("#selectTime").text()}function displayErr(){$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio, .err-border").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio, .err-border").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".site-navigation").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio, .err-border").eq(0).focus()})}},200)}function validForm(){var capchaVal,isCaptchaAvail=!1,timeNeeded=!1;return angular.element(".g-recaptcha").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#g-recaptcha-response").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show()),"Phone"===$scope.customerServiceData.contactmethod&&$scope.timeFlag&&(timeNeeded=!0),!$scope.askCustomerServiceForm.$valid||""===mailOrNum||isVaildMail||!(isCaptchaAvail&&capchaVal||!isCaptchaAvail)||$scope.isCorrectFormat||timeNeeded?(displayErr(),!1):(isCaptchaAvail&&getCaptchaData(),getFormData(),angular.element("#refresh").trigger("click"),commonFunctions.loaderShow(),!0)}$scope.isProductClicked=!0,$scope.isContactMethodClicked=!0,$scope.isSubmitClicked=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,$scope.emailFormat=/^([a-zA-Z0-9_\-\.]+)@(([a-zA-Z0-9_\-]+\.)+)([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/,$scope.askCustomerServiceFormValue={},$scope.isPhoneSelected=!1,$scope.topicFlag=!0,$scope.timeFlag=!0,utag_data.event_action="form",utag_data.event_name="Retirement Plan Support",utag_data.event_type="contact",utag_data.event_status="start";var formFactor,isVaildMail,warningMsg,productName,contactMethod=null,mailOrNum="",productObj={};productObj={ALLIANCE:"Lincoln Alliance®",MULTIFUND:"Lincoln Multi-Fund® Suite",GVA:"Lincoln Group Variable Annuity",DIRECTOR:"Lincoln DirectorSM",SMARTFUTURE:"Lincoln SmartFuture®",LEGACY:"Lincoln American Legacy RetirementSM"},$scope.customerServiceData={},$scope.customerServiceData.identity="ASK_CUSTOMER_SERVICE",$scope.customerServiceData.policyContact="",$scope.mail="",$scope.number="",commonFunctions.loaderHide(),angular.element(".nucaptcha-answer-error").hide(),angular.element("*").removeClass("none"),$scope.checkRadioButton=function(evt){"product"===evt.target.name?($scope.isProductClicked=!1,$scope.customerServiceData.product=evt.target.defaultValue,angular.forEach(productObj,function(value,key){value===$scope.customerServiceData.product&&(productName=key)})):"contact-method"===evt.target.name&&($scope.contactName=evt.target.defaultValue,contactMethod=evt.target.defaultValue,$scope.isContactMethodClicked=!1),$scope.customerServiceData.contactmethod=contactMethod},$(document).on("responsive:statechanged",function(e,param){formFactor=param}),angular.element("ul.custom-selectbox-list-cont li").on("click",function(){$timeout(function(){commonRequest.checkDropValidation()},200)});var commonRequest=function(){var dropValue,commonRequestModule={};return commonRequestModule.dropDownValidation=function(id,flagName,value){dropValue=angular.element("#"+id).text(),$scope[flagName]=dropValue===value},commonRequestModule.checkDropValidation=function(){commonRequestModule.dropDownValidation("selectTopic","topicFlag","Select topic"),commonRequestModule.dropDownValidation("selectTime","timeFlag","The best time to contact me")},commonRequestModule}();angular.element("#contact-phone").on("focus",function(){$scope.contactName="Phone",contactMethod="Phone",$scope.isContactMethodClicked=!1,$scope.selectPhone=!0,$scope.selectEmail=!1,$scope.customerServiceData.contactmethod=contactMethod,$scope.$apply()}),angular.element("#contact-email").on("focus",function(){$scope.contactName="Email",contactMethod="Email",$scope.isContactMethodClicked=!1,$scope.customerServiceData.contactmethod=contactMethod,$scope.selectPhone=!1,$scope.selectEmail=!0,$scope.$apply()}),$scope.PhoneNum=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.number=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if("number"===name&&($scope.isCorrectFormat=!patt.test($scope.number)),3===$scope.number.length&&8!==evt.keyCode?($scope.number=inputValue.replace(/[^0-9]/g,""),$scope.number=$scope.number.replace(/(\d{3})/,"$1-")):7===$scope.number.length&&8!==evt.keyCode?($scope.number=inputValue.replace(/[^0-9]/g,""),$scope.number=$scope.number.replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.number.length?($scope.number=inputValue.replace(/[^0-9]/g,""),$scope.number=$scope.number.replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.number.length&&($scope.number=$scope.number.replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectFormat&&$scope.number.length>=12){var str=$scope.number;$scope.number=str.slice(0,12),$scope.isCorrectFormat=!1}}},$scope.ValidatePaste=function(contType,e){var ctrlName=e.target.attributes.id.value,pastedData="";if("drop"==e.type)pastedData=e.dataTransfer.getData("Text");else if("paste"==e.type){var clipData;clipData=e.clipboardData||window.clipboardData,void 0==clipData&&(clipData=e.originalEvent.clipboardData),void 0!=clipData&&(pastedData=clipData.getData("Text"))}var currentData=ProcessDataForCorrection(contType,ctrlName,pastedData),charLength=$("#"+ctrlName).attr("maxLength");currentData.length>charLength&&(currentData=currentData.slice(0,charLength),$("#"+ctrlName).val(currentData)),$scope.askCustomerServiceFormValue[ctrlName]=currentData,e.preventDefault()},$scope.UpdateJSON=function(contType,e){var ctrlName=e.target.attributes.id.value,charLength=$("#"+ctrlName).attr("maxLength"),value=$("#"+ctrlName).val();value.length>0&&($("#"+ctrlName).val(""),value=ProcessDataForCorrection(contType,ctrlName,value),value.length>charLength&&$("#"+ctrlName).val(value.slice(0,charLength)),$scope.askCustomerServiceFormValue[ctrlName]=$("#"+ctrlName).val().trim(),$scope["invalid"+ctrlName]=!1)},$scope.submit=function(){$scope.isSubmitClicked=!0,$scope.displayError=!1,isVaildMail=!1,"Email"===contactMethod?($scope.customerServiceData.contactmethod=contactMethod,mailOrNum=$scope.mail,isVaildMail=$scope.contactFormMethod.mail.$error.email):"Phone"===contactMethod?($scope.customerServiceData.contactmethod=contactMethod,mailOrNum=$scope.number,isVaildMail=!1):"no-response"===contactMethod&&($scope.customerServiceData.contactmethod="",mailOrNum=null,isVaildMail=!1),$scope.customerServiceData.phone=$scope.number,$scope.customerServiceData.email=$scope.mail,$scope.customerServiceData.mailOrNum=mailOrNum,validForm()&&askCustomerServiceServices.askCustomerServicePost($scope,$scope.askCustomerServiceFormValue,function(dataAjax){var dataResponse=dataAjax.data.responseStatusCode;if(dataResponse){if("TIMED_OUT"===dataResponse)$scope.errorMsg="TIMED OUT",warningMsg=!0;else if("INTERNAL_ERROR"===dataResponse){for(var InvalidFieldsStr=dataAjax.data.serviceReponseMessage.replace("[","").replace("]",""),InvalidFields=InvalidFieldsStr.toString().split(","),iCnt=0;iCnt<InvalidFields.length;iCnt++){var invalidFlag="invalid"+InvalidFields[iCnt].trim();$scope[invalidFlag]=!0}$scope.errorMsg="INTERNAL ERROR",warningMsg=!0}else if("CAPTCHA_ERROR"===dataResponse||"RECAPTCHA_ERROR"===dataResponse)$scope.errorMsg="INVALID CAPTCHA",warningMsg=!0;else if("SERVICE_ERROR"===dataResponse)$scope.errorMsg="SERVICE ERROR",warningMsg=!0;else if("SUCCESS"===dataResponse){null!==tksPageURL&&"null"!==tksPageURL?$window.location.href=tksPageURL:(warningMsg=!1,$scope.errorMsg="SUCCESS! Your informaction has been submitted. You should receive a response in 1-2 business days.",$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll(),$scope.isContactMethodClicked=!0,$scope.isProductClicked=!0),$scope.askCustomerServiceFormValue={},$scope.customerServiceData={},angular.element(".selectTime").text("The best time to contact me").removeAttr("data-val"),angular.element(".selectTopic").text("Select topic").removeAttr("data-val"),angular.element(".lfg-radio-role input").attr("checked",!1),$scope.number="",$scope.mail="",contactMethod=null,mailOrNum="",$scope.contactName="",$scope.isSubmitClicked=!1;var data={event_action:"form",event_name:"Retirement Plan Support",event_type:"contact",event_status:"complete"};utag.link(data)}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide()}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())})},$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)}}]),lfgapp.controller("claimContrl",["$scope","$timeout","formPostService","$window",function($scope,$timeout,formPostService,$window){function isTwoZipCode(name,booleanValue){"zip"===name?$scope.isCorrectZipFormat=booleanValue:$scope.isCorrectDeceasedZipFormat=booleanValue}function getCaptchaData(){angular.element("#nucaptcha-answer-enter")&&angular.element("#nucaptcha-answer-enter").val(),angular.element("#nucaptcha-answer-exit")&&angular.element("#nucaptcha-answer-exit").val(),$scope.claimFormData.gRecaptchaResponse=$("#g-recaptcha-response").val()}function getFormData(){$scope.claimFormData.identity="ANNUITY_CLAIMS",$scope.claimFormData.formFactor=claimFormFactor,$scope.claimFormData.notifierName=$scope.claimInfoFormData.name,$scope.claimFormData.notifierRelationship=$scope.claimInfoFormData.relationshipInsured,$scope.claimFormData.notifierStreetAddress=$scope.claimInfoFormData.address,$scope.claimFormData.notifierCity=$scope.claimInfoFormData.city,$scope.claimFormData.notifierState=$scope.state,$scope.claimFormData.notifierZipCode=$scope.claimInfoFormData.zip,$scope.claimFormData.notifierPreferredPhone=$scope.claimInfoFormData.evePhoNumber,$scope.claimFormData.notifierEmail=$scope.claimInfoFormData.emailAddress,$scope.claimFormData.insuredName=$scope.claimInfoFormData.deceasedPerName,$scope.claimFormData.insuredPolicies=$scope.claimInfoFormData.deceasedPerPolicyNumber,$scope.claimFormData.insuredLast4SSN=$scope.claimInfoFormData.deceasedPerSSN,$scope.claimFormData.insuredDob=$scope.claimInfoFormData.deceasedPerDOB,$scope.claimFormData.insuredDeathDate=$scope.claimInfoFormData.insuredDeathDate,$scope.claimFormData.insuredOtherPolicies="",$scope.claimFormData.insuredOtherPoliciesDetail="",$scope.claimFormData.insuredDisabilityCause="",$scope.claimFormData.insuredDisabilityDate="",$scope.claimFormData.insuredBenefitClaim="",$scope.claimFormData.insuredCareOnset="",$scope.claimFormData.insuredClaimCause="",$scope.claimFormData.eConsentAccepted="I consent to Electronic Transmissions"}function displayErr(){$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200)}function validForm(){document.getElementById("ClaimDod").value&&($scope.claimInfoFormData.insuredDeathDate=document.getElementById("ClaimDod").value),document.getElementById("ClaimDob").value&&($scope.claimInfoFormData.deceasedPerDOB=document.getElementById("ClaimDob").value),(document.getElementById("ClaimDod").value||document.getElementById("ClaimDob").value)&&$scope.$apply();var capchaVal,isCaptchaAvail=!1;return angular.element(".g-recaptcha").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#g-recaptcha-response").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show()),!$scope.claimInfoForm.$valid||!(isCaptchaAvail&&capchaVal||!isCaptchaAvail)||$scope.isCorrectFormat||$scope.isCorrectZipFormat||$scope.isCorrectDeceasedZipFormat?(displayErr(),!1):(isCaptchaAvail&&getCaptchaData(),getFormData(),commonFunctions.loaderShow(),!0)}utag_data.event_action="form",utag_data.event_name="Annuity Death Claim",utag_data.event_type="claims",utag_data.event_status="start";var claimFormFactor,warningMsg;$(document).on("responsive:statechanged",function(e,param){claimFormFactor=param});new Calendar({dateId:"date",monthId:"month",yearId:"year",hiddenId:"ClaimDob",numberOfYears:130}),new Calendar({dateId:"date1",monthId:"month1",yearId:"year1",hiddenId:"ClaimDod",numberOfYears:130});$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,$scope.submitFlag=!1,$scope.stateFlag=!1,$scope.dobMonthFlag=!1,$scope.claimFormData={},$scope.claimFormData.personalInformation=[],$scope.claimFormData.deceasedPerInfo=[],$scope.claimFormData.AdditionalDetailFormData=[],angular.element(document).ready(function(){angular.element(".nucaptcha-answer-error").hide(),angular.element("*").removeClass("get-sartedform-default-hidden")}),commonFunctions.loaderHide(),$scope.stateValidation=function(){$scope.state=angular.element("#state").text(),"Select state"!==$scope.state?$scope.stateFlag=!1:$scope.stateFlag=!0},$scope.dobMonthValidation=function(){$scope.dobMonth=angular.element("#dobMonthDd").text(),"Month"!==$scope.dobMonth?$scope.dobMonthFlag=!1:$scope.dobMonthFlag=!0},angular.element("#month li").on("click",function(){$timeout(function(){$scope.dobMonthValidation()},200)}),$scope.dobDateValidation=function(){$scope.dobDate=angular.element("#dobDateDd").text(),"Date"!==$scope.dobDate?$scope.dobDateFlag=!1:$scope.dobDateFlag=!0},angular.element("#date li").on("click",function(){$timeout(function(){$scope.dobDateValidation()},200)}),$scope.dobYearValidation=function(){$scope.dobYear=angular.element("#dobYearDd").text(),"Year"!==$scope.dobYear?$scope.dobYearFlag=!1:$scope.dobYearFlag=!0},angular.element("#year li").on("click",function(){$timeout(function(){$scope.dobDateValidation()},200)}),$scope.dobValidation=function(){$scope.dobMonthValidation(),$scope.dobDateValidation(),$scope.dobYearValidation()},$scope.deceasedPerStateValidation=function(){$scope.deceasedPerState=angular.element("#deceasedPerState").text(),"Select state"!==$scope.deceasedPerState?$scope.deceasedPerStateFlag=!1:$scope.deceasedPerStateFlag=!0},angular.element("#deceasedPerStateUl li").on("click",function(){$timeout(function(){$scope.deceasedPerStateValidation()},200)}),angular.element("#stateUl li").on("click",function(){$timeout(function(){$scope.stateValidation()},200)}),$scope.convertFormData=function(data){return angular.forEach(data,function(value,key){data[key]||(data[key]=null)}),data},$scope.disablityPhoneNum=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.claimInfoFormData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if($scope.isCorrectFormat=!patt.test($scope.claimInfoFormData[name]),3===$scope.claimInfoFormData[name].length&&8!==evt.keyCode?($scope.claimInfoFormData[name]=inputValue.replace(/[^0-9]/g,""),$scope.claimInfoFormData[name]=$scope.claimInfoFormData[name].replace(/(\d{3})/,"$1-")):7===$scope.claimInfoFormData[name].length&&8!==evt.keyCode?($scope.claimInfoFormData[name]=inputValue.replace(/[^0-9]/g,""),$scope.claimInfoFormData[name]=$scope.claimInfoFormData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.claimInfoFormData[name].length?($scope.claimInfoFormData[name]=inputValue.replace(/[^0-9]/g,""),$scope.claimInfoFormData[name]=$scope.claimInfoFormData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.claimInfoFormData[name].length&&($scope.claimInfoFormData[name]=$scope.claimInfoFormData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectFormat&&$scope.claimInfoFormData[name].length>=12){var str=$scope.claimInfoFormData[name];$scope.claimInfoFormData[name]=str.slice(0,12),$scope.isCorrectFormat=!1}}else if("zip"===zipOrPhone)if(5===$scope.claimInfoFormData[name].length)$scope.claimInfoFormData[name]=inputValue.replace(/[^0-9-]/g,""),109!==evt.keyCode&&189!==evt.keyCode||($scope.claimInfoFormData[name]=$scope.claimInfoFormData[name]+"-"),isTwoZipCode(name,!1);else if($scope.claimInfoFormData[name].length>5&&$scope.claimInfoFormData[name].length<=10)if(new RegExp("-").test($scope.claimInfoFormData[name]))if(10===$scope.claimInfoFormData[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"zip"===name?$scope.isCorrectZipFormat=!pattZip.test($scope.claimInfoFormData[name]):$scope.isCorrectDeceasedZipFormat=!pattZip.test($scope.claimInfoFormData[name])}else isTwoZipCode(name,!0);else 9===$scope.claimInfoFormData[name].length?(109!==evt.keyCode&&189!==evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},$scope.disp_none="disp_none",$scope.openPopUp=function(event,val,callAnalytic){function doOnOrientationChange(){if(screen.width<=768){switch(window.orientation){case-90:default:$scope.hgt=screen.height}}}if(event.stopPropagation(),1==val){if($scope.checkbox=!0,"disp_none"===$scope.disp_none&&($scope.disp_none="disp_block",$("body").css("overflow","hidden")),callAnalytic){var data1={event_action:"link",event_name:"Electronic Transmissions",event_type:"maincontent"};utag.link(data1)}}else $scope.checkbox=!1,"disp_block"===$scope.disp_none&&($scope.disp_none="disp_none",$("body").css("overflow","auto"));$scope.hgt=screen.height,window.addEventListener("orientationchange",doOnOrientationChange)},$scope.isAccept=function(event,val){if(val){$scope.checkbox=!0,"disp_block"===$scope.disp_none&&($scope.disp_none="disp_none",$("body").css("overflow","auto"));var data2={event_action:"Button",event_name:"I Consent",event_type:"maincontent"};utag.link(data2)}else $scope.openPopUp(event,val,!0),$("body").css("overflow","auto")},$scope.submit=function(){$scope.submitFlag=!0,$scope.stateValidation(),$scope.deceasedPerStateValidation(),validForm()&&formPostService.formPostData($scope,$scope.claimFormData,function(dataAjax){var dataResponce=dataAjax.data.responseStatusCode;if(dataResponce){if("TIMED_OUT"===dataResponce)$scope.isSuccess=!0,$scope.errorMsg="TIMED OUT",warningMsg=!0;else if("INTERNAL_ERROR"===dataResponce)$scope.isSuccess=!0,$scope.errorMsg="INTERNAL ERROR",warningMsg=!0;else if("CAPTCHA_ERROR"===dataResponce)$scope.isSuccess=!0,$scope.errorMsg="INVALID CAPTCHA",warningMsg=!0;else if("SERVICE_ERROR"===dataResponce)$scope.isSuccess=!0,$scope.errorMsg="SERVICE ERROR",warningMsg=!0;else if("SUCCESS"===dataResponce){null!==tksPageURL&&"null"!==tksPageURL?$window.location.href=tksPageURL:($scope.isSuccess=!0,$scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll()),$scope.claimFormData={},$scope.claimInfoFormData={},commonFunctions.resetDatePicker(),angular.element("#state").text("Select state").removeAttr("data-val"),angular.element("#deceasedPerState").text("Select state").removeAttr("data-val"),$scope.submitFlag=!1;var data={event_action:"form",event_name:"Annuity Death Claim",event_type:"claims",event_status:"complete"};utag.link(data)}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide()}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())}),$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-30,angular.element("html, body").stop().animate({scrollTop:tableVal},800)}}}]),lfgapp.controller("contactFromContrl",["$scope","contactFormService","$timeout","$window",function($scope,contactFormService,$timeout,$window){function isTwoZipCode(name,booleanValue){"zipCode"===name&&($scope.isCorrectZipFormat=booleanValue)}function getCaptchaData(){angular.element("#nucaptcha-answer-enter")&&angular.element("#nucaptcha-answer-enter").val(),angular.element("#nucaptcha-answer-exit")&&angular.element("#nucaptcha-answer-exit").val(),$scope.contactData.gRecaptchaResponse=$("#g-recaptcha-response").val()}function displayErr(){$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$timeout(function(){if(angular.element(".c-err-box, .err-cont, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .err-cont, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".err-border").eq(0).focus()})}},200)}function validForm(){var capchaVal,isCaptchaAvail=!1;return angular.element(".g-recaptcha").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#g-recaptcha-response").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show()),
$scope.contactForm.$valid&&(angular.element("#nucaptcha-answer").length<=0||capchaVal)?(isCaptchaAvail&&getCaptchaData(),commonFunctions.loaderShow(),$scope.validationErrorShow=!1,!0):(displayErr(),!1)}$scope.init=function(){angular.element("*").removeClass("none"),angular.element(".nucaptcha-answer-error").hide()},angular.element("#radio_1").trigger("click"),$scope.isSubmitClicked=!1,$scope.validationErrorShow=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,commonFunctions.loaderHide();var resetValues,warningMsg;utag_data.event_action="form",utag_data.event_name="Contact Investor Relations",utag_data.event_type="contact",utag_data.event_status="start",resetValues=function(){$scope.contactData={},$scope.contactData.respectValue="",$scope.contactData.doingAt="Work",$scope.contactData.firstName="",$scope.contactData.lastName="",$scope.contactData.title="",$scope.contactData.organization="",$scope.contactData.address="",$scope.contactData.city="",$scope.contactData.zipCode="",$scope.contactData.number="",$scope.contactData.fax="",$scope.contactData.question="",$scope.contactData.identity="CONTACT_US_IR"},resetValues(),$scope.contactFormPhoneNum=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.contactData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if($scope.isCorrectFormat=!patt.test($scope.contactData[name]),3===$scope.contactData[name].length&&8!==evt.keyCode?($scope.contactData[name]=inputValue.replace(/[^0-9]/g,""),$scope.contactData[name]=$scope.contactData[name].replace(/(\d{3})/,"$1-")):7===$scope.contactData[name].length&&8!==evt.keyCode?($scope.contactData[name]=inputValue.replace(/[^0-9]/g,""),$scope.contactData[name]=$scope.contactData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.contactData[name].length?($scope.contactData[name]=inputValue.replace(/[^0-9]/g,""),$scope.contactData[name]=$scope.contactData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.contactData[name].length&&($scope.contactData[name]=$scope.contactData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectFormat&&$scope.contactData[name].length>=12){var str=$scope.contactData[name];$scope.contactData[name]=str.slice(0,12),$scope.isCorrectFormat=!1}}else if("zip"===zipOrPhone)if(5===$scope.contactData[name].length)$scope.contactData[name]=inputValue.replace(/[^0-9-]/g,""),109!==evt.keyCode&&189!==evt.keyCode||($scope.contactData[name]=$scope.contactData[name]+"-"),isTwoZipCode(name,!1);else if($scope.contactData[name].length>5&&$scope.contactData[name].length<=10)if(new RegExp("-").test($scope.contactData[name]))if(10===$scope.contactData[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"zipCode"===name&&($scope.isCorrectZipFormat=!pattZip.test($scope.contactData[name]))}else isTwoZipCode(name,!0);else 9===$scope.contactData[name].length?(109!==evt.keyCode&&189!==evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},$scope.checkRespect=function(evt){"respect"===evt.target.name?$scope.contactData.respectValue=evt.target.defaultValue:"radiog_lite"===evt.target.name&&($scope.contactData.doingAt=evt.target.defaultValue)},$scope.contactFormSubmit=function(){$scope.isSubmitClicked=!0,$scope.contactData.state="Select state"===angular.element(".getContactFormDatastate").val()?"":angular.element(".getContactFormDatastate").val(),validForm()&&(contactFormService.formPostData($scope,$scope.contactData,function(dataAjax){var dataResponce=dataAjax.data.responseStatusCode;if(dataResponce){if("TIMED_OUT"===dataResponce)$scope.errorMsg="TIMED OUT",warningMsg=!0,$scope.isSubmitClicked=!0;else if("INTERNAL_ERROR"===dataResponce)$scope.errorMsg="INTERNAL ERROR",warningMsg=!0,$scope.isSubmitClicked=!0;else if("CAPTCHA_ERROR"===dataResponce)$scope.errorMsg="INVALID CAPTCHA",warningMsg=!0,$scope.isSubmitClicked=!0;else if("SERVICE_ERROR"===dataResponce)$scope.errorMsg="SERVICE ERROR",warningMsg=!0,$scope.isSubmitClicked=!0;else if("SUCCESS"===dataResponce){null!==tksPageURL&&"null"!==tksPageURL?$window.location.href=tksPageURL:(warningMsg=!1,$scope.errorMsg="SUCCESS. Thank you for sharing your information.",$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll(),angular.element("#nucaptcha-answer").val("")),$scope.contactData={},$scope.isSubmitClicked=!1;var data={event_action:"form",event_name:"Contact Investor Relations",event_type:"contact",event_status:"complete"};utag.link(data)}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),$scope.isSuccess=!0,commonFunctions.loaderHide()}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())}),angular.element(".Mrwapper input").attr("checked",!1)),$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)}}}]),lfgapp.controller("contactUsGpContrl",["$scope","$timeout","$window","contactUsGpServices",function($scope,$timeout,$window,contactUsGpServices){function isTwoZipCode(name,booleanValue){"zipCode"===name&&($scope.isCorrectZipFormat=booleanValue)}function getCaptchaData(){angular.element("#nucaptcha-answer-enter")&&angular.element("#nucaptcha-answer-enter").val(),angular.element("#nucaptcha-answer-exit")&&angular.element("#nucaptcha-answer-exit").val(),$scope.contactUsGpData.gRecaptchaResponse=$("#g-recaptcha-response").val()}function getFormData(){$scope.contactUsGpData.formFactor=contactusGpFormFactor,$scope.contactUsGpData.identity="CONTACT_US_GP",$scope.contactUsGpData.userType=contactUsGpCommon.checkDataEmpty(angular.element("#userType").text(),"userType"),$scope.contactUsGpData.contactMethod=$scope.contactUsGpData.contactMethod||"Email"}function displayErr(){$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$scope.validationErrorShow=!0,$scope.validationErrorShow=!0,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200)}function validForm(){var capchaVal,isCaptchaAvail=!1;return angular.element(".g-recaptcha").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#g-recaptcha-response").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show()),$scope.contactUsGpForm.$valid&&(isCaptchaAvail&&capchaVal||!isCaptchaAvail)&&!$scope.isCorrectFormat&&!$scope.isCorrectZipFormat?(isCaptchaAvail&&getCaptchaData(),getFormData(),commonFunctions.loaderShow(),$scope.validationErrorShow=!1,!0):(displayErr(),!1)}var contactUsGpCommon,contactusGpFormFactor,warningMsg;$(document).on("responsive:statechanged",function(e,param){contactusGpFormFactor=param}),$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,utag_data.event_action="form",utag_data.event_name="Group benefits support",utag_data.event_type="contact",utag_data.event_status="start",contactUsGpCommon=function(){var contactUsModule={};return contactUsModule.checkDataEmpty=function(data,valueType){return"userType"===valueType?"I am (Select one)"===data||"Select one"===data?"":data:data||""},contactUsModule}(),commonFunctions.loaderHide(),angular.element(".nucaptcha-answer-error").hide(),angular.element("*").removeClass("none"),$scope.contactusGpPhoneNum=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.contactUsGpData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if($scope.isCorrectFormat=!patt.test($scope.contactUsGpData[name]),3===$scope.contactUsGpData[name].length&&8!==evt.keyCode?($scope.contactUsGpData[name]=inputValue.replace(/[^0-9]/g,""),$scope.contactUsGpData[name]=$scope.contactUsGpData[name].replace(/(\d{3})/,"$1-")):7===$scope.contactUsGpData[name].length&&8!==evt.keyCode?($scope.contactUsGpData[name]=inputValue.replace(/[^0-9]/g,""),$scope.contactUsGpData[name]=$scope.contactUsGpData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.contactUsGpData[name].length?($scope.contactUsGpData[name]=inputValue.replace(/[^0-9]/g,""),$scope.contactUsGpData[name]=$scope.contactUsGpData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.contactUsGpData[name].length&&($scope.contactUsGpData[name]=$scope.contactUsGpData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectFormat&&$scope.contactUsGpData[name].length>=12){var str=$scope.contactUsGpData[name];$scope.contactUsGpData[name]=str.slice(0,12),$scope.isCorrectFormat=!1}}else if("zip"===zipOrPhone)if(5===$scope.contactUsGpData[name].length)$scope.contactUsGpData[name]=inputValue.replace(/[^0-9-]/g,""),109!==evt.keyCode&&189!==evt.keyCode||($scope.contactUsGpData[name]=$scope.contactUsGpData[name]+"-"),isTwoZipCode(name,!1);else if($scope.contactUsGpData[name].length>5&&$scope.contactUsGpData[name].length<=10)if(new RegExp("-").test($scope.contactUsGpData[name]))if(10===$scope.contactUsGpData[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"zipCode"===name&&($scope.isCorrectZipFormat=!pattZip.test($scope.contactUsGpData[name]))}else isTwoZipCode(name,!0);else 9===$scope.contactUsGpData[name].length?(109!==evt.keyCode&&189!==evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},angular.extend($scope,{contactUsGpData:{},isContactUsGpClicked:!1,validationErrorShow:!1}),$scope.submitContactUsGp=function(){$scope.isContactUsGpClicked=!0,validForm()&&contactUsGpServices.contactUsGpInfoPost($scope,$scope.contactUsGpData,function(dataAjax){var dataResponce=dataAjax.data.responseStatusCode;if(dataResponce){if("TIMED_OUT"===dataResponce)warningMsg=!0,$scope.errorMessage="TIMED OUT",angular.element("#getStarted-success-txt").addClass("getStarted-error");else if("INTERNAL_ERROR"===dataResponce)warningMsg=!0,$scope.errorMessage="INTERNAL ERROR",angular.element("#getStarted-success-txt").addClass("getStarted-error");else if("CAPTCHA_ERROR"===dataResponce)warningMsg=!0,$scope.errorMessage="INVALID CAPTCHA",angular.element("#getStarted-success-txt").addClass("getStarted-error");else if("SERVICE_ERROR"===dataResponce)warningMsg=!0,$scope.errorMessage="SERVICE ERROR",angular.element("#getStarted-success-txt").addClass("getStarted-error");else if("SUCCESS"===dataResponce){null!==tksPageURL&&"null"!==tksPageURL?$window.location.href=tksPageURL:($scope.errorMessage="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll()),$scope.isContactUsGpClicked=!1,$scope.contactUsGpData={},angular.element("#userType").text("I am (Select one)").removeAttr("data-val");var data={event_action:"form",event_name:"Group benefits support",event_type:"contact",event_status:"complete"};utag.link(data)}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide()}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())}),$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)}}}]),function(){function disabilityWaiverContrl($scope,$timeout,$window,disabilityWaiverServices){function isTwoZipCode(name,booleanValue){"insuredZipCode"===name?$scope.isCorrectInsuredZipFormat=booleanValue:$scope.isCorrectZipFormat=booleanValue}function getCaptchaData(){angular.element("#nucaptcha-answer-enter")&&angular.element("#nucaptcha-answer-enter").val(),angular.element("#nucaptcha-answer-exit")&&angular.element("#nucaptcha-answer-exit").val(),$scope.disabilityWaiverData.gRecaptchaResponse=$("#g-recaptcha-response").val()}function getFormData(){$scope.disabilityWaiverData.formFactor=disabilityWaiverFactor,$scope.disabilityWaiverData.identity="DISABILITY_CLAIMS",$scope.disabilityWaiverData.insuredRelationship=commonDisability.checkData($scope.disabilityWaiverData.insuredRelationship),$scope.disabilityWaiverData.notifierEveningPhone=commonDisability.checkData($scope.disabilityWaiverData.notifierEveningPhone),$scope.disabilityWaiverData.notifierEmail=commonDisability.checkData($scope.disabilityWaiverData.notifierEmail),$scope.disabilityWaiverData.insuredDateOfBirth=commonDisability.checkData($scope.disabilityWaiverData.insuredDateOfBirth),$scope.disabilityWaiverData.insuredCauseOfDisability=commonDisability.checkData($scope.disabilityWaiverData.insuredCauseOfDisability),$scope.disabilityWaiverData.insuredDisabilityCause=commonDisability.checkData($scope.disabilityWaiverData.insuredDisabilityCause),$scope.disabilityWaiverData.notifierState=angular.element("#notifier_State").text(),$scope.disabilityWaiverData.insuredState=angular.element("#insured_State").text()}function displayErr(){$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$scope.validationErrorShow=!0,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200)}function validForm(){var capchaVal,isCaptchaAvail=!1;return angular.element(".g-recaptcha").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#g-recaptcha-response").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show()),!$scope.disability_waiver_form.$valid||$scope.notifierStateFlag||$scope.insuredStateFlag||!(isCaptchaAvail&&capchaVal||!isCaptchaAvail)||$scope.isCorrectDayFormat||$scope.isCorrectInsuredZipFormat||$scope.isCorrectZipFormat?(displayErr(),!1):(isCaptchaAvail&&getCaptchaData(),getFormData(),commonFunctions.loaderShow(),$scope.validationErrorShow=!1,!0)}utag_data.event_action="form",utag_data.event_name="Disability Notification",utag_data.event_type="claims",utag_data.event_status="start";var disabilityWaiverFactor,commonDisability,warningMsg,disabilityWaiverCount=0;$(document).on("responsive:statechanged",function(e,param){disabilityWaiverFactor=param});new Calendar({dateId:"date",monthId:"month",yearId:"year",hiddenId:"DisabilityDOB",numberOfYears:130}),new Calendar({dateId:"date1",monthId:"month1",yearId:"year1",hiddenId:"insured_disability_date",numberOfYears:130});$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,angular.element("*").removeClass("none get-sartedform-default-hidden"),angular.element(".nucaptcha-answer-error").hide(),commonFunctions.loaderHide(),angular.element("ul.custom-selectbox-list-cont li").on("click",function(){$timeout(function(){commonDisability.dropDownValidation("notifier_State","notifierStateFlag"),commonDisability.dropDownValidation("insured_State","insuredStateFlag")},200)}),commonDisability=function(){var commonDisabilityModule={};return commonDisabilityModule.dropDownValidation=function(id,flagName){"Select state"!==angular.element("#"+id).text()?$scope[flagName]=!1:$scope[flagName]=!0},commonDisabilityModule.checkData=function(data){return data=data||""},commonDisabilityModule}(),$scope.disablityPhoneNum=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.disabilityWaiverData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if("notifierDayPhone"===name?$scope.isCorrectDayFormat=!patt.test($scope.disabilityWaiverData[name]):$scope.isCorrectFormat=!patt.test($scope.disabilityWaiverData[name]),3===$scope.disabilityWaiverData[name].length&&8!==evt.keyCode?($scope.disabilityWaiverData[name]=inputValue.replace(/[^0-9]/g,""),$scope.disabilityWaiverData[name]=$scope.disabilityWaiverData[name].replace(/(\d{3})/,"$1-")):7===$scope.disabilityWaiverData[name].length&&8!==evt.keyCode?($scope.disabilityWaiverData[name]=inputValue.replace(/[^0-9]/g,""),$scope.disabilityWaiverData[name]=$scope.disabilityWaiverData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.disabilityWaiverData[name].length?($scope.disabilityWaiverData[name]=inputValue.replace(/[^0-9]/g,""),$scope.disabilityWaiverData[name]=$scope.disabilityWaiverData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.disabilityWaiverData[name].length&&($scope.disabilityWaiverData[name]=$scope.disabilityWaiverData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectDayFormat){if($scope.disabilityWaiverData[name].length>=12){var str=$scope.disabilityWaiverData[name];$scope.disabilityWaiverData[name]=str.slice(0,12),$scope.isCorrectDayFormat=!1}}else if($scope.disabilityWaiverData[name].length>=12){var str=$scope.disabilityWaiverData[name];$scope.disabilityWaiverData[name]=str.slice(0,12)}}else if("zip"===zipOrPhone)if(5===$scope.disabilityWaiverData[name].length)$scope.disabilityWaiverData[name]=inputValue.replace(/[^0-9-]/g,""),109!==evt.keyCode&&189!==evt.keyCode||($scope.disabilityWaiverData[name]=$scope.disabilityWaiverData[name]+"-"),isTwoZipCode(name,!1);else if($scope.disabilityWaiverData[name].length>5&&$scope.disabilityWaiverData[name].length<=10)if(new RegExp("-").test($scope.disabilityWaiverData[name]))if(10===$scope.disabilityWaiverData[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"insuredZipCode"===name?$scope.isCorrectInsuredZipFormat=!pattZip.test($scope.disabilityWaiverData[name]):$scope.isCorrectZipFormat=!pattZip.test($scope.disabilityWaiverData[name])}else isTwoZipCode(name,!0);else 9===$scope.disabilityWaiverData[name].length?(109!==evt.keyCode&&189!==evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},angular.extend($scope,{isDisabilityClicked:!1,notifierStateFlag:!0,insuredStateFlag:!0,disabilityWaiverData:{},validationErrorShow:!1}),$scope.submitRequest=function(){submitClicked=!0,disabilityWaiverCount||($scope.disabilityWaiverData.insuredDisabilityDate?angular.element(".lostPolicy").addClass("ng-hide"):angular.element(".lostPolicy").removeClass("ng-hide"),disabilityWaiverCount=1),$scope.isDisabilityClicked=!0,commonDisability.dropDownValidation("notifier_State","notifierStateFlag"),commonDisability.dropDownValidation("insured_State","insuredStateFlag"),validForm()&&disabilityWaiverServices.disabilityWaiverPost($scope,$scope.disabilityWaiverData,function(dataAjax){var dataResponce=dataAjax.data.responseStatusCode;if(dataResponce){if("TIMED_OUT"===dataResponce)$scope.errorMessage="TIMED OUT",warningMsg=!0;else if("INTERNAL_ERROR"===dataResponce)$scope.errorMessage="INTERNAL ERROR",warningMsg=!0;else if("CAPTCHA_ERROR"===dataResponce)$scope.errorMessage="INVALID CAPTCHA",warningMsg=!0;else if("SERVICE_ERROR"===dataResponce)$scope.errorMessage="SERVICE ERROR",warningMsg=!0;else if("SUCCESS"===dataResponce){null!==tksPageURL&&"null"!==tksPageURL?$window.location.href=tksPageURL:($scope.errorMessage="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll()),$scope.disabilityWaiverData={},commonFunctions.resetDatePicker(),angular.element("#notifier_State").text("Select state").removeAttr("data-val"),angular.element("#insured_State").text("Select state").removeAttr("data-val"),$scope.isDisabilityClicked=!1;var data_analytics={event_action:"form",event_name:"Disability Notification",event_type:"claims",event_status:"complete"};utag.link(data_analytics)}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide()}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())}),$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)}}}lfgapp.controller("disabilityWaiverContrl",disabilityWaiverContrl),disabilityWaiverContrl.$inject=["$scope","$timeout","$window","disabilityWaiverServices"]}(),function(){function drinkerBiddleContrl($scope,$window,$timeout,drinkerBiddleServices){function getCaptchaData(){angular.element("#nucaptcha-answer-enter")&&angular.element("#nucaptcha-answer-enter").val(),angular.element("#nucaptcha-answer-exit")&&angular.element("#nucaptcha-answer-exit").val(),$scope.drinkerBiddleData.gRecaptchaResponse=$("#g-recaptcha-response").val()}function getFormData(){$scope.drinkerBiddleData.formFactor=requestFormFactor,$scope.drinkerBiddleData.identity="DRINKER_BIDDLE"}function displayErr(){$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200)}function validForm(){var capchaVal,isCaptchaAvail=!1;return angular.element(".g-recaptcha").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#g-recaptcha-response").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show()),$scope.drinkerBiddleForm.$valid&&(isCaptchaAvail&&capchaVal||!isCaptchaAvail)&&!$scope.isCorrectFormat?(isCaptchaAvail&&getCaptchaData(),getFormData(),commonFunctions.loaderShow(),!0):(displayErr(),!1)}$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1;var requestFormFactor,warningMsg;utag_data.event_action="form",utag_data.event_name="Request for Drinker Biddle White Papers",utag_data.event_type="request",utag_data.event_status="start",$(document).on("responsive:statechanged",function(e,param){requestFormFactor=param}),angular.element(".nucaptcha-answer-error").hide(),angular.element("*").removeClass("none"),commonFunctions.loaderHide(),$scope.drinkerBiddlePhoneNum=function(evt,inputValue,name){if(void 0===inputValue)return"";$scope.drinkerBiddleData[name]=inputValue.replace(/[^0-9-]/g,"");var patt=/^(\d{3}\-\d{3}-\d{4})$/;if($scope.isCorrectFormat=!patt.test($scope.drinkerBiddleData[name]),3===$scope.drinkerBiddleData[name].length&&8!==evt.keyCode?($scope.drinkerBiddleData[name]=inputValue.replace(/[^0-9]/g,""),$scope.drinkerBiddleData[name]=$scope.drinkerBiddleData[name].replace(/(\d{3})/,"$1-")):7===$scope.drinkerBiddleData[name].length&&8!==evt.keyCode?($scope.drinkerBiddleData[name]=inputValue.replace(/[^0-9]/g,""),$scope.drinkerBiddleData[name]=$scope.drinkerBiddleData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.drinkerBiddleData[name].length?($scope.drinkerBiddleData[name]=inputValue.replace(/[^0-9]/g,""),$scope.drinkerBiddleData[name]=$scope.drinkerBiddleData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.drinkerBiddleData[name].length&&($scope.drinkerBiddleData[name]=$scope.drinkerBiddleData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectFormat&&$scope.drinkerBiddleData[name].length>=12){var str=$scope.drinkerBiddleData[name];$scope.drinkerBiddleData[name]=str.slice(0,12),$scope.isCorrectFormat=!1}},angular.extend($scope,{isDrinkerSubmit:!1,drinkerBiddleData:{}}),$scope.clickDrinkerSubmit=function(){$scope.isDrinkerSubmit=!0,validForm()&&drinkerBiddleServices.drinkerBiddlePost($scope,$scope.drinkerBiddleData,function(dataAjax){var dataResponce=dataAjax.data.responseStatusCode;if(dataResponce){if($scope.isSuccess=!0,"TIMED_OUT"===dataResponce)$scope.errorMsg="TIMED OUT",warningMsg=!0,$scope.isDrinkerSubmit=!0;else if("INTERNAL_ERROR"===dataResponce)$scope.errorMsg="INTERNAL ERROR",warningMsg=!0,$scope.isDrinkerSubmit=!0;else if("CAPTCHA_ERROR"===dataResponce)$scope.errorMsg="INVALID CAPTCHA",warningMsg=!0,$scope.isDrinkerSubmit=!0;else if("SERVICE_ERROR"===dataResponce)$scope.errorMsg="SERVICE ERROR",warningMsg=!0,$scope.isDrinkerSubmit=!0;else if("SUCCESS"===dataResponce){null!==tksPageURL&&"null"!==tksPageURL?($scope.isSuccess=!1,$window.location.href=tksPageURL):($scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll(),angular.element("#nucaptcha-answer").val(""),$scope.isDrinkerSubmit=!1),$scope.drinkerBiddleData={};var data={event_action:"form",event_name:"Request for Drinker Biddle White Papers",event_type:"request",event_status:"complete"};utag.link(data)}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide()}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())}),$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)}}}lfgapp.controller("drinkerBiddleContrl",drinkerBiddleContrl),drinkerBiddleContrl.$inject=["$scope","$window","$timeout","drinkerBiddleServices"]}(),function(){function requestInfoContrl($scope,$timeout,requestInfoServices,$window){function isTwoZipCode(name,booleanValue){"zipCode"===name&&($scope.isCorrectZipFormat=booleanValue)}function getCaptchaData(){var nucaptchaAnsEntr,nucaptchaAnsExt;nucaptchaAnsEntr=angular.element("#nucaptcha-answer-enter")?angular.element("#nucaptcha-answer-enter").val():"",nucaptchaAnsExt=angular.element("#nucaptcha-answer-exit")?angular.element("#nucaptcha-answer-exit").val():"",$scope.requestInfoData["nucaptcha-epd"]=angular.element("#nucaptcha-epd").val(),$scope.requestInfoData["nucaptcha-answer"]=angular.element("#nucaptcha-answer").val(),$scope.requestInfoData["nucaptcha-answer-enter"]=nucaptchaAnsEntr,$scope.requestInfoData["nucaptcha-answer-exit"]=nucaptchaAnsExt,$scope.requestInfoData.lmsubmitted=angular.element("#lmsubmitted").val(),$scope.requestInfoData["nucaptcha-index"]=angular.element("#nucaptcha-index").val(),$scope.requestInfoData["nucaptcha-datatype"]=angular.element("#nucaptcha-datatype").val(),$scope.requestInfoData["nucaptcha-ptype"]=angular.element("#nucaptcha-ptype").val(),$scope.requestInfoData["nucaptcha-language"]=angular.element("#nucaptcha-language").val(),$scope.requestInfoData["nucaptcha-region"]=angular.element("#nucaptcha-region").val(),$scope.requestInfoData["nucaptcha-media-download-time"]="",$scope.requestInfoData["nucaptcha-adserv-download-time"]="",$scope.requestInfoData["nucaptcha-fallback-token"]=""}function getFormData(){$scope.requestInfoData.formFactor=requestFormFactor,$scope.requestInfoData.identity="REQUEST_MORE_INFO",$scope.requestInfoData.state=angular.element("#contactState").text(),$scope.requestInfoData.timeEarliestAvail=commonRequest.checkOptionalDropData(angular.element("#contactEarliest").text()),$scope.requestInfoData.timeLastestAvail=commonRequest.checkOptionalDropData(angular.element("#contactLatest").text()),$scope.requestInfoData.hearAboutUs=commonRequest.checkOptionalDropData(angular.element("#hearAbout").text()),$scope.requestInfoData.incomeRange=commonRequest.checkOptionalDropData(angular.element("#incomeRange").text()),$scope.requestInfoData.annualRevenue=commonRequest.checkOptionalDropData(angular.element("#annualRevenue").text()),$scope.requestInfoData.numberEmployees=commonRequest.checkOptionalDropData(angular.element("#howManyEmp").text()),$scope.requestInfoData.middleInitial=commonRequest.checkData($scope.requestInfoData.middleInitial),$scope.requestInfoData.businessName=commonRequest.checkData($scope.requestInfoData.businessName),$scope.requestInfoData.addressLine2=commonRequest.checkData($scope.requestInfoData.addressLine2),$scope.requestInfoData.fax=commonRequest.checkData($scope.requestInfoData.fax),$scope.requestInfoData.weekdays=commonRequest.checkData($scope.requestInfoData.weekdays),$scope.requestInfoData.weekends=commonRequest.checkData($scope.requestInfoData.weekends),$scope.requestInfoData.personalPlanning=commonRequest.checkData($scope.requestInfoData.personalPlanning),$scope.requestInfoData.businessPlanning=commonRequest.checkData($scope.requestInfoData.businessPlanning),$scope.requestInfoData.businessType=commonRequest.checkData($scope.requestInfoData.businessType),$scope.requestInfoData.employmentStatus=commonRequest.checkData($scope.requestInfoData.employmentStatus),$scope.requestInfoData.annuities=commonRequest.checkData($scope.requestInfoData.annuities),$scope.requestInfoData.financialPlanning=commonRequest.checkData($scope.requestInfoData.financialPlanning),$scope.requestInfoData.lifeInsurance=commonRequest.checkData($scope.requestInfoData.lifeInsurance),$scope.requestInfoData.investments=commonRequest.checkData($scope.requestInfoData.investments),$scope.requestInfoData.pensionRetirement=commonRequest.checkData($scope.requestInfoData.pensionRetirement),$scope.requestInfoData.collegeInvestment=commonRequest.checkData($scope.requestInfoData.collegeInvestment),$scope.requestInfoData.longTermExpense=commonRequest.checkData($scope.requestInfoData.longTermExpense),$scope.requestInfoData.wealthAccumulation=commonRequest.checkData($scope.requestInfoData.wealthAccumulation),$scope.requestInfoData.estateConservation=commonRequest.checkData($scope.requestInfoData.estateConservation),$scope.requestInfoData.definedBenefitProgram=commonRequest.checkData($scope.requestInfoData.definedBenefitProgram),$scope.requestInfoData.definedContributionProgram=commonRequest.checkData($scope.requestInfoData.definedContributionProgram),$scope.requestInfoData.groupInsurance=commonRequest.checkData($scope.requestInfoData.groupInsurance),$scope.requestInfoData.executiveCompensation=commonRequest.checkData($scope.requestInfoData.executiveCompensation),$scope.requestInfoData.payrollDeduction=commonRequest.checkData($scope.requestInfoData.payrollDeduction),$scope.requestInfoData.financialPlanningBus=commonRequest.checkData($scope.requestInfoData.financialPlanningBus),$scope.requestInfoData.businessSuccessionPlanning=commonRequest.checkData($scope.requestInfoData.businessSuccessionPlanning),$scope.requestInfoData.existingCustomerInformation="Yes"===$scope.requestInfoData.existingCustomer?commonRequest.checkData($scope.requestInfoData.existingCustomerInformation):""}function displayErr(){$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$scope.validationErrorShow=!0,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200)}function validForm(){var capchaVal,isCaptchaAvail=!1
;return angular.element(".nucaptch-wrapper").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#nucaptcha-answer").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show()),!$scope.request_info_form.$valid||$scope.stateFlag||$scope.earliestFlag||$scope.latestFlag||$scope.hearAboutFlag||!(isCaptchaAvail&&capchaVal||!isCaptchaAvail)||$scope.isCorrectFormat||$scope.isCorrectZipFormat?(displayErr(),!1):(isCaptchaAvail&&getCaptchaData(),getFormData(),commonFunctions.loaderShow(),$scope.validationErrorShow=!1,!0)}utag_data.event_action="form",utag_data.event_name="Find a Financial Advisor",utag_data.event_type="contact",utag_data.event_status="start";var requestFormFactor,commonRequest,warningMsg;$(document).on("responsive:statechanged",function(e,param){requestFormFactor=param}),$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,angular.element(".nucaptcha-answer-error").hide(),angular.element("*").removeClass("none get-sartedform-default-hidden"),commonFunctions.loaderHide(),angular.element("ul.custom-selectbox-list-cont li").on("click",function(){$timeout(function(){commonRequest.checkDropValidation()},200)}),commonRequest=function(){var dropValue,commonRequestModule={};return commonRequestModule.dropDownValidation=function(id,flagName,value){dropValue=angular.element("#"+id).text(),$scope[flagName]=dropValue===value},commonRequestModule.checkData=function(data){return data=data||""},commonRequestModule.checkOptionalDropData=function(data){return"Select One"===data?"":data},commonRequestModule.checkDropValidation=function(){commonRequestModule.dropDownValidation("contactState","stateFlag","Select state"),commonRequestModule.dropDownValidation("contactEarliest","earliestFlag","Select One"),commonRequestModule.dropDownValidation("contactLatest","latestFlag","Select One"),commonRequestModule.dropDownValidation("hearAbout","hearAboutFlag","Select One")},commonRequestModule}(),$scope.requestInfoPhoneNum=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.requestInfoData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if($scope.isCorrectFormat=!patt.test($scope.requestInfoData[name]),3===$scope.requestInfoData[name].length&&8!==evt.keyCode?($scope.requestInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})/,"$1-")):7===$scope.requestInfoData[name].length&&8!==evt.keyCode?($scope.requestInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.requestInfoData[name].length?($scope.requestInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.requestInfoData[name].length&&($scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectFormat&&$scope.requestInfoData[name].length>=12){var str=$scope.requestInfoData[name];$scope.requestInfoData[name]=str.slice(0,12),$scope.isCorrectFormat=!1}}else if("zip"===zipOrPhone)if(5===$scope.requestInfoData[name].length)$scope.requestInfoData[name]=inputValue.replace(/[^0-9-]/g,""),109!==evt.keyCode&&189!==evt.keyCode||($scope.requestInfoData[name]=$scope.requestInfoData[name]+"-"),isTwoZipCode(name,!1);else if($scope.requestInfoData[name].length>5&&$scope.requestInfoData[name].length<=10)if(new RegExp("-").test($scope.requestInfoData[name]))if(10===$scope.requestInfoData[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"zipCode"===name&&($scope.isCorrectZipFormat=!pattZip.test($scope.requestInfoData[name]))}else isTwoZipCode(name,!0);else 9===$scope.requestInfoData[name].length?(109!==evt.keyCode&&189!==evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},angular.extend($scope,{isRequestInfoClicked:!1,requestInfoData:{},stateFlag:!0,earliestFlag:!0,latestFlag:!0,hearAboutFlag:!0,validationErrorShow:!1}),$scope.submitRequest=function(){commonRequest.checkDropValidation(),$scope.isRequestInfoClicked=!0,validForm()&&requestInfoServices.requestInfoPost($scope,$scope.requestInfoData,function(dataAjax){var dataResponce=dataAjax.data.responseStatusCode;if(dataResponce){if($scope.isSuccess=!0,"TIMED_OUT"===dataResponce)$scope.errorMsg="TIMED OUT",warningMsg=!0;else if("INTERNAL_ERROR"===dataResponce)$scope.errorMsg="INTERNAL ERROR",warningMsg=!0;else if("CAPTCHA_ERROR"===dataResponce)$scope.errorMsg="INVALID CAPTCHA",warningMsg=!0;else if("SERVICE_ERROR"===dataResponce)$scope.errorMsg="SERVICE ERROR",warningMsg=!0;else if("SUCCESS"===dataResponce){null!==tksPageURL&&"null"!==tksPageURL?($scope.isSuccess=!1,$window.location.href=tksPageURL):($scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll(),angular.element("#nucaptcha-answer").val("")),$scope.requestInfoData={},angular.element("#contactState").text("Select state").removeAttr("data-val"),angular.element("#contactEarliest, #contactLatest, #hearAbout, #annualRevenue, #howManyEmp, #incomeRange").text("Select one").removeAttr("data-val"),$scope.isRequestInfoClicked=!1;var data={event_action:"form",event_name:"Find a Financial Advisor",event_type:"contact",event_status:"complete"};utag.link(data)}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide()}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())}),$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)}}}lfgapp.controller("requestInfoContrl",requestInfoContrl),requestInfoContrl.$inject=["$scope","$timeout","requestInfoServices","$window"]}(),function(){function requestInfoEmployerContrl($scope,$timeout,requestInfoServices,$window){function isTwoZipCode(name,booleanValue){"zipCode"===name&&($scope.isCorrectZipFormat=booleanValue)}function getCaptchaData(){angular.element("#nucaptcha-answer-enter")&&angular.element("#nucaptcha-answer-enter").val(),angular.element("#nucaptcha-answer-exit")&&angular.element("#nucaptcha-answer-exit").val(),$scope.requestInfoData.gRecaptchaResponse=$("#g-recaptcha-response").val()}function getFormData(){$scope.requestInfoData.formFactor=requestFormFactor,$scope.requestInfoData.identity="FIND_AN_ADVISOR_EMPLOYER",$scope.requestInfoData.businessName=commonRequest.checkData($scope.requestInfoData.businessName),$scope.requestInfoData.firstName=commonRequest.checkData($scope.requestInfoData.firstName),$scope.requestInfoData.middleInitial=commonRequest.checkData($scope.requestInfoData.middleInitial),$scope.requestInfoData.lastName=commonRequest.checkData($scope.requestInfoData.lastName),$scope.requestInfoData.email=commonRequest.checkData($scope.requestInfoData.email),$scope.requestInfoData.emailConfirmation=commonRequest.checkData($scope.requestInfoData.emailConfirmation),$scope.requestInfoData.address=commonRequest.checkData($scope.requestInfoData.address),$scope.requestInfoData.addressLine2=commonRequest.checkData($scope.requestInfoData.addressLine2),$scope.requestInfoData.city=commonRequest.checkData($scope.requestInfoData.city),$scope.requestInfoData.state=angular.element("#contactState").text(),$scope.requestInfoData.zipCode=commonRequest.checkData($scope.requestInfoData.zipCode),$scope.requestInfoData.phone=commonRequest.checkData($scope.requestInfoData.phone),$scope.requestInfoData.phoneOptional=commonRequest.checkData($scope.requestInfoData.phoneOptional),$scope.requestInfoData.haveProduct=$scope.requestInfoData.haveProduct,$scope.requestInfoData.industryType=$scope.requestInfoData.industryType,$scope.requestInfoData.noOfEmp=angular.element("#noOfEmp").text(),$scope.requestInfoData.annualContribution=angular.element("#annualContribution").text(),$scope.requestInfoData.lncPrivacyNotice=$scope.requestInfoData.lncPrivacyNotice,$scope.requestInfoData.pageURL=utag.data.page_referring_url,$scope.requestInfoData.usessionid=utag.data["cp.s_vi"],setInfoList()}function displayErr(){$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$scope.validationErrorShow=!0,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200)}function validForm(){var capchaVal,isCaptchaAvail=!1;return angular.element(".g-recaptcha").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#g-recaptcha-response").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show()),!$scope.request_info_employer.$valid||$scope.stateFlag||$scope.noOfEmpFlag||!(isCaptchaAvail&&capchaVal||!isCaptchaAvail)||$scope.isCorrectFormat||$scope.isCorrectZipFormat||$scope.requestInfoData.email!==$scope.requestInfoData.emailConfirmation||!isInformationSelected?(displayErr(),!1):(isCaptchaAvail&&getCaptchaData(),getFormData(),commonFunctions.loaderShow(),$scope.validationErrorShow=!1,!0)}$scope.isRequestInfoEmployerClicked=!1,$scope.isFirstClick=!0;var isInformationSelected=!1;$scope.infoList={infoObj:{},addInfo:function(key,value){this.infoObj[key]?delete this.infoObj[key]:this.infoObj[key]=value},isEmpty:function(){return 0===Object.getOwnPropertyNames(this.infoObj).length}},$scope.isEmailValid=!1,$scope.validateEmail=function(emailValue){var EMAIL_REGEXP=/^[_a-z0-9]+(\.[_a-z0-9]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/;return"none"===emailValue||EMAIL_REGEXP.test(emailValue)?($scope.isEmailValid=!0,!0):($scope.isEmailValid=!1,!1)};var requestFormFactor,commonRequest,warningMsg;$(document).on("responsive:statechanged",function(e,param){requestFormFactor=param}),$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,angular.element(".nucaptcha-answer-error").hide(),angular.element("*").removeClass("none get-sartedform-default-hidden"),commonFunctions.loaderHide(),angular.element("ul.custom-selectbox-list-cont li").on("click",function(){$timeout(function(){commonRequest.checkDropValidation()},200)}),commonRequest=function(){var dropValue,commonRequestModule={};return commonRequestModule.dropDownValidation=function(id,flagName,value){dropValue=angular.element("#"+id).text(),$scope[flagName]=dropValue===value},commonRequestModule.checkData=function(data){return data=data||""},commonRequestModule.checkOptionalDropData=function(data){return"Select One"===data?"":data},commonRequestModule.checkDropValidation=function(){commonRequestModule.dropDownValidation("contactState","stateFlag","Select State"),commonRequestModule.dropDownValidation("noOfEmp","noOfEmpFlag","Number of employees")},commonRequestModule}(),$scope.onFocusAnalytics=function(){if($scope.isFirstClick){$scope.isFirstClick=!1;var data={event_action:"form",event_name:"Find a Financial Advisor – Employer",event_version:"1",event_type:"contact",event_status:"start"};utag.link(data)}},$scope.numberFormat=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.requestInfoData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if($scope.isCorrectFormat=!patt.test($scope.requestInfoData[name]),3===$scope.requestInfoData[name].length&&8!==evt.keyCode?($scope.requestInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})/,"$1-")):7===$scope.requestInfoData[name].length&&8!==evt.keyCode?($scope.requestInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.requestInfoData[name].length?($scope.requestInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.requestInfoData[name].length&&($scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectFormat&&$scope.requestInfoData[name].length>=12){var str=$scope.requestInfoData[name];$scope.requestInfoData[name]=str.slice(0,12),$scope.isCorrectFormat=!1}}else if("zip"===zipOrPhone)if(5===$scope.requestInfoData[name].length)$scope.requestInfoData[name]=inputValue.replace(/[^0-9-]/g,""),109!==evt.keyCode&&189!==evt.keyCode||($scope.requestInfoData[name]=$scope.requestInfoData[name]+"-"),isTwoZipCode(name,!1);else if($scope.requestInfoData[name].length>5&&$scope.requestInfoData[name].length<=10)if(new RegExp("-").test($scope.requestInfoData[name]))if(10===$scope.requestInfoData[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"zipCode"===name&&($scope.isCorrectZipFormat=!pattZip.test($scope.requestInfoData[name]))}else isTwoZipCode(name,!0);else 9===$scope.requestInfoData[name].length?(109!==evt.keyCode&&189!==evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},angular.extend($scope,{isRequestInfoEmployerClicked:!1,requestInfoData:{},infoOpn:{},stateFlag:!0,annualContributionFlag:!0,noOfEmpFlag:!0,validationErrorShow:!1});var needInfoList=[],setInfoList=function(){angular.forEach($scope.infoList.infoObj,function(value,key){$scope.requestInfoData[key]=commonRequest.checkData($scope.infoList.infoObj[key]),""!==$scope.infoList.infoObj[key]&&($scope.infoList.infoObj[key].indexOf("(")>0?needInfoList.push($scope.infoList.infoObj[key].substring(0,$scope.infoList.infoObj[key].indexOf("("))):needInfoList.push($scope.infoList.infoObj[key]))})};$scope.submitRequest=function(){commonRequest.checkDropValidation(),$scope.isRequestInfoEmployerClicked=!0,isInformationSelected=Object.getOwnPropertyNames($scope.infoList.infoObj).length>0,$scope.validateEmail($scope.requestInfoData.email),validForm()&&requestInfoServices.requestInfoPost($scope,$scope.requestInfoData,function(dataAjax){var dataResponce=dataAjax.data.responseStatusCode;if(dataResponce){if($scope.isSuccess=!0,"TIMED_OUT"===dataResponce)$scope.errorMsg="TIMED OUT",warningMsg=!0;else if("INTERNAL_ERROR"===dataResponce)$scope.errorMsg="INTERNAL ERROR",warningMsg=!0;else if("CAPTCHA_ERROR"===dataResponce)$scope.errorMsg="INVALID CAPTCHA",warningMsg=!0;else if("SERVICE_ERROR"===dataResponce)$scope.errorMsg="SERVICE ERROR",warningMsg=!0;else if("SUCCESS"===dataResponce){null!==tksPageURL&&"null"!==tksPageURL?($scope.isSuccess=!1,$window.location.href=tksPageURL):($scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll(),angular.element("#nucaptcha-answer").val("")),angular.element("#contactState").text("Select State").removeAttr("data-val"),angular.element("#annualContribution").text("Annual contribution").removeAttr("data-val"),angular.element("#noOfEmp").text("Number of employees").removeAttr("data-val"),$scope.isRequestInfoEmployerClicked=!1,$scope.isFirstClick=!0;var data={event_action:"form",event_name:"Find a Financial Advisor – Employer",event_version:"1",event_type:"contact",event_status:"complete",form_zipcode:$scope.requestInfoData.zipCode,form_yesno:"Yes"===$scope.requestInfoData.haveProduct?"1":"No"===$scope.requestInfoData.haveProduct?"2":"0",form_mc:needInfoList.join(",")};utag.link(data),$scope.requestInfoData={},$scope.infoOpt={},$scope.infoList.infoObj={}}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide()}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())}),$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)}}}lfgapp.controller("requestInfoEmployerContrl",requestInfoEmployerContrl),requestInfoEmployerContrl.$inject=["$scope","$timeout","requestInfoServices","$window"]}(),function(){function requestInfoUpdateContrl($scope,$timeout,requestInfoServices,$window){function isTwoZipCode(name,booleanValue){"zipCode"===name&&($scope.isCorrectZipFormat=booleanValue)}function getCaptchaData(){angular.element("#nucaptcha-answer-enter")&&angular.element("#nucaptcha-answer-enter").val(),angular.element("#nucaptcha-answer-exit")&&angular.element("#nucaptcha-answer-exit").val(),$scope.requestInfoData.gRecaptchaResponse=$("#g-recaptcha-response").val()}function getFormData(){$scope.requestInfoData.formFactor=requestFormFactor,$scope.requestInfoData.identity="FIND_AN_ADVISOR",$scope.requestInfoData.firstName=commonRequest.checkData($scope.requestInfoData.firstName),$scope.requestInfoData.middleInitial=commonRequest.checkData($scope.requestInfoData.middleInitial),$scope.requestInfoData.lastName=commonRequest.checkData($scope.requestInfoData.lastName),$scope.requestInfoData.email=commonRequest.checkData($scope.requestInfoData.email),$scope.requestInfoData.emailConfirmation=commonRequest.checkData($scope.requestInfoData.emailConfirmation),$scope.requestInfoData.address=commonRequest.checkData($scope.requestInfoData.address),$scope.requestInfoData.addressLine2=commonRequest.checkData($scope.requestInfoData.addressLine2),$scope.requestInfoData.city=commonRequest.checkData($scope.requestInfoData.city),$scope.requestInfoData.state=angular.element("#contactState").text(),$scope.requestInfoData.zipCode=commonRequest.checkData($scope.requestInfoData.zipCode),$scope.requestInfoData.phone=commonRequest.checkData($scope.requestInfoData.phone),$scope.requestInfoData.phoneOptional=commonRequest.checkData($scope.requestInfoData.phoneOptional),$scope.requestInfoData.contactTime=angular.element("#contactTime").text(),$scope.requestInfoData.haveProduct=$scope.requestInfoData.haveProduct,$scope.requestInfoData.lncPrivacyNotice=$scope.requestInfoData.lncPrivacyNotice,$scope.requestInfoData.pageURL=utag.data.page_referring_url,$scope.requestInfoData.usessionid=utag.data["cp.s_vi"],setGoals()}function displayErr(){$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$scope.validationErrorShow=!0,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200)}function validForm(){var capchaVal,isCaptchaAvail=!1;angular.element(".g-recaptcha").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#g-recaptcha-response").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show());var isGoalsSelected=Object.getOwnPropertyNames($scope.goals.goalsList).length>0;return!$scope.request_info_update.$valid||$scope.stateFlag||$scope.bestTime||!(isCaptchaAvail&&capchaVal||!isCaptchaAvail)||$scope.isCorrectFormat||$scope.isCorrectZipFormat||$scope.requestInfoData.email!==$scope.requestInfoData.emailConfirmation||!isGoalsSelected?(displayErr(),!1):(isCaptchaAvail&&getCaptchaData(),getFormData(),commonFunctions.loaderShow(),$scope.validationErrorShow=!1,!0)}$scope.isRequestInfoUpdateClicked=!1,$scope.isFirstClick=!0,$scope.isEmailValid=!1,$scope.validateEmail=function(emailValue){var EMAIL_REGEXP=/^[_a-z0-9]+(\.[_a-z0-9]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/;return"none"===emailValue||EMAIL_REGEXP.test(emailValue)?($scope.isEmailValid=!0,!0):($scope.isEmailValid=!1,!1)};var requestFormFactor,commonRequest,warningMsg;$(document).on("responsive:statechanged",function(e,param){requestFormFactor=param}),$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,angular.element(".nucaptcha-answer-error").hide(),angular.element("*").removeClass("none get-sartedform-default-hidden"),commonFunctions.loaderHide(),angular.element("ul.custom-selectbox-list-cont li").on("click",function(){$timeout(function(){commonRequest.checkDropValidation()},200)}),$scope.faaInit=function(){if(void 0!==sessionStorage.getItem("faaContact")&&null!==sessionStorage.getItem("faaContact")){var faaContact=JSON.parse(sessionStorage.getItem("faaContact"));$scope.requestInfoData.firstName=faaContact.firstName,$scope.requestInfoData.phone=faaContact.phoneNo,sessionStorage.removeItem("faaContact")}},commonRequest=function(){var dropValue,commonRequestModule={};return commonRequestModule.dropDownValidation=function(id,flagName,value){dropValue=angular.element("#"+id).text(),$scope[flagName]=dropValue===value},commonRequestModule.checkData=function(data){return data=data||""},commonRequestModule.checkOptionalDropData=function(data){return"Select One"===data?"":data},commonRequestModule.checkDropValidation=function(){commonRequestModule.dropDownValidation("contactState","stateFlag","Select State"),commonRequestModule.dropDownValidation("contactTime","bestTime","The best time to call me is")},commonRequestModule}(),$scope.onFocusAnalytics=function(){if($scope.isFirstClick){$scope.isFirstClick=!1;var data={event_action:"form",event_name:"Find a Financial Advisor",event_version:"2",event_type:"contact",event_status:"start"};utag.link(data)}},$scope.goals={goalsList:{},updateGoal:function(key,value){this.goalsList[key]?delete this.goalsList[key]:this.goalsList[key]=value},isEmpty:function(){return 0===Object.getOwnPropertyNames(this.goalsList).length}},$scope.numberFormat=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.requestInfoData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if($scope.isCorrectFormat=!patt.test($scope.requestInfoData[name]),3===$scope.requestInfoData[name].length&&8!==evt.keyCode?($scope.requestInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})/,"$1-")):7===$scope.requestInfoData[name].length&&8!==evt.keyCode?($scope.requestInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.requestInfoData[name].length?($scope.requestInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.requestInfoData[name].length&&($scope.requestInfoData[name]=$scope.requestInfoData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectFormat&&$scope.requestInfoData[name].length>=12){var str=$scope.requestInfoData[name];$scope.requestInfoData[name]=str.slice(0,12),$scope.isCorrectFormat=!1}}else if("zip"===zipOrPhone)if(5===$scope.requestInfoData[name].length)$scope.requestInfoData[name]=inputValue.replace(/[^0-9-]/g,""),109!==evt.keyCode&&189!==evt.keyCode||($scope.requestInfoData[name]=$scope.requestInfoData[name]+"-"),isTwoZipCode(name,!1);else if($scope.requestInfoData[name].length>5&&$scope.requestInfoData[name].length<=10)if(new RegExp("-").test($scope.requestInfoData[name]))if(10===$scope.requestInfoData[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"zipCode"===name&&($scope.isCorrectZipFormat=!pattZip.test($scope.requestInfoData[name]))}else isTwoZipCode(name,!0);else 9===$scope.requestInfoData[name].length?(109!==evt.keyCode&&189!==evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},angular.extend($scope,{isRequestInfoUpdateClicked:!1,requestInfoData:{},goal:{},stateFlag:!0,bestTime:!0,validationErrorShow:!1});var selectedGoals=[],setGoals=function(){angular.forEach($scope.goals.goalsList,function(value,key){$scope.requestInfoData[key]=commonRequest.checkData($scope.goals.goalsList[key]),""!==$scope.goals.goalsList[key]&&selectedGoals.push($scope.goals.goalsList[key])})};angular.extend($scope,{submitRequest:function(){commonRequest.checkDropValidation(),$scope.isRequestInfoUpdateClicked=!0,$scope.validateEmail($scope.requestInfoData.email),validForm()&&requestInfoServices.requestInfoPost($scope,$scope.requestInfoData,function(dataAjax){var dataResponce=dataAjax.data.responseStatusCode;if(dataResponce){if($scope.isSuccess=!0,"TIMED_OUT"===dataResponce)$scope.errorMsg="TIMED OUT",warningMsg=!0;else if("INTERNAL_ERROR"===dataResponce)$scope.errorMsg="INTERNAL ERROR",warningMsg=!0;else if("CAPTCHA_ERROR"===dataResponce)$scope.errorMsg="INVALID CAPTCHA",warningMsg=!0;else if("SERVICE_ERROR"===dataResponce)$scope.errorMsg="SERVICE ERROR",warningMsg=!0;else if("SUCCESS"===dataResponce){null!==tksPageURL&&"null"!==tksPageURL?($scope.isSuccess=!1,$window.location.href=tksPageURL):($scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll(),angular.element("#nucaptcha-answer").val("")),angular.element("#contactState").text("Select State").removeAttr("data-val"),angular.element("#contactEarliest, #contactLatest, #hearAbout, #annualRevenue, #howManyEmp, #incomeRange").text("Select one").removeAttr("data-val"),$scope.isRequestInfoUpdateClicked=!1,$scope.isFirstClick=!0;var data={event_action:"form",event_name:"Find a Financial Advisor",event_version:"2",event_type:"contact",event_status:"complete",form_zipcode:$scope.requestInfoData.zipCode,form_yesno:"Yes"===$scope.requestInfoData.haveProduct?"1":"No"===$scope.requestInfoData.haveProduct?"2":"0",form_mc:selectedGoals.join(",")};utag.link(data),$scope.requestInfoData={},$scope.goal={},$scope.goals.goalsList={}}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide()}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())}),$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)}}})}lfgapp.controller("requestInfoUpdateContrl",requestInfoUpdateContrl),requestInfoUpdateContrl.$inject=["$scope","$timeout","requestInfoServices","$window"]}(),lfgapp.controller("fraudReportingContl",["$scope","$http","$timeout","$window","fraudFormService",function($scope,$http,$timeout,$window,fraudFormService){function getCaptchaData(){angular.element("#nucaptcha-answer-enter")&&angular.element("#nucaptcha-answer-enter").val(),angular.element("#nucaptcha-answer-exit")&&angular.element("#nucaptcha-answer-exit").val(),$scope.fraudReportingPostData.gRecaptchaResponse=$("#g-recaptcha-response").val()}function getFormData(){$scope.fraudReportingPostData.identity="FRAUD_REPORT",$scope.fraudReportingPostData.formFactor=fraudFormFactor,$scope.fraudReportingPostData.question1=commonRequestModule.checkData($scope.fraudReportingData.personOrCompany),$scope.fraudReportingPostData.question2=commonRequestModule.checkData($scope.fraudReportingData.addressOrTelephoneNumber),$scope.fraudReportingPostData.question3=commonRequestModule.checkData($scope.fraudReportingData.additionalFraudInfo),$scope.fraudReportingPostData.question4=commonRequestModule.checkData($scope.fraudReportingData.insuranceData),$scope.fraudReportingPostData.question5=commonRequestModule.checkData($scope.fraudReportingData.policyContractAcctNo),$scope.fraudReportingPostData.question6=commonRequestModule.checkData($scope.fraudReportingData.dollarAmt),$scope.fraudReportingPostData.question7=commonRequestModule.checkData($scope.fraudReportingData.dateOfIncident),$scope.fraudReportingPostData.question8=commonRequestModule.checkData($scope.fraudReportingData.suspiciousSituation),$scope.fraudReportingPostData.question9=commonRequestModule.checkData($scope.fraudReportingData.documentProof),$scope.fraudReportingPostData.question10=commonRequestModule.checkData($scope.fraudReportingData.additionalIncidentInfo),$scope.fraudReportingPostData.question11=commonRequestModule.checkData($scope.fraudReportingData.additionalReporterInfo)}function displayErr(){$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$scope.validationErrorShow=!0}function validForm(){var capchaVal,isCaptchaAvail=!1;return angular.element(".g-recaptcha").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#g-recaptcha-response").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show()),isCaptchaAvail&&capchaVal||!isCaptchaAvail?(isCaptchaAvail&&getCaptchaData(),getFormData(),angular.element("#refresh").trigger("click"),angular.element("#preloader, .black_overlay").show(),commonFunctions.loaderShow(),!0):(displayErr(),!1)}utag_data.event_action="form",utag_data.event_name="Fraud Hotline",utag_data.event_type="fraud",utag_data.event_status="start";var fraudFormFactor,warningMsg,commonRequestModule={};$(document).on("responsive:statechanged",function(e,param){fraudFormFactor=param}),$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,commonFunctions.loaderHide(),$scope.init=function(){angular.element(".nucaptcha-answer-error").hide(),angular.element("*").removeClass("get-sartedform-default-hidden"),angular.element("#preloader, .black_overlay").hide(),$scope.fraudReportingData={},$scope.fraudReportingPostData={}},commonRequestModule.checkData=function(data){return data=data||""},$scope.submit=function(){$scope.isSubmitClicked=!0,validForm()&&fraudFormService.fraudFormPostData($scope,$scope.fraudReportingPostData,function(dataAjax){var dataRespaonce=dataAjax.data.responseStatusCode;if(dataRespaonce){if("TIMED_OUT"===dataRespaonce)$scope.errorMsg="TIMED OUT",warningMsg=!0;else if("INTERNAL_ERROR"===dataRespaonce)$scope.errorMsg="INTERNAL ERROR",warningMsg=!0;else if("CAPTCHA_ERROR"===dataRespaonce)$scope.errorMsg="INVALID CAPTCHA",warningMsg=!0;else if("SERVICE_ERROR"===dataRespaonce)$scope.errorMsg="SERVICE ERROR",warningMsg=!0;else if("SUCCESS"===dataRespaonce){null!==tksPageURL&&"null"!==tksPageURL?$window.location.href=tksPageURL:($scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll()),$scope.fraudReportingData={},$scope.fraudReportingPostData={}}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),$scope.isSuccess=!0,commonFunctions.loaderHide(),$scope.isSubmitClicked=!1}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())})},$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)}}]),lfgapp.controller("howToGetStarted",["$scope","$http","$timeout","formPostService","$window",function($scope,$http,$timeout,formPostService,$window){function validateState(){
""===angular.element(".getStartedFormDatastate").text()||"Select state"===angular.element(".getStartedFormDatastate").text()?(angular.element(".getStartedFormDatastate").addClass("c-err-box-noimg").closest(".getStarted-state-cont").find(".err-cont").show(),$scope.isValidState=!1):(angular.element(".getStartedFormDatastate").removeClass("c-err-box-noimg").closest(".getStarted-state-cont").find(".err-cont").hide(),$scope.isValidState=!0)}function validatRole(){""===backgroundInfor.currentRole?(angular.element(".role-box-item").addClass("c-err-box-radio"),$scope.isValidRole=!1):(angular.element(".role-box-item").removeClass("c-err-box-radio"),$scope.isValidRole=!0)}function validateInterest(){""===backgroundInfor.interest?(angular.element(".interest-box-item").addClass("c-err-box-radio"),$scope.isValidInterest=!1):(angular.element(".interest-box-item").removeClass("c-err-box-radio"),$scope.isValidInterest=!0)}function validateAnnualGross(){""===angular.element(".getStarted-annual-gross").text()||"Select one"===angular.element(".getStarted-annual-gross").text()?(angular.element(".getStarted-annual-gross").addClass("c-err-box-noimg").closest(".getStarted-annual-gross-cont").find(".err-cont").show(),$scope.isValidAnnualGross=!1):(angular.element(".getStarted-annual-gross").removeClass("c-err-box-noimg").closest(".getStarted-annual-gross-cont").find(".err-cont").hide(),$scope.isValidAnnualGross=!0)}function validateWebsite(){""===angular.element(".getStarted-website-by").text()||"Select one"===angular.element(".getStarted-website-by").text()?(angular.element(".getStarted-website-by").addClass("c-err-box-noimg").closest(".getStarted-website-by-cont").find(".err-cont").show(),$scope.isValidWebsite=!1):(angular.element(".getStarted-website-by").removeClass("c-err-box-noimg").closest(".getStarted-website-by-cont").find(".err-cont").hide(),$scope.isValidWebsite=!0)}function isTwoZipCode(name,booleanValue){"zip"===name&&($scope.isCorrectZipFormat=booleanValue)}function getCaptchaData(){angular.element("#nucaptcha-answer-enter")&&angular.element("#nucaptcha-answer-enter").val(),angular.element("#nucaptcha-answer-exit")&&angular.element("#nucaptcha-answer-exit").val(),$scope.getStartedFormPostData.gRecaptchaResponse=$("#g-recaptcha-response").val()}function getFormData(){$scope.getStartedFormPostData.identity="JOIN_LFN",$scope.getStartedFormPostData.formFactor=getStartedformFactor,$scope.getStartedFormPostData.firstName=$scope.getStartedFormData.firstName,$scope.getStartedFormPostData.lastName=$scope.getStartedFormData.lastName,$scope.getStartedFormPostData.address=$scope.getStartedFormData.address,$scope.getStartedFormPostData.city=$scope.getStartedFormData.city,$scope.getStartedFormPostData.state=angular.element(".getStartedFormDatastate").text(),$scope.getStartedFormPostData.zip=$scope.getStartedFormData.zip,$scope.getStartedFormPostData.email=$scope.getStartedFormData.email,$scope.getStartedFormPostData.phoneNumber=$scope.getStartedFormData.phoneNumber,$scope.getStartedFormPostData.phoneType=$scope.phone,$scope.getStartedFormPostData.backgroundInfo=[{question:"My current role is",answer:backgroundInfor.currentRole},{question:"I am interested in learning more about",answer:backgroundInfor.interest},{question:"My annual gross/dealer concessions are about",answer:angular.element(".getStarted-annual-gross").text()},{question:"I came to Lincoln Financial Network website by way of",answer:angular.element(".getStarted-website-by").text()}]}function displayErr(){$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$scope.validationErrorShow=!0,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio, .err-border").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio, .err-border").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio, .err-border").eq(0).focus()})}},200)}function validForm(){var capchaVal,isCaptchaAvail=!1;return angular.element(".g-recaptcha").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#g-recaptcha-response").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show()),validateState(),validatRole(),validateInterest(),validateAnnualGross(),validateWebsite(),$scope.getStartedForm.$valid&&$scope.isValidState&&$scope.isValidRole&&$scope.isValidInterest&&$scope.isValidAnnualGross&&$scope.isValidWebsite&&(isCaptchaAvail&&capchaVal||!isCaptchaAvail)&&!$scope.isCorrectZipFormat&&!$scope.isCorrectPhoneFormat?(isCaptchaAvail&&getCaptchaData(),getFormData(),angular.element("#refresh").trigger("click"),commonFunctions.loaderShow(),$scope.validationErrorShow=!1,!0):(displayErr(),!1)}var getStartedformFactor,warningMsg;$scope.isValidState=!1,$scope.isValidAnnualGross=!1,$scope.isValidWebsite=!1,$scope.getStartedFormPostData={},utag_data.event_action="form",utag_data.event_name="Join Lincoln Financial Network",utag_data.event_type="joinlfn",utag_data.event_status="start",$(document).on("responsive:statechanged",function(e,param){getStartedformFactor=param}),$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,angular.element(document).ready(function(){angular.element(".nucaptcha-answer-error").hide(),angular.element("*").removeClass("none get-sartedform-default-hidden"),commonFunctions.loaderHide(),angular.element(".getStarted-state-cont ul li").on("click",function(){$timeout(function(){validateState()},200)}),angular.element(".getStarted-annual-gross-cont ul li").on("click",function(){$timeout(function(){validateAnnualGross()},200)}),angular.element(".getStarted-website-by-cont ul li").on("click",function(){$timeout(function(){validateWebsite()},200)})}),jQuery("#zipMesg").addClass("ng-hide"),$scope.validateLength=function(){jQuery("#howtoGetZip").val().length<3?(jQuery("#howtoGetZip").addClass("err-border"),jQuery("#zipMesg").removeClass("ng-hide"),jQuery("#zipMesg").addClass("ng-show"),jQuery("#zipMesg").css({display:"block!important"})):(jQuery("#howtoGetZip").removeClass("err-border"),jQuery("#zipMesg").removeClass("ng-show"),jQuery("#zipMesg").addClass("ng-hide"),jQuery("#zipMesg").css({display:"none!important"}))};var backgroundInfor={currentRole:"",interest:""};$scope.isSuccess=!1,$scope.isSubmitClicked=!1,$scope.validationErrorShow=!1,$scope.unCheck=function(evt,name){"role"===name?(backgroundInfor.currentRole=evt.target.value,validatRole()):(backgroundInfor.interest=evt.target.value,validateInterest())},$scope.numberFormat=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.getStartedFormData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if("phoneNumber"===name&&($scope.isCorrectPhoneFormat=!patt.test($scope.getStartedFormData[name])),3===$scope.getStartedFormData[name].length&&8!==evt.keyCode?($scope.getStartedFormData[name]=inputValue.replace(/[^0-9]/g,""),$scope.getStartedFormData[name]=$scope.getStartedFormData[name].replace(/(\d{3})/,"$1-")):7===$scope.getStartedFormData[name].length&&8!==evt.keyCode?($scope.getStartedFormData[name]=inputValue.replace(/[^0-9]/g,""),$scope.getStartedFormData[name]=$scope.getStartedFormData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.getStartedFormData[name].length?($scope.getStartedFormData[name]=inputValue.replace(/[^0-9]/g,""),$scope.getStartedFormData[name]=$scope.getStartedFormData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.getStartedFormData[name].length&&($scope.getStartedFormData[name]=$scope.getStartedFormData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectPhoneFormat&&$scope.getStartedFormData[name].length>=12){var str=$scope.getStartedFormData[name];$scope.getStartedFormData[name]=str.slice(0,12),$scope.isCorrectPhoneFormat=!1}}else if("zip"===zipOrPhone)if(5===$scope.getStartedFormData[name].length)$scope.getStartedFormData[name]=inputValue.replace(/[^0-9-]/g,""),109!==evt.keyCode&&189!==evt.keyCode||($scope.getStartedFormData[name]=$scope.getStartedFormData[name]+"-"),isTwoZipCode(name,!1);else if($scope.getStartedFormData[name].length>5&&$scope.getStartedFormData[name].length<=10)if(new RegExp("-").test($scope.getStartedFormData[name]))if(10===$scope.getStartedFormData[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"zip"===name&&($scope.isCorrectZipFormat=!pattZip.test($scope.getStartedFormData[name]))}else isTwoZipCode(name,!0);else 9===$scope.getStartedFormData[name].length?(109!==evt.keyCode&&189!==evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},$scope.submit=function(){$scope.isSubmitClicked=!0,$scope.phone||commonFunctions.isIE(8,"lte")||angular.element("#Work").trigger("click"),validForm()&&formPostService.formPostData($scope,$scope.getStartedFormPostData,function(dataAjax){var dataRespaonce=dataAjax.data.responseStatusCode;if(dataRespaonce){if("TIMED_OUT"===dataRespaonce)$scope.errorMsg="TIMED OUT",warningMsg=!0;else if("INTERNAL_ERROR"===dataRespaonce)$scope.errorMsg="INTERNAL ERROR",warningMsg=!0;else if("CAPTCHA_ERROR"===dataRespaonce)$scope.errorMsg="INVALID CAPTCHA",warningMsg=!0;else if("SERVICE_ERROR"===dataRespaonce)$scope.errorMsg="SERVICE ERROR",warningMsg=!0;else if("SUCCESS"===dataRespaonce){null!==tksPageURL&&"null"!==tksPageURL?$window.location.href=tksPageURL:($scope.isSuccess=!0,$scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll(),angular.element("#getStarted-success-txt").removeClass("getStarted-error")),$scope.getStartedFormData={},$scope.getStartedFormPostData={},angular.element(".getStartedFormDatastate").text("Select state").removeAttr("data-val"),angular.element(".getStarted-annual-gross").text("Select one").removeAttr("data-val"),angular.element(".getStarted-website").text("Select one").removeAttr("data-val");var data={event_action:"form",event_name:"Join Lincoln Financial Network",event_type:"joinlfn",event_status:"complete"};utag.link(data)}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide(),$scope.isSubmitClicked=!1,angular.element(".lfg-radio-role input").attr("checked",!1),commonFunctions.isIE(8,"lte")||angular.element("#Work").trigger("click")}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())}),$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)}}}]),function(){function lfaStreetScapeRegFormContrl($scope,$timeout,formPostService,$window){function isTwoZipCode(name,booleanValue){"zipcode"===name&&($scope.isCorrectZipFormat=booleanValue)}$scope.validationErrorShow=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,commonFunctions.loaderHide();var warningMsg,formFactor;$scope.islfastreetScapeRegFormClicked=!1,$scope.isPrefix1Filled=!1,$scope.isAccNum1Filled=!1,$scope.watchPrefixandAccNum=function(prefixValue,accNumValue){$scope.isPrefix1Filled=prefixValue,$scope.isAccNum1Filled=accNumValue,!$scope.isPrefix1Filled&&$scope.islfastreetScapeRegFormClicked?angular.element(".accListwrapper").children().first().find('input[name="prefix"]').addClass("c-err-box"):$scope.isPrefix1Filled&&$scope.islfastreetScapeRegFormClicked&&angular.element(".accListwrapper").children().first().find('input[name="prefix"]').removeClass("c-err-box"),!$scope.isAccNum1Filled&&$scope.islfastreetScapeRegFormClicked?angular.element(".accListwrapper").children().first().find('input[name="accNum"]').addClass("c-err-box"):$scope.isAccNum1Filled&&$scope.islfastreetScapeRegFormClicked&&angular.element(".accListwrapper").children().first().find('input[name="accNum"]').removeClass("c-err-box")},$(document).on("responsive:statechanged",function(e,param){formFactor=param}),$scope.accList=[],angular.element(document).ready(function(){angular.element(".nucaptcha-answer-error").hide(),angular.element("*").removeClass("none")});var commonRequest=function(){var dropValue,commonRequestModule={};return commonRequestModule.dropDownValidation=function(id,flagName,value){dropValue=angular.element("#"+id).text(),$scope[flagName]=dropValue===value},commonRequestModule}();angular.element("ul.custom-selectbox-list-cont li").on("click",function(e){$timeout(function(){commonRequest.dropDownValidation("contactState","stateFlag","Select State")},200)}),$scope.numberFormat=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.lfaStreetScapeRegValue[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone||"fax"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if("Phonenumber"!==name&&"fax"!==name||($scope.isCorrectPhoneFormat=!patt.test($scope.lfaStreetScapeRegValue[name])),3===$scope.lfaStreetScapeRegValue[name].length&&8!==evt.keyCode?($scope.lfaStreetScapeRegValue[name]=inputValue.replace(/[^0-9]/g,""),$scope.lfaStreetScapeRegValue[name]=$scope.lfaStreetScapeRegValue[name].replace(/(\d{3})/,"$1-")):7===$scope.lfaStreetScapeRegValue[name].length&&8!==evt.keyCode?($scope.lfaStreetScapeRegValue[name]=inputValue.replace(/[^0-9]/g,""),$scope.lfaStreetScapeRegValue[name]=$scope.lfaStreetScapeRegValue[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.lfaStreetScapeRegValue[name].length?($scope.lfaStreetScapeRegValue[name]=inputValue.replace(/[^0-9]/g,""),$scope.lfaStreetScapeRegValue[name]=$scope.lfaStreetScapeRegValue[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.lfaStreetScapeRegValue[name].length&&($scope.lfaStreetScapeRegValue[name]=$scope.lfaStreetScapeRegValue[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectPhoneFormat&&$scope.lfaStreetScapeRegValue[name].length>=12){var str=$scope.lfaStreetScapeRegValue[name];$scope.lfaStreetScapeRegValue[name]=str.slice(0,12),$scope.isCorrectPhoneFormat=!1}}else if("zip"===zipOrPhone)if(5===$scope.lfaStreetScapeRegValue[name].length)$scope.lfaStreetScapeRegValue[name]=inputValue.replace(/[^0-9-]/g,""),109!==evt.keyCode&&189!==evt.keyCode||($scope.lfaStreetScapeRegValue[name]=$scope.lfaStreetScapeRegValue[name]+"-"),isTwoZipCode(name,!1);else if($scope.lfaStreetScapeRegValue[name].length>5&&$scope.lfaStreetScapeRegValue[name].length<=10)if(new RegExp("-").test($scope.lfaStreetScapeRegValue[name]))if(10===$scope.lfaStreetScapeRegValue[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"zipcode"===name&&($scope.isCorrectZipFormat=!pattZip.test($scope.lfaStreetScapeRegValue[name]))}else isTwoZipCode(name,!0);else 9===$scope.lfaStreetScapeRegValue[name].length?(109!==evt.keyCode&&189!==evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},angular.extend($scope,{islfastreetScapeRegFormClicked:!1,lfaStreetScapeRegValue:{},validationErrorShow:!1,stateFlag:!0}),angular.extend($scope,{lfaStreetScapeFormSubmit:function(){$scope.islfastreetScapeRegFormClicked=!0,$scope.isPrefix1Filled||angular.element(".accListwrapper").children().first().find('input[name="prefix"]').addClass("c-err-box"),$scope.isPrefix1Filled||angular.element(".accListwrapper").children().first().find('input[name="accNum"]').addClass("c-err-box");var capchaVal=angular.element("#g-recaptcha-response").val();if(capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show(),commonRequest.dropDownValidation("contactState","stateFlag","Select State"),$scope.lfaregsiterform.$valid&&!$scope.isCorrectPhoneFormat&&!$scope.isCorrectZipFormat&&(angular.element("#g-recaptcha").length<=0||capchaVal)&&!$scope.stateFlag&&$scope.isPrefix1Filled&&$scope.isAccNum1Filled){commonFunctions.loaderShow(),$scope.validationErrorShow=!1;angular.element("#nucaptcha-answer-enter")?angular.element("#nucaptcha-answer-enter").val():"",angular.element("#nucaptcha-answer-exit")?angular.element("#nucaptcha-answer-exit").val():"";var lfaStreeScapevalue={identity:"LFA_REGISTER_MYSTREETSCAPE",formFactory:formFactor,portfolioInclude:void 0!==$scope.lfaStreetScapeRegValue.portfolio&&$scope.lfaStreetScapeRegValue.portfolio,taxSetup:void 0!==$scope.lfaStreetScapeRegValue.taxSetup&&$scope.lfaStreetScapeRegValue.taxSetup,instituteSetup:void 0!==$scope.lfaStreetScapeRegValue.instituteSetup&&$scope.lfaStreetScapeRegValue.instituteSetup,entityOrInstitutionalName:$scope.lfaStreetScapeRegValue.Entityvalue,firstName:$scope.lfaStreetScapeRegValue.firstName,middleName:$scope.lfaStreetScapeRegValue.middleName,lastName:$scope.lfaStreetScapeRegValue.lastName,addressLine1:$scope.lfaStreetScapeRegValue.addressLine1,addressLine2:$scope.lfaStreetScapeRegValue.addressLine2,city:$scope.lfaStreetScapeRegValue.city,state:angular.element(".lfaSignupState").text(),zipCode:$scope.lfaStreetScapeRegValue.zipcode,phone:$scope.lfaStreetScapeRegValue.Phonenumber,email:$scope.lfaStreetScapeRegValue.emailId,fax:$scope.lfaStreetScapeRegValue.fax,accList:$scope.accList,gRecaptchaResponse:angular.element("#g-recaptcha-response").val()};formPostService.formPostData($scope,lfaStreeScapevalue,function(dataAjax){var dataResponce=dataAjax.data.responseStatusCode;dataResponce&&($scope.isSuccess=!0,"TIMED_OUT"===dataResponce?($scope.errorMsg="TIMED OUT",warningMsg=!0):"INTERNAL_ERROR"===dataResponce?($scope.errorMsg="INTERNAL ERROR",warningMsg=!0):"CAPTCHA_ERROR"===dataResponce?($scope.errorMsg="INVALID CAPTCHA",warningMsg=!0):"SERVICE_ERROR"===dataResponce?($scope.errorMsg="SERVICE ERROR",warningMsg=!0):"SUCCESS"===dataResponce&&(null!==tksPageURL&&"null"!==tksPageURL?($scope.isSuccess=!1,$window.location.href=tksPageURL):($scope.isSuccess=!0,$scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.accList=[],angular.element(".lfaSignupState").text("Select State").removeAttr("data-val"),angular.element(".se-box-new-input").val(""),$scope.isPrefix1Filled=!1,$scope.isAccNum1Filled=!1,angular.element(".accListwrapper").children().first().find('input[name="prefix"]').removeClass("c-err-box"),angular.element(".accListwrapper").children().first().find('input[name="accNum"]').removeClass("c-err-box"),$scope.paginateScroll()),$scope.stateFlag=!1,$scope.lfaStreetScapeRegValue={},$scope.islfastreetScapeRegFormClicked=!1,$scope.accList=[]),commonFunctions.loaderHide()),!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())})}else $scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$scope.validationErrorShow=!0,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200)}}),$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)},$scope.clearValues=function(){$scope.islfastreetScapeRegFormClicked=!1,$scope.lfaStreetScapeRegValue={},angular.element(".lfaSignupState").text("Select State").removeAttr("data-val"),$scope.validationErrorShow=!1,$scope.accList=[],$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,angular.element(".nucaptcha-answer-error").hide(),angular.element(".se-box-new-input").val(""),$scope.isPrefix1Filled=!1,$scope.isAccNum1Filled=!1,angular.element(".accListwrapper").children().first().find('input[name="prefix"]').removeClass("c-err-box"),angular.element(".accListwrapper").children().first().find('input[name="accNum"]').removeClass("c-err-box"),$scope.paginateScroll()},angular.element(document).ready(function(){for(var i=0;i<3;i++)angular.element("#addMoreAccounts").trigger("click")})}lfgapp.controller("lfaStreetScapeRegFormContrl",lfaStreetScapeRegFormContrl),lfaStreetScapeRegFormContrl.$inject=["$scope","$timeout","formPostService","$window"]}(),function(){function lfaStreetScapeUpdateFormContrl($scope,$timeout,formPostService,$window){function isTwoZipCode(name,booleanValue){"zip"===name&&($scope.isCorrectZipFormat=booleanValue)}$scope.islfaStreetScapeUpdateFormClicked=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,commonFunctions.loaderHide();var warningMsg;$scope.accList=[],$scope.accDelList=[];var formFactor;$(document).on("responsive:statechanged",function(e,param){formFactor=param}),angular.element(document).ready(function(){angular.element(".nucaptcha-answer-error").hide(),angular.element("*").removeClass("none")});var commonRequest=function(){var dropValue,commonRequestModule={};return commonRequestModule.dropDownValidation=function(id,flagName,value){dropValue=angular.element("#"+id).text(),$scope[flagName]=dropValue===value},commonRequestModule}();angular.element("ul.custom-selectbox-list-cont li").on("click",function(e){$timeout(function(){commonRequest.dropDownValidation("contactState","stateFlag","Select State")},200)}),$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)},angular.extend($scope,{islfaStreetScapeUpdateFormClicked:!1,lfaStreetScapeUpdateFormData:{},validationErrorShow:!1,stateFlag:!0}),$scope.numberFormat=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.lfaStreetScapeUpdateFormData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone||"fax"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if("phoneNumber"!==name&&"fax"!==name||($scope.isCorrectPhoneFormat=!patt.test($scope.lfaStreetScapeUpdateFormData[name])),3===$scope.lfaStreetScapeUpdateFormData[name].length&&8!==evt.keyCode?($scope.lfaStreetScapeUpdateFormData[name]=inputValue.replace(/[^0-9]/g,""),$scope.lfaStreetScapeUpdateFormData[name]=$scope.lfaStreetScapeUpdateFormData[name].replace(/(\d{3})/,"$1-")):7===$scope.lfaStreetScapeUpdateFormData[name].length&&8!==evt.keyCode?($scope.lfaStreetScapeUpdateFormData[name]=inputValue.replace(/[^0-9]/g,""),$scope.lfaStreetScapeUpdateFormData[name]=$scope.lfaStreetScapeUpdateFormData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.lfaStreetScapeUpdateFormData[name].length?($scope.lfaStreetScapeUpdateFormData[name]=inputValue.replace(/[^0-9]/g,""),$scope.lfaStreetScapeUpdateFormData[name]=$scope.lfaStreetScapeUpdateFormData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.lfaStreetScapeUpdateFormData[name].length&&($scope.lfaStreetScapeUpdateFormData[name]=$scope.lfaStreetScapeUpdateFormData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectPhoneFormat&&$scope.lfaStreetScapeUpdateFormData[name].length>=12){var str=$scope.lfaStreetScapeUpdateFormData[name];$scope.lfaStreetScapeUpdateFormData[name]=str.slice(0,12),$scope.isCorrectPhoneFormat=!1}}else if("zip"===zipOrPhone)if(5===$scope.lfaStreetScapeUpdateFormData[name].length)$scope.lfaStreetScapeUpdateFormData[name]=inputValue.replace(/[^0-9-]/g,""),109!==evt.keyCode&&189!==evt.keyCode||($scope.lfaStreetScapeUpdateFormData[name]=$scope.lfaStreetScapeUpdateFormData[name]+"-"),isTwoZipCode(name,!1);else if($scope.lfaStreetScapeUpdateFormData[name].length>5&&$scope.lfaStreetScapeUpdateFormData[name].length<=10)if(new RegExp("-").test($scope.lfaStreetScapeUpdateFormData[name]))if(10===$scope.lfaStreetScapeUpdateFormData[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"zip"===name&&($scope.isCorrectZipFormat=!pattZip.test($scope.lfaStreetScapeUpdateFormData[name]))}else isTwoZipCode(name,!0);else 9===$scope.lfaStreetScapeUpdateFormData[name].length?(109!==evt.keyCode&&189!==evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},angular.extend($scope,{lfaStreetScapeUpdateFormSubmit:function(){$scope.islfaStreetScapeUpdateFormClicked=!0;var capchaVal=angular.element("#g-recaptcha-response").val();if(capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show(),commonRequest.dropDownValidation("contactState","stateFlag","Select State"),!$scope.lfaUpdateform.$valid||$scope.stateFlag||!(angular.element("#g-recaptcha").length<=0||capchaVal)||$scope.isCorrectZipFormat||$scope.isCorrectPhoneFormat)$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$scope.validationErrorShow=!0,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200);else{commonFunctions.loaderShow(),$scope.validationErrorShow=!1;angular.element("#nucaptcha-answer-enter")?angular.element("#nucaptcha-answer-enter").val():"",angular.element("#nucaptcha-answer-exit")?angular.element("#nucaptcha-answer-exit").val():"";var streeScapeUpdateData={identity:"LFA_UPDATE_MYSTREETSCAPE",formFactor:formFactor,portfolioInclude:$scope.lfaStreetScapeUpdateFormData.portfolio,accessPrior:$scope.lfaStreetScapeUpdateFormData.accessPrior,myStreetscapeID:$scope.lfaStreetScapeUpdateFormData.streetScapeID,institutionalName:$scope.lfaStreetScapeUpdateFormData.institutionalName,firstName:$scope.lfaStreetScapeUpdateFormData.firstName,middleName:$scope.lfaStreetScapeUpdateFormData.middleIntial,lastName:$scope.lfaStreetScapeUpdateFormData.lastName,addressLine1:$scope.lfaStreetScapeUpdateFormData.addressLine1,addressLine2:$scope.lfaStreetScapeUpdateFormData.addressLine2,city:$scope.lfaStreetScapeUpdateFormData.city,state:angular.element("#contactState").text(),zipCode:$scope.lfaStreetScapeUpdateFormData.zip,phone:$scope.lfaStreetScapeUpdateFormData.phoneNumber,fax:$scope.lfaStreetScapeUpdateFormData.fax,accToAdd:$scope.accList,accToDelete:$scope.accDelList,email:$scope.lfaStreetScapeUpdateFormData.updateEmail,gRecaptchaResponse:angular.element("#g-recaptcha-response").val()};formPostService.formPostData($scope,streeScapeUpdateData,function(dataAjax){var dataResponce=dataAjax.data.responseStatusCode;dataResponce&&($scope.isSuccess=!0,"TIMED_OUT"===dataResponce?($scope.errorMsg="TIMED OUT",warningMsg=!0):"INTERNAL_ERROR"===dataResponce?($scope.errorMsg="INTERNAL ERROR",warningMsg=!0):"CAPTCHA_ERROR"===dataResponce?($scope.errorMsg="INVALID CAPTCHA",warningMsg=!0):"SERVICE_ERROR"===dataResponce?($scope.errorMsg="SERVICE ERROR",warningMsg=!0):"SUCCESS"===dataResponce&&(null!==tksPageURL&&"null"!==tksPageURL?($scope.isSuccess=!1,$window.location.href=tksPageURL):($scope.isSuccess=!0,$scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,angular.element(".lfaSignupState").text("Select State").removeAttr("data-val"),$scope.accList=[],$scope.accDelList=[],angular.element(".se-box-new-input").val(""),$scope.paginateScroll()),$scope.stateFlag=!1,$scope.lfaStreetScapeUpdateFormData={},$scope.islfaStreetScapeUpdateFormClicked=!1,$scope.accList=[],$scope.accDelList=[]),angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide()),!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())})}},clearValues:function(){$scope.lfaStreetScapeUpdateFormData={},$scope.islfaStreetScapeUpdateFormClicked=!1,angular.element(".lfaSignupState").text("Select State").removeAttr("data-val"),$scope.accList=[],$scope.accDelList=[],$scope.validationErrorShow=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,angular.element(".nucaptcha-answer-error").hide(),angular.element(".se-box-new-input").val(""),$scope.paginateScroll()}}),angular.element(document).ready(function(){for(var i=0;i<3;i++)angular.element("#addMoreAccounts").trigger("click")}),angular.element(document).ready(function(){for(var i=0;i<3;i++)angular.element("#addDelMoreAccounts").trigger("click")})}lfgapp.controller("lfaStreetScapeUpdateFormContrl",lfaStreetScapeUpdateFormContrl),lfaStreetScapeUpdateFormContrl.$inject=["$scope","$timeout","formPostService","$window"]}(),function(){function streetScapeRegFormContrl($rootScope,$scope,$timeout,formPostService,$window){function isTwoZipCode(name,booleanValue){"zip"===name&&($scope.isCorrectZipFormat=booleanValue)}$scope.isstreetScapeRegFormClicked=!1,$scope.validationErrorShow=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,$scope.topicFlag=!0;var formFactor;$scope.accList=[],$scope.isPrefix1Filled=!1,$scope.isAccNum1Filled=!1,$scope.watchPrefixandAccNum=function(prefixValue,accNumValue){$scope.isPrefix1Filled=prefixValue,$scope.isAccNum1Filled=accNumValue,!$scope.isPrefix1Filled&&$scope.isstreetScapeRegFormClicked?angular.element(".accListwrapper").children().first().find('input[name="prefix"]').addClass("c-err-box"):$scope.isPrefix1Filled&&$scope.isstreetScapeRegFormClicked&&angular.element(".accListwrapper").children().first().find('input[name="prefix"]').removeClass("c-err-box"),!$scope.isAccNum1Filled&&$scope.isstreetScapeRegFormClicked?angular.element(".accListwrapper").children().first().find('input[name="accNum"]').addClass("c-err-box"):$scope.isAccNum1Filled&&$scope.isstreetScapeRegFormClicked&&angular.element(".accListwrapper").children().first().find('input[name="accNum"]').removeClass("c-err-box")},$(document).on("responsive:statechanged",function(e,param){formFactor=param}),angular.element(document).ready(function(){angular.element(".nucaptcha-answer-error").hide(),angular.element("*").removeClass("none")}),commonFunctions.loaderHide();var warningMsg,commonRequest=function(){var dropValue,commonRequestModule={};return commonRequestModule.dropDownValidation=function(id,flagName,value){dropValue=angular.element("#"+id).text(),$scope[flagName]=dropValue===value},commonRequestModule}();angular.element("ul.custom-selectbox-list-cont li").on("click",function(e){$timeout(function(){commonRequest.dropDownValidation("contactState","stateFlag","Select State")},200)}),$scope.numberFormat=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.streetScapeRegValue[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone||"fax"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if("phoneNumber"!==name&&"fax"!==name||($scope.isCorrectPhoneFormat=!patt.test($scope.streetScapeRegValue[name])),3===$scope.streetScapeRegValue[name].length&&8!==evt.keyCode?($scope.streetScapeRegValue[name]=inputValue.replace(/[^0-9]/g,""),$scope.streetScapeRegValue[name]=$scope.streetScapeRegValue[name].replace(/(\d{3})/,"$1-")):7===$scope.streetScapeRegValue[name].length&&8!==evt.keyCode?($scope.streetScapeRegValue[name]=inputValue.replace(/[^0-9]/g,""),
$scope.streetScapeRegValue[name]=$scope.streetScapeRegValue[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.streetScapeRegValue[name].length?($scope.streetScapeRegValue[name]=inputValue.replace(/[^0-9]/g,""),$scope.streetScapeRegValue[name]=$scope.streetScapeRegValue[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.streetScapeRegValue[name].length&&($scope.streetScapeRegValue[name]=$scope.streetScapeRegValue[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectPhoneFormat&&$scope.streetScapeRegValue[name].length>=12){var str=$scope.streetScapeRegValue[name];$scope.streetScapeRegValue[name]=str.slice(0,12),$scope.isCorrectPhoneFormat=!1}}else if("zip"===zipOrPhone)if(5===$scope.streetScapeRegValue[name].length)$scope.streetScapeRegValue[name]=inputValue.replace(/[^0-9-]/g,""),109!==evt.keyCode&&189!==evt.keyCode||($scope.streetScapeRegValue[name]=$scope.streetScapeRegValue[name]+"-"),isTwoZipCode(name,!1);else if($scope.streetScapeRegValue[name].length>5&&$scope.streetScapeRegValue[name].length<=10)if(new RegExp("-").test($scope.streetScapeRegValue[name]))if(10===$scope.streetScapeRegValue[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"zip"===name&&($scope.isCorrectZipFormat=!pattZip.test($scope.streetScapeRegValue[name]))}else isTwoZipCode(name,!0);else 9===$scope.streetScapeRegValue[name].length?(109!==evt.keyCode&&189!==evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},angular.extend($scope,{isstreetScapeRegFormClicked:!1,streetScapeRegValue:{},validationErrorShow:!1,stateFlag:!0}),angular.extend($scope,{streetScapeFormSubmit:function(){$scope.isstreetScapeRegFormClicked=!0,$scope.isPrefix1Filled||angular.element(".accListwrapper").children().first().find('input[name="prefix"]').addClass("c-err-box"),$scope.isPrefix1Filled||angular.element(".accListwrapper").children().first().find('input[name="accNum"]').addClass("c-err-box");var capchaVal=angular.element("#g-recaptcha-response").val();if(capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show(),commonRequest.dropDownValidation("contactState","stateFlag","Select State"),$scope.streetScapeRegForm.$valid&&!$scope.stateFlag&&(angular.element("#g-recaptcha").length<=0||capchaVal)&&!$scope.isCorrectZipFormat&&!$scope.isCorrectPhoneFormat&&$scope.isPrefix1Filled&&$scope.isAccNum1Filled){commonFunctions.loaderShow();angular.element("#nucaptcha-answer-enter")?angular.element("#nucaptcha-answer-enter").val():"",angular.element("#nucaptcha-answer-exit")?angular.element("#nucaptcha-answer-exit").val():"",$scope.validationErrorShow=!1;var streeScapevalue={identity:"LFS_REGISTER_MYSTREETSCAPE",formFactor:formFactor,portfolio:void 0!==$scope.streetScapeRegValue.portfolio&&$scope.streetScapeRegValue.portfolio,taxSetup:void 0!==$scope.streetScapeRegValue.taxSetup&&$scope.streetScapeRegValue.taxSetup,instituteSetup:void 0!==$scope.streetScapeRegValue.instituteSetup&&$scope.streetScapeRegValue.instituteSetup,entityOrInstitutionalName:$scope.streetScapeRegValue.notifierName,firstName:$scope.streetScapeRegValue.notifierFirstName,middleName:$scope.streetScapeRegValue.middleName,lastName:$scope.streetScapeRegValue.notifierLastName,addressLine1:$scope.streetScapeRegValue.addressLine1,addressLine2:$scope.streetScapeRegValue.addressLine2,city:$scope.streetScapeRegValue.city,state:angular.element("#contactState").text(),zipCode:$scope.streetScapeRegValue.zip,phone:$scope.streetScapeRegValue.Phonenumber,fax:$scope.streetScapeRegValue.fax,email:$scope.streetScapeRegValue.emailId,accList:$scope.accList,gRecaptchaResponse:angular.element("#g-recaptcha-response").val()};formPostService.formPostData($scope,streeScapevalue,function(dataAjax){var dataResponce=dataAjax.data.responseStatusCode;dataResponce&&($scope.isSuccess=!0,"TIMED_OUT"===dataResponce?($scope.errorMsg="TIMED OUT",warningMsg=!0):"INTERNAL_ERROR"===dataResponce?($scope.errorMsg="INTERNAL ERROR",warningMsg=!0):"CAPTCHA_ERROR"===dataResponce?($scope.errorMsg="INVALID CAPTCHA",warningMsg=!0):"SERVICE_ERROR"===dataResponce?($scope.errorMsg="SERVICE ERROR",warningMsg=!0):"SUCCESS"===dataResponce&&(null!==tksPageURL&&"null"!==tksPageURL?$window.location.href=tksPageURL:($scope.isSuccess=!0,$scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.accList=[],angular.element(".se-box-new-input").val(""),angular.element(".lfsSignupState").text("Select State").removeAttr("data-val"),$scope.isPrefix1Filled=!1,$scope.isAccNum1Filled=!1,angular.element(".accListwrapper").children().first().find('input[name="prefix"]').removeClass("c-err-box"),angular.element(".accListwrapper").children().first().find('input[name="accNum"]').removeClass("c-err-box"),$scope.paginateScroll()),$scope.stateFlag=!1,$scope.streetScapeRegValue={},$scope.isstreetScapeRegFormClicked=!1,$scope.accList=[]),angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide()),!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())})}else $scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$scope.validationErrorShow=!0,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200)}}),$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)},$scope.clearValues=function(){$scope.streetScapeRegValue={},$scope.isstreetScapeRegFormClicked=!1,angular.element(".lfsSignupState").text("Select State").removeAttr("data-val"),$scope.accList=[],$scope.validationErrorShow=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,angular.element(".nucaptcha-answer-error").hide(),angular.element(".se-box-new-input").val(""),$scope.isPrefix1Filled=!1,$scope.isAccNum1Filled=!1,angular.element(".accListwrapper").children().first().find('input[name="prefix"]').removeClass("c-err-box"),angular.element(".accListwrapper").children().first().find('input[name="accNum"]').removeClass("c-err-box"),$scope.paginateScroll()},angular.element(document).ready(function(){for(var i=0;i<3;i++)angular.element("#addMoreAccounts").trigger("click")})}lfgapp.controller("streetScapeRegFormContrl",streetScapeRegFormContrl),streetScapeRegFormContrl.$inject=["$rootScope","$scope","$timeout","formPostService","$window"]}(),function(){function streetScapeUpdateFormContrl($scope,$timeout,formPostService,$window){function isTwoZipCode(name,booleanValue){"zip"===name&&($scope.isCorrectZipFormat=booleanValue)}$scope.isstreetScapeUpdateFormClicked=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,commonFunctions.loaderHide();var warningMsg;$scope.accList=[],$scope.accDelList=[];var formFactor;$(document).on("responsive:statechanged",function(e,param){formFactor=param}),angular.element(document).ready(function(){angular.element(".nucaptcha-answer-error").hide(),angular.element("*").removeClass("none")});var commonRequest=function(){var dropValue,commonRequestModule={};return commonRequestModule.dropDownValidation=function(id,flagName,value){dropValue=angular.element("#"+id).text(),$scope[flagName]=dropValue===value},commonRequestModule}();angular.element("ul.custom-selectbox-list-cont li").on("click",function(e){$timeout(function(){commonRequest.dropDownValidation("contactState","stateFlag","Select State")},200)}),angular.extend($scope,{isstreetScapeUpdateFormClicked:!1,streetScapeUpdateFormData:{},validationErrorShow:!1,stateFlag:!0}),$scope.validateStreetScapId=function(){},$scope.numberFormat=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.streetScapeUpdateFormData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone||"fax"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if("phoneNumber"!==name&&"fax"!==name||($scope.isCorrectPhoneFormat=!patt.test($scope.streetScapeUpdateFormData[name])),3===$scope.streetScapeUpdateFormData[name].length&&8!==evt.keyCode?($scope.streetScapeUpdateFormData[name]=inputValue.replace(/[^0-9]/g,""),$scope.streetScapeUpdateFormData[name]=$scope.streetScapeUpdateFormData[name].replace(/(\d{3})/,"$1-")):7===$scope.streetScapeUpdateFormData[name].length&&8!==evt.keyCode?($scope.streetScapeUpdateFormData[name]=inputValue.replace(/[^0-9]/g,""),$scope.streetScapeUpdateFormData[name]=$scope.streetScapeUpdateFormData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.streetScapeUpdateFormData[name].length?($scope.streetScapeUpdateFormData[name]=inputValue.replace(/[^0-9]/g,""),$scope.streetScapeUpdateFormData[name]=$scope.streetScapeUpdateFormData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.streetScapeUpdateFormData[name].length&&($scope.streetScapeUpdateFormData[name]=$scope.streetScapeUpdateFormData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectPhoneFormat&&$scope.streetScapeUpdateFormData[name].length>=12){var str=$scope.streetScapeUpdateFormData[name];$scope.streetScapeUpdateFormData[name]=str.slice(0,12),$scope.isCorrectPhoneFormat=!1}}else if("zip"===zipOrPhone)if(5===$scope.streetScapeUpdateFormData[name].length)$scope.streetScapeUpdateFormData[name]=inputValue.replace(/[^0-9-]/g,""),109!==evt.keyCode&&189!==evt.keyCode||($scope.streetScapeUpdateFormData[name]=$scope.streetScapeUpdateFormData[name]+"-"),isTwoZipCode(name,!1);else if($scope.streetScapeUpdateFormData[name].length>5&&$scope.streetScapeUpdateFormData[name].length<=10)if(new RegExp("-").test($scope.streetScapeUpdateFormData[name]))if(10===$scope.streetScapeUpdateFormData[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"zip"===name&&($scope.isCorrectZipFormat=!pattZip.test($scope.streetScapeUpdateFormData[name]))}else isTwoZipCode(name,!0);else 9===$scope.streetScapeUpdateFormData[name].length?(109!==evt.keyCode&&189!==evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)},angular.extend($scope,{streetScapeUpdateFormSubmit:function(){$scope.isstreetScapeUpdateFormClicked=!0;var capchaVal=angular.element("#g-recaptcha-response").val();if(capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show(),commonRequest.dropDownValidation("contactState","stateFlag","Select State"),!$scope.streetScapeUpdateForm.$valid||$scope.stateFlag||!(angular.element("#g-recaptcha").length<=0||capchaVal)||$scope.isCorrectZipFormat||$scope.isCorrectPhoneFormat)$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$scope.validationErrorShow=!0,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200);else{commonFunctions.loaderShow(),$scope.validationErrorShow=!1;angular.element("#nucaptcha-answer-enter")?angular.element("#nucaptcha-answer-enter").val():"",angular.element("#nucaptcha-answer-exit")?angular.element("#nucaptcha-answer-exit").val():"";var streeScapeUpdateData={identity:"LFS_UPDATE_MYSTREETSCAPE",formFactor:formFactor,portfolioInclude:$scope.streetScapeUpdateFormData.portfolio,accessPrior:$scope.streetScapeUpdateFormData.accessPrior,myStreetscapeID:$scope.streetScapeUpdateFormData.streetScapeID,entityOrInstitutionalName:$scope.streetScapeUpdateFormData.institutionalName,firstName:$scope.streetScapeUpdateFormData.firstName,middleName:$scope.streetScapeUpdateFormData.middleIntial,lastName:$scope.streetScapeUpdateFormData.lastName,addressLine1:$scope.streetScapeUpdateFormData.addressLine1,addressLine2:$scope.streetScapeUpdateFormData.addressLine2,city:$scope.streetScapeUpdateFormData.city,state:angular.element("#contactState").text(),zipCode:$scope.streetScapeUpdateFormData.zip,phone:$scope.streetScapeUpdateFormData.phoneNumber,fax:$scope.streetScapeUpdateFormData.fax,accToAdd:$scope.accList,accToDelete:$scope.accDelList,email:$scope.streetScapeUpdateFormData.updateEmail,gRecaptchaResponse:angular.element("#g-recaptcha-response").val()};formPostService.formPostData($scope,streeScapeUpdateData,function(dataAjax){var dataResponce=dataAjax.data.responseStatusCode;dataResponce&&($scope.isSuccess=!0,"TIMED_OUT"===dataResponce?($scope.errorMsg="TIMED OUT",warningMsg=!0):"INTERNAL_ERROR"===dataResponce?($scope.errorMsg="INTERNAL ERROR",warningMsg=!0):"CAPTCHA_ERROR"===dataResponce?($scope.errorMsg="INVALID CAPTCHA",warningMsg=!0):"SERVICE_ERROR"===dataResponce?($scope.errorMsg="SERVICE ERROR",warningMsg=!0):"SUCCESS"===dataResponce&&(null!==tksPageURL&&"null"!==tksPageURL?($scope.isSuccess=!1,$window.location.href=tksPageURL):($scope.isSuccess=!0,$scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.accList=[],$scope.accDelList=[],angular.element(".lfaSignupState").text("Select State").removeAttr("data-val"),angular.element(".se-box-new-input").val(""),$scope.paginateScroll()),$scope.stateFlag=!1,$scope.streetScapeUpdateFormData={},$scope.isstreetScapeUpdateFormClicked=!1,$scope.accList=[],$scope.accDelList=[]),angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide()),!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())})}},clearValues:function(){$scope.streetScapeUpdateFormData={},$scope.isstreetScapeUpdateFormClicked=!1,angular.element(".lfaSignupState").text("Select State").removeAttr("data-val"),$scope.accList=[],$scope.accDelList=[],$scope.validationErrorShow=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,angular.element(".nucaptcha-answer-error").hide(),angular.element(".se-box-new-input").val(""),$scope.paginateScroll()}}),angular.element(document).ready(function(){for(var i=0;i<3;i++)angular.element("#addMoreAccounts").trigger("click")}),angular.element(document).ready(function(){for(var i=0;i<3;i++)angular.element("#addDelMoreAccounts").trigger("click")})}lfgapp.controller("streetScapeUpdateFormContrl",streetScapeUpdateFormContrl),streetScapeUpdateFormContrl.$inject=["$scope","$timeout","formPostService","$window"]}(),lfgapp.controller("lifeInsuranceDeathContrl",["$scope","$timeout","$window","lifeInsuranceDeathServices",function($scope,$timeout,$window,lifeInsuranceDeathServices){function isTwoZipCode(name,booleanValue){"notifierZipCode"===name?$scope.isCorrectZipFormat=booleanValue:$scope.isCorrectInsuredZipFormat=booleanValue}function getCaptchaData(){angular.element("#nucaptcha-answer-enter")&&angular.element("#nucaptcha-answer-enter").val(),angular.element("#nucaptcha-answer-exit")&&angular.element("#nucaptcha-answer-exit").val(),$scope.lifeInsuranceDeathData.gRecaptchaResponse=$("#g-recaptcha-response").val()}function getFormData(){$scope.lifeInsuranceDeathData.formFactor=lifeInsuranceDeathFactor,$scope.lifeInsuranceDeathData.identity="LIFE_CLAIMS",$scope.lifeInsuranceDeathData.notifierRelationship=lifeInsuranceDeathCommon.checkEmptyData($scope.lifeInsuranceDeathData.notifierRelationship),$scope.lifeInsuranceDeathData.notifierState=angular.element("#notifierStateLifeInsurance").text(),$scope.lifeInsuranceDeathData.insuredState=angular.element("#insuredStateLifeInsurance").text(),$scope.lifeInsuranceDeathData.notifierEveningPhone=lifeInsuranceDeathCommon.checkEmptyData($scope.lifeInsuranceDeathData.notifierEveningPhone),$scope.lifeInsuranceDeathData.notifierEmail=lifeInsuranceDeathCommon.checkEmptyData($scope.lifeInsuranceDeathData.notifierEmail),$scope.lifeInsuranceDeathData.insuredDob=lifeInsuranceDeathCommon.checkEmptyData($scope.lifeInsuranceDeathData.insuredDob),$scope.lifeInsuranceDeathData.insuredDeathPlace=lifeInsuranceDeathCommon.checkEmptyData($scope.lifeInsuranceDeathData.insuredDeathPlace),$scope.lifeInsuranceDeathData.insuredDeathCause=lifeInsuranceDeathCommon.checkEmptyData($scope.lifeInsuranceDeathData.insuredDeathCause),$scope.lifeInsuranceDeathData.insuredOtherPolicies=lifeInsuranceDeathCommon.checkEmptyData($scope.lifeInsuranceDeathData.insuredOtherPolicies),$scope.lifeInsuranceDeathData.insuredOtherPoliciesDetail=lifeInsuranceDeathCommon.checkEmptyData($scope.lifeInsuranceDeathData.insuredOtherPoliciesDetail),$scope.lifeInsuranceDeathData.insuredLast4SSN=lifeInsuranceDeathCommon.checkEmptyData($scope.lifeInsuranceDeathData.deceasedPerSSN),$scope.lifeInsuranceDeathData.eConsentAccepted="I consent to Electronic Transmissions"}function displayErr(){$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$scope.validationErrorShow=!0,$scope.validationErrorShow=!0,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200)}function validForm(){var capchaVal,isCaptchaAvail=!1;return angular.element(".g-recaptcha").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#g-recaptcha-response").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show()),!$scope.lifeInsuranceDeathForm.$valid||!(isCaptchaAvail&&capchaVal||!isCaptchaAvail)||$scope.isCorrectFormat||$scope.isCorrectZipFormat||$scope.isCorrectInsuredZipFormat?(displayErr(),!1):(isCaptchaAvail&&getCaptchaData(),getFormData(),commonFunctions.loaderShow(),$scope.validationErrorShow=!1,!0)}utag_data.event_action="form",utag_data.event_name="Life Insurance Death Notification",utag_data.event_type="claims",utag_data.event_version="2",utag_data.event_status="start";var lifeInsuranceDeathCommon,lifeInsuranceDeathFactor,warningMsg,lifeInsuranceCount=0;$(document).on("responsive:statechanged",function(e,param){lifeInsuranceDeathFactor=param});new Calendar({dateId:"date",monthId:"month",yearId:"year",hiddenId:"lifeDOBoptional",numberOfYears:130}),new Calendar({dateId:"date1",monthId:"month1",yearId:"year1",hiddenId:"insured_life_date",numberOfYears:130});$scope.lifeInsuranceDeathPhoneNum=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.lifeInsuranceDeathData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if("notifierPreferredPhone"===name&&($scope.isCorrectFormat=!patt.test($scope.lifeInsuranceDeathData[name])),3===$scope.lifeInsuranceDeathData[name].length&&8!==evt.keyCode?($scope.lifeInsuranceDeathData[name]=inputValue.replace(/[^0-9]/g,""),$scope.lifeInsuranceDeathData[name]=$scope.lifeInsuranceDeathData[name].replace(/(\d{3})/,"$1-")):7===$scope.lifeInsuranceDeathData[name].length&&8!==evt.keyCode?($scope.lifeInsuranceDeathData[name]=inputValue.replace(/[^0-9]/g,""),$scope.lifeInsuranceDeathData[name]=$scope.lifeInsuranceDeathData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.lifeInsuranceDeathData[name].length?($scope.lifeInsuranceDeathData[name]=inputValue.replace(/[^0-9]/g,""),$scope.lifeInsuranceDeathData[name]=$scope.lifeInsuranceDeathData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.lifeInsuranceDeathData[name].length&&($scope.lifeInsuranceDeathData[name]=$scope.lifeInsuranceDeathData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectFormat){if($scope.lifeInsuranceDeathData[name].length>=12){var str=$scope.lifeInsuranceDeathData[name];$scope.lifeInsuranceDeathData[name]=str.slice(0,12),$scope.isCorrectFormat=!1}}else if($scope.lifeInsuranceDeathData[name].length>=12){var str=$scope.lifeInsuranceDeathData[name];$scope.lifeInsuranceDeathData[name]=str.slice(0,12)}}else if("zip"===zipOrPhone)if(5===$scope.lifeInsuranceDeathData[name].length)$scope.lifeInsuranceDeathData[name]=inputValue.replace(/[^0-9-]/g,""),109!==evt.keyCode&&189!==evt.keyCode||($scope.lifeInsuranceDeathData[name]=$scope.lifeInsuranceDeathData[name]+"-"),isTwoZipCode(name,!1);else if($scope.lifeInsuranceDeathData[name].length>5&&$scope.lifeInsuranceDeathData[name].length<=10)if(new RegExp("-").test($scope.lifeInsuranceDeathData[name]))if(10===$scope.lifeInsuranceDeathData[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"notifierZipCode"===name?$scope.isCorrectZipFormat=!pattZip.test($scope.lifeInsuranceDeathData[name]):$scope.isCorrectInsuredZipFormat=!pattZip.test($scope.lifeInsuranceDeathData[name])}else isTwoZipCode(name,!0);else 9===$scope.lifeInsuranceDeathData[name].length?(109!==evt.keyCode&&189!==evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,lifeInsuranceDeathCommon=function(){var dropValue,lifeInsuranceDeathModule={};return lifeInsuranceDeathModule.stateDropValidation=function(id,flagName,value){dropValue=angular.element("#"+id).text(),$scope[flagName]=dropValue===value},lifeInsuranceDeathModule.checkEmptyData=function(data){return data||""},lifeInsuranceDeathModule}(),commonFunctions.loaderHide(),angular.element(".nucaptcha-answer-error").hide(),angular.element("*").removeClass("none"),angular.element("ul.custom-selectbox-list-cont li").on("click",function(){$timeout(function(){lifeInsuranceDeathCommon.stateDropValidation("notifierStateLifeInsurance","notifierStateFlag","Select state"),lifeInsuranceDeathCommon.stateDropValidation("insuredStateLifeInsurance","insuredStateFlag","Select state")},200)}),angular.extend($scope,{lifeInsuranceDeathData:{},isLifeInsuranceDeathClicked:!1,validationErrorShow:!1}),$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)},$scope.disp_none="disp_none",$scope.openPopUp=function(event,val,callAnalytic){function doOnOrientationChange(){if(screen.width<=768){switch(window.orientation){case-90:default:$scope.hgt=screen.height}}}if(event.stopPropagation(),1==val){if($scope.checkbox=!0,"disp_none"===$scope.disp_none&&($scope.disp_none="disp_block",$("body").css("overflow","hidden")),callAnalytic){var data1={event_action:"link",event_name:"Electronic Transmissions",event_type:"maincontent"};utag.link(data1)}}else $scope.checkbox=!1,"disp_block"===$scope.disp_none&&($scope.disp_none="disp_none",$("body").css("overflow","auto"));$scope.hgt=screen.height,window.addEventListener("orientationchange",doOnOrientationChange)},$scope.isAccept=function(event,val){if(val){$scope.checkbox=!0,"disp_block"===$scope.disp_none&&($scope.disp_none="disp_none",$("body").css("overflow","auto"));var data2={event_action:"Button",event_name:"I Consent",event_type:"maincontent"};utag.link(data2)}else $scope.openPopUp(event,val,!0),$("body").css("overflow","auto")},$scope.printDiv=function(){var printContents=$("#mid_content").html(),popupWin=window.open("","_blank");return popupWin.document.write("<html><head><title>Print Preview</title></head><body>"+printContents+"</body></html>"),popupWin.print(),popupWin.close(),!0},$scope.submitLifeInsuranceDeath=function(){submitClicked=!0,lifeInsuranceCount||($scope.lifeInsuranceDeathData.insuredDeathDate?angular.element(".lostPolicy").addClass("ng-hide"):angular.element(".lostPolicy").removeClass("ng-hide"),lifeInsuranceCount=1),lifeInsuranceDeathCommon.stateDropValidation("notifierStateLifeInsurance","notifierStateFlag","Select state"),lifeInsuranceDeathCommon.stateDropValidation("insuredStateLifeInsurance","insuredStateFlag","Select state"),$scope.isLifeInsuranceDeathClicked=!0,validForm()&&lifeInsuranceDeathServices.lifeInsuranceDeathInfoPost($scope,$scope.lifeInsuranceDeathData,function(dataAjax){var dataResponce=dataAjax.data.responseStatusCode;if(dataResponce){if("TIMED_OUT"===dataResponce)$scope.isSuccess=!0,$scope.errorMessage="TIMED OUT",warningMsg=!0;else if("INTERNAL_ERROR"===dataResponce)$scope.isSuccess=!0,$scope.errorMessage="INTERNAL ERROR",warningMsg=!0;else if("CAPTCHA_ERROR"===dataResponce)$scope.isSuccess=!0,$scope.errorMessage="INVALID CAPTCHA",warningMsg=!0;else if("SERVICE_ERROR"===dataResponce)$scope.isSuccess=!0,$scope.errorMessage="SERVICE ERROR",warningMsg=!0;else if("SUCCESS"===dataResponce){null!==tksPageURL&&"null"!==tksPageURL?$window.location.href=tksPageURL:($scope.isSuccess=!0,$scope.errorMessage="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll()),$scope.lifeInsuranceDeathData={},commonFunctions.resetDatePicker(),angular.element("#notifierStateLifeInsurance, #insuredStateLifeInsurance").text("Select state").removeAttr("data-val"),$scope.isLifeInsuranceDeathClicked=!1;var data={event_action:"form",event_name:"Life Insurance Death Notification",event_type:"claims",event_version:"2",event_status:"complete"};utag.link(data)}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide()}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())})}}]),lfgapp.controller("longTermCareContrl",["$scope","$timeout","$window","longTermCareServices",function($scope,$timeout,$window,longTermCareServices){function isTwoZipCode(name,booleanValue){"notifierZipCode"===name?$scope.isCorrectZipFormat=booleanValue:"insuredZipCode"===name&&($scope.isCorrectinsuredZipFormat=booleanValue)}function getCaptchaData(){angular.element("#nucaptcha-answer-enter")&&angular.element("#nucaptcha-answer-enter").val(),angular.element("#nucaptcha-answer-exit")&&angular.element("#nucaptcha-answer-exit").val(),$scope.longTermCareData.gRecaptchaResponse=$("#g-recaptcha-response").val()}function getFormData(){$scope.longTermCareData.formFactor=longTermCareFactor,$scope.longTermCareData.identity="CARE_CLAIMS",$scope.longTermCareData.notifierRelationship=longTermCareCommon.checkEmptyData($scope.longTermCareData.notifierRelationship),$scope.longTermCareData.notifierState=angular.element("#notifierStateLongTerm").text(),$scope.longTermCareData.notifierEveningPhone=longTermCareCommon.checkEmptyData($scope.longTermCareData.notifierEveningPhone),$scope.longTermCareData.notifierEmail=longTermCareCommon.checkEmptyData($scope.longTermCareData.notifierEmail),$scope.longTermCareData.insuredState=angular.element("#insuredStateLongTerm").text(),$scope.longTermCareData.insuredDob=longTermCareCommon.checkEmptyData($scope.longTermCareData.insuredDob),$scope.longTermCareData.eConsentAccepted="I consent to Electronic Transmissions"}function displayErr(){$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$scope.validationErrorShow=!0,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200)}function validForm(){var capchaVal,isCaptchaAvail=!1;return angular.element(".g-recaptcha").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#g-recaptcha-response").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show()),!$scope.longTermCareForm.$valid||!(isCaptchaAvail&&capchaVal||!isCaptchaAvail)||$scope.isCorrectinsuredZipFormat||$scope.isCorrectZipFormat||$scope.isCorrectPhoneFormat?(displayErr(),!1):(isCaptchaAvail&&getCaptchaData(),getFormData(),commonFunctions.loaderShow(),$scope.validationErrorShow=!1,!0)}utag_data.event_action="form",utag_data.event_name="Long-Term Care Start Notification",utag_data.event_type="claims",utag_data.event_status="start";var longTermCareCommon,longTermCareFactor,warningMsg,longCareCount=0;$(document).on("responsive:statechanged",function(e,param){longTermCareFactor=param}),$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1;new Calendar({dateId:"date",monthId:"month",yearId:"year",hiddenId:"LongDOBoptional",numberOfYears:130}),new Calendar({dateId:"date1",monthId:"month1",yearId:"year1",hiddenId:"insuredCareOnset",numberOfYears:130});longTermCareCommon=function(){var dropValue,longTermCareModule={};return longTermCareModule.stateDropValidation=function(id,flagName,value){dropValue=angular.element("#"+id).text(),$scope[flagName]=dropValue===value},longTermCareModule.checkEmptyData=function(data){return data||""},longTermCareModule}(),commonFunctions.loaderHide(),angular.element(".nucaptcha-answer-error").hide(),angular.element("*").removeClass("none"),angular.element("ul.custom-selectbox-list-cont li").on("click",function(){$timeout(function(){longTermCareCommon.stateDropValidation("notifierStateLongTerm","notifierStateFlag","Select state"),longTermCareCommon.stateDropValidation("insuredStateLongTerm","insuredStateFlag","Select state")},200)}),$scope.numberFormat=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.longTermCareData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if("notifierDayPhone"===name&&($scope.isCorrectPhoneFormat=!patt.test($scope.longTermCareData[name])),"notifierPreferredPhone"===name&&($scope.isCorrectPhoneFormat=!patt.test($scope.longTermCareData[name])),3===$scope.longTermCareData[name].length&&8!==evt.keyCode?($scope.longTermCareData[name]=inputValue.replace(/[^0-9]/g,""),$scope.longTermCareData[name]=$scope.longTermCareData[name].replace(/(\d{3})/,"$1-")):7===$scope.longTermCareData[name].length&&8!==evt.keyCode?($scope.longTermCareData[name]=inputValue.replace(/[^0-9]/g,""),$scope.longTermCareData[name]=$scope.longTermCareData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.longTermCareData[name].length?($scope.longTermCareData[name]=inputValue.replace(/[^0-9]/g,""),$scope.longTermCareData[name]=$scope.longTermCareData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.longTermCareData[name].length&&($scope.longTermCareData[name]=$scope.longTermCareData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectPhoneFormat){if($scope.longTermCareData[name].length>=12){var str=$scope.longTermCareData[name];$scope.longTermCareData[name]=str.slice(0,12),$scope.isCorrectPhoneFormat=!1}}else if($scope.longTermCareData[name].length>=12){var str=$scope.longTermCareData[name];$scope.longTermCareData[name]=str.slice(0,12)}
}else if("zip"===zipOrPhone)if(5===$scope.longTermCareData[name].length)$scope.longTermCareData[name]=inputValue.replace(/[^0-9-]/g,""),109!==evt.keyCode&&189!==evt.keyCode||($scope.longTermCareData[name]=$scope.longTermCareData[name]+"-"),isTwoZipCode(name,!1);else if($scope.longTermCareData[name].length>5&&$scope.longTermCareData[name].length<=10)if(new RegExp("-").test($scope.longTermCareData[name]))if(10===$scope.longTermCareData[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"notifierZipCode"===name?$scope.isCorrectZipFormat=!pattZip.test($scope.longTermCareData[name]):"insuredZipCode"===name&&($scope.isCorrectinsuredZipFormat=!pattZip.test($scope.longTermCareData[name]))}else isTwoZipCode(name,!0);else 9===$scope.longTermCareData[name].length?(109!==evt.keyCode&&189!==evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},angular.extend($scope,{longTermCareData:{},isLongTermCareSubmit:!1,validationErrorShow:!1,notifierStateFlag:!0,insuredStateFlag:!0}),$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)},$scope.disp_none="disp_none",$scope.openPopUp=function(event,val,callAnalytic){function doOnOrientationChange(){if(screen.width<=768){switch(window.orientation){case-90:default:$scope.hgt=screen.height}}}if(event.stopPropagation(),1==val){if($scope.checkbox=!0,"disp_none"===$scope.disp_none&&($scope.disp_none="disp_block",$("body").css("overflow","hidden")),callAnalytic){var data1={event_action:"link",event_name:"Electronic Transmissions",event_type:"maincontent"};utag.link(data1)}}else $scope.checkbox=!1,"disp_block"===$scope.disp_none&&($scope.disp_none="disp_none",$("body").css("overflow","auto"));$scope.hgt=screen.height,window.addEventListener("orientationchange",doOnOrientationChange)},$scope.isAccept=function(event,val){if(val){$scope.checkbox=!0,"disp_block"===$scope.disp_none&&($scope.disp_none="disp_none",$("body").css("overflow","auto"));var data2={event_action:"Button",event_name:"I Consent",event_type:"maincontent"};utag.link(data2)}else $scope.openPopUp(event,val,!0),$("body").css("overflow","auto")},$scope.submitLongTermCare=function(){longTermCareCommon.stateDropValidation("notifierStateLongTerm","notifierStateFlag","Select state"),longTermCareCommon.stateDropValidation("insuredStateLongTerm","insuredStateFlag","Select state"),$scope.isLongTermCareSubmit=!0,submitClicked=!0,longCareCount||($scope.longTermCareData.insuredCareOnset?angular.element(".lostPolicy").addClass("ng-hide"):angular.element(".lostPolicy").removeClass("ng-hide"),longCareCount=1),validForm()&&longTermCareServices.longTermCareInfoPost($scope,$scope.longTermCareData,function(dataAjax){var dataResponce=dataAjax.data.responseStatusCode;if(dataResponce){if("TIMED_OUT"===dataResponce)$scope.isSuccess=!0,$scope.errorMsg="TIMED OUT",warningMsg=!0;else if("INTERNAL_ERROR"===dataResponce)$scope.isSuccess=!0,$scope.errorMsg="INTERNAL ERROR",warningMsg=!0;else if("CAPTCHA_ERROR"===dataResponce)$scope.isSuccess=!0,$scope.errorMsg="INVALID CAPTCHA",warningMsg=!0;else if("SERVICE_ERROR"===dataResponce)$scope.isSuccess=!0,$scope.errorMsg="SERVICE ERROR",warningMsg=!0;else if("SUCCESS"===dataResponce){null!==tksPageURL&&"null"!==tksPageURL?$window.location.href=tksPageURL:($scope.isSuccess=!0,$scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll()),$scope.longTermCareData={},commonFunctions.resetDatePicker(),angular.element("#notifierStateLongTerm").text("Select state").removeAttr("data-val"),angular.element("#insuredStateLongTerm").text("Select state").removeAttr("data-val"),$scope.isLongTermCareSubmit=!1;var data={event_action:"form",event_name:"Long-Term Care Start Notification",event_type:"claims",event_status:"complete"};utag.link(data)}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide()}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())})}}]),lfgapp.controller("registerSupplierContrl",["$scope","$timeout","registerSupplierServices","$window",function($scope,$timeout,registerSupplierServices,$window){function isTwoZipCode(name,booleanValue){"orgZip"===name&&($scope.isCorrectZipFormat=booleanValue)}function getCaptchaData(){var nucaptchaAnsEntr,nucaptchaAnsExt;nucaptchaAnsEntr=angular.element("#nucaptcha-answer-enter")?angular.element("#nucaptcha-answer-enter").val():"",nucaptchaAnsExt=angular.element("#nucaptcha-answer-exit")?angular.element("#nucaptcha-answer-exit").val():"",$scope.registerSuppiler["nucaptcha-epd"]=angular.element("#nucaptcha-epd").val(),$scope.registerSuppiler["nucaptcha-answer"]=angular.element("#nucaptcha-answer").val(),$scope.registerSuppiler["nucaptcha-answer-enter"]=nucaptchaAnsEntr,$scope.registerSuppiler["nucaptcha-answer-exit"]=nucaptchaAnsExt,$scope.registerSuppiler.lmsubmitted=angular.element("#lmsubmitted").val(),$scope.registerSuppiler["nucaptcha-index"]=angular.element("#nucaptcha-index").val(),$scope.registerSuppiler["nucaptcha-datatype"]=angular.element("#nucaptcha-datatype").val(),$scope.registerSuppiler["nucaptcha-ptype"]=angular.element("#nucaptcha-ptype").val(),$scope.registerSuppiler["nucaptcha-language"]=angular.element("#nucaptcha-language").val(),$scope.registerSuppiler["nucaptcha-region"]=angular.element("#nucaptcha-region").val(),$scope.registerSuppiler["nucaptcha-media-download-time"]="",$scope.registerSuppiler["nucaptcha-adserv-download-time"]="",$scope.registerSuppiler["nucaptcha-fallback-token"]=""}function getFormData(){certificationInfo.ownershipCertificationSmallBusiness=$scope.business.SM||"No",certificationInfo.ownershipCertificationOther=$scope.business.OTHER||"No",certificationInfo.ownershipCertificationLgbt=$scope.business.LGBT||"No",certificationInfo.ownershipCertificationHubzone=$scope.business.HUBZone||"No",certificationInfo.ownershipCertificationVosb=$scope.business.VOSB||"No",certificationInfo.ownershipCertificationSdb=$scope.business.SDB||"No",certificationInfo.ownershipCertificationWosb=$scope.business.WOSB||"No",certificationInfo.ownershipCertificationOtherValue=$scope.otherBusiness,$scope.ownerEthnicities=$scope.ownerEthnicities||"",certificationInfo.ownerEthnicities.push($scope.ownerEthnicities),certificationInfo.ownerEthnicitiesOther=$scope.ethnicityOthers,$scope.registerSuppiler.companyInfo=companyInfo,$scope.registerSuppiler.formFactor=registerSupplierFactor,$scope.registerSuppiler.certificationInfo=certificationInfo,$scope.registerSuppiler.supplierGoodsServicesOther=$scope.supplierGoodsServicesOther,$scope.registerSuppiler.identity="REGISTER_AS_A_SUPPLIER"}function displayErr(){$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200)}function validForm(){var capchaVal,isCaptchaAvail=!1;angular.element(".nucaptch-wrapper").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#nucaptcha-answer").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show());var errLength=angular.element("#tableCertification .err-border").length,certfLength=angular.element("#tableCertification .certification-checkbox:checked").length;return!$scope.isownerBusinessChecked&&!$scope.isownerEthnicitiesOthersChecked&&!$scope.iscertificationChecked&&$scope.registerSupplierForm.ownerEthnicities.$valid&&!$scope.businessCheckboxes&&!$scope.isEmptyOtherOwnership&&errLength<=0&&certfLength==certdateLength&&(isCaptchaAvail&&capchaVal||!isCaptchaAvail)?(isCaptchaAvail&&getCaptchaData(),getFormData(),angular.element("#refresh").trigger("click"),commonFunctions.loaderShow(),!0):(displayErr(),!1)}$scope.registerSuppiler={},$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1;var registerSupplierFactor,warningMsg;commonFunctions.loaderHide(),$(document).on("responsive:statechanged",function(e,param){registerSupplierFactor=param}),utag_data.event_action="form",utag_data.event_name="Supplier Diversity Registration",utag_data.event_type="supplier",utag_data.event_status="start",angular.element("*").removeClass("get-sartedform-default-hidden"),angular.element(".nucaptcha-answer-error").hide(),angular.element("#registerSupplierForm, .err-cont").removeClass("none"),$scope.stateVal=!0,$scope.isNotCheckedOwnership=!1,$scope.isEmptyOtherOwnership=!1,$scope.isSBDChecked=!1;var registerCommon,tableCertification,checkboxesCompyInfo,certificationCheckboxes,tableCertification,certdateLength,businessCheckboxes,companyInfo={},certificationInfo={},certdateObj={},tableCount=0,table_ids={"plus-NMSDC":!1,"plus-WBENC":!1,"plus-NWBOC":!1,"plus-veteranOwned":!1,"plus-vetOwned":!1,"plus-SBAHubZone":!1,"plus-SBA":!1,"plus-awardManagement":!1,"plus-USPAN":!1,"plus-USBLN":!1,"plus-NGLCC":!1,"plus-certificateOther":!1};$("#tableCertification tbody tr td:first-child").on("click",function(e){$.each(table_ids,function(key,value){key===e.target.id&&(table_ids[key]=!value)})}),$("#tableCertification tbody tr td span.lfgcheck-box p input").on("click",function(e){var checkedId="plus-"+e.target.id;$.each(table_ids,function(key,value){key===checkedId&&(value||$(e.target.parentElement.parentElement.parentElement.previousElementSibling).trigger("click"))})}),registerCommon=function(){var registerModule={};return registerModule.continueBackFocus=function(){var olHeight=angular.element("#main-content h2").offset().top;angular.element("html, body").stop().animate({scrollTop:olHeight},800),0===tableCount&&($timeout(function(){tableCertification=$("#tableCertification").dataTable({destroy:!0,responsive:!0,bLengthChange:!1,bSort:!1,bFilter:!1,paging:!1,info:!1,autoWidth:!1})},50),tableCount++)},registerModule.stateValidateFunc=function(){var stateValue=angular.element(".orgState").text();$scope.stateVal=""!==stateValue&&"Select state"!==stateValue},registerModule.validateCompanyGoods=function(){$scope.goodsValid=!0,$scope.othersValid=!1,checkboxesCompyInfo.is(":checked")?($scope.goodsSelected=[],$scope.goodsValid=!1,!0===$scope.goods.goods14&&""===angular.element("#otherInfo").val()?$scope.othersValid=!0:$scope.othersValid=!1):$scope.goodsValid=!0,!1===$("#goods14").prop("checked")&&angular.element("#otherInfo").val("")},registerModule.ownerEthnicities=function(){angular.element("#ethnicitiesOthers").is(":checked")&&""===angular.element("#ethnicityOthers").val()?$scope.isownerEthnicitiesOthersChecked=!0:$scope.isownerEthnicitiesOthersChecked=!1},registerModule.certifyContact=function(){certificationCheckboxes.is(":checked")?$scope.iscertificationChecked=!1:$scope.iscertificationChecked=!0,angular.element(".certification-cont  .cert-number").removeClass("err-border").next().hide(),angular.element(".certification-cont  .cert-exp").removeClass("err-border").next().hide(),angular.element(".cert-exp").removeClass("err-border").next().hide(),certdateLength=0,certificationInfo.certification=[],angular.forEach($scope.certification,function(value,key){if(!0===value){var certNumber,certdate,certdateMobile,certdateVal;certNumber=angular.element("#"+key).closest("tr").find(".cert-number").val(),"certificateOtherInput"===key&&(key="OTHER"),certdate=angular.element("#"+key+"-date").val(),"mobile"===registerSupplierFactor&&$(window).width()<=430?(certdate?certdateObj[key]=angular.element("#"+key+"-date").val():$scope.$watch(function(){certdateObj[key]?angular.element("#"+key+"-date").val(certdateObj[key]):(angular.element("#"+key+"-date").val(""),$scope.certdate="")},function(){}),certdateVal=certdate):(certdateMobile=angular.element("#"+key).closest("tr").find(".cert-exp").val(),certdateVal=certdateMobile),(certdate||certdateMobile)&&certdateLength++,certificationInfo.certification.push({certification:angular.element("#"+key).val(),certNumber:certNumber,expiryDate:certdateVal}),certNumber?angular.element("#"+key).closest("tr").find(".cert-number").removeClass("err-border").next().hide():angular.element("#"+key).closest("tr").find(".cert-number").addClass("err-border").next().show(),certdate?"mobile"===registerSupplierFactor&&$(window).width()<=430?$timeout(function(){angular.element("#"+key).closest("tr").next().find(".cert-exp").removeClass("err-border").next().hide(),angular.element("#certificateOther").is(":checked")&&""===angular.element("#OTHER-date").val()?angular.element("#OTHER-date").addClass("err-border").next().show():angular.element("#OTHER-date").removeClass("err-border").next().hide(),angular.element("#certificateOther").is(":checked")&&""===angular.element(".other-text-box").val()?angular.element(".other-text-box").addClass("err-border").next().show():angular.element(".other-text-box").removeClass("err-border").next().hide()},100):angular.element("#"+key).closest("tr").find(".cert-exp").removeClass("err-border").next().hide():"mobile"===registerSupplierFactor&&$(window).width()<=430?$timeout(function(){angular.element("#"+key).closest("tr td").find(".certification-checkbox").is(":checked")&&(certdateObj[key]?(angular.element("#"+key).closest("tr").next().find(".cert-exp").addClass("err-border").next().hide(),angular.element("#"+key).closest("tr").next().find(".cert-exp").removeClass("err-border")):(angular.element("#"+key).closest("tr").next().find(".cert-exp").addClass("err-border").next().show(),angular.element("#"+key).closest("tr").next().find(".cert-exp").addClass("err-border"))),angular.element("#certificateOther").is(":checked")&&""===angular.element("#OTHER-date").val()?angular.element("#OTHER-date").addClass("err-border").next().show():angular.element("#OTHER-date").removeClass("err-border").next().hide(),angular.element("#certificateOther").is(":checked")&&""===angular.element(".other-text-box").val()?angular.element(".other-text-box").addClass("err-border").next().show():angular.element(".other-text-box").removeClass("err-border").next().hide()},100):angular.element("#"+key).closest("tr").find(".cert-exp").addClass("err-border").next().show()}}),$scope.$watch(function(){angular.element("#certificateOther").is(":checked")&&""===angular.element(".certificateOtherInput").val()?angular.element(".certificateOtherInput").addClass("err-border").next().show():angular.element(".certificateOtherInput").removeClass("err-border").next().hide(),""===angular.element("#certNo").val()&&angular.element("#certificateOther").is(":checked")?angular.element("#certNo").addClass("err-border").next().show():angular.element("#certNo").removeClass("err-border").next().hide(),""===angular.element("#OTHER-date").val()&&angular.element("#certificateOther").is(":checked")?angular.element("#OTHER-date").addClass("err-border").next().show():angular.element("#OTHER-date").removeClass("err-border").next().hide()},function(){})},registerModule}(),angular.element(".org-state-cont ul li").on("click",function(){$timeout(function(){registerCommon.stateValidateFunc()},200)}),$scope.registerSupplierPhoneNum=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.registerCompyInfoData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if("orgPhoneNum"===name?$scope.isCorrectFormat=!patt.test($scope.registerCompyInfoData[name]):$scope.isPrimaryCorrectFormat=!patt.test($scope.registerCompyInfoData[name]),3===$scope.registerCompyInfoData[name].length&&8!==evt.keyCode?($scope.registerCompyInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.registerCompyInfoData[name]=$scope.registerCompyInfoData[name].replace(/(\d{3})/,"$1-")):7===$scope.registerCompyInfoData[name].length&&8!==evt.keyCode?($scope.registerCompyInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.registerCompyInfoData[name]=$scope.registerCompyInfoData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.registerCompyInfoData[name].length?($scope.registerCompyInfoData[name]=inputValue.replace(/[^0-9]/g,""),$scope.registerCompyInfoData[name]=$scope.registerCompyInfoData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.registerCompyInfoData[name].length&&($scope.registerCompyInfoData[name]=$scope.registerCompyInfoData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectFormat&&"orgPhoneNum"===name){if($scope.registerCompyInfoData[name].length>=12){var str=$scope.registerCompyInfoData[name];$scope.registerCompyInfoData[name]=str.slice(0,12),$scope.isCorrectFormat=!1}}else if($scope.isPrimaryCorrectFormat&&$scope.registerCompyInfoData[name].length>=12){var str=$scope.registerCompyInfoData[name];$scope.registerCompyInfoData[name]=str.slice(0,12),$scope.isPrimaryCorrectFormat=!1}}else if("zip"===zipOrPhone)if(5===$scope.registerCompyInfoData[name].length)$scope.registerCompyInfoData[name]=inputValue.replace(/[^0-9-]/g,""),109!==evt.keyCode&&189!==evt.keyCode||($scope.registerCompyInfoData[name]=$scope.registerCompyInfoData[name]+"-"),isTwoZipCode(name,!1);else if($scope.registerCompyInfoData[name].length>5&&$scope.registerCompyInfoData[name].length<=10)if(new RegExp("-").test($scope.registerCompyInfoData[name]))if(10===$scope.registerCompyInfoData[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"orgZip"===name&&($scope.isCorrectZipFormat=!pattZip.test($scope.registerCompyInfoData[name]))}else isTwoZipCode(name,!0);else 9===$scope.registerCompyInfoData[name].length?(109!==evt.keyCode&&189!==evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},$(".certification-cont tbody tr td:first-child").on("click",function(e){registerCommon.certifyContact()}),$("body").on("focus",".cert-exp",function(){$(this).datepicker({changeMonth:!0,changeYear:!0,onSelect:function(dateText,inst){registerCommon.certifyContact()}})}),angular.element(document).ready(function(){}),$scope.isContinueClicked=!1,$scope.continueBack=!0,$scope.goodsSelected=[],checkboxesCompyInfo=$(".goodsServices input[type='checkbox']"),$scope.registerCompyInfoData={},$scope.registerCompyInfoData.businessAs="",$scope.registerCompyInfoData.bradsheetNum="",$scope.registerCompyInfoData.orgPhoneNumExtn="",$scope.registerCompyInfoData.primaryContPhoneNumExtn="",$scope.validateGoodsServices=function(){registerCommon.validateCompanyGoods()},$scope.continueSubmit=function(){companyInfo.claimForm={},companyInfo.primaryAddress={},companyInfo.primaryContact={},companyInfo.supplierGoodsServices,$scope.isContinueClicked=!0,registerCommon.stateValidateFunc(),registerCommon.validateCompanyGoods(),!$scope.registerCompyInfo.$valid||!$scope.stateVal||$scope.goodsValid||$scope.othersValid||$scope.isCorrectFormat||$scope.isPrimaryCorrectFormat||$scope.isCorrectZipFormat?($scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200)):(angular.forEach($scope.goods,function(value,index){!0===value&&$scope.goodsSelected.push(angular.element("#"+index).val())}),$scope.supplierGoodsServicesOther=angular.element("#otherInfo").val(),companyInfo.claimForm={companyLegalName:$scope.registerCompyInfoData.legalName,doingBusinessAs:$scope.registerCompyInfoData.businessAs,dunBradstreetNumber:$scope.registerCompyInfoData.bradsheetNum},companyInfo.primaryAddress={orgAddress:$scope.registerCompyInfoData.orgAddress,orgCity:$scope.registerCompyInfoData.orgCity,orgState:angular.element("#orgState").text(),orgZipCode:$scope.registerCompyInfoData.orgZip,orgEmail:$scope.registerCompyInfoData.orgEmail,orgPhoneNumber:$scope.registerCompyInfoData.orgPhoneNum,orgPhoneExt:$scope.registerCompyInfoData.orgPhoneNumExtn,orgWebsite:$scope.registerCompyInfoData.orgWebsite},companyInfo.primaryContact={contactFirstName:$scope.registerCompyInfoData.primaryContFirstname,contactLastName:$scope.registerCompyInfoData.primaryContLastname,contactTitle:$scope.registerCompyInfoData.primaryContTitle,contactPhoneNumber:$scope.registerCompyInfoData.primaryContPhoneNum,contactPhoneNumExt:$scope.registerCompyInfoData.primaryContPhoneNumExtn,contactEmail:$scope.registerCompyInfoData.primaryContEmail},companyInfo.supplierGoodsServices=$scope.goodsSelected,$scope.continueBack=!1,registerCommon.continueBackFocus())},$scope.backToCompany=function(){$scope.continueBack=!0,registerCommon.continueBackFocus(),$scope.paginateScroll()},$scope.business="",$scope.isSubmitClicked=!1,$scope.isownerBusinessChecked=!1,$scope.iscertificationChecked=!1,$scope.isownerEthnicitiesOthersChecked=!1,$scope.otherBusiness="",$scope.ethnicityOthers="",certificationCheckboxes=$(".certification-cont input[type='checkbox']"),businessCheckboxes=$(".businessCheck input[type='checkbox']"),$scope.validateCertifyBusiness=function(){registerCommon.certifyBusiness()},$scope.validateOwnerEthnicities=function(){registerCommon.ownerEthnicities()},$scope.validateCertifyContact=function(){registerCommon.certifyContact()},$scope.clickSDBBox=function(value){void 0!==$scope.business.SDB?$scope.isSBDChecked=!0:$scope.isSBDChecked=!1},$("#ethnicitiesOthers").change(function(){$scope.isownerEthnicitiesOthersChecked=$(this).is(":checked")}),$(".businessCheck input[type='checkbox']").on("click",function(){$scope.businessCheckboxes=!0,$('.businessCheck input[type="checkbox"]').each(function(){$(this).is(":checked")&&($scope.businessCheckboxes=!$(this).is(":checked"))})}),$scope.submit=function(){businessCheckboxes.is(":checked")?(""===$scope.otherBusiness&&void 0===$scope.business.OTHER?$scope.isEmptyOtherOwnership=!1:""!==$scope.otherBusiness?$scope.isEmptyOtherOwnership=!1:$scope.isEmptyOtherOwnership=!0,$scope.businessCheckboxes=!1):$scope.businessCheckboxes=!0,certificationInfo.ownershipCertification=[],certificationInfo.ownerEthnicities=[],certificationInfo.certification=[];$scope.isSubmitClicked=!0,angular.element(".certificateOtherInput").removeClass("err-border"),registerCommon.ownerEthnicities(),registerCommon.certifyContact(),$scope.someSelected=function(object){return Object.keys(object).some(function(key){return object[key]})},validForm()&&registerSupplierServices.registerSupplierPost($scope,$scope.registerSuppiler,function(dataAjax){var dataResponce=dataAjax.data.responseStatusCode;if(dataResponce){if("TIMED_OUT"===dataResponce)$scope.errorMsg="TIMED OUT",warningMsg=!0,angular.element("#getStarted-success-txt").addClass("getStarted-error");else if("INTERNAL_ERROR"===dataResponce)$scope.errorMsg="INTERNAL ERROR",warningMsg=!0,angular.element("#getStarted-success-txt").addClass("getStarted-error");else if("CAPTCHA_ERROR"===dataResponce)$scope.errorMsg="INVALID CAPTCHA",warningMsg=!0,angular.element("#getStarted-success-txt").addClass("getStarted-error");else if("SERVICE_ERROR"===dataResponce)$scope.errorMsg="SERVICE ERROR",warningMsg=!0,angular.element("#getStarted-success-txt").addClass("getStarted-error");else if("SUCCESS"===dataResponce){null!=tksPageURL&&"null"!=tksPageURL?$window.location.href=tksPageURL:($scope.errorMsg="SUCCESS. Thank you for sharing your information.",angular.element("#nucaptcha-answer").val(""),warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll()),$scope.registerSuppiler={},$scope.registerCompyInfoData={},$scope.goods={},$scope.business={},$scope.ownerEthnicities={},$scope.certification={},angular.element("#orgState").text("Select state").removeAttr("data-val");var data={event_action:"form",event_name:"Supplier Diversity Registration",event_type:"supplier",event_status:"complete"};utag.link(data)}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),$scope.isContinueClicked=!1,$scope.isSubmitClicked=!1,$scope.backToCompany(),$scope.isSuccess=!0,commonFunctions.loaderHide()}$('.radio-input-wapper input[type="radio"]').each(function(){$(this).prop("checked",!1)}),$('.businessCheck input[type="checkbox"]').each(function(){$(this).prop("checked",!1)}),$('#tableCertification input[type="checkbox"]').each(function(){$(this).prop("checked",!1)}),$('#tableCertification input[type="text"]').each(function(){$(this).val("")}),!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())})},$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-30,angular.element("html, body").stop().animate({scrollTop:tableVal},800)}}]),function(){function lostPolicyFinderContrl($scope,$timeout,lostPolicyFinderServices,$window){function isTwoZipCode(name,booleanValue){"requestorZipCode"===name&&($scope.isCorrectZipFormat=booleanValue)}function getCaptchaData(){angular.element("#nucaptcha-answer-enter")&&angular.element("#nucaptcha-answer-enter").val(),angular.element("#nucaptcha-answer-exit")&&angular.element("#nucaptcha-answer-exit").val(),$scope.lostPolicyData.gRecaptchaResponse=$("#g-recaptcha-response").val()}function getFormData(){$scope.lostPolicyData.identity="LOST_POLICY",$scope.lostPolicyData.formFactor=lostPolicyDataFormFactor,$scope.lostPolicyData.notifierState=angular.element("#lastState").text(),$scope.lostPolicyData.requestorState=angular.element("#contactState").text()}function displayErr(){angular.element(".errorMsg").removeClass("ng-hide"),$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$scope.validationErrorShow=!0,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".site-navigation").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200)}function validForm_Step1(){var retValue=!1;return $scope.lostPolicyData.notifierDob?angular.element(".lostPolicy").addClass("ng-hide"):angular.element(".lostPolicy").removeClass("ng-hide"),$scope.lostPolicyFinder1.$valid&&$scope.validssn&&!$scope.lastStateFlag&&(getFormData(),$scope.validationErrorShow=!1,retValue=!0),retValue}function validForm_Step2(){return!(!$scope.lostPolicyFinder2.$valid||$scope.isCorrectPhoneFormat||$scope.lostPolicyData.requestorEmail!==$scope.lostPolicyData.emailConfirmation)&&($scope.validationErrorShow=!1,!0)}function validForm_Step3(){return!(!$scope.lostPolicyFinder3.$valid||$scope.isCorrectZipFormat)&&(getFormData(),$scope.validationErrorShow=!1,!0)}function validFormFinal(){var capchaVal,isCaptchaAvail=!1;return angular.element(".g-recaptcha").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#g-recaptcha-response").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show()),$scope.lostPolicyFinder1.$valid&&$scope.lostPolicyFinder2.$valid&&$scope.lostPolicyFinder3.$valid&&$scope.lostPolicyFinder4.$valid&&(isCaptchaAvail&&capchaVal||!isCaptchaAvail)&&!$scope.isCorrectPhoneFormat&&!$scope.isCorrectZipFormat?(isCaptchaAvail&&getCaptchaData(),getFormData(),commonFunctions.loaderShow(),$scope.validationErrorShow=!1,!0):(displayErr(),!1)}function validForm(){var capchaVal,isCaptchaAvail=!1;return angular.element(".g-recaptcha").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#g-recaptcha-response").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show()),$scope.lostPolicyFinder.$valid&&(isCaptchaAvail&&capchaVal||!isCaptchaAvail)&&!$scope.isCorrectPhoneFormat&&!$scope.isCorrectZipFormat?(isCaptchaAvail&&getCaptchaData(),getFormData(),commonFunctions.loaderShow(),$scope.validationErrorShow=!1,!0):(displayErr(),!1)}$scope.isFirstClick=!0;var lostPolicyDataFormFactor,commonRequest,warningMsg,lostPolicyCount=0;$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,$scope.termsConditionAck=!1,$scope.emailFormat=/^([a-zA-Z0-9_\-\.]+)@(([a-zA-Z0-9_\-]+\.)+)([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/,$(document).on("responsive:statechanged",function(e,param){lostPolicyDataFormFactor=param}),$scope.onFocusAnalytics=function(){if($scope.isFirstClick){$scope.isFirstClick=!1;var data={event_action:"form",event_name:"Lost Policy Inquiry",event_type:"lostpolicy",event_status:"start"};utag.link(data)}},$(window).resize(function(){$(".lbxslider").css("transform","translateX("+nextCount*-$(".policy-container").width()+"px)"),showHideSummary()}),$(window).width()<751&&($(".lostPolicyFinderFRM1").hide(),$(".lostPolicyFinderFRM2").hide(),$(".lostPolicyFinderFRM3").hide(),$(".lostPolicyFinderFRM4").hide()),angular.element("*").removeClass("none"),commonFunctions.loaderHide(),angular.element(".nucaptcha-answer-error").hide();var commonRequest=(new Calendar({dateId:"date",monthId:"month",yearId:"year",hiddenId:"notifierDob",numberOfYears:130}),function(){var dropValue,commonRequestModule={};return commonRequestModule.dropDownValidation=function(id,flagName,value){dropValue=angular.element("#"+id).text(),dropValue.trim()!==value?$scope[flagName]=!1:$scope[flagName]=!0,"lastState"===id?$scope.lostPolicyData.notifierState=angular.element("#lastState").text():"contactState"===id&&($scope.lostPolicyData.requestorState=angular.element("#contactState").text())},commonRequestModule}());angular.element("ul.state2 li").on("click",function(e){$timeout(function(){commonRequest.dropDownValidation("contactState","stateFlag","Select state")},200)}),angular.element("ul.state li").on("click",function(e){$timeout(function(){commonRequest.dropDownValidation("lastState","lastStateFlag","Select last state of residence")},200)}),angular.element("ul.custom-selectbox-list-cont li").on("click",function(e){$timeout(function(){},200)}),angular.element("#date").on("click",function(e){$timeout(function(){},200)}),$scope.numberFormat=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.lostPolicyData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if("requestorDayPhone"===name&&($scope.isCorrectPhoneFormat=!patt.test($scope.lostPolicyData[name])),3===$scope.lostPolicyData[name].length&&8!==evt.keyCode?($scope.lostPolicyData[name]=inputValue.replace(/[^0-9]/g,""),$scope.lostPolicyData[name]=$scope.lostPolicyData[name].replace(/(\d{3})/,"$1-")):7===$scope.lostPolicyData[name].length&&8!==evt.keyCode?($scope.lostPolicyData[name]=inputValue.replace(/[^0-9]/g,""),$scope.lostPolicyData[name]=$scope.lostPolicyData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.lostPolicyData[name].length?($scope.lostPolicyData[name]=inputValue.replace(/[^0-9]/g,""),$scope.lostPolicyData[name]=$scope.lostPolicyData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.lostPolicyData[name].length&&($scope.lostPolicyData[name]=$scope.lostPolicyData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectPhoneFormat&&$scope.lostPolicyData[name].length>=12){var str=$scope.lostPolicyData[name]
;$scope.lostPolicyData[name]=str.slice(0,12),$scope.isCorrectPhoneFormat=!1}}else if("zip"===zipOrPhone)if(5===$scope.lostPolicyData[name].length)$scope.lostPolicyData[name]=inputValue.replace(/[^0-9-]/g,""),109!==evt.keyCode&&189!==evt.keyCode||($scope.lostPolicyData[name]=$scope.lostPolicyData[name]+"-"),isTwoZipCode(name,!1);else if($scope.lostPolicyData[name].length>5&&$scope.lostPolicyData[name].length<=10)if(new RegExp("-").test($scope.lostPolicyData[name]))if(10===$scope.lostPolicyData[name].length){var pattZip=/^(\d{5}\-\d{4})$/;"requestorZipCode"===name&&($scope.isCorrectZipFormat=!pattZip.test($scope.lostPolicyData[name]))}else isTwoZipCode(name,!0);else 9===$scope.lostPolicyData[name].length?(109!==evt.keyCode&&189!==evt.keyCode||$("#"+evt.target.id).insertAtCaret("-"),isTwoZipCode(name,!1)):isTwoZipCode(name,!0);else isTwoZipCode(name,!0)},angular.extend($scope,{isLostPolicyFinderClicked:!1,lostPolicyData:{},lastStateFlag:!0,stateFlag:!0,isDateValid:!1,isAgree:!1,validationErrorShow:!1}),$(function(){function SetAllClickFalse(){$scope.islostPolicyFinder1Clicked=!1,$scope.islostPolicyFinder2Clicked=!1,$scope.islostPolicyFinder3Clicked=!1,$scope.islostPolicyFinder4Clicked=!1}$("#lpNext1").click(function(){$("#lpNext1").attr("disabled",!0),$timeout(function(){$("#username_temp").hide(),$("#password_temp").hide(),nextCount++,$(".lbxslider").css("transform","translateX("+1*-$(".policy-container").width()+"px)"),$(".dot1").css("background-color","#777"),void 0==$scope.lostPolicyData.notifierFirstName&&($(".policy-right-rail .summsec").hide(),$(".policy-right-rail-head .sumIns").show(),$(".policy-right-rail .summchange").show(),$(".policy-right-rail-head .secHeading").css("border-bottom","none"),$("#ssn").val(""),$("#maidenAliasName").val("")),$(window).width()<751&&($(".lostPolicyFinderFRM1").show(),$(".lostPolicyFinderFRM2").hide(),$(".lostPolicyFinderFRM3").hide(),$(".lostPolicyFinderFRM4").hide()),$("#lpNext1").attr("disabled",!1);var data={event_action:"form",event_name:"Lost Policy Inquiry",event_type:"lostpolicy",event_version:"2",event_status:"start"};utag.link(data)},600)}),$("#lpNext2").click(function(){$("#lpNext2").attr("disabled",!0),$timeout(function(){if($scope.islostPolicyFinder1Clicked=!0,commonRequest.dropDownValidation("lastState","lastStateFlag","Select last state of residence"),$scope.lostPolicyData.notifierState=angular.element("#lastState").text(),$scope.$apply,validForm_Step1()){nextCount++,$(window).width()<751&&($(".lostPolicyFinderFRM2").show(),$(".lostPolicyFinderFRM3").hide(),$(".lostPolicyFinderFRM4").hide()),$(".lbxslider").css("transform","translateX("+2*-$(".policy-container").width()+"px)"),$(window).width()<751&&$timeout(function(){$(".lostPolicyFinderFRM1").hide()},1e3),$(".policy-right-rail .summarySec1").show(),$(".policy-right-rail .steps").show(),$(".policy-right-rail-head .sumIns").hide(),$(".policy-right-rail .summchange").show(),$(".policy-right-rail-head .secHeading").css("border-bottom","1px solid #dcdee0"),$(".dot1").css("background-color","#3C6"),$(".dot1").css("border","1px solid #3C6"),$(".dot2").css("background-color","#777");var data={event_action:"button",event_name:"Next",event_type:"lostpolicy",event_status:"Step 2"};utag.link(data),SetAllClickFalse(),angular.element(".errorMsg").addClass("ng-hide")}else displayErr(),$scope.paginateScroll();$("#lpNext2").attr("disabled",!1)},600)}),$("#lpNext3").click(function(){$("#lpNext3").attr("disabled",!0),$timeout(function(){if($scope.displayError=!1,$scope.islostPolicyFinder2Clicked=!0,validForm_Step2()){nextCount++,$(window).width()<751&&($(".lostPolicyFinderFRM1").hide(),$(".lostPolicyFinderFRM3").show(),$(".lostPolicyFinderFRM4").hide()),$(".lbxslider").css("transform","translateX("+3*-$(".policy-container").width()+"px)"),$(window).width()<751&&$timeout(function(){$(".lostPolicyFinderFRM2").hide()},1e3),$(".policy-right-rail .summarySec2").show(),$(".policy-right-rail .steps").show(),$(".dot2").css("background-color","#3C6"),$(".dot2").css("border","1px solid #3C6"),$(".dot3").css("background-color","#777");var data={event_action:"button",event_name:"Next",event_type:"lostpolicy",event_status:"Step 3"};utag.link(data),SetAllClickFalse(),angular.element(".errorMsg").addClass("ng-hide")}else displayErr(),$scope.paginateScroll();$("#lpNext3").attr("disabled",!1)},600)}),$("#lpNext4").click(function(){$("#lpNext4").attr("disabled",!0),$timeout(function(){if($scope.displayError=!1,$scope.islostPolicyFinder3Clicked=!0,commonRequest.dropDownValidation("contactState","stateFlag","Select state"),$scope.lostPolicyData.requestorState=angular.element("#contactState").text(),validForm_Step3()){nextCount++,$(window).width()<751&&($(".lostPolicyFinderFRM1").hide(),$(".lostPolicyFinderFRM2").hide(),$(".lostPolicyFinderFRM4").show()),$(".lbxslider").css("transform","translateX("+4*-$(".policy-container").width()+"px)"),$(window).width()<751&&$timeout(function(){$(".lostPolicyFinderFRM3").hide()},1e3),$(".policy-right-rail .summarySec3").show(),$(".policy-right-rail .steps").show(),$(".dot3").css("background-color","#3C6"),$(".dot3").css("border","1px solid #3C6"),$(".dot4").css("background-color","#777");var data={event_action:"button",event_name:"Next",event_type:"lostpolicy",event_status:"Step 4"};utag.link(data),SetAllClickFalse(),angular.element(".errorMsg").addClass("ng-hide")}else displayErr(),$scope.paginateScroll();$("#lpNext4").attr("disabled",!1)},600)}),$(prevButton).click(function(){$(prevButton).attr("disabled",!0),$timeout(function(){$scope.displayError=!1;var event_status="Step "+(nextCount-1).toString();1==nextCount&&(event_status="");var data={event_action:"link",event_name:"Previous",event_type:"lostpolicy",event_status:event_status};$(window).width()<751&&($(".lostPolicyFinderFRM1").hide(),$(".lostPolicyFinderFRM2").hide(),$(".lostPolicyFinderFRM3").hide(),$(".lostPolicyFinderFRM4").hide());var nextSection=nextCount;$(window).width()<751&&$(".lostPolicyFinderFRM"+nextCount).show(),nextCount--,$(window).width()<751&&$(".lostPolicyFinderFRM"+nextCount).show(),$(".lbxslider").css("transform","translateX("+nextCount*-$(".policy-container").width()+"px)"),$(window).width()<751&&$timeout(function(){$(".lostPolicyFinderFRM"+nextSection).hide()},600),$(".dot"+Number(nextCount+1)).css("background-color","#FFF"),$(".dot"+nextCount).css("background-color","#777"),$(".dot"+Number(nextCount+1)).css("border","1px solid #777"),$(".dot"+nextCount).css("border","1px solid #777"),utag.link(data),$(prevButton).attr("disabled",!1)},600)})}),$scope.showSsn=!1,$scope.validssn=!0,$scope.ssn="",$scope.format=/^\d{3}[- ]?\d{2}[- ]?\d{4}$/,$scope.toggleShowSsn=function(){$scope.showSsn=!$scope.showSsn,"password"==$("#ssn").attr("type")?$("#ssn").attr("type","text"):$("#ssn").attr("type","password")},$scope.ValidatePaste=function(contType,e){var ctrlName=e.target.attributes.id.value,pastedData="";if("drop"==e.type)pastedData=e.dataTransfer.getData("Text");else if("paste"==e.type){var clipData;clipData=e.clipboardData||window.clipboardData,void 0==clipData&&(clipData=e.originalEvent.clipboardData),void 0!=clipData&&(pastedData=clipData.getData("Text"))}var currentData=ProcessDataForCorrection(contType,ctrlName,pastedData),charLength=$("#"+ctrlName).attr("maxLength");currentData.length>charLength&&(currentData=currentData.slice(0,charLength),$("#"+ctrlName).val(currentData)),$scope.lostPolicyData[ctrlName]=currentData,e.preventDefault()},$scope.UpdateJSON=function(contType,e){var ctrlName=e.target.attributes.id.value,charLength=$("#"+ctrlName).attr("maxLength"),value=$("#"+ctrlName).val();value.length>0&&($("#"+ctrlName).val(""),value=ProcessDataForCorrection(contType,ctrlName,value),value.length>charLength&&$("#"+ctrlName).val(value.slice(0,charLength)),$scope.lostPolicyData[ctrlName]=$("#"+ctrlName).val().trim(),$scope["invalid"+ctrlName]=!1)},$scope.addDash=function(event){if("8"!=event.keyCode?("3"!=event.target.value.length&&6!=event.target.value.length||($scope.lostPolicyData.ssn=event.target.value+"-"),"4"!=event.target.value.length&&7!=event.target.value.length||"-"==event.target.value[event.target.value.length-1]||($scope.lostPolicyData.ssn=event.target.value.substring(0,event.target.value.length-1)+"-"+event.target.value[event.target.value.length-1])):"-"==event.target.value[event.target.value.length-1]&&($scope.lostPolicyData.ssn=event.target.value.substring(0,event.target.value.length-1)),"11"==event.target.value.length||"0"==event.target.value.length){if($scope.validssn=!0,"11"==event.target.value.length){var patt=/^(\d{3}\-\d{2}-\d{4})$/;$scope.validssn=patt.test(event.target.value)}}else $scope.validssn=!1},$(function(){$scope.submitFinalRequest=function(){$scope.displayError=!1,$scope.islostPolicyFinder4Clicked=!0,lostPolicyCount||($scope.lostPolicyData.notifierDob?angular.element(".lostPolicy").addClass("ng-hide"):angular.element(".lostPolicy").removeClass("ng-hide"),lostPolicyCount=1),validFormFinal()&&lostPolicyFinderServices.lostPolicyFinderPost($scope,$scope.lostPolicyData,function(dataAjax){var dataResponse=dataAjax.data.responseStatusCode;if(dataResponse){if($scope.isSuccess=!0,"TIMED_OUT"===dataResponse)$scope.errorMsg="TIMED OUT",warningMsg=!0;else if("INTERNAL_ERROR"===dataResponse){for(var InvalidFieldsStr=dataAjax.data.serviceReponseMessage.replace("[","").replace("]",""),InvalidFields=InvalidFieldsStr.toString().split(","),iCnt=0;iCnt<InvalidFields.length;iCnt++){var invalidFlag="invalid"+InvalidFields[iCnt].trim();$scope[invalidFlag]=!0}$scope.errorMsg="INTERNAL ERROR",warningMsg=!0}else if("CAPTCHA_ERROR"===dataResponse||"RECAPTCHA_ERROR"===dataResponse)$scope.errorMsg="INVALID CAPTCHA",warningMsg=!0;else if("SERVICE_ERROR"===dataResponse)$scope.errorMsg="SERVICE ERROR",warningMsg=!0;else if("SUCCESS"===dataResponse||"MISSING_CAPTCHA"===dataResponse){$(".agreementStatment").hide(),null!==tksPageURL&&"null"!==tksPageURL?($scope.isSuccess=!1,$window.location.href=tksPageURL):($scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll()),$scope.lastStateFlag=!1,$scope.stateFlag=!1,$scope.lostPolicyData={},commonFunctions.resetDatePicker(),angular.element("#contactState").text("Select state").removeAttr("data-val"),angular.element("#lastState").text("Select last state of residence").removeAttr("data-val"),$scope.isLostPolicyFinderClicked=!1,$scope.isFirstClick=!0;var data={event_action:"form",event_name:"Lost Policy Inquiry",event_type:"lostpolicy",event_version:"2",event_status:"complete"};utag.link(data)}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide()}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())})}}),$scope.submitRequest=function(){$scope.isLostPolicyFinderClicked=!0,submitClicked=!0,commonRequest.dropDownValidation("lastState","lastStateFlag","Select last state of residence"),commonRequest.dropDownValidation("contactState","stateFlag","Select state"),lostPolicyCount||($scope.lostPolicyData.notifierDob?angular.element(".lostPolicy").addClass("ng-hide"):angular.element(".lostPolicy").removeClass("ng-hide"),lostPolicyCount=1),validForm()&&lostPolicyFinderServices.lostPolicyFinderPost($scope,$scope.lostPolicyData,function(dataAjax){var dataResponse=dataAjax.data.responseStatusCode;if(dataResponse){if($scope.isSuccess=!0,"TIMED_OUT"===dataResponse)$scope.errorMsg="TIMED OUT",warningMsg=!0;else if("INTERNAL_ERROR"===dataResponse)$scope.errorMsg="INTERNAL ERROR",warningMsg=!0;else if("CAPTCHA_ERROR"===dataResponse)$scope.errorMsg="INVALID CAPTCHA",warningMsg=!0;else if("SERVICE_ERROR"===dataResponse)$scope.errorMsg="SERVICE ERROR",warningMsg=!0;else if("SUCCESS"===dataResponse){null!==tksPageURL&&"null"!==tksPageURL?($scope.isSuccess=!1,$window.location.href=tksPageURL):($scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll()),$scope.lastStateFlag=!1,$scope.stateFlag=!1,$scope.lostPolicyData={},commonFunctions.resetDatePicker(),angular.element("#contactState").text("Select state").removeAttr("data-val"),angular.element("#lastState").text("Select last state of residence").removeAttr("data-val"),$scope.isLostPolicyFinderClicked=!1;var data={event_action:"form",event_name:"Lost Policy Inquiry",event_type:"lostpolicy",event_status:"complete"};utag.link(data)}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide()}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())})},$(".date-wrapper .date-field-container .custom-selectbox-wrap .custom-selectbox").on("click",function(){if($(this).hasClass("inactive"))return!1}),$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".topheader-logo-cont").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)}}lfgapp.controller("lostPolicyFinderContrl",lostPolicyFinderContrl),lostPolicyFinderContrl.$inject=["$scope","$timeout","lostPolicyFinderServices","$window"]}();var prevButton=".lpPrev",nextCount=0;!function(){function securityReportingContrl($scope,$timeout,securityReportingServices,$window){function getCaptchaData(){angular.element("#nucaptcha-answer-enter")&&angular.element("#nucaptcha-answer-enter").val(),angular.element("#nucaptcha-answer-exit")&&angular.element("#nucaptcha-answer-exit").val(),$scope.securityReportData.gRecaptchaResponse=$("#g-recaptcha-response").val()}function getFormData(){$scope.securityReportData.identity="SECURITY_REPORTING_FORM",$scope.securityReportData.formFactor=securityReportDataFormFactor,$scope.securityReportData.firstName=$scope.securityReportData.firstName,$scope.securityReportData.lastName=$scope.securityReportData.lastName,$scope.securityReportData.phone=$scope.securityReportData.phone,$scope.securityReportData.email=$scope.securityReportData.email,$scope.securityReportData.issueDescription=$scope.securityReportData.issueDescription}function displayErr(){$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$scope.validationErrorShow=!0,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200)}function validForm(){var capchaVal,isCaptchaAvail=!1;return angular.element(".g-recaptcha").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#g-recaptcha-response").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show()),$scope.securityReporting.$valid&&(isCaptchaAvail&&capchaVal||!isCaptchaAvail)&&!$scope.isCorrectPhoneFormat?(isCaptchaAvail&&getCaptchaData(),getFormData(),commonFunctions.loaderShow(),$scope.validationErrorShow=!1,!0):(displayErr(),!1)}utag_data.event_action="form",utag_data.event_name="Security Report Notification",utag_data.event_type="security",utag_data.event_status="start";var securityReportDataFormFactor,warningMsg;$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,$scope.emailFormat=/^[a-z]+[a-z0-9._]+@[a-z]+\.[a-z.]{2,5}$/,$(document).on("responsive:statechanged",function(e,param){securityReportDataFormFactor=param}),angular.element("*").removeClass("none"),commonFunctions.loaderHide(),angular.element(".nucaptcha-answer-error").hide(),$scope.numberFormat=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if($scope.securityReportData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if("phone"===name&&($scope.isCorrectPhoneFormat=!patt.test($scope.securityReportData[name])),3===$scope.securityReportData[name].length&&8!==evt.keyCode?($scope.securityReportData[name]=inputValue.replace(/[^0-9]/g,""),$scope.securityReportData[name]=$scope.securityReportData[name].replace(/(\d{3})/,"$1-")):7===$scope.securityReportData[name].length&&8!==evt.keyCode?($scope.securityReportData[name]=inputValue.replace(/[^0-9]/g,""),$scope.securityReportData[name]=$scope.securityReportData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.securityReportData[name].length?($scope.securityReportData[name]=inputValue.replace(/[^0-9]/g,""),$scope.securityReportData[name]=$scope.securityReportData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.securityReportData[name].length&&($scope.securityReportData[name]=$scope.securityReportData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectPhoneFormat&&$scope.securityReportData[name].length>=12){var str=$scope.securityReportData[name];$scope.securityReportData[name]=str.slice(0,12),$scope.isCorrectPhoneFormat=!1}}},angular.extend($scope,{isSecurityReportingClicked:!1,securityReportData:{},lastStateFlag:!0,stateFlag:!0,isDateValid:!1,isAgree:!1,validationErrorShow:!1}),$scope.submitRequest=function(){$scope.isSecurityReportingClicked=!0,submitClicked=!0,validForm()&&securityReportingServices.securityReportingPost($scope,$scope.securityReportData,function(dataAjax){var dataResponce=dataAjax.data.responseStatusCode;if(dataResponce){if($scope.isSuccess=!0,"TIMED_OUT"===dataResponce)$scope.errorMsg="TIMED OUT",warningMsg=!0;else if("INTERNAL_ERROR"===dataResponce)$scope.errorMsg="INTERNAL ERROR",warningMsg=!0;else if("CAPTCHA_ERROR"===dataResponce)$scope.errorMsg="INVALID CAPTCHA",warningMsg=!0;else if("SERVICE_ERROR"===dataResponce)$scope.errorMsg="SERVICE ERROR",warningMsg=!0;else if("SUCCESS"===dataResponce){null!==tksPageURL&&"null"!==tksPageURL?($scope.isSuccess=!1,$window.location.href=tksPageURL):($scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll()),$scope.lastStateFlag=!1,$scope.stateFlag=!1,$scope.securityReportData={},$scope.isSecurityReportingClicked=!1;var data={event_action:"form",event_name:"Security Report Notification",event_type:"security",event_status:"complete"};utag.link(data)}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide()}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())})},$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)}}lfgapp.controller("securityReportingContrl",securityReportingContrl),securityReportingContrl.$inject=["$scope","$timeout","securityReportingServices","$window"]}(),function(){function spanishContactFormContrl($scope,$timeout,spanishContactFormServices,$window){function getCaptchaData(){angular.element("#nucaptcha-answer-enter")&&angular.element("#nucaptcha-answer-enter").val(),angular.element("#nucaptcha-answer-exit")&&angular.element("#nucaptcha-answer-exit").val(),$scope.spanishContactFormData.gRecaptchaResponse=$("#g-recaptcha-response").val()}function getFormData(){$scope.spanishContactFormData.identity="ROL_REGISTRATION_ES",$scope.spanishContactFormData.formFactor=spanishContactFormDataFormFactor,$scope.spanishContactFormData.fullName=$scope.spanishContactFormData.fullName,$scope.spanishContactFormData.phone=$scope.spanishContactFormData.phone,$scope.spanishContactFormData.emailID=$scope.spanishContactFormData.emailID,$scope.spanishContactFormData.financialNeed=$scope.spanishContactFormData.financialNeed,$scope.spanishContactFormData.location=angular.element("#location").text()}function displayErr(){$scope.displayError=!0,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!1,$scope.validationErrorShow=!0,$timeout(function(){if(angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").length>0){var tisErrVal=angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).parent().offset().top;tisErrVal=tisErrVal-angular.element(".site-navigation").outerHeight(!0)-50,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".c-err-box, .c-err-box-noimg, .c-err-box-radio").eq(0).focus()})}},200)}function validForm(){var capchaVal,isCaptchaAvail=!1;return angular.element(".g-recaptcha").length>0&&(isCaptchaAvail=!0,capchaVal=angular.element("#g-recaptcha-response").val(),capchaVal?angular.element(".nucaptcha-answer-error").hide():angular.element(".nucaptcha-answer-error").show()),$scope.spanishContactForm.$valid&&(isCaptchaAvail&&capchaVal||!isCaptchaAvail)&&!$scope.isCorrectPhoneFormat&&!$scope.locationFlag?(isCaptchaAvail&&getCaptchaData(),getFormData(),commonFunctions.loaderShow(),$scope.validationErrorShow=!1,$scope.displayError=!1,!0):(displayErr(),!1)}$scope.isFirstClick=!0;var spanishContactFormDataFormFactor,warningMsg;$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!1,$scope.emailFormat=/^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/,$scope.fullNameFormat=/^([ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜáíóúñÑa-zA-Z \-\'\.]+)$/,$(document).on("responsive:statechanged",function(e,param){spanishContactFormDataFormFactor=param}),angular.element("*").removeClass("none"),commonFunctions.loaderHide(),angular.element(".nucaptcha-answer-error").hide(),$scope.onFocusAnalytics=function(){if($scope.isFirstClick){$scope.isFirstClick=!1;var data={event_action:"form",event_name:"ROL Spanish Contact FORM",event_type:"contact",event_status:"start"};utag.link(data)}},$scope.numberFormat=function(evt,inputValue,name,zipOrPhone){if(void 0===inputValue)return"";if(!inputValue)return $scope.isCorrectPhoneFormat=!1,"";if($scope.spanishContactFormData[name]=inputValue.replace(/[^0-9-]/g,""),"phone"===zipOrPhone){var patt=/^(\d{3}\-\d{3}-\d{4})$/;if("phone"===name&&($scope.isCorrectPhoneFormat=!patt.test($scope.spanishContactFormData[name])),3===$scope.spanishContactFormData[name].length&&8!==evt.keyCode?($scope.spanishContactFormData[name]=inputValue.replace(/[^0-9]/g,""),$scope.spanishContactFormData[name]=$scope.spanishContactFormData[name].replace(/(\d{3})/,"$1-")):7===$scope.spanishContactFormData[name].length&&8!==evt.keyCode?($scope.spanishContactFormData[name]=inputValue.replace(/[^0-9]/g,""),$scope.spanishContactFormData[name]=$scope.spanishContactFormData[name].replace(/(\d{3})(\d{3})/,"$1-$2-")):12===$scope.spanishContactFormData[name].length?($scope.spanishContactFormData[name]=inputValue.replace(/[^0-9]/g,""),$scope.spanishContactFormData[name]=$scope.spanishContactFormData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===$scope.spanishContactFormData[name].length&&($scope.spanishContactFormData[name]=$scope.spanishContactFormData[name].replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),$scope.isCorrectPhoneFormat&&$scope.spanishContactFormData[name].length>=12){var str=$scope.spanishContactFormData[name];$scope.spanishContactFormData[name]=str.slice(0,12),$scope.isCorrectPhoneFormat=!1}}},angular.extend($scope,{isSpanishContactFormClicked:!1,spanishContactFormData:{},locationFlag:!0,validationErrorShow:!1});var commonRequest=function(){var dropValue,commonRequestModule={};return commonRequestModule.dropDownValidation=function(id,flagName,value){dropValue=angular.element("#"+id).text(),dropValue.trim()!==value?$scope[flagName]=!1:$scope[flagName]=!0,"location"===id&&($scope.spanishContactFormData.location=angular.element("#location").text())},commonRequestModule}();angular.element("ul.locationList li").on("click",function(e){$timeout(function(){commonRequest.dropDownValidation("location","locationFlag","Selecciona un estado")},200)}),$scope.ValidatePaste=function(contType,e){var ctrlName=e.target.attributes.id.value,pastedData="";if("drop"==e.type)pastedData=e.dataTransfer.getData("Text");else if("paste"==e.type){var clipData;clipData=e.clipboardData||window.clipboardData,void 0==clipData&&(clipData=e.originalEvent.clipboardData),void 0!=clipData&&(pastedData=clipData.getData("Text"))}var currentData=ProcessDataForCorrection(contType,ctrlName,pastedData),charLength=$("#"+ctrlName).attr("maxLength");currentData.length>charLength&&(currentData=currentData.slice(0,charLength),$("#"+ctrlName).val(currentData)),$scope.spanishContactForm[ctrlName]=currentData,e.preventDefault()},$scope.UpdateJSON=function(contType,e){var ctrlName=e.target.attributes.id.value,charLength=$("#"+ctrlName).attr("maxLength"),value=$("#"+ctrlName).val();value.length>0&&($("#"+ctrlName).val(""),value=ProcessDataForCorrection(contType,ctrlName,value),value.length>charLength&&$("#"+ctrlName).val(value.slice(0,charLength)),$scope.spanishContactForm[ctrlName]=$("#"+ctrlName).val().trim(),$scope["invalid"+ctrlName]=!1)},$scope.submitRequest=function(){$scope.isSpanishContactFormClicked=!0,submitClicked=!0,commonRequest.dropDownValidation("location","locationFlag","Selecciona un estado"),validForm()&&spanishContactFormServices.spanishContactFormPost($scope,$scope.spanishContactFormData,function(dataAjax){var dataResponse=dataAjax.data.responseStatusCode;if(dataResponse){if($scope.isSuccess=!0,"TIMED_OUT"===dataResponse)$scope.errorMsg="TIMED OUT",warningMsg=!0;else if("INTERNAL_ERROR"===dataResponse){for(var InvalidFieldsStr=dataAjax.data.serviceReponseMessage.replace("[","").replace("]",""),InvalidFields=InvalidFieldsStr.toString().split(","),iCnt=0;iCnt<InvalidFields.length;iCnt++){var invalidFlag="invalid"+InvalidFields[iCnt].trim();$scope[invalidFlag]=!0}$scope.errorMsg="INTERNAL ERROR",warningMsg=!0}else if("CAPTCHA_ERROR"===dataResponse||"RECAPTCHA_ERROR"===dataResponse)$scope.errorMsg="INVALID CAPTCHA",warningMsg=!0;else if("SERVICE_ERROR"===dataResponse)$scope.errorMsg="SERVICE ERROR",warningMsg=!0;else if("SUCCESS"===dataResponse){null!==tksPageURL&&"null"!==tksPageURL?($scope.isSuccess=!1,$window.location.href=tksPageURL):($scope.errorMsg="SUCCESS. Thank you for sharing your information.",warningMsg=!1,$scope.displayError=!1,$scope.displayWarningMsg=!1,$scope.displaySuccessMsg=!0,$scope.paginateScroll()),$scope.locationFlag=!1,$scope.stateFlag=!1,$scope.spanishContactFormData={},$scope.isSpanishContactFormClicked=!1,$scope.isFirstClick=!0;var data={event_action:"form",event_name:"ROL Spanish Contact FORM",event_type:"contact",event_status:"complete"};utag.link(data)}angular.element(".nucaptch-wrapper").length>0&&ncCmdNewChallenge(""),commonFunctions.loaderHide()}!0===warningMsg&&($scope.displayError=!1,$scope.displaySuccessMsg=!1,$scope.displayWarningMsg=!0,$scope.paginateScroll())})},$scope.paginateScroll=function(){var tableVal=angular.element(".ArticleContent").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800)}}lfgapp.controller("spanishContactFormContrl",spanishContactFormContrl),spanishContactFormContrl.$inject=["$scope","$timeout","spanishContactFormServices","$window"]}(),lfgapp.controller("AnnuitySearchFormsContrl",["$scope","$http","$timeout",function($scope,$http,$timeout){$scope.init=function(cateName){$http.post("/pbl-forms-service-app/rest/forms/searchForms",{identity:globalConstant.formToolCategories[cateName]}).success(function(data,status,headers,config){"Success"===data.statusMessage&&($scope.categoryFormList=data.formDetailList,commonFunctions.callAccordion(cateName))}).error(function(data,status,headers,config){})}}]),lfgapp.controller("AnnuityClaimsFormsContrl",["$scope","$http","$timeout",function($scope,$http,$timeout){$scope.init=function(cateName){$http.post("/pbl-forms-service-app/rest/forms/searchForms",{identity:globalConstant.formToolCategories[cateName]}).success(function(data,status,headers,config){"Success"===data.statusMessage&&($scope.categoryFormList=data.formDetailList,commonFunctions.callAccordion(cateName))}).error(function(data,status,headers,config){})}}]),lfgapp.controller("LifeSearchFormsContrl",["$scope","$http","$timeout",function($scope,$http){$scope.init=function(cateName){$http.post("/pbl-forms-service-app/rest/forms/searchForms",{identity:globalConstant.formToolCategories[cateName]}).success(function(data){"Success"===data.statusMessage&&($scope.categoryFormList=data.formDetailList,commonFunctions.callAccordion(cateName))}).error(function(data){console.log("Error : ",data)})}}]),lfgapp.controller("LifeClaimsFormsContrl",["$scope","$http","$timeout",function($scope,$http){$scope.init=function(cateName){$http.post("/pbl-forms-service-app/rest/forms/searchForms",{identity:globalConstant.formToolCategories[cateName]}).success(function(data){"Success"===data.statusMessage&&($scope.categoryFormList=data.formDetailList,commonFunctions.callAccordion(cateName))}).error(function(data){console.log("Error : ",data)})}}]),lfgapp.controller("LongTermClaimsFormsContrl",["$scope","$http","$timeout",function($scope,$http){$scope.init=function(cateName){$http.post("/pbl-forms-service-app/rest/forms/searchForms",{identity:globalConstant.formToolCategories[cateName]}).success(function(data){"Success"===data.statusMessage&&($scope.categoryFormList=data.formDetailList,commonFunctions.callAccordion(cateName))}).error(function(data){console.log("Error : ",data)})}}]),lfgapp.controller("formToolContrl",["$scope","$http","$timeout",function($scope,$http){$scope.init=function(cateName){$http.post("/pbl-forms-service-app/rest/forms/searchForms",{identity:globalConstant.formToolCategories[cateName]}).success(function(data){"Success"===data.statusMessage&&($scope.categoryFormList=data.formDetailList)}).error(function(data){console.log("Error : ",data)})}}]),lfgapp.controller("fundsPerformanceToolContrl",["$scope","$rootScope","$timeout","$window",function($scope,$rootScope,$timeout,$window){function setIntervalLimited(callback,interval,x){for(var i=0;i<x;i++)setTimeout(callback,i*interval)}function autoTabHeight(tabValue){var biggestHeight=0;if("performance"===tabValue)$timeout(function(){angular.element(".fund-performance-tool").height("auto")},300);else{var timeOutValue;timeOutValue=tabValue&&!isNaN(tabValue)?tabValue:0,$timeout(function(){setIntervalLimited(function(){$("#fpt-suite-cats").is(":visible")?biggestHeight=$("#fpt-suite-cats").outerHeight()+$("#fpt-suite-cats .UITabset.UITabset-holder div.is-active").outerHeight():$("#fpt-product-cats").is(":visible")&&(biggestHeight=$("#fpt-product-cats").outerHeight()+$("#fpt-product-cats .UITabset.UITabset-holder div.is-active").outerHeight()),angular.element(".fund-performance-tool").height(biggestHeight+$(".fpt-mini-nav").outerHeight())},10,60)},timeOutValue)}}function alternateProductListColor(){$(".NotavailableProduct .collapse-data:first-child a").length%2!=0?$(".NotavailableProduct .collapse-data:last-child").removeClass("alternate-color"):$(".NotavailableProduct .collapse-data:last-child").addClass("alternate-color")}function productCustomAnalytics(){if($("#fpt-product-cats").is(":visible")){var activeTabPanel=$('div[role="tabpanel"][data-suite-id="'+$scope.suiteID+'"].is-active');angular.element(activeTabPanel).find(".product-list").attr("data-eventversion",$scope.suiteName.replace(/\s+/g," ").trim()+" "+activeTabPanel.attr("data-state-tab"))}}function productClicked(){$rootScope.$broadcast("fundPerformanceInit"),$scope.analyticsControl=!1,commonFunctions.loaderShow(),$scope.showProducts=!1,$scope.showResults=!0,$scope.tabActiveChange("performance-nav","active"),autoTabHeight("performance"),$timeout(function(){
$("#fpt-products-results").data("eventversion",$("#fpt-products-results").attr("data-eventversion")),$('#fpt-products-results li.internal-tabset-tab[data-eventname="performance"]').click()},200)}var visibleProducts=!1;$scope.suiteCat="",$scope.suiteID=null,$scope.suiteTitle="",$scope.suiteName="",$scope.productTitle="",$scope.productName="",$scope.productLCN="",$scope.NotAvailableSuite=!1,$scope.showProducts=!0,$scope.showResults=!1,$scope.analyticsControl=!0,$scope.tileSize=0;var tabValueArr=["suite-nav","product-nav","performance-nav"];$scope.tabActiveChange=function(tabValue,tabClickValue){var selectIndex=tabValueArr.indexOf(tabValue);angular.forEach(tabValueArr,function(value,index){selectIndex==index&&(tabClickValue||$("."+tabValue).hasClass("default"))?($("."+tabValue).removeClass("default").addClass("active"),"suite-nav"==tabValue&&($scope.showResults=!1,angular.element("#fpt-suite-cats").toggle("slide",{direction:"left"},400),angular.element("#fpt-product-cats").toggle("slide",{direction:"right"},400),updateAnalytics($("."+tabValue)),$scope.tileSize=$(".UITabset-holder > div.is-active").find("a[data-eventname]").not("[data-eventname='']").length,autoTabHeight()),"product-nav"==tabValue&&($scope.showResults=!1,$scope.showProducts=!0,void 0==tabClickValue&&(updateAnalytics($("."+tabValue)),$(window).trigger("resize"),$timeout(function(){$(window).trigger("resize")})),autoTabHeight())):selectIndex>index&&tabClickValue?$("."+value).removeClass("active").addClass("default"):selectIndex<index&&$("."+value).removeClass("active default")})},$scope.onclickSuite=function(event){if(angular.element("#fpt-suite-cats").toggle("slide",{direction:"left"},400),angular.element("#fpt-product-cats").toggle("slide",{direction:"right"},400),$scope.tabActiveChange("product-nav","active"),angular.element(".product-list").css("display","block"),angular.element(".NotavailableProduct .collapse").removeClass("hide-toggle"),visibleProducts=!1,angular.element(".NotavailableProduct .collapse a span").text("Didn't find your product?  View no longer for sale products"),event.target.attributes["data-suiteid"])var suiteTile=angular.element(event.target);else var suiteTile=angular.element(event.target).parents("div[data-suiteid]");$scope.suiteCat=suiteTile.parents("a[data-eventversion]").attr("data-eventversion"),suiteTile.hasClass("not-available")?$scope.NotAvailableSuite=!0:$scope.NotAvailableSuite=!1,$scope.NotAvailableSuite?angular.element(".collapse-data-column").show():angular.element(".collapse-data-column").hide(),$scope.suiteID=angular.element(suiteTile).attr("data-suiteid"),$scope.suiteID&&($scope.suiteTitle=$(suiteTile).find(".tile-title").html(),$scope.suiteName=$(suiteTile).find(".tile-title").text(),$scope.analyticsControl=!1,angular.element('#fpt-product-cats li.internal-tabset-tab[data-suite-id="'+$scope.suiteID+'"]')[0].click()),$timeout(function(){$(window).trigger("resize")},400),$timeout(function(){productCustomAnalytics(),$("[data-eventaction='tile']").each(function(){$(this).attr("data-eventname",$(this).find(".tile-title").text())})},500),$scope.tileSize=$(".UITabset-holder > div.is-active").find("a[data-eventname]").not("[data-eventname='']").length,autoTabHeight()},angular.element(".TileWithBlurb .toggle-icon, .TileWithBlurb .close-icon").on("click",function(){var tilePar=$(this).parents(".TileWithBlurb");tilePar.hasClass("icon-toggled")?tilePar.removeClass("icon-toggled"):tilePar.addClass("icon-toggled"),autoTabHeight()}),$scope.onAvailProductClick=function(event){if(angular.element(event.target).attr("data-productid"))var productTile=angular.element(event.target);else var productTile=angular.element(event.target).parents("div[data-productid]");$scope.productTitle=$(productTile).find(".tile-title").html(),$scope.productName=$(productTile).find(".tile-title").text(),window.value=productTile.attr("data-productid"),$scope.productLCN=productTile.attr("data-lcn"),productClicked()},$scope.onNotAvailProductClick=function(event){if(angular.element(event.target).attr("data-productid"))var productLink=angular.element(event.target);else var productLink=angular.element(event.target).parents("a[data-productid]");$scope.productTitle=$(productLink).html(),$scope.productName=$(productLink).text(),window.value=productLink.attr("data-productid"),$scope.productLCN=productLink.attr("data-lcn"),productClicked()},$scope.notAvailableProducts=function(){visibleProducts?(angular.element(".NotavailableProduct .collapse").removeClass("hide-toggle"),angular.element(".collapse-data-column").toggle(),$timeout(function(){angular.element(".NotavailableProduct .collapse a span").text("Didn't find your product?  View no longer for sale products")})):(angular.element(".NotavailableProduct .collapse").addClass("hide-toggle"),angular.element(".collapse-data-column").slideToggle(500),$timeout(function(){angular.element(".NotavailableProduct .collapse a span").text("Hide not available for new sales")})),angular.element(".product-list").slideToggle(500),autoTabHeight(300),alternateProductListColor(),visibleProducts=!visibleProducts},angular.element('ul[data-target="suite-tab-set"] li.internal-tabset-tab, ul[data-target="product-tab"] li.internal-tabset-tab').on("click",function(){var tileSizeValue=$(".UITabset-holder > div.is-active").find("a[data-eventname]").not("[data-eventname='']").length;$scope.tileSize<tileSizeValue?autoTabHeight(350):autoTabHeight(),$scope.tileSize=tileSizeValue,$scope.analyticsControl&&updateAnalytics($(this)),$scope.analyticsControl=!0}),$('ul[data-target="my-tab-set"] > li').on("click",function(){$scope.analyticsControl&&updateAnalytics($(this)),$scope.analyticsControl=!0}),angular.element(document).ready(function(){autoTabHeight(),$scope.tileSize=$(".UITabset-holder > div.is-active").find("a[data-eventname]").not("[data-eventname='']").length,$timeout(function(){$("[data-eventaction='tile']").each(function(){$(this).attr("data-eventname",$(this).find(".tile-title").text())})},500),$(".fund-performance-tool").parents(".MainContent").find("h1 + a.fancybox").addClass("right-align"),$("#fpt-product-cats .UITabset-holder > div, #fpt-suite-cats .UITabset-holder > div").width($(".UITabset-nav:visible").outerWidth()),angular.element(".NotavailableProduct a[data-productid]").on("click",function($event){$scope.onNotAvailProductClick($event)})}),$timeout(function(){$(".fund-performance-tool").parents(".MainContent").find("h1 + a.fancybox").addClass("right-align"),$("#fpt-product-cats .UITabset-holder > div, #fpt-suite-cats .UITabset-holder > div").width($(".UITabset-nav:visible").outerWidth())},200),angular.element("li.internal-tabset-tab").on("click",function(){$timeout(function(){$scope.NotAvailableSuite&&$scope.sortNotAvailableSuiteList(),productCustomAnalytics()},150)}),angular.element('a[data-eventaction="tile"]').on("focus",function(){$(this).find("div.TileWithBlurb, div.TileWithWhiteBG").addClass("focus")}),angular.element('a[data-eventaction="tile"]').on("blur",function(){$(this).find("div.TileWithBlurb, div.TileWithWhiteBG").removeClass("focus")}),$scope.sortNotAvailableSuiteList=function(){var activeTabPanelForCategory=$('div[role="tabpanel"][data-suite-id="'+$scope.suiteID+'"].is-active'),activeNotAvailSection=activeTabPanelForCategory.find("section.collapse-data-column");if(!activeNotAvailSection.hasClass("sorted")){var activeNotAvailDataColumns=activeNotAvailSection.find(".collapse-data--no-collapse"),notAvailProds={},notAvailKeys=[],NationalNotAvailableLinks=[],NYNotAvailableLinks=[];if($('div[role="tabpanel"]').each(function(){var tabPanel=$(this);$("div[data-suiteid="+tabPanel.attr("data-suite-id")+"]").parents("a[data-eventversion]").attr("data-eventversion")==$scope.suiteCat&&tabPanel.find("section.NotavailableProduct section.collapse-data a").each(function(){"new york"==tabPanel.attr("data-state-tab").toLowerCase()&&NYNotAvailableLinks.push($(this)),"nationwide"==tabPanel.attr("data-state-tab").toLowerCase()&&NationalNotAvailableLinks.push($(this))})}),"new york"==activeTabPanelForCategory.attr("data-state-tab").toLowerCase())var linksList=NYNotAvailableLinks;if("nationwide"==activeTabPanelForCategory.attr("data-state-tab").toLowerCase())var linksList=NationalNotAvailableLinks;$(linksList).each(function(){var linkText=$(this).text().replace(/\W/g,"").replace($(this).text()[0],$(this).text()[0].toUpperCase());notAvailProds[linkText]=$(this),notAvailKeys.push(linkText)}),notAvailKeys.sort();var lastProdCode="";for(k=0;notAvailKeys.length>k;k++){var thisLink=notAvailProds[notAvailKeys[k]];thisLink.attr("data-productid")===lastProdCode&&notAvailKeys.splice(k,1),lastProdCode=thisLink.attr("data-productid")}activeNotAvailDataColumns.empty(),notAvailKeys.length>1&&activeNotAvailDataColumns.length<2&&($(activeNotAvailDataColumns[0]).after(activeNotAvailDataColumns[0].outerHTML),activeNotAvailDataColumns=activeNotAvailSection.find(".collapse-data--no-collapse"));var columnSplitLength=Math.ceil(notAvailKeys.length/2);for(i=0;notAvailKeys.length>i;i++)columnSplitLength>i?$(activeNotAvailDataColumns[0]).append(notAvailProds[notAvailKeys[i]][0].outerHTML):$(activeNotAvailDataColumns[0].nextElementSibling).append(notAvailProds[notAvailKeys[i]][0].outerHTML);activeNotAvailSection.addClass("sorted"),activeNotAvailDataColumns.find("a[data-productid]").on("click",function($event){$scope.onNotAvailProductClick($event),updateAnalytics($(this))})}},angular.element($window).bind("resize",function(){$scope.showResults||autoTabHeight(),$("#fpt-product-cats .UITabset-holder > div, #fpt-suite-cats .UITabset-holder > div").width($(".UITabset-nav:visible").outerWidth()),alternateProductListColor()})}]),lfgapp.controller("mainContrl",["$scope","$rootScope","performanceService",function($scope,$rootScope,performanceService){var jsonCodes={},count=0,countUnit=0;$scope.tabName="performance",commonFunctions.loaderHide(),$(".tab-section li").on("click",function(){var tisIndex=$(".tab-section li").index(this);$(".tab-section li").removeClass("is-active"),$(this).addClass("is-active"),$(".tab-section-sub-cont").hide().eq(tisIndex).show()});var fundPerformanceUtil=function(){var fundPerformanceModule={};return fundPerformanceModule.performanceServiceCall=function(code){performanceService.performanceData($scope,code,function(data){$scope.performanceTableData=data,$rootScope.$broadcast("fundPerformancetableData",$scope.performanceTableData),$rootScope.$broadcast("_unitvaluesTableData",$scope.performanceTableData),$rootScope.$broadcast("_prospectusTableData",$scope.performanceTableData),setTimeout(function(){commonFunctions.loaderHide()},300)})},fundPerformanceModule.calculateTime=function(code){jsonCodes._code1="overview/",jsonCodes._code2="performance/";var currentTime=(new Date).getTime();jsonCodes._code1=jsonCodes._code1+""+code+".json?_dc="+currentTime,jsonCodes._code2=jsonCodes._code2+""+code+".json?_dc="+currentTime,fundPerformanceModule.performanceServiceCall(jsonCodes._code2)},fundPerformanceModule}(),fundPerformanceInit=function(){null!==value&&void 0!==value&&"null"!==value&&"Yes"===showDynamicProducts&&(fundPerformanceUtil.calculateTime(value),$scope.warningIcon=!1,$scope.riderValue=!1,performanceService.performanceData($scope,jsonCodes._code1,function(data){if($scope.topNavtabsData={},angular.forEach(globalConstant.productType,function(value){$scope.warningIcon||($scope.warningIcon=data.data.navigationItem.productType===value)}),"Variable Annuity"===data.data.navigationItem.productType&&($scope.isVariableAnnuity=!0),data.data.navigationItem.riders.length>0)$scope.topNavtabsData=data.data.navigationItem.riders,angular.forEach($scope.topNavtabsData,function(obj,key){obj.productCode===value&&($rootScope.$broadcast("product_code_name",$scope.topNavtabsData[key]),$scope.bindShareName=obj.productName)}),$scope.riderValue=!1;else{$scope.topNavtabsData="",$scope.bindShareName=data.data.navigationItem.productName;var topNavData={productCode:value,productName:data.data.navigationItem.productName};$rootScope.$broadcast("product_code_name",topNavData),$scope.riderValue=!0}isStaticTabsAvail||$scope.clickedTab("performance")}))};$scope.$on("fundPerformanceInit",function(){fundPerformanceInit(),$rootScope.$broadcast("resetUnitTablesResponsive")}),$rootScope.$broadcast("fundPerformanceInit"),$scope.clickedTab=function(name){$scope.tabName=name,void 0===$scope.performanceTableData&&"overview"!==name&&commonFunctions.loaderShow(),0===count&&"performance"===name?(count++,$rootScope.$broadcast("dataTablesResponsive",count)):0===countUnit&&"unitvalues"===name&&(countUnit++,$rootScope.$broadcast("dataUnitTablesResponsive",countUnit)),"overview"===name?(angular.element(".MoreInfoBlock, .content-wrapper .disclaimer").css("display","block"),angular.element(".UITabset-holder .performance-disclaimer").css("display","none")):"performance"===name||"unitvalues"===name?(angular.element(".MoreInfoBlock, .content-wrapper .disclaimer").css("display","none"),angular.element(".UITabset-holder .performance-disclaimer").css("display","block")):"prospectus"===name&&(angular.element(".MoreInfoBlock, .content-wrapper .disclaimer").css("display","none"),angular.element(".UITabset-holder .performance-disclaimer").css("display","none")),angular.element(".matchHeight-holder .block").height("auto"),angular.element(".matchHeight-holder .item").height("auto"),setTimeout(function(){$(window).trigger("resize")})},$scope.bShareSelect=function(code){commonFunctions.loaderShow(),count=0,countUnit=0,$scope.bindShareName=code.productName,$rootScope.$broadcast("product_code_name",code),fundPerformanceUtil.calculateTime(code.productCode)}}]),lfgapp.controller("performanceContrl",["$scope","$rootScope","$compile",function($scope,$rootScope,$compile){var performData,performCommon,performPdf,performRMPdf,performExcel,performRMExcel,tblColumn,tblData,complianceTopMsg,compareObj={},perfTblCount1=0,perfTblCount2=0,perfTblCount3=0;$scope.newObject={},$scope.isPermfAssetCategory=!1,$scope.isGrouped=!0,$scope.htmlregex=/(<([^>]+)>)/gi,performCommon=function(){var performModule={};return performModule.resetValues=function(){compareObj.monthlyPerform=[],compareObj.monthlyPerformSurrender=[],compareObj.quarterlyPerform=[],compareObj.viewPerform=[],compareObj.filterHeader=[],compareObj.riderName,compareObj.comparePdf,compareObj.compareWithView},performModule.selection=function(){$scope.selection=[]},performModule.dataTableMethods=function(tblId,tblColumn,tblData,customColumnDefs){$("#"+tblId).DataTable({scrollY:450,scrollX:!0,scrollCollapse:!0,destroy:!0,data:tblData,columns:tblColumn,columnDefs:customColumnDefs,fnRowCallback:function(nRow,tblData,iDisplayIndex){var anch,compileAnch,elem,investName;return $("#"+tblId).removeAttr("role"),investName=tblId===globalConstant.table3?tblData.investmentOption:tblData.subAccName,anch='<div class="custom-checkbox invescocheckbox"><input type="checkbox" ng-model="newObject['+iDisplayIndex+']" id="'+tblId+iDisplayIndex+'" value="'+tblData.pflId+'" ng-click="checkedFundId()"/><label for="'+tblId+iDisplayIndex+'"></label></div> <div class="invesconame"><a href="javascript:;" id='+tblData.pflId+" ng-click=\"showIndiv('"+tblData.pflId+"')\">"+investName+"</a></div>",compileAnch=$compile(anch),elem=compileAnch($scope),$("td:eq(0)",nRow).html(elem),$scope.riderValue?($scope.isGrouped=!1,$("td:eq(1)",nRow).hide(),$("."+tblId+" thead th:eq(1)").hide()):($scope.isGrouped=!0,$("."+tblId+" thead th:eq(1)").show()),nRow},order:[[2,"asc"]],bPaginate:!1,bFilter:!1,bInfo:!1,drawCallback:function(){if(angular.forEach($scope.newObject,function(value,index){$scope.newObject[index]=!1}),$scope.groupingUnit)$scope.performancePdf=performPdf.replace(/{{viewId}}/g,$scope.viewId),$scope.performanceExcel=performExcel.replace(/{{viewId}}/g,$scope.viewId);else{$scope.groupingUnit=!0;var cols,api=this.api(),rows="",last=null;cols=tblId===globalConstant.table3?"7":"14",rows=api.rows({page:"current"}).nodes(),api.column(1,{page:"current"}).data().each(function(group,i){"NA"!=group?($scope.isPermfAssetCategory=!0,$scope.performancePdf=performRMPdf.replace(/{{viewId}}/g,$scope.viewId),$scope.performanceExcel=performRMExcel.replace(/{{viewId}}/g,$scope.viewId),last!==group&&($(rows).eq(i).before('<tr class="group"><td colspan='+cols+' class="lfg-utable-sub">'+group+" <span>"+group.match(/[A-Z]/g).join("")+"</span></td></tr>"),last=group)):($scope.performancePdf=performPdf.replace(/{{viewId}}/g,$scope.viewId),$scope.performanceExcel=performExcel.replace(/{{viewId}}/g,$scope.viewId))})}}}),$("#"+tblId).find("th").eq(0).addClass("sorting_asc"),$("#lfg-performance-values td").attr("tabindex","0"),$("#lfg-performance-values-quarterly td").attr("tabindex","0"),$("#lfg-performance-values-surrender_wrapper td").attr("tabindex","0"),$("#lfg-unit-values td").attr("tabindex","0")},performModule.overlayPosition=function(id){var bodyHgt=angular.element(window).outerHeight(!0);angular.element("#fade").height(bodyHgt),angular.element("#"+id).css("top","0px"),id&&(angular.element("html, body").animate({scrollTop:0}),angular.element("#fade").show(),angular.element("#"+id).show())},$(window).resize(function(){angular.element("#fade").is(":visible")&&performModule.overlayPosition()}),performModule.monthlyTable=function(){tblColumn=[{data:"subAccName"},{data:"riskValue"},{data:"riskOrder"},{data:"fundIncDt"},{data:"changeFrmPrevDayPerformance"},{data:"perfValueYtd1"},{data:"perfValueYtd2"},{data:"perfValueOneMonth"},{data:"perfValueThreeMonth"},{data:"perfValueOneYear"},{data:"perfValueThreeYear"},{data:"perfValueFiveYear"},{data:"perfValueTenYear"},{data:"perfValueSinceInception"}]},performModule}(),$scope.$on("product_code_name",function(event,data){performCommon.selection(),compareObj.productId=data.productCode,compareObj.riderName=data.productName,performPdf=globalConstant.performPdf,performPdf=performPdf.replace("{{jsonId}}",compareObj.productId),performRMPdf=globalConstant.performRMPdf,performRMPdf=performRMPdf.replace("{{jsonId}}",compareObj.productId),performExcel=globalConstant.performExcel,performExcel=performExcel.replace("{{jsonId}}",compareObj.productId),performRMExcel=globalConstant.performRMExcel,performRMExcel=performRMExcel.replace("{{jsonId}}",compareObj.productId)}),$scope.$on("dataTablesResponsive",function(evt,count){$scope.perf_count=count,$scope.perfData&&$scope.changePerform($scope.headerArray[0])}),$scope.prospectusLink="javascript:;",$scope.$on("fundPerformancetableData",function(event,data){perfTblCount1=0,perfTblCount2=0,perfTblCount3=0,performData=data.data,$scope.$watch("$last",function(){angular.element("#landing-hero-pulldown1").listPulldown()}),$scope.isTableShow=1,$scope.productPerformance=data.data.productPerformance,data.data.productPerformance.complianceTop&&(complianceTopMsg=data.data.productPerformance.complianceTop.replace(/(<b[^>]+?>|<b>|<\/b>|<p\/>)/gim,""),complianceTopMsg=complianceTopMsg.replace(/(<p[^>]+?>|<p>)/gim,"<p tabindex='0'>"),$(".complianceTop-msg-add-js p").remove(),angular.element(complianceTopMsg).appendTo(".complianceTop-msg-add-js")),$scope.performanceValues=data.data.productPerformance.monthlyPerformance,$scope.tblId=globalConstant.table1,$scope.ytd1=$scope.productPerformance.lastDailyPerfDate,$scope.ytd2=$scope.productPerformance.monthlyPerformanceYtd2Date,$scope.riderValue?$scope.headerArray=[{name:data.data.productPerformance.monthlyPerfHeader,value:"1"},{name:data.data.productPerformance.monthlyPerfSurrenderHeader,value:"2"}]:$scope.headerArray=[{name:data.data.productPerformance.monthlyPerfHeader,value:"1"},{name:data.data.productPerformance.monthlyPerfSurrenderHeader,value:"2"},{name:data.data.productPerformance.standardizedPerfHeader,value:"3"}],$scope.newObject="",performCommon.monthlyTable(),tblData=$scope.performanceValues,angular.element("#landing-hero-pulldown4 li").each(function(idx){1===idx?($(this).addClass("is-active"),$(this).addClass("is-current")):($(this).removeClass("is-active"),$(this).removeClass("is-current"))}),angular.element("#landing-hero-pulldown4 li.list-title").find("a").html(data.data.productPerformance.monthlyPerfHeader),angular.element("#landing-hero-pulldown4 li.list-title").attr("aria-label",data.data.productPerformance.monthlyPerfHeader),$scope.$watch("$last",function(){angular.element("#landing-hero-pulldown4").listPulldown()}),$scope.filterHeader=$scope.headerArray[0],$scope.fundDisclosures=data.data.productPerformance.fundDisclosures,""!==data.data.productPerformance.productDisclosures&&($scope.productDisclosures=data.data.productPerformance.productDisclosures),$scope.perfData=!0,0!==$scope.perf_count&&void 0!==$scope.perf_count&&$scope.changePerform($scope.headerArray[0])}),performCommon.selection(),$scope.checkedFundId=function(){performCommon.selection(),angular.forEach($scope.newObject,function(value,index){!0===value&&$scope.selection.push(angular.element("#"+$scope.tblId+index).val())})},$scope.changePerform=function(data,count){if($scope.perf_productName=$scope.productPerformance.productName,$scope.groupingUnit=!1,$scope.newObject="",performCommon.selection(),"1"===data.value){var tbl3Width="150px";$scope.footerText=$scope.productPerformance.monthlyPerfFooter;var columnDefs1=[{class:"details-control",data:null,defaultContent:"",targets:0},{targets:0,width:tbl3Width},{type:"natural",targets:[4,5,6,7,8,9,10,11,12,13]},{targets:3,data:"fundIncDt",type:"date",createdCell:function(td,cellData,rowData,row,col){var t=new Date(cellData);$(td).attr("data-order",t.getTime()),$(td).attr("data-sort",t.getTime())}}];$scope.performanceValues=$scope.productPerformance.monthlyPerformance,$scope.ytd2=$scope.productPerformance.monthlyPerformanceYtd2Date,$scope.totalReturn=$scope.productPerformance.monthlyPerfColumnHeader.replace($scope.htmlregex," "),$scope.tblId=globalConstant.table1,$scope.viewId=globalConstant.monthlyPdf,performCommon.monthlyTable(),tblData=$scope.performanceValues,0===perfTblCount1?(setTimeout(function(){performCommon.dataTableMethods($scope.tblId,tblColumn,tblData,columnDefs1)},50),perfTblCount1++):$scope.isGrouped&&$scope.performanceDefaultView()}else if("2"===data.value){var tbl3Width="150px";$scope.footerText=$scope.productPerformance.monthlyPerfSurrenderFooter;var columnDefs2=[{class:"details-control",data:null,defaultContent:"",targets:0},{targets:0,width:tbl3Width},{type:"natural",targets:[4,5,6,7,8,9,10,11,12,13]},{targets:3,data:"fundIncDt",type:"date",createdCell:function(td,cellData,rowData,row,col){var t=new Date(cellData);$(td).attr("data-order",t.getTime()),$(td).attr("data-sort",t.getTime())}}];$scope.performanceValuesSurrender=$scope.productPerformance.monthlyPerformanceSurrender,$scope.ytd2=$scope.productPerformance.monthlyPerformanceSurrenderYtd2Date,$scope.totalReturn=$scope.productPerformance.monthlyPerfSurrenderColumnHeader.replace($scope.htmlregex," "),$scope.tblId=globalConstant.table2,$scope.viewId=globalConstant.monthlySurrPdf,performCommon.monthlyTable(),tblData=$scope.performanceValuesSurrender,0===perfTblCount2?(setTimeout(function(){performCommon.dataTableMethods($scope.tblId,tblColumn,tblData,columnDefs2)},50),perfTblCount2++):$scope.isGrouped&&$scope.performanceDefaultView()}else if("3"===data.value){var tbl3Width="200px";$scope.footerText=$scope.productPerformance.standardizedPerfFooter;var columnDefs3=[{class:"details-control",data:null,defaultContent:"",targets:0},{targets:0,width:tbl3Width},{type:"natural",targets:[4,5,6]},{targets:3,data:"fundIncDt",type:"date",createdCell:function(td,cellData,rowData,row,col){var t=new Date(cellData);$(td).attr("data-order",t.getTime()),$(td).attr("data-sort",t.getTime())}}];$scope.performanceValuesQuaterly=$scope.productPerformance.quarterlyStandardPerformance,$scope.ytd2=$scope.productPerformance.monthlyPerformanceYtd2Date,$scope.totalReturn=$scope.productPerformance.standardizedPerfColumnHeader.replace($scope.htmlregex," "),$scope.tblId=globalConstant.table3,$scope.viewId=globalConstant.monthlyQuarPdf,tblColumn=[{data:"investmentOption"},{data:"riskValue"},{data:"riskOrder"},{data:"fundIncDt"},{data:"perfValueOneYear"},{data:"perfValueFiveYear"},{data:"perfValueTenYearSinceInception"}],tblData=$scope.performanceValuesQuaterly,0===perfTblCount3?(setTimeout(function(){performCommon.dataTableMethods($scope.tblId,tblColumn,tblData,columnDefs3)},300),perfTblCount3++):$scope.performanceDefaultView()}$scope.isTableShow=data.value,$scope.filterHeader=data},$scope.showIndiv=function(pflId){var perfData={};perfData.fullperfData=performData,perfData.profileId=pflId,perfData.dropdownNum=$scope.isTableShow,$rootScope.$broadcast("invescoOverlayData",perfData),performCommon.overlayPosition("light1")},$scope.performanceDefaultView=function(){$scope.groupingUnit=!1,$("#"+$scope.tblId).dataTable().fnSortNeutral()},$scope.comparePerform=function(selection){if(selection.length<=1)return alert(globalConstant.moreThanOne),!1;if(selection.length>5)return alert(globalConstant.lessThanFive),!1;if(performCommon.resetValues(),selection.length>=2&&selection.length<6){performCommon.overlayPosition("light");var comparePdf,i,pdfHeader,compareWithView,fundComparisonPdf,selVal=[];for(fundComparisonPdf=globalConstant.fundComparisonPdf,i=0;i<5;i++)selection[i]?selVal.push(selection[i]):selVal.push("NA");"1"===$scope.filterHeader.value?pdfHeader=globalConstant.monthlyPdf:"2"===$scope.filterHeader.value?pdfHeader=globalConstant.monthlySurrPdf:"3"===$scope.filterHeader.value&&(pdfHeader=globalConstant.monthlyQuarPdf),comparePdf=fundComparisonPdf,comparePdf=comparePdf.replace("{{jsonId}}",compareObj.productId),compareWithView=comparePdf.replace("{{fundId}}",selVal.join("/")),compareObj.comparePdf=compareWithView.replace("{{viewId}}",pdfHeader),compareObj.viewPerform=$scope.headerArray,compareObj.filterHeader=$scope.filterHeader,compareObj.lastPerfDate=performData.productPerformance.lastDailyPerfDate,compareObj.compareWithView=compareWithView,angular.forEach(selection,function(value){angular.forEach(performData.productPerformance.monthlyPerformance,function(monthlyPerformValue){monthlyPerformValue.pflId===value&&compareObj.monthlyPerform.push(monthlyPerformValue)}),angular.forEach(performData.productPerformance.monthlyPerformanceSurrender,function(monthlySurValue){monthlySurValue.pflId===value&&compareObj.monthlyPerformSurrender.push(monthlySurValue)}),angular.forEach(performData.productPerformance.quarterlyStandardPerformance,function(quarterlyValue){quarterlyValue.pflId===value&&compareObj.quarterlyPerform.push(quarterlyValue)})}),$rootScope.$broadcast("compareOverlayData",compareObj)}},angular.element(".lfg-close-page").on("click",function(){angular.element("#light, #light1").hide(),angular.element("#fade").hide()})}]),lfgapp.controller("prospectusContrl",["$scope",function($scope){$scope.createProductProspectusView=function(productProspectus){var fundProspectusPanelLinks,productStatementPanelLinks,fundFeeExplLinks,productProspectusPanelLinks,prospectusProdPros="",prospectusProdProsSups="",prospectusSAIs="",prospectusSAISups="",prospectusFndPros="",prospectusFndProsSups="",prospectusSem="",prospectusAn="",prospectusfundFeeExp="",productStatementPanel=null,reportsPanel=null;if(angular.forEach(productProspectus,function(value,index){switch(productProspectus[index].usageType){case"1":prospectusSAIs=prospectusSAIs+'<li  ><a href="'+globalConstant.reportsLink+productProspectus[index].link+'" target="_blank" >'+productProspectus[index].displayText+"</a></li>";break;case"2":prospectusProdPros=prospectusProdPros+'<li  ><a href="'+globalConstant.reportsLink+productProspectus[index].link+'" target="_blank" >'+productProspectus[index].displayText+"</a></li>";break;case"3":prospectusFndPros=prospectusFndPros+'<li  ><a href="'+globalConstant.reportsLink+productProspectus[index].link+'" target="_blank">'+productProspectus[index].displayText+"</a></li>";break;case"4":prospectusProdProsSups=prospectusProdProsSups+'<li  ><a href="'+globalConstant.reportsLink+productProspectus[index].link+'" target="_blank">'+productProspectus[index].displayText+"</a></li>";break;case"5":prospectusFndProsSups=prospectusFndProsSups+'<li  ><a href="'+globalConstant.reportsLink+productProspectus[index].link+'" target="_blank">'+productProspectus[index].displayText+"</a></li>";break;case"6":prospectusSem=prospectusSem+'<li ><a href="'+globalConstant.reportsLink+productProspectus[index].link+'" target="_blank">'+productProspectus[index].displayText+"</a></li>";break;case"7":prospectusAn=prospectusAn+'<li class="prosLinkClsAnnualAndSemiAn" ><a href="'+globalConstant.reportsLink+productProspectus[index].link+'" target="_blank">'+productProspectus[index].displayText+"</a></li>";break;case"8":prospectusSAISups=prospectusSAISups+'<li  ><a href="'+globalConstant.reportsLink+productProspectus[index].link+'" target="_blank" >'+productProspectus[index].displayText+"</a></li>";break;case"9":prospectusfundFeeExp=prospectusfundFeeExp+'<li  ><a href="'+globalConstant.reportsLink+productProspectus[index].link+'" target="_blank">'+productProspectus[index].displayText+"</a></li>"}}),""===prospectusSAIs&&""===prospectusSAISups&&""===prospectusProdProsSups&&""===prospectusProdPros&&""===prospectusFndProsSups&&""===prospectusFndPros&&""===prospectusfundFeeExp||(productProspectusPanelLinks=prospectusProdPros,""!==prospectusProdProsSups&&(productProspectusPanelLinks='<article><ul class="UIList UIList--files">'+productProspectusPanelLinks+'</ul><h3> Supplements</h3><ul class="UIList UIList--files">'+prospectusProdProsSups+"</ul></article>"),""===prospectusProdProsSups&&""===prospectusProdPros||(productProspectusPanelLinks='<section><header>Prospectus</header><article ><ul class="UIList UIList--files">'+productProspectusPanelLinks+"</ul></article ></section>"),fundProspectusPanelLinks=prospectusFndPros,""!==prospectusFndProsSups&&(fundProspectusPanelLinks='<article><ul class="UIList UIList--files">'+fundProspectusPanelLinks+'</ul><h3> Supplements</h3><ul class="UIList UIList--files">'+prospectusFndProsSups+"</ul></article>"),""===prospectusFndProsSups&&""===prospectusFndPros||(fundProspectusPanelLinks='<section><header>Fund Prospectus</header><article ><ul class="UIList UIList--files">'+fundProspectusPanelLinks+"</ul></article ></section>"),productStatementPanelLinks=prospectusSAIs,""!==prospectusSAISups&&(productStatementPanelLinks='<article><ul class="UIList UIList--files">'+prospectusSAIs+'</ul><h3><br> Supplements</h3><ul class="UIList UIList--files">'+prospectusSAISups+"</ul></article>"),""===prospectusSAISups&&""===prospectusSAIs||(productStatementPanelLinks='<section><header>Product Statement Of Additional Information</header><article ><ul class="UIList UIList--files">'+productStatementPanelLinks+"</ul></article ></section>"),fundFeeExplLinks=prospectusfundFeeExp,""!==prospectusfundFeeExp&&(fundFeeExplLinks='<section><header>Reports</header><article ><ul class="UIList UIList--files">'+prospectusfundFeeExp+"</ul></article ></section>"),productStatementPanel=productProspectusPanelLinks+fundProspectusPanelLinks+productStatementPanelLinks+fundFeeExplLinks),""!==prospectusSem||""!==prospectusAn){var semiAnuRep="",annualReports="";""!==prospectusSem&&(semiAnuRep='<br/><h3> Semi-Annual Report</h3><article ><ul class="UIList UIList--files">'+prospectusSem+"</ul></article >"),""!==prospectusAn&&(annualReports='<h3> Annual Report</h3><article ><ul class="UIList UIList--files">'+prospectusAn+"</ul></article >"),reportsPanel=productStatementPanel+'<section><header>Reports</header><article ><ul class="UIList UIList--files"><div>Availability of funds may vary by product. Please refer to your Product Prospectus.</div></br>'+annualReports+semiAnuRep+"</ul></article ></section>"}$(".acc-reports").html(reportsPanel).uIAccordion()},$scope.$on("_prospectusTableData",function(event,data){0!==data.data.productPerformance.productProspectusLink.length&&data.data.productPerformance.productProspectusLink[0].link&&($scope.prospectusLink=data.data.productPerformance.productProspectusLink[0].link),
$scope.createProductProspectusView(data.data.productPerformance.productProspectusLink),$scope.$watch("$last",function(){angular.element("#landing-hero-pulldown3").listPulldown()})})}]),lfgapp.controller("unitValuesContrl",["$scope","$rootScope","$compile",function($scope,$rootScope,$compile){var performData,unitValuesCommon,prodId;$scope.groupingUnit=!1,$("#isUnitValuesAssetCategory").hide(),unitValuesCommon=function(){var unitValuesModule={};return unitValuesModule.dataTables=function(tblData){$("#lfg-unit-values").DataTable({scrollY:450,scrollX:!0,scrollCollapse:!0,destroy:!0,data:tblData,columns:[{data:"fundName"},{data:"riskValue"},{data:"riskOrder"},{data:"uvInceptionDate"},{data:"unitValueLastYear"},{data:"unitValueYesterday"}],columnDefs:[{class:"details-control",data:null,defaultContent:"",targets:0},{targets:0,width:"350px"},{targets:1,width:"100px"},{type:"natural",targets:[4,5]},{targets:3,data:"uvInceptionDate",type:"date",createdCell:function(td,cellData,rowData,row,col){var t=new Date(cellData);$(td).attr("data-order",t.getTime()),$(td).attr("data-sort",t.getTime())}}],fnRowCallback:function(nRow,tblData,iDisplayIndex){var anch,compileAnch,elem;return $("#lfg-unit-values").removeAttr("role"),anch='<a href="javascript:;" id='+tblData.fundId+" ng-click=\"showIndiv('"+tblData.fundId+"')\">"+tblData.fundName+"</a>",compileAnch=$compile(anch),elem=compileAnch($scope),$("td:eq(0)",nRow).html(elem),$scope.riderValue?($("td:eq(1)",nRow).hide(),$(".lfg-unit-values thead th:eq(1)").hide()):$(".lfg-unit-values thead th:eq(1)").show(),nRow},responsive:!1,order:[[2,"asc"]],bPaginate:!1,bFilter:!1,bInfo:!1,bDestroy:!0,drawCallback:function(){if($scope.groupingUnit)$("#unitValuesPdf").attr("href",globalConstant.unitValuesPdf.replace("{{jsonId}}",prodId));else{$scope.groupingUnit=!0;var rows,api=this.api(),last=null;rows=api.rows({page:"current"}).nodes(),api.column(1,{page:"current"}).data().each(function(group,i){group?($("#isUnitValuesAssetCategory").show(),$("#unitValuesPdf").attr("href",globalConstant.unitValuesRMPdf.replace("{{jsonId}}",prodId)),last!==group&&($(rows).eq(i).before('<tr class="group"><td colspan="5" class="lfg-utable-sub">'+group+" <span>"+group.match(/[A-Z]/g).join("")+"</span></td></tr>"),last=group)):$("#unitValuesPdf").attr("href",globalConstant.unitValuesPdf.replace("{{jsonId}}",prodId))})}}}),$("#lfg-unit-values").find("th").eq(1).addClass("sorting_asc")},unitValuesModule}(),$scope.$on("dataUnitTablesResponsive",function(evnt,countUnit){$scope.unitvalues_count=countUnit,$scope.unitValuesData&&setTimeout(function(){unitValuesCommon.dataTables($scope.unitValues)},50)}),$scope.$on("resetUnitTablesResponsive",function(evnt,countUnit){$scope.groupingUnit=!1}),$scope.prospectusLink="javascript:;",$scope.$on("_unitvaluesTableData",function(event,data){performData=data.data,$scope.$watch("$last",function(){angular.element("#landing-hero-pulldown2").listPulldown()}),$scope.unitVal_productName=data.data.productPerformance.productName,$scope.fundDisclosures=data.data.productPerformance.fundDisclosures,$scope.productDisclosures=data.data.productPerformance.productDisclosures,$scope.unitValues=data.data.productPerformance.fundDetail,$scope.yearEndDate=data.data.productPerformance.lastUnitValueYearDate,$scope.dailyDate=data.data.productPerformance.lastUnitValueDate,$scope.unitValuesData=!0,0!==$scope.unitvalues_count&&void 0!==$scope.unitvalues_count&&setTimeout(function(){unitValuesCommon.dataTables($scope.unitValues)},50)}),$scope.unitValuesDefaultView=function(){$scope.groupingUnit=!1,$("#lfg-unit-values").dataTable().fnSortNeutral()},$scope.$on("product_code_name",function(event,data){prodId=data.productCode}),$scope.showIndiv=function(pflId){var perfData={};perfData.fullperfData=performData,perfData.profileId=pflId,perfData.dropdownNum="1",$rootScope.$broadcast("invescoOverlayData",perfData),angular.element("#fade").height(angular.element("body").outerHeight(!0)),angular.element("#light1").css("top","0px"),angular.element("html, body").animate({scrollTop:0}),angular.element("#fade").show(),angular.element("#light1").show()}}]),angular.module("lfgapp").controller("glossaryCtrl",["$scope",function($scope){$scope.glossary={},$scope.glossary.init=function(){if(void 0!==dataAvailLetters&&null!==dataAvailLetters){var alphaPagerarray=dataAvailLetters.split("-");angular.element(".alpha-pager li").addClass("disabled"),angular.forEach(alphaPagerarray,function(value,i){$(".alpha-pager li."+alphaPagerarray[i]).removeClass("disabled")})}angular.element(".pdf-glossary-container").html()&&(angular.element('.alpha-pager li:not(".disabled") a')[0].click(),angular.element('.alpha-pager li:not(".disabled") a:first').addClass("selected"))},angular.element(".alpha-pager li a").on("click",function(){angular.element(".alpha-pager li a").removeClass("selected");var parentEle=angular.element(this).parent();if(!parentEle.hasClass("disabled")){var termClass="."+parentEle.attr("class");angular.element(".glosarry-accordian-js").html()&&(angular.element(".glosarry-accordian-js section").css("display","none"),angular.element(".glosarry-accordian-js "+termClass).css("display","block")),angular.element(".pdf-glossary-container").html()&&(angular.element(".pdf-glossary-container section:not("+termClass+")").css("display","none"),angular.element(".pdf-glossary-container section"+termClass).css("display","block"))}})}]),lfgapp.controller("historicalPricesContrl",["$scope","historicalPricesService",function($scope,historicalPricesService){$("#historyDate").datepicker({maxDate:new Date});var historicalCommon=function(){var historicalModule={};return historicalModule.dataTables=function(historydata){var historyDat=[];historydata?(historyDat.push(historydata),$("#historical-table").dataTable({destroy:!0,data:historyDat,columns:[{data:"OPEN"},{data:"HIGH"},{data:"OPEN"},{data:"LOW"},{data:"CLOSE"},{data:"VOLUME"}],fnRowCallback:function(){$("#historical-table").removeAttr("role")},responsive:!0,bLengthChange:!1,bSort:!1,bFilter:!1,paging:!1,info:!1})):$("#historical-table").dataTable({columns:[{data:"OPEN"},{data:"HIGH"},{data:"OPEN"},{data:"LOW"},{data:"CLOSE"},{data:"VOLUME"}],fnRowCallback:function(){$("#historical-table").removeAttr("role")},responsive:!0,bLengthChange:!1,bSort:!1,bFilter:!1,paging:!1,info:!1})},historicalModule.getLastWorkingDay=function(){var date,dateFormat;date=new Date,1!==date.getDay()?date.setDate(date.getDate()-1):date.setDate(date.getDate()-3),dateFormat=$.datepicker.formatDate("mm/dd/yy",date),$("#historyDate").val(dateFormat)},historicalModule}();historicalCommon.getLastWorkingDay(),$scope.updatePrices=function(){var currentdate=angular.element("#historyDate").val();historicalPricesService.historicalPricesData(currentdate,function(xml){var historicaldata=xml;$.isEmptyObject(historicaldata.HISTORICSTOCKQUOTE.RESULT)?historicalCommon.dataTables(""):(angular.forEach(historicaldata.HISTORICSTOCKQUOTE.RESULT.ROW,function(value,key){if("CLOSE"===key)historicaldata.HISTORICSTOCKQUOTE.RESULT.ROW.CLOSE="$"+value.toFixed(2);else if("HIGH"===key)historicaldata.HISTORICSTOCKQUOTE.RESULT.ROW.HIGH="$"+value.toFixed(2);else if("LOW"===key)historicaldata.HISTORICSTOCKQUOTE.RESULT.ROW.LOW="$"+value.toFixed(2);else if("OPEN"===key)historicaldata.HISTORICSTOCKQUOTE.RESULT.ROW.OPEN="$"+value.toFixed(2);else if("VOLUME"===key){var str=historicaldata.HISTORICSTOCKQUOTE.RESULT.ROW.VOLUME+"";str=str.replace(/\B(?=(\d{3})+(?!\d))/g,","),historicaldata.HISTORICSTOCKQUOTE.RESULT.ROW.VOLUME=str}}),historicalCommon.dataTables(historicaldata.HISTORICSTOCKQUOTE.RESULT.ROW))})},$scope.updatePrices()}]),lfgapp.controller("InPageRotateBannerContrl",["$scope","$http","$timeout",function($scope,$http,$timeout){function resizeWindowChanges(){if(setSlidesHeight=0,setMinSloganHeight=0,$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .u-global-container").css({height:"","min-height":""}),$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .Hero--landing .u-global-container .Hero-slogan").removeAttr("style"),window.innerWidth>999&&$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .Hero--landing .Hero-image-holder .u-image-responsive").each(function(){var image=new Image;image.src=$(this).attr("src");var thisMinHeight=image.naturalHeight;setMinHeight<thisMinHeight&&(setMinHeight=thisMinHeight)}),$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .Hero--landing .u-global-container").each(function(){var thisHeight=$(this).height();setSlidesHeight<thisHeight&&(setSlidesHeight=thisHeight)}),window.innerWidth>999){console.log("check --- "+setSlidesHeight+", "+setMinHeight),setMinHeight>setSlidesHeight&&(setSlidesHeight=setMinHeight),$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .InPageRotateBanner__banner-slide").css({height:setSlidesHeight+"px"}),$(".InPageRotateBanner__banner-slider-container").css({left:-nextCount*$(".InPageRotateBanner__banner-slider-container").find(".InPageRotateBanner__banner-slide").width()}),$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .Hero.Hero--landing .u-global-container .Hero-slogan").css("height",setSlidesHeight+"px"),$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .InPageRotateBanner__banner-slide").css("min-height",setSlidesHeight+"px"),$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .Hero.Hero--landing .u-global-container .Hero-slogan").css("min-height",setSlidesHeight+"px"),$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .Hero.Hero--landing .Hero-image-holder").css("max-width","39%"),$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .Hero.Hero--landing .InPageRotateBanner__slide-number").css("top","0px");var slideHgt=$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container").height(),arrowHgt=$(".InPageRotateBanner .NavControls--rotateBannerd a").height(),arrowTop=(slideHgt-arrowHgt)/2;$(".InPageRotateBanner .NavControls--rotateBannerd a").css("top",arrowTop+"px")}else{$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .InPageRotateBanner__banner-slide").height("auto"),$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .Hero.Hero--landing .Hero-image-holder").css("max-width","100%"),$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .Hero.Hero--landing .u-global-container .Hero-slogan").css("min-height","auto"),$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .InPageRotateBanner__banner-slide").css("min-height","auto"),$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .Hero.Hero--landing .u-global-container").css("height",setSlidesHeight+"px");var slideNumberTop=$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .Hero.Hero--landing .Hero-image-holder").height();$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .Hero.Hero--landing .InPageRotateBanner__slide-number").css("top",slideNumberTop+"px")}}var nextCount=0,setSlidesHeight=0,setMinHeight=0,setMinSloganHeight=0;$(".InPageRotateBanner__banner-slider-container").width(100*totalBanners+"%"),$scope.canClickNext=!0,$scope.canClickPrev=!0,$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container").length&&resizeWindowChanges(),$(window).resize(function(){$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container").length&&(resizeWindowChanges(),$(".InPageRotateBanner__banner-slider-container").css({left:-nextCount*$(".InPageRotateBanner__banner-slider-container").find(".InPageRotateBanner__banner-slide").width()}))}),$(".banner-slider-next").click(function(){if($scope.canClickNext){if($scope.canClickNext=!1,$timeout(function(){$scope.canClickNext=!0},500),nextCount++,$(".InPageRotateBanner__banner-slider-container").finish(),$(".InPageRotateBanner__banner-slider-container").find(".InPageRotateBanner__banner-slide").css("opacity","1"),nextCount==totalBanners-1){var firstSlide=$(".InPageRotateBanner__banner-slider-container").find(".InPageRotateBanner__banner-slide").first().detach();$(".InPageRotateBanner__banner-slider-container").append(firstSlide),nextCount-=2,$(".InPageRotateBanner__banner-slider-container").css({left:-nextCount*$(".InPageRotateBanner__banner-slider-container").find(".InPageRotateBanner__banner-slide").width()}),nextCount++}if($(".InPageRotateBanner__banner-slider-container").animate({left:-nextCount*$(".InPageRotateBanner__banner-slider-container").find(".InPageRotateBanner__banner-slide").width()},function(){$(".InPageRotateBanner__banner-slider-container").find(".InPageRotateBanner__banner-slide").css("opacity","0"),nextCount==totalBanners&&(nextCount=0,$(".InPageRotateBanner__banner-slider-container").css({left:"0px"})),$(".InPageRotateBanner__banner-slider-container").find(".InPageRotateBanner__banner-slide").eq(nextCount).css("opacity","1")}),window.innerWidth<1e3){var slideNumberTop=$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .Hero.Hero--landing .Hero-image-holder").height();$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .Hero.Hero--landing .InPageRotateBanner__slide-number").css("top",slideNumberTop+"px")}}}),$(".banner-slider-prev").click(function(){if($scope.canClickPrev){if($scope.canClickPrev=!1,$timeout(function(){$scope.canClickPrev=!0},500),nextCount--,$(".InPageRotateBanner__banner-slider-container").find(".InPageRotateBanner__banner-slide").css("opacity","1"),nextCount<0){var firstSlide=$(".InPageRotateBanner__banner-slider-container").find(".InPageRotateBanner__banner-slide").last().detach();$(".InPageRotateBanner__banner-slider-container").prepend(firstSlide),nextCount+=2,$(".InPageRotateBanner__banner-slider-container").css({left:-nextCount*$(".InPageRotateBanner__banner-slider-container").find(".InPageRotateBanner__banner-slide").width()}),nextCount--}if($(".InPageRotateBanner__banner-slider-container").finish(),$(".InPageRotateBanner__banner-slider-container").animate({left:-nextCount*$(".InPageRotateBanner__banner-slider-container").find(".InPageRotateBanner__banner-slide").width()},function(){$(".InPageRotateBanner__banner-slider-container").find(".InPageRotateBanner__banner-slide").css("opacity","0"),$(".InPageRotateBanner__banner-slider-container").find(".InPageRotateBanner__banner-slide").eq(nextCount).css("opacity","1")}),window.innerWidth<1e3){var slideNumberTop=$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .Hero.Hero--landing .Hero-image-holder").height();$(".InPageRotateBanner .InPageRotateBanner__banner-slider-container .Hero.Hero--landing .InPageRotateBanner__slide-number").css("top",slideNumberTop+"px")}}})}]),lfgapp.controller("insiderTradingContrl",["$scope","insiderTradingService",function($scope,insiderTradingService){var insiderCommon=function(){var insiderModule={};return $scope.paginateScroll=function(){var tableVal=angular.element("#inside-trade_wrapper").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-40,angular.element("html, body").stop().animate({scrollTop:tableVal},800),angular.element(".paginate_button").unbind("click",$scope.paginateScroll),angular.element(".paginate_button").bind("click",$scope.paginateScroll)},insiderModule.dataTables=function(insiderdata){$("#inside-trade").dataTable({data:insiderdata,columns:[{data:"DOCTYPE"},{data:"DESCRIPTION"},{data:"RECEIVEDDATE"},{data:"SIZE"}],responsive:!0,bLengthChange:!1,bSort:!0,bFilter:!1,autoWidth:!1,columnDefs:[{className:"dataTables_nowrap",targets:[2]}],displayLength:20,oLanguage:{oPaginate:{sNext:"Next 20 <i class='fa fa-chevron-right'></i>",sPrevious:""},sInfo:"Showing _START_-_END_ of _TOTAL_"}}),angular.element(".paginate_button").unbind("click",$scope.paginateScroll),angular.element(".paginate_button").bind("click",$scope.paginateScroll)},insiderModule.customSearch=function(data){var data,dtable;if(data=data.toLowerCase(),dtable=$("#inside-trade").dataTable({destroy:!0,bLengthChange:!1,responsive:!0,displayLength:20,oLanguage:{oPaginate:{sNext:"Next 20 <i class='fa fa-chevron-right'></i>",sPrevious:""},sInfo:"Showing _START_-_END_ of _TOTAL_"}}),$("#inside-trade_filter").hide(),data.indexOf("and")>-1)dtable.fnFilter(data.replace("and",""));else if(data.indexOf("or")>-1){var dataSplit=data.split("or");dtable.fnFilter(dataSplit[0]),0===dtable.fnSettings().fnRecordsDisplay()&&dtable.fnFilter(dataSplit[1])}else dtable.fnFilter(data)},insiderModule}();$(".insiderTrading").click(function(){insiderCommon.customSearch($("#insiderTrading").val())}),$("#insiderTrading").on("keyup",function(event){13===event.keyCode&&$(".insiderTrading").trigger("click")}),insiderTradingService.insiderTradingData($scope,function(xml){var insiderdata=[];angular.forEach(xml.EDGARRTLIST.RESULT.ROW,function(value){insiderdata.push({DOCTYPE:value.DOCTYPE,DESCRIPTION:value.DESCRIPTION,RECEIVEDDATE:globalConstant.formatDate(value.RECEIVEDDATE,"-"),SIZE:globalConstant.bytesToSize(value.SIZE)})}),insiderCommon.dataTables(insiderdata)})}]),function(){angular.module("lfgapp").controller("lisController",["$scope","$timeout","$http","$sce",function($scope,$timeout,$http,$sce){function updateAnalytics(event_action,event_name,event_type,event_version,event_status,product_name){if(utag){var data={event_action:event_action,event_name:event_name,event_type:event_type,event_version:event_version};void 0!==event_status&&(data.event_status=event_status),void 0!==product_name&&(data.product_name=product_name),utag.link(data)}}function dynamicQuestionCheck(questionNo,filterKey){angular.forEach(angular.element("#slide"+questionNo+" li"),function(item){var input=angular.element(item).find("input[type=radio]");if(input&&input.length>0){var value=angular.element(input)[0].value;void 0===lisMapping[filterKey+"-"+value]?item.style.display="none":item.style.display="list-item"}})}function getResults(filteredResults){filteredResults.forEach(function(value,key){"primary"===value.type?(lisVM.lisData.primaryBenefit=value.title,lisVM.lisData.primaryBenefit=lisVM.lisData.primaryBenefit.replace(htmlRegex,""),lisVM.lisData.primaryBenefit=lisVM.lisData.primaryBenefit.replace(tradeMarkRegex,"")):(lisVM.lisData.secondaryBenefit=value.title,lisVM.lisData.secondaryBenefit=lisVM.lisData.secondaryBenefit.replace(htmlRegex,""),lisVM.lisData.secondaryBenefit=lisVM.lisData.secondaryBenefit.replace(tradeMarkRegex,"")),$http({method:"GET",url:value.url+"&d=desktop"}).then(function(response){"primary"===value.type?(lisVM.primaryResult=response.data,$timeout(function(){linkAnalytics($(".results-container-result-primary a"))},200)):(lisVM.secondaryResult=response.data,$timeout(function(){linkAnalytics($(".results-container-result-secondary a"))},200)),lisVM.resultsMode=!0},function(response){console.log("Error")})}),sessionStorage.setItem("LISData",JSON.stringify(lisVM.lisData))}var lisVM=this,lisMapping={Now:[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"primary"},{code:"i4LIFE",type:"primary"},{code:"Linc Edge",type:"primary"},{code:"Max 6",type:"primary"}],"Now-Down":[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"primary"},{code:"i4LIFE",type:"primary"},{code:"Linc Edge",type:"primary"}],"Now-Down-Yes":[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"primary"},{code:"i4LIFE",type:"primary"}],"Now-Down-Yes-Strong":[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"secondary"}],"Now-Down-Yes-Reliable":[{code:"MSA",type:"primary"},{code:"i4LIFE",type:"secondary"}],"Now-Down-Yes-Investment":[{code:"i4LIFE",type:"primary"},{code:"MSA",type:"secondary"}],"Now-Down-No":[{code:"Linc 2.0",type:"primary"},{code:"Linc Edge",type:"primary"}],"Now-Down-No-Savings":[{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Now-Down-No-Strong":[{code:"Linc 2.0",type:"primary"},{code:"Linc Edge",type:"secondary"}],"Now-Down-Some":[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"primary"},{code:"Linc Edge",type:"primary"}],"Now-Down-Some-Strong":[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"secondary"}],"Now-Down-Some-Reliable":[{code:"MSA",type:"primary"},{code:"Linc Edge",type:"secondary"}],"Now-Down-Some-Savings":[{code:"Linc Edge",type:"primary"},{code:"MSA",type:"secondary"}],"Now-Flat":[{code:"i4LIFE",type:"primary"},{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"primary"},{code:"Linc Edge",type:"primary"}],"Now-Flat-Yes":[{code:"i4LIFE",type:"primary"},{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"primary"}],"Now-Flat-Yes-Investment":[{code:"i4LIFE",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Now-Flat-Yes-Strong":[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"secondary"}],"Now-Flat-Yes-Reliable":[{code:"MSA",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Now-Flat-No":[{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"primary"}],"Now-Flat-No-Savings":[{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Now-Flat-No-Strong":[{code:"Linc 2.0",type:"primary"},{code:"Linc Edge",type:"secondary"}],"Now-Flat-Some":[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"primary"},{code:"i4LIFE",type:"primary"}],"Now-Flat-Some-Strong":[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"secondary"}],"Now-Flat-Some-Reliable":[{code:"MSA",type:"primary"},{code:"i4LIFE",type:"secondary"}],"Now-Flat-Some-Investment":[{code:"i4LIFE",type:"primary"},{code:"MSA",type:"secondary"}],"Now-Up":[{code:"i4LIFE",type:"primary"},{code:"Max 6",type:"primary"},{code:"MSA",type:"primary"},{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"primary"}],"Now-Up-Yes":[{code:"i4LIFE",type:"primary"},{code:"Max 6",type:"primary"},{code:"MSA",type:"primary"}],"Now-Up-Yes-Investment":[{code:"i4LIFE",type:"primary"},{code:"Max 6",type:"secondary"}],"Now-Up-Yes-Retirement":[{code:"Max 6",type:"primary"},{code:"MSA",type:"secondary"}],"Now-Up-Yes-Reliable":[{code:"MSA",type:"primary"},{code:"Max 6",type:"secondary"}],"Now-Up-No":[{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"primary"}],"Now-Up-No-Savings":[{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Now-Up-No-Strong":[{code:"Linc 2.0",type:"primary"},{code:"Linc Edge",type:"secondary"}],"Now-Up-Some":[{code:"i4LIFE",type:"primary"},{code:"MSA",type:"primary"},{code:"Linc 2.0",type:"primary"}],"Now-Up-Some-Investment":[{code:"i4LIFE",type:"primary"},{code:"MSA",type:"secondary"}],"Now-Up-Some-Reliable":[{code:"MSA",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Now-Up-Some-Strong":[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"secondary"}],Later5:[{code:"Max 6",type:"primary"},{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"primary"},{code:"Linc Edge",type:"primary"}],"Later5-Down":[{code:"Max 6",type:"primary"},{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"primary"},{code:"Linc Edge",type:"primary"}],"Later5-Down-Yes":[{code:"Max 6",type:"primary"},{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"primary"}],"Later5-Down-Yes-Retirement":[{code:"Max 6",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Later5-Down-Yes-Strong":[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"secondary"}],"Later5-Down-Yes-Reliable":[{code:"MSA",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Later5-Down-No":[{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"primary"}],"Later5-Down-No-Savings":[{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Later5-Down-No-Strong":[{code:"Linc 2.0",type:"primary"},{code:"Linc Edge",type:"secondary"}],"Later5-Down-Some":[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"primary"},{code:"Max 6",type:"primary"}],"Later5-Down-Some-Strong":[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"secondary"}],"Later5-Down-Some-Reliable":[{code:"MSA",type:"primary"},{code:"Max 6",type:"secondary"}],"Later5-Down-Some-Retirement":[{code:"Max 6",type:"primary"},{code:"MSA",type:"secondary"}],"Later5-Flat":[{code:"Max 6",type:"primary"},{code:"MSA",type:"primary"},{code:"Linc 2.0",type:"primary"},{code:"Linc Edge",type:"primary"}],"Later5-Flat-Yes":[{code:"Max 6",type:"primary"},{code:"MSA",type:"primary"},{code:"Linc 2.0",type:"primary"}],"Later5-Flat-Yes-Retirement":[{code:"Max 6",type:"primary"},{code:"MSA",type:"secondary"}],"Later5-Flat-Yes-Reliable":[{code:"MSA",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Later5-Flat-Yes-Strong":[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"secondary"}],"Later5-Flat-No":[{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"primary"}],"Later5-Flat-No-Savings":[{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Later5-Flat-No-Strong":[{code:"Linc 2.0",type:"primary"},{code:"Linc Edge",type:"secondary"}],"Later5-Flat-Some":[{code:"Max 6",type:"primary"},{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"primary"}],"Later5-Flat-Some-Retirement":[{code:"Max 6",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Later5-Flat-Some-Strong":[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"secondary"}],"Later5-Flat-Some-Reliable":[{code:"MSA",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Later5-Up":[{code:"Max 6",type:"primary"},{code:"MSA",type:"primary"},{code:"Linc 2.0",type:"primary"},{code:"Linc Edge",type:"primary"}],"Later5-Up-Yes":[{code:"Max 6",type:"primary"},{code:"MSA",type:"primary"},{code:"Linc 2.0",type:"primary"}],"Later5-Up-Yes-Retirement":[{code:"Max 6",type:"primary"},{code:"MSA",type:"secondary"}],"Later5-Up-Yes-Reliable":[{code:"MSA",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Later5-Up-Yes-Strong":[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"secondary"}],"Later5-Up-No":[{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"primary"}],"Later5-Up-No-Savings":[{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Later5-Up-No-Strong":[{code:"Linc 2.0",type:"primary"},{code:"Linc Edge",type:"secondary"}],"Later5-Up-Some":[{code:"Max 6",type:"primary"},{code:"MSA",type:"primary"},{code:"Linc 2.0",type:"primary"}],"Later5-Up-Some-Retirement":[{code:"Max 6",type:"primary"},{code:"MSA",type:"secondary"}],"Later5-Up-Some-Reliable":[{code:"MSA",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Later5-Up-Some-Strong":[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"secondary"}],Later10:[{code:"MSA",type:"primary"},{code:"LIA",type:"primary"},{code:"Linc 2.0",type:"primary"},{code:"Linc Edge",type:"primary"},{code:"Max 6",type:"primary"}],"Later10-Down":[{code:"MSA",type:"primary"},{code:"LIA",type:"primary"},{code:"Linc 2.0",type:"primary"},{code:"Linc Edge",type:"primary"}],"Later10-Down-Yes":[{code:"MSA",type:"primary"},{code:"LIA",type:"primary"},{code:"Linc 2.0",type:"primary"}],"Later10-Down-Yes-Reliable":[{code:"MSA",type:"primary"},{code:"LIA",type:"secondary"}],"Later10-Down-Yes-Flexibility":[{code:"LIA",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Later10-Down-Yes-Strong":[{code:"Linc 2.0",type:"primary"},{code:"LIA",type:"secondary"}],"Later10-Down-No":[{code:"Linc 2.0",type:"primary"},{code:"Linc Edge",type:"primary"}],"Later10-Down-No-Savings":[{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Later10-Down-No-Strong":[{code:"Linc 2.0",type:"primary"},{code:"Linc Edge",type:"secondary"}],"Later10-Down-Some":[{code:"MSA",type:"primary"},{code:"Linc 2.0",type:"primary"},{code:"LIA",type:"primary"}],"Later10-Down-Some-Reliable":[{code:"MSA",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Later10-Down-Some-Strong":[{code:"Linc 2.0",type:"primary"},{code:"LIA",type:"secondary"}],"Later10-Down-Some-Flexibility":[{code:"LIA",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Later10-Flat":[{code:"MSA",type:"primary"},{code:"LIA",type:"primary"},{code:"Max 6",type:"primary"},{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"primary"}],"Later10-Flat-Yes":[{code:"MSA",type:"primary"},{code:"LIA",type:"primary"},{code:"Max 6",type:"primary"}],"Later10-Flat-Yes-Reliable":[{code:"MSA",type:"primary"},{code:"LIA",type:"secondary"}],"Later10-Flat-Yes-Flexibility":[{code:"LIA",type:"primary"},{code:"Max 6",type:"secondary"}],"Later10-Flat-Yes-Retirement":[{code:"Max 6",type:"primary"},{code:"LIA",type:"secondary"}],"Later10-Flat-No":[{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"primary"}],"Later10-Flat-No-Savings":[{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Later10-Flat-No-Strong":[{code:"Linc 2.0",type:"primary"},{code:"Linc Edge",type:"secondary"}],"Later10-Flat-Some":[{code:"LIA",type:"primary"},{code:"MSA",type:"primary"},{code:"Linc 2.0",type:"primary"}],"Later10-Flat-Some-Flexibility":[{code:"LIA",type:"primary"},{code:"MSA",type:"secondary"}],"Later10-Flat-Some-Reliable":[{code:"MSA",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Later10-Flat-Some-Strong":[{code:"Linc 2.0",type:"primary"},{code:"MSA",type:"secondary"}],"Later10-Up":[{code:"LIA",type:"primary"},{code:"Max 6",type:"primary"},{code:"MSA",type:"primary"},{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"primary"}],"Later10-Up-Yes":[{code:"LIA",type:"primary"},{code:"Max 6",type:"primary"},{code:"MSA",type:"primary"}],"Later10-Up-Yes-Flexibility":[{code:"LIA",type:"primary"},{code:"Max 6",type:"secondary"}],"Later10-Up-Yes-Retirement":[{code:"Max 6",type:"primary"},{code:"MSA",type:"secondary"}],"Later10-Up-Yes-Reliable":[{code:"MSA",type:"primary"},{code:"Max 6",type:"secondary"}],"Later10-Up-No":[{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"primary"}],"Later10-Up-No-Savings":[{code:"Linc Edge",type:"primary"},{code:"Linc 2.0",type:"secondary"}],"Later10-Up-No-Strong":[{code:"Linc 2.0",type:"primary"},{code:"Linc Edge",type:"secondary"}],"Later10-Up-Some":[{code:"MSA",type:"primary"},{code:"Max 6",type:"primary"},{code:"LIA",type:"primary"}],"Later10-Up-Some-Reliable":[{code:"MSA",type:"primary"},{code:"Max 6",type:"secondary"}],"Later10-Up-Some-Retirement":[{code:"Max 6",type:"primary"},{code:"LIA",type:"secondary"}],"Later10-Up-Some-Flexibility":[{code:"LIA",type:"primary"},{code:"Max 6",type:"secondary"}]},htmlRegex=/(<([^>]+)>)/gi,tradeMarkRegex=/['"\u0040\u0026\u2122\u00ae]/g;lisVM.currSlide=1,lisVM.direction="right",lisVM.categoryName="",lisVM.filteredResults=[],lisVM.stepValidation={},lisVM.selQuestionOptions={},lisVM.lisData={},lisVM.annuities=!1,lisVM.init=function(noOfSlides){0===angular.element("#slide1 .question-single-select-transparent").length&&(lisVM.annuities=!0),lisVM.noOfSlides=noOfSlides,totalResults&&(lisVM.filteredResults=totalResults.slice(0,totalResults.length),lisVM.totalResults=totalResults.slice(0,totalResults.length)),totalResultsCode&&(lisVM.filteredResultsCode=totalResultsCode.slice(0,totalResultsCode.length),lisVM.totalResultsCode=totalResultsCode.slice(0,totalResultsCode.length))},lisVM.nextSlide=function(trigger){"next"===trigger?updateAnalytics("tool","Next","lifetime income selector","step "+(lisVM.currSlide-1)+" "+angular.element("#slide"+lisVM.currSlide).find("input").data("categoryname")):updateAnalytics("tool","continue","lifetime income selector","step "+(lisVM.currSlide-1)+" "+angular.element("#slide"+lisVM.currSlide).find("input").data("categoryname")),lisVM.currSlide<lisVM.noOfSlides&&(lisVM.direction="right",$timeout(function(){lisVM.currSlide+=1},100),angular.element(".carousel-container").focus())},lisVM.prevSlide=function(trigger){"prev"===trigger?updateAnalytics("tool","Back","lifetime income selector","step "+(lisVM.currSlide-1)+" "+angular.element("#slide"+lisVM.currSlide).find("input").data("categoryname")):updateAnalytics("tool","continue","lifetime income selector","step "+(lisVM.currSlide-1)+" "+angular.element("#slide"+lisVM.currSlide).find("input").data("categoryname")),lisVM.currSlide>1&&(lisVM.direction="left",$timeout(function(){lisVM.currSlide-=1},100),angular.element(".carousel-container").focus())},lisVM.prevKeyDown=function(e){13==e.keyCode&&lisVM.prevSlide()},lisVM.nextKeyDown=function(e){13==e.keyCode&&(lisVM.currSlide===lisVM.noOfSlides?getResults(lisVM.filteredResults):lisVM.nextSlide())},
angular.element(".carousel-container .show-next").on("click",function(event){lisVM.stepValidation["step"+lisVM.currSlide]=!0,lisVM.currSlide<lisVM.noOfSlides&&(lisVM.direction="right",$timeout(function(){lisVM.currSlide+=1},100),angular.element(".carousel-container").focus(),$scope.$apply()),updateAnalytics("tool","continue","lifetime income selector","annuities introduction","start")}),angular.element(".question-single-select-transparent input[type=radio]").on("change",function(event){lisVM.stepValidation["step"+lisVM.currSlide]=!0,lisVM.lisData[angular.element(this).data("categoryname")]=angular.element(this).data("text"),lisVM.selQuestionOptions["step"+lisVM.currSlide]=angular.element(this)[0].value;var filterKey="";angular.forEach(lisVM.selQuestionOptions,function(value,key){filterKey=""!==filterKey?filterKey+"-"+value:value});for(var tempFilterKey=null,i=1;i<=lisVM.noOfSlides;i++)if(angular.element("#slide"+i+" .question-single-select-transparent").length>0){if(!lisVM.stepValidation["step"+i]){dynamicQuestionCheck(i,tempFilterKey);break}null!==tempFilterKey?(dynamicQuestionCheck(i,tempFilterKey),tempFilterKey=tempFilterKey+"-"+lisVM.selQuestionOptions["step"+i]):tempFilterKey=lisVM.selQuestionOptions["step"+i]}var mapResults=lisMapping[filterKey],mapResultsCode=[];angular.forEach(mapResults,function(value){mapResultsCode.push(value.code);var result=lisVM.totalResults[lisVM.totalResultsCode.indexOf(value.code)];value.title=result.title,value.url=result.url});var filteredResultsTemp=lisVM.filteredResults.slice(0,lisVM.filteredResults.length);angular.forEach(filteredResultsTemp,function(value){-1===mapResultsCode.indexOf(value.code)&&(lisVM.filteredResultsCode.indexOf(value.code),lisVM.filteredResults.splice(lisVM.filteredResultsCode.indexOf(value.code),1),lisVM.filteredResultsCode.splice(lisVM.filteredResultsCode.indexOf(value.code),1))}),angular.forEach(mapResultsCode,function(code,index){if(-1===lisVM.filteredResultsCode.indexOf(code))lisVM.filteredResultsCode.push(code),lisVM.filteredResults.push(mapResults[index]);else{var mapResult=mapResults[index];lisVM.filteredResults[lisVM.filteredResultsCode.indexOf(code)].type=mapResult.type}}),lisVM.currSlide===lisVM.noOfSlides?("click"===lisVM.eventTrigger&&lisVM.filteredResults.length>0?getResults(lisVM.filteredResults):angular.element(".carousel-next").attr("title","Submit"),updateAnalytics("tool","select solution","lifetime income selector","step "+(lisVM.currSlide-1)+" "+angular.element("#slide"+lisVM.currSlide).find("input").data("categoryname"),"complete",lisVM.filteredResultsCode.join(","))):"click"===lisVM.eventTrigger&&lisVM.nextSlide(),lisVM.eventTrigger="",$scope.$apply()}),angular.element(".question-single-select-transparent label").on("click",function(){lisVM.eventTrigger="click"}),lisVM.showPopup=function(){angular.element("body").css({overflow:"hidden"}),lisVM.startOver=!0},lisVM.closePopup=function(){angular.element("body").css({overflow:"auto"}),lisVM.startOver=!1},lisVM.restart=function(){updateAnalytics("tool","restart","lifetime income selector"),angular.element("body").css({overflow:"auto"}),lisVM.currSlide=1,angular.element(".questionnaire-component").find("input[type=radio]").removeAttr("checked"),lisVM.filteredResults=totalResults.slice(0,totalResults.length),lisVM.totalResults=totalResults.slice(0,totalResults.length),lisVM.filteredResultsCode=totalResultsCode.slice(0,totalResultsCode.length),lisVM.totalResultsCode=totalResultsCode.slice(0,totalResultsCode.length),lisVM.selQuestionOptions={},lisVM.direction="right",lisVM.stepValidation={},lisVM.startOver=!1,lisVM.resultsMode=!1}}])}(),function(){angular.module("lfgapp").controller("ltcStateSelectorController",["$scope",function($scope){function showMap(flag){if(flag){angular.element("body").css({overflow:"hidden",position:"fixed"});var stateCookie=getCookie("SelectedState");void 0===stateCookie||null===stateCookie||""===stateCookie?angular.element(".custom-selectbox").focus():angular.element("#ltc-map-close").focus()}else angular.element("body").css({overflow:"auto",position:"static"})}var ltcVM=this;ltcVM.selectedState="None",ltcVM.showModal=!1,ltcVM.statesNA=["Puerto Rico","Virgin Islands"],ltcVM.disableModalClose=!1,ltcVM.init=function(parentPageId){var stateCookie=getCookie("SelectedState");if(ltcVM.parentPageId=parentPageId,"undefined"!=typeof currentPageId&&void 0!==currentPageId&&null!==currentPageId){var linkSelected=!1;for(var stateSelector in ltcStateSelectors){for(var i=0;i<ltcStateSelectors[stateSelector].relatedInternalLinks.length;i++){var link=ltcStateSelectors[stateSelector].relatedInternalLinks[i],linkId=""+link.id;if(linkId&&linkId===currentPageId){ltcVM.currPage=stateSelector,linkSelected=!0;break}}if(linkSelected)break}}$("#usa-map").length>0&&$("#usa-map").LGMap({map:"usa",mapFolder:"/static/wcs/lfg/scripts/jsmaps-config/",onReady:function(){void 0!==stateCookie&&null!==stateCookie&&""!==stateCookie&&(-1===ltcVM.statesNA.indexOf(stateCookie)?$("#usa-map").trigger("stateClick",stateCookie):ltcVM.updateSelectedState(stateCookie))},onStateClick:function(data){ltcVM.unselect?($("#"+$(this)[0][0].id).css("fill","#f2f2f2"),ltcVM.unselect=!1):ltcVM.updateSelectedState(data.name)}}),ltcVM.selectedStateText=void 0===stateCookie||null===stateCookie||""===stateCookie?"Select":"Change",ltcVM.parentPageId===currentPageId||void 0!==stateCookie&&null!==stateCookie&&""!==stateCookie||(ltcVM.disableModalClose=!0,ltcVM.showModal=!0,showMap(ltcVM.showModal))},ltcVM.updateSelectedState=function(state){setCookie("SelectedState",state,365),ltcVM.selectedStateText="Change",ltcVM.selectedState=state,ltcVM.showModal=!1,ltcVM.disableModalClose=!1,showMap(ltcVM.showModal),angular.element(".state-selector-dropdown .custom-selectbox").html(state),ltcVM.linkSelect&&ltcVM.parentPageId===currentPageId&&(ltcVM.linkSelect=!1,ltcVM.selectLink(ltcVM.selectedLink)),$scope.$apply()},ltcVM.selectLink=function(key){ltcVM.selectedLink=key,ltcVM.linkSelect=!0,void 0!==ltcStateSelectors&&null!==ltcStateSelectors&&void 0!==ltcStateSelectors[key]&&null!==ltcStateSelectors[key]&&(void 0!==ltcVM.selectedState&&null!==ltcVM.selectedState&&""!==ltcVM.selectedState&&"None"!==ltcVM.selectedState?ltcStateSelectors[key].OptionAssoc.forEach(function(stateSelector){stateSelector.DisplayValue.trim()===ltcVM.selectedState&&stateSelector.PageAssoc&&stateSelector.PageAssoc._link_&&(window.location.href=stateSelector.PageAssoc._link_)}):(ltcVM.showModal=!0,showMap(ltcVM.showModal)))},ltcVM.changeState=function(){ltcVM.showModal=!0,showMap(ltcVM.showModal)},angular.element(".state-selector-dropdown .custom-selectbox-list-cont li").on("click",function(){var text=angular.element(this).text();if(-1===ltcVM.statesNA.indexOf(text))$("#usa-map").trigger("stateClick",text);else{var stateCookie=getCookie("SelectedState");ltcVM.unselect=!0,$("#usa-map").trigger("stateClick",stateCookie),ltcVM.updateSelectedState(text)}}),ltcVM.closePopup=function(){ltcVM.showModal=!1,showMap(ltcVM.showModal)},$scope.$on("selectedState",function(event,state){ltcVM.updateSelectedState(state)})}])}(),function(){function lifeExpectancyCalcContrl($scope,$timeout,lifeExpectancyCalcService){function getCalLifeExpectancy(requestBody){lifeExpectancyCalcService.lifeExpectancyCalcService($scope,requestBody,function(response){void 0!==response.data&&null!==response.data&&void 0!==response.data.lifeExpectancy&&null!==response.data.lifeExpectancy?(lifeCalcVM.calculatedData=response.data,$scope.customSlider.options={minRange:45,maxRange:100,minValue:lifeCalcVM.calculatedData.lifeExpectancy.leLowerAge,maxValue:lifeCalcVM.calculatedData.lifeExpectancy.leUpperAge,value:Math.round(lifeCalcVM.calculatedData.lifeExpectancy.leAge),valueText:"Your life expectancy",rangeText:"Likely life expectancy age range"}):lifeCalcVM.displayError=!0})}var lifeCalcVM=this;lifeCalcVM.displayError=!1,lifeCalcVM.init=function(){$scope.customSlider={},$scope.customSlider.options={minRange:45,maxRange:0,minValue:0,maxValue:100,value:0,valueText:"Your life expectancy",rangeText:"Likely life expectancy age range"};var requestBody={};requestBody=JSON.parse(sessionStorage.getItem("lifeExpectancyServiceData")),void 0!==requestBody&&null!==requestBody&&void 0!==requestBody.age&&null!==requestBody.age&&void 0!==requestBody.gender&&null!==requestBody.gender&&void 0!==requestBody.mortality&&null!==requestBody.mortality&&void 0!==requestBody.smoking&&null!==requestBody.smoking?getCalLifeExpectancy(requestBody):lifeCalcVM.displayError=!0}}lfgapp.controller("lifeExpectancyCalcContrl",["$scope","$timeout","lifeExpectancyCalcService",lifeExpectancyCalcContrl])}(),function(){angular.module("lfgapp").controller("ltcStateSelectorLinkController",["$scope","$rootScope",function($scope,$rootScope){function showMap(flag){if(flag){angular.element("body").css({overflow:"hidden",position:"fixed"});var stateCookie=getCookie("SelectedState");void 0===stateCookie||null===stateCookie||""===stateCookie?angular.element(".custom-selectbox").focus():angular.element("#ltc-map-close").focus()}else angular.element("body").css({overflow:"auto",position:"static"})}var ltcLinkVM=this;ltcLinkVM.showModal=!1,ltcLinkVM.statesNA=["Puerto Rico","Virgin Islands"],ltcLinkVM.init=function(mapId){ltcLinkVM.mapId=mapId,ltcLinkVM.ltcStateSelectorsLink=ltcStateSelectorsLink[mapId];var stateCookie=getCookie("SelectedState");$("#usa-map"+ltcLinkVM.mapId).length>0&&$("#usa-map"+ltcLinkVM.mapId).LGMap({map:"usa",mapFolder:"/static/wcs/lfg/scripts/jsmaps-config/",onReady:function(){void 0!==stateCookie&&null!==stateCookie&&""!==stateCookie&&(-1===ltcLinkVM.statesNA.indexOf(stateCookie)?$("#usa-map").trigger("stateClick",stateCookie):ltcLinkVM.updateSelectedState(stateCookie))},onStateClick:function(data){ltcLinkVM.unselect?($("#"+$(this)[0][0].id).css("fill","#f2f2f2"),ltcLinkVM.unselect=!1):ltcLinkVM.updateSelectedState(data.name)}})},ltcLinkVM.updateSelectedState=function(state){setCookie("SelectedState",state,365),ltcLinkVM.selectedStateText="Change",ltcLinkVM.selectedState=state,ltcLinkVM.showModal=!1,ltcLinkVM.disableModalClose=!1,showMap(ltcLinkVM.showModal),angular.element(".state-selector-dropdown .custom-selectbox").html(state),ltcLinkVM.linkSelect&&ltcLinkVM.parentPageId===currentPageId&&(ltcLinkVM.linkSelect=!1,ltcLinkVM.selectLink(ltcLinkVM.selectedLink)),$rootScope.$broadcast("selectedState",state),$scope.$apply(),ltcLinkVM.selectLink()},ltcLinkVM.selectLink=function(){var stateCookie=getCookie("SelectedState");void 0!==ltcLinkVM.ltcStateSelectorsLink&&null!==ltcLinkVM.ltcStateSelectorsLink&&(void 0!==stateCookie&&null!==stateCookie&&""!==stateCookie?ltcLinkVM.ltcStateSelectorsLink.OptionAssoc.forEach(function(stateSelector){stateSelector.DisplayValue.trim()===stateCookie&&stateSelector.PageAssoc&&stateSelector.PageAssoc._link_&&(window.location.href=stateSelector.PageAssoc._link_)}):(ltcLinkVM.showModal=!0,showMap(ltcLinkVM.showModal)))},ltcLinkVM.changeState=function(){ltcLinkVM.showModal=!0,showMap(ltcLinkVM.showModal)},angular.element(".state-selector-dropdown .custom-selectbox-list-cont li").on("click",function(){var text=angular.element(this).text();if(-1===ltcLinkVM.statesNA.indexOf(text))$("#usa-map"+ltcLinkVM.mapId).trigger("stateClick",text);else{var stateCookie=getCookie("SelectedState");ltcLinkVM.unselect=!0,$("#usa-map"+ltcLinkVM.mapId).trigger("stateClick",stateCookie),ltcLinkVM.updateSelectedState(text)}}),ltcLinkVM.closePopup=function(){ltcLinkVM.showModal=!1,showMap(ltcLinkVM.showModal)}}])}(),function(){angular.module("lfgapp").controller("multiSlideController",[function(){function updateAnalytics(type,slide){var data={event_action:"tool",event_name:type,event_type:utag.data.event_type};data.event_status="Step "+slide,utag.link(data)}var multiSlideVM=this;multiSlideVM.multiSlideInit=function(noOfSlides){multiSlideVM.noOfSlides=noOfSlides,multiSlideVM.currSlide=1},multiSlideVM.nextSlide=function(){utag?(multiSlideVM.currSlide!==multiSlideVM.noOfSlides?multiSlideVM.currSlide=multiSlideVM.currSlide+1:multiSlideVM.currSlide=1,updateAnalytics("Next",multiSlideVM.currSlide)):multiSlideVM.currSlide!==multiSlideVM.noOfSlides?multiSlideVM.currSlide=multiSlideVM.currSlide+1:multiSlideVM.currSlide=1},multiSlideVM.prevSlide=function(){utag?(1!==multiSlideVM.currSlide?multiSlideVM.currSlide=multiSlideVM.currSlide-1:multiSlideVM.currSlide=multiSlideVM.noOfSlides,updateAnalytics("Back",multiSlideVM.currSlide)):1!==multiSlideVM.currSlide?multiSlideVM.currSlide=multiSlideVM.currSlide-1:multiSlideVM.currSlide=multiSlideVM.noOfSlides},multiSlideVM.ellipseSlide=function(slide){utag?(multiSlideVM.currSlide=slide,updateAnalytics("Ellipse",multiSlideVM.currSlide)):multiSlideVM.currSlide=slide}}])}(),function(){angular.module("lfgapp").controller("questionnaireController",["$scope","$rootScope","$parse","$http",function($scope,$rootScope,$parse,$http){function calculatePoints(){angular.forEach($scope.questionnaire.questionPoints,function(points){finalPoints+=parseFloat(points)}),bmiPoint>0&&(finalPoints+=bmiPoint),finalPoints<.75?finalPoints=.75:finalPoints>5&&(finalPoints=5),finalPoints=finalPoints.toFixed(2),updateService("mortality",finalPoints,"")}function calculateBMIPoints(){var bmi=parseFloat($scope.questionnaire.BMI.bmi);bmi<18?bmiPoint=.25:bmi>18&&bmi<29.9?bmiPoint=0:bmi>30&&bmi<40?bmiPoint=.25:bmi>40&&(bmiPoint=.5)}function calculateBMI(){void 0!==$scope.questionnaire.BMI.height&&null!==$scope.questionnaire.BMI.height&&void 0!==$scope.questionnaire.BMI.weight&&null!==$scope.questionnaire.BMI.weight&&($scope.questionnaire.BMI.bmi=parseFloat(.45*$scope.questionnaire.BMI.weight)/Math.pow(parseFloat(.025*$scope.questionnaire.BMI.height),2),calculateBMIPoints())}function updateEngage(name,text){void 0!==name&&null!==name&&"null"!==name&&($scope.questionnaire.engageData[name]=text)}function updatePoints(name,point){void 0!==point&&null!==point&&"null"!==point?$scope.questionnaire.questionPoints[name]=point:delete $scope.questionnaire.questionPoints[name]}function updateService(type,value,text){void 0!==type&&null!==type&&"null"!==type&&"height"!==type.toLocaleLowerCase()&&"weight"!==type.toLocaleLowerCase()&&($scope.questionnaire.serviceData[type]=void 0!==value&&null!==value&&"null"!==value?""+value:""+text)}function updateAnalytics(data){"undefined"!=typeof utag&&void 0!==utag&&null!==utag&&("undefined"!=typeof qEventType&&void 0!==qEventType&&null!==qEventType?data.event_type=qEventType:data.event_type="Needs Analysis",utag.link(data))}var paramState,finalPoints=1,bmiPoint=0;$scope.questionnaire={},$scope.questionnaire.BMI={},$scope.questionnaire.serviceData={},$scope.questionnaire.questionPoints={},$scope.questionnaire.engageData={},$scope.questionnaire.sliders={},$scope.questionnaire.validation={},$scope.questionnaire.noOfSteps=noOfSteps,$scope.questionnaire.currStep=1,$(document).on("responsive:statechanged",function(e,param){paramState=param}),$scope.questionnaire.init=function(){document.getElementById("qForm").reset(),angular.element(".question-multi-select").find("[type=hidden]").val(""),"undefined"!==defaultDDOptions&&angular.forEach(defaultDDOptions,function(data,cid){angular.element("#text_"+data.cid).text(data.text),updateEngage(data.visitorAttr,data.text),updatePoints(cid,data.point),updateService(data.type,data.value,data.text)});for(var i=1;i<=noOfSteps;i++){var step=angular.element("#step"+i),totalQtns={},singleSelectQtns=step.find(".question-single-select"),hasSS=!1;angular.forEach(singleSelectQtns,function(value){hasSS=!0;var cid=angular.element(value).data("cid");totalQtns[cid]=!1});var multiSelectQtns=step.find(".question-multi-select"),hasMS=!1;angular.forEach(multiSelectQtns,function(value){hasMS=!0;var cid=angular.element(value).data("cid");totalQtns[cid]=!1}),(hasSS||hasMS)&&($scope.questionnaire.validation["step"+i]=totalQtns)}void 0!==$scope.questionnaire.validation.step1&&(angular.element("#nextBtn").addClass("disable"),angular.element("#finishBtn").addClass("disable")),"undefined"!=typeof sliders&&angular.forEach(sliders,function(sliderGlobal){var slider={};slider.options={},slider.options.onChange=function(id,value){var name=id,type=null;if(void 0!==sliders[id].type&&null!==sliders[id].type&&(type=sliders[id].type),updateEngage(sliders[id].visitorAttr,value),sliders[id].isNumeric)void 0!==type&&null!==type&&("height"===type.toLocaleLowerCase()&&($scope.questionnaire.BMI.height=value),"weight"===type.toLocaleLowerCase()&&($scope.questionnaire.BMI.weight=value),calculateBMI());else{updatePoints(name,sliders[id].optionPoints[value])}updateService(type,value,null)},slider.options.translate=function(){return""},slider.options.id=sliderGlobal.id,sliderGlobal.isNumeric?(slider.options.showTicks=!1,slider.options.floor=parseFloat(sliderGlobal.startValue),slider.options.ceil=parseFloat(sliderGlobal.endValue),slider.options.step=parseFloat(sliderGlobal.increment),slider.options.precision=2,void 0!==sliderGlobal.value&&null!==sliderGlobal.value&&"null"!==sliderGlobal.value?slider.value=parseFloat(sliderGlobal.value):slider.value=parseFloat(sliderGlobal.startValue),void 0!==sliderGlobal.type&&null!==sliderGlobal.type&&("height"===sliderGlobal.type.toLocaleLowerCase()&&($scope.questionnaire.BMI.height=slider.value),"weight"===sliderGlobal.type.toLocaleLowerCase()&&($scope.questionnaire.BMI.weight=slider.value)),calculateBMI()):(slider.options.showTicks=!0,slider.options.stepsArray=sliderGlobal.stepsArray,slider.value=sliderGlobal.value,updatePoints(sliderGlobal.id,sliderGlobal.optionPoints[sliderGlobal.value])),updateService(sliderGlobal.type,slider.value,null),updateEngage(sliderGlobal.visitorAttr,slider.value),$scope.questionnaire.sliders[sliderGlobal.id]=slider})},$scope.$on("buttonValidation",function(event,inputObj){if(void 0!==$scope.questionnaire.validation["step"+$scope.questionnaire.currStep]){var step=$scope.questionnaire.validation["step"+$scope.questionnaire.currStep];void 0!==inputObj&&(step[inputObj.name]=inputObj.value);var isValidated=!0;angular.forEach(step,function(value){value||(isValidated=!1)}),$scope.questionnaire.noOfSteps===$scope.questionnaire.currStep&&isValidated?angular.element("#finishBtn").removeClass("disable"):angular.element("#finishBtn").addClass("disable"),$scope.questionnaire.noOfSteps!==$scope.questionnaire.currStep&&isValidated?angular.element("#nextBtn").removeClass("disable"):angular.element("#nextBtn").addClass("disable")}else $scope.questionnaire.noOfSteps===$scope.questionnaire.currStep?angular.element("#finishBtn").removeClass("disable"):angular.element("#nextBtn").removeClass("disable")}),$scope.questionnaire.formSubmit=function(){if(calculatePoints(),updateAnalytics({event_action:"tool",event_name:"Finish",event_version:"2",event_status:"complete"}),!angular.element("#finishBtn").hasClass("disable")){sessionStorage.setItem("lifeExpectancyServiceData",JSON.stringify($scope.questionnaire.serviceData));var formURL=angular.element("#qForm").attr("action"),hasEngageData=!1;angular.forEach($scope.questionnaire.engageData,function(value,key){hasEngageData=!0,formURL=formURL.indexOf("?")>0?formURL+"&"+key+"="+value:formURL+"?"+key+"="+value}),formURL+="&d=Desktop",hasEngageData?$http({method:"GET",url:formURL}).then(function(){window.location.href=formURLRedirect},function(){window.location.href=formURLRedirect}):window.location.href=formURLRedirect}},$scope.questionnaire.navSteps=function(param){if("Next"===param&&!angular.element("#nextBtn").hasClass("disable")||"Next"!==param){if($scope.questionnaire.currStep>=1&&$scope.questionnaire.currStep<=$scope.questionnaire.noOfSteps){angular.element("#step"+$scope.questionnaire.currStep).removeClass("show"),angular.element("#step-image"+$scope.questionnaire.currStep).length&&angular.element("#step-image"+$scope.questionnaire.currStep).removeClass("show"),"Next"===param?(angular.element("#step-span"+$scope.questionnaire.currStep).removeClass("curr"),angular.element("#step-span"+$scope.questionnaire.currStep).addClass("prev"),$scope.questionnaire.currStep=$scope.questionnaire.currStep+1,angular.element("#step-span"+$scope.questionnaire.currStep).removeClass("next"),angular.element("#step-span"+$scope.questionnaire.currStep).addClass("curr")):(angular.element("#step-span"+$scope.questionnaire.currStep).removeClass("curr"),angular.element("#step-span"+$scope.questionnaire.currStep).addClass("next"),$scope.questionnaire.currStep=$scope.questionnaire.currStep-1,angular.element("#step-span"+$scope.questionnaire.currStep).removeClass("prev"),angular.element("#step-span"+$scope.questionnaire.currStep).addClass("curr")),angular.element("#step"+$scope.questionnaire.currStep).addClass("show"),angular.element("#step-image"+$scope.questionnaire.currStep).length&&angular.element("#step-image"+$scope.questionnaire.currStep).addClass("show"),$scope.$broadcast("rzSliderForceRender"),angular.element("#step"+$scope.questionnaire.currStep).focus();var data;$scope.questionnaire.currStep===$scope.questionnaire.noOfSteps?(data={event_action:"tool",event_name:"Next"},data.event_status="Step "+$scope.questionnaire.currStep,updateAnalytics(data),angular.element("#backBtn").show(),angular.element("#nextBtn").hide(),angular.element("#finishBtn").show()):1===$scope.questionnaire.currStep?(data={event_action:"tool",event_name:"Back",event_status:"Step 1"},updateAnalytics(data),angular.element("#backBtn").hide(),angular.element("#nextBtn").show(),angular.element("#finishBtn").hide()):(data={event_action:"tool"},data.event_status="Step "+$scope.questionnaire.currStep,data.event_name="Next"===param?"Next":"Back",angular.element("#backBtn").show(),angular.element("#nextBtn").show(),angular.element("#finishBtn").hide(),updateAnalytics(data)),$rootScope.$broadcast("buttonValidation")}setTimeout(function(){var scrollTpVal,body;scrollTpVal=$(".questionnaire").offset().top,body=$("html, body"),"mobile"===paramState?body.stop().animate({scrollTop:scrollTpVal},{queue:!1,easing:"swing",duration:500}):(scrollTpVal=scrollTpVal-10-$(".Topheader").height(),body.stop().animate({scrollTop:scrollTpVal},{queue:!1,easing:"swing",duration:500}))},200)}},angular.element(".question-dropdown .custom-selectbox-list-cont li").on("click",function(){var visitorAttr=angular.element(this).data("visitorattr"),value=angular.element(this).attr("value"),text=angular.element(this).data("text"),point=angular.element(this).data("point"),type=angular.element(this).data("type"),cid=angular.element(this).data("cid");updateEngage(visitorAttr,text),updatePoints(cid,point),updateService(type,value,text)}),angular.element(".question-single-select input:radio").on("click",function(){var text=angular.element(this).data("text"),value=angular.element(this).attr("value"),visitorAttr=angular.element(this).data("visitorattr"),point=angular.element(this).data("point"),type=angular.element(this).data("type"),cid=angular.element(this).data("cid");updateEngage(visitorAttr,text),updatePoints(cid,point),updateService(type,value,text);var dataName={};dataName.name=cid,dataName.value=!0,$rootScope.$broadcast("buttonValidation",dataName)}),angular.element(".question-multi-select input:checkbox").on("click",function(){var visitorAttr=angular.element(this).data("visitorattr"),eleId=angular.element(this).data("id"),value=angular.element(this).val(),dataName={};dataName.name=eleId;var hiddenInputVal;if(angular.element(this).prop("checked"))hiddenInputVal=angular.element("#"+eleId).val(),hiddenInputVal=null!==hiddenInputVal&&""!==hiddenInputVal?hiddenInputVal+"|"+value:value,angular.element("#"+eleId).val(hiddenInputVal);else{hiddenInputVal=angular.element("#"+eleId).val();hiddenInputVal=0===hiddenInputVal.indexOf(value)?hiddenInputVal.replace(value+"|",""):hiddenInputVal.replace("|"+value,""),hiddenInputVal=hiddenInputVal.replace(value,""),angular.element("#"+eleId).val(hiddenInputVal)}updateEngage(visitorAttr,angular.element("#"+eleId).val());var liEle=angular.element(this).parent(),ulEle=liEle.parent();3===angular.element("#"+eleId).val().split("|").length?(angular.forEach(ulEle.children(),function(ele){var checkboxEle=angular.element(ele).children();angular.element(checkboxEle[0]).prop("checked")||angular.element(checkboxEle).prop("disabled",!0)}),dataName.value=!0,$rootScope.$broadcast("buttonValidation",dataName)):(angular.forEach(ulEle.children(),function(ele){var checkboxEle=angular.element(ele).children();angular.element(checkboxEle[0]).prop("checked")||angular.element(checkboxEle).prop("disabled",!1)}),dataName.value=!1,$rootScope.$broadcast("buttonValidation",dataName))})}])}(),function(){angular.module("lfgapp").controller("quickPollController",["$scope","$http","$timeout","$interval",function($scope,$http,$timeout,$interval){var pollAnimStop,quickPollControllerVM=this,pollOptionCount=0,pollOptionTempCount=0,pollOptMatch={};quickPollControllerVM.init=function(cid,recordPollURL,getPollResultslURL){quickPollControllerVM.cid=cid,quickPollControllerVM.recordPollURL=recordPollURL,quickPollControllerVM.getPollResultslURL=getPollResultslURL,quickPollControllerVM.record=!0,quickPollControllerVM.pollData={},quickPollControllerVM.optionLinks={},quickPollControllerVM.barStyle={},quickPollControllerVM.pollOption=getCookie("QP_"+quickPollControllerVM.cid),void 0!==quickPollControllerVM.pollOption&&null!==quickPollControllerVM.pollOption&&""!==quickPollControllerVM.pollOption&&quickPollControllerVM.getPollResults()},quickPollControllerVM.pollResultsAnim=function(){pollAnimStop=$interval(function(){angular.forEach(quickPollControllerVM.responseData,function(value,key){quickPollControllerVM.responseData[key]!==quickPollControllerVM.pollData[key]?quickPollControllerVM.pollData[key]++:pollOptMatch[key]||(pollOptMatch[key]=!0,pollOptionTempCount++)}),pollOptionTempCount===pollOptionCount&&($interval.cancel(pollAnimStop),angular.element("#qp_results_"+quickPollControllerVM.cid).attr("aria-hidden","false"))},25)},quickPollControllerVM.submitVote=function(){void 0!==quickPollControllerVM.pollOption&&null!==quickPollControllerVM.pollOption&&""!==quickPollControllerVM.pollOption&&(quickPollControllerVM.recordPollURL=quickPollControllerVM.recordPollURL+quickPollControllerVM.pollOption,$http({method:"GET",url:quickPollControllerVM.recordPollURL}).then(function(response){console.log("Record Success : ",response.data),void 0!==response.data&&null!==response.data&&"success"===response.data.status&&(setCookie("QP_"+quickPollControllerVM.cid,quickPollControllerVM.pollOption,30),quickPollControllerVM.getPollResults())},function(){console.log("Failure")}))},quickPollControllerVM.getPollResults=function(){$http({method:"GET",url:quickPollControllerVM.getPollResultslURL}).then(function(response){if(void 0!==response.data&&null!==response.data){quickPollControllerVM.record=!1;var totalPollCount=0;quickPollControllerVM.responseData=response.data,angular.forEach(quickPollControllerVM.responseData,function(value){totalPollCount+=parseInt(value)}),angular.forEach(quickPollControllerVM.responseData,function(value,key){quickPollControllerVM.responseData[key]=Math.round(parseInt(value)/totalPollCount*100),quickPollControllerVM.pollData[key]=0,pollOptionCount++}),quickPollControllerVM.pollResultsAnim(),quickPollControllerVM.optionLinks["link_"+quickPollControllerVM.pollOption]=!0,$timeout(function(){angular.forEach(quickPollControllerVM.responseData,function(value,key){quickPollControllerVM.barStyle[key]={border:"2px solid #4bc22b",width:value+"%"}})},100)}},function(response){console.log("Failure",response)})}}]).filter("pollResultPercnt",function(){return function(input){return void 0===input||null===input?"0%":input+"%"}})}(),lfgapp.controller("quotesChartsContrl",["$scope",function($scope){navigator.userAgent.match(/(iPod|iPhone|iPad)/)?$scope.scrollingValue="no":$scope.scrollingValue="auto"}]),angular.module("lfgapp").controller("QuestionnaireProgressBarController",["$scope",function($scope){function applyGradient(){qpbVM.progress={background:"linear-gradient(to right, #88B23F 0, #88B23F "+(qpbVM.currStep-1)*qpbVM.gradientPerct+"%, #CCCCCC "+(qpbVM.currStep-1)*qpbVM.gradientPerct+"%, #CCCCCC 100%)"}}var qpbVM=this;qpbVM.noOfSteps=noOfSteps,qpbVM.currStep=1,qpbVM.gradientPerct=100/(qpbVM.noOfSteps-1),angular.element(".question-button .UIButton").on("click",function(){var href=angular.element(this).attr("href");void 0!==href&&""!==href&&null!==href||(angular.element(this).data("nextstep")?qpbVM.currStep=angular.element(this).data("nextstep"):qpbVM.currStep<qpbVM.noOfSteps&&(qpbVM.currStep=qpbVM.currStep+1),applyGradient(),$scope.$apply())}),qpbVM.back=function(){qpbVM.currStep>1&&(qpbVM.currStep=qpbVM.currStep-1,applyGradient())}}]),lfgapp.controller("registerContrl",["$scope",function($scope){var arr=[{artMaxStyle:"individual"},{artMaxStyle:"employer"},{artMaxStyle:"employerrepresentative"},{artMaxStyle:"industryprofessional"},{artMaxStyle:"dentalprovider"}];String.prototype.firstToUpperCase=function(str){return str.toLowerCase().replace(/\b[a-z]/g,function(letter){return letter.toUpperCase()})},window.location.href.indexOf("audience=")>-1&&$.each(window.location.search.slice(1).split("&"),function(index,value){"audience"===value.split("=")[0]&&($scope.queryStr=value.split("=")[1].replace(/-/g,""))}),sessionStorage.getItem("lastname")&&($scope.queryStr=sessionStorage.getItem("lastname")),$scope.showLastClicked=function(name){sessionStorage.setItem("lastname",name)},angular.forEach(arr,function(value){$scope["artMaxStyle"+value.artMaxStyle]=$scope.queryStr===value.artMaxStyle?{"max-height":"3000px"}:""})}]),function(){lfgapp.controller("searchController",["$scope","searchService",function($scope,searchService){var _searchResultObj={};$scope.searchResults={},$scope.searchResults.resultsFor=!0,$scope.searchResults.noResultsFor=!0,$scope.isLessTen=!1;var mobileListCount=10;$scope.searchResults.disableNext=!0,$scope.searchResults.disablePrev=!0,$scope.searchResults.startFrom=0;$scope.searchResults.searchResultsInit=function(){$scope.searchResults.search($scope.searchResults.getURLParameter("q"))},$scope.searchResults.getURLParameter=function(name){name=name.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");var regex=new RegExp("[\\?&]"+name+"=([^&#]*)"),results=regex.exec(location.search);return null===results?"":decodeURIComponent(results[1].replace(/\+/g," "))},$scope.searchResults.search=function(q){$scope.searchResults.results=[],$scope.searchResults.resultList=[];var searchObj={};searchObj.queryString=null!==q&&void 0!==q?encodeURIComponent(q):encodeURIComponent($scope.searchResults.searchParam),searchObj.site=siteValue;var serviceURL,eventAction;document.activeElement.blur(),serviceURL=window.location.protocol+"//"+window.location.host+"/pbl-search-service-app/rest/search/gsa",searchService.searchResults(serviceURL,searchObj,function(response){if(response)if(null!==q&&void 0!==q?($scope.searchResults.searchQuery=q,eventAction="global"):($scope.searchResults.searchQuery=$scope.searchResults.searchParam,eventAction="page"),null!==response.data.GSP&&void 0!==response.data.GSP)if(null!==response.data.GSP.RES&&void 0!==response.data.GSP.RES){if(1===response.data.GSP.RES.EN?$scope.searchResults.results.push(response.data.GSP.RES.R):$scope.searchResults.results=response.data.GSP.RES.R,angular.forEach($scope.searchResults.results,function(value){value.T&&(value.T=value.T.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&").replace(/�/gi,"®")),value.S&&(value.S=value.S.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&").replace(/�/gi,"®"))}),$scope.searchResults.resultsLength=$scope.searchResults.results.length,0==$scope.searchResults.resultsLength){var resultSection=$("p:contains('No Search Results for ')");resultSection&&(document.getElementsByClassName("ui-pagination zipsearchresults")[0].style.display="none")}else document.getElementsByClassName("ui-pagination zipsearchresults")[0].style.display="block";_searchResultObj.setAndReset(),$scope.searchResults.numberOfPages=function(){
return Math.ceil($scope.searchResults.resultsLength/$scope.searchResults.countPerPage)},$scope.searchResults.resultList=$scope.searchResults.results.slice(0,$scope.searchResults.countPerPage),$scope.searchResults.anchorArray=generatePagination($scope.searchResults.currentPage+1,$scope.searchResults.numberOfPages(),$scope.searchResults.results),$scope.searchResults.clickedNum=1,$scope.searchResults.disablePrev=!0,$scope.searchResults.numberOfPages()>1?($scope.searchResults.showMoreResults=!0,$scope.searchResults.disableNext=!1):$scope.searchResults.disableNext=!0,$scope.searchResults.noResultsFor=!0,$scope.isNoResult=!1,$scope.searchResults.resultsFor=!1;var data={event_action:"search",event_type:eventAction,event_search_terms:response.data.GSP.Q,event_search_results:$scope.searchResults.resultsLength};console.log("utag : ",utag),utag.link(data)}else{$scope.searchResults.resultsFor=!0,$scope.searchResults.noResultsFor=!1,$scope.isNoResult=!0,$scope.searchResults.results=[];var resultSection=$("p:contains('No Search Results for ')");resultSection&&(document.getElementsByClassName("ui-pagination zipsearchresults")[0].style.display="none")}else $scope.searchResults.noResultsFor=!1,$scope.isNoResult=!0,$scope.searchResults.results=[];else $scope.searchResults.noResultsFor=!1,$scope.isNoResult=!0,$scope.searchResults.results=[]})},_searchResultObj.setAndReset=function(){$scope.searchResults.currentPage=0,$scope.searchResults.countPerPage=10,$scope.searchResults.results||0!==$scope.searchResults.results.length?$scope.searchResults.results.length<10?($scope.searchResults.viewedCount=$scope.searchResults.results.length,$scope.isLessTen=!0):($scope.searchResults.viewedCount=$scope.searchResults.countPerPage,$scope.isLessTen=!1):$scope.searchResults.viewedCount=0,$scope.searchResults.anchorArray=[],$scope.searchResults.disableNext=!0,$scope.searchResults.disablePrev=!0,$scope.searchResults.startFrom=0},$scope.showCurrentPage=function(LISTNUM){"..."!==LISTNUM&&$scope.searchResults.clickedNum!==LISTNUM&&(isNaN(LISTNUM)||($scope.searchResults.clickedNum=LISTNUM,$scope.searchResults.currentPage=LISTNUM-1,$scope.searchResults.results.length<10?$scope.searchResults.viewedCount=$scope.searchResults.results.length:($scope.searchResults.viewedCount=($scope.searchResults.currentPage+1)*$scope.searchResults.countPerPage,$scope.searchResults.results.length<$scope.searchResults.viewedCount&&($scope.searchResults.viewedCount=$scope.searchResults.results.length)),$scope.searchResults.startFrom=$scope.searchResults.currentPage*$scope.searchResults.countPerPage,$scope.searchResults.resultList=$scope.searchResults.results.slice($scope.searchResults.startFrom,$scope.searchResults.startFrom+$scope.searchResults.countPerPage),$scope.searchResults.disablePrev=!1,$scope.searchResults.disableNext=!1,LISTNUM===$scope.searchResults.numberOfPages()?$scope.searchResults.disableNext=!0:1===LISTNUM&&($scope.searchResults.disablePrev=!0),$scope.searchResults.anchorArray=generatePagination(LISTNUM,$scope.searchResults.numberOfPages(),$scope.searchResults.anchorArray),$scope.paginateScroll()))},$scope.getPreNextPage=function(type){"prev"===type&&$scope.searchResults.currentPage+1!==1?$scope.showCurrentPage($scope.searchResults.currentPage):"next"===type&&$scope.searchResults.currentPage+1!==$scope.searchResults.numberOfPages()&&$scope.showCurrentPage($scope.searchResults.currentPage+2)};var generatePagination=function(currentPageIndex,totalPageCount,pagesArray){var navArray=[];if(totalPageCount<=2){for(var page=1;page<=totalPageCount;)navArray.push(page),++page;return navArray}if(1===currentPageIndex){navArray=[];var i=1;if(totalPageCount>currentPageIndex+4)for(;i<=currentPageIndex+4;)navArray.push(i),++i;else for(;i<totalPageCount;)navArray.push(i),++i;navArray.push("...",totalPageCount)}else{var firstmove=!1;if("..."===pagesArray[1]){var startEllipsesIndex=pagesArray.indexOf("..."),endEllipsesIndex=pagesArray.lastIndexOf("...");if(navArray=pagesArray.slice(startEllipsesIndex+1,endEllipsesIndex),totalPageCount<=6)return pagesArray}else if(navArray=pagesArray.slice(0,pagesArray.indexOf("...")),firstmove=!0,totalPageCount<=6)return navArray.splice(1,0,"..."),navArray.push("...",totalPageCount),navArray;if(totalPageCount>6){var matched=!1;if(navArray[navArray.length-1]===currentPageIndex)navArray=getNextSetPages(currentPageIndex,totalPageCount),navArray.splice(0,0,1),matched=!0;else if(currentPageIndex===totalPageCount)navArray=getPreviousSetPages(currentPageIndex,totalPageCount),matched=!0;else if(navArray[0]===currentPageIndex+1)navArray=getPreviousSetPages(currentPageIndex,totalPageCount),navArray.splice(0,0,1),matched=!0;else{if(!firstmove&!matched)return pagesArray;if(firstmove)return navArray.splice(1,0,"..."),navArray.push("...",totalPageCount),navArray}navArray.splice(1,0,"..."),navArray.push("...",totalPageCount)}}return navArray},getNextSetPages=function(currentPageIndex,totalPageCount){var startLimit,upperLimit,midArray=[],diff=totalPageCount-currentPageIndex,haveNextSetPages=diff>3;for(haveNextSetPages?(startLimit=currentPageIndex,upperLimit=currentPageIndex+3):(startLimit=currentPageIndex-(4-diff),upperLimit=totalPageCount-1);startLimit<=upperLimit;)midArray.push(startLimit),startLimit++;return midArray},getPreviousSetPages=function(currentPageIndex,totalPageCount){var lowLimit,upperLimit,midArray=[];if(currentPageIndex===totalPageCount){for(lowLimit=currentPageIndex-4,upperLimit=currentPageIndex;lowLimit<upperLimit;)midArray.push(lowLimit),lowLimit++;return midArray.splice(0,0,1),midArray}for(2===currentPageIndex?(lowLimit=currentPageIndex,upperLimit=currentPageIndex+3):3===currentPageIndex?(lowLimit=currentPageIndex-1,upperLimit=currentPageIndex+2):(lowLimit=currentPageIndex-2,upperLimit=currentPageIndex+1);lowLimit<=upperLimit;)midArray.push(lowLimit),lowLimit++;return midArray};$scope.getMoreResults=function(){mobileListCount+=$scope.searchResults.countPerPage,$scope.searchResults.resultList=$scope.searchResults.results.slice(0,mobileListCount),$scope.searchResults.numberOfPages()>=(mobileListCount+$scope.searchResults.countPerPage)/$scope.searchResults.countPerPage?$scope.searchResults.showMoreResults=!0:$scope.searchResults.showMoreResults=!1},$scope.paginateScroll=function(){var tableVal=angular.element(".u-global-container").offset().top;angular.element("html, body").stop().animate({scrollTop:tableVal},800)}}]).filter("startFrom",[function(){return function(input,start){if(void 0!==input)return start=+start,input.slice(start)}}])}(),lfgapp.controller("secFilingsContrl",["$scope","secFilingsServices","$timeout",function($scope,secFilingsServices,$timeout){$scope.secFilingsTypeInfo=[{filingType:"All",postValue:'{"FUNCTION":"EdgarRTList","NUMBERPERPAGE":"5000"}',filingFilterType:""},{filingType:"10-K & 10-Q",postValue:'{"FUNCTION":"EdgarRTList","NUMBERPERPAGE":"3000","DOCTYPE":"Annual,Quarterly"}',filingFilterType:"10-Q|10-K|10-Q/A|10-K/A|10-K405|10-K405/A"},{filingType:"8-K",postValue:'{"FUNCTION":"EdgarRTList","NUMBERPERPAGE":"3000","DOCTYPE":"Current"}',filingFilterType:"8-K|8-K/A"},{filingType:"Other",postValue:'{"FUNCTION":"EdgarRTList","NUMBERPERPAGE":"3000","EXCLUDEDOCTYPE":"Annual,Quarterly,Current,Proxy,Insider"}',filingFilterType:"11-K|11-K/A|13F-HR|13F-NT|15-12G|25|25-NSE|25-NSE/A|424B1|424B2|424B3|424B4|424B5|424B7|425|8-A12B|8-A12G/A|AW|CT ORDER|FWP|NT 11-K|POS AM|POSASR|RW|S-1|S-3|S-3/A|S-3ASR|S-3DPOS|S-4|S-4/A|S-8|S-8 POS|SC 13D|SC 13D/A|SC 13G|SC 13G/A"},{filingType:"Proxy (DEF14A)",postValue:'{"FUNCTION":"EdgarRTList","NUMBERPERPAGE":"3000","DOCTYPE":"Proxy"}',filingFilterType:"DEFA14A|DEF 14A|PRE 14A|DEFR14A"},{filingType:"Form 3, 4 & 5",postValue:'{"FUNCTION":"EdgarRTList","NUMBERPERPAGE":"3000","DOCTYPE":"Insider"}',filingFilterType:"4|4/A|5|3|3/A|5/A"}],angular.element(".filingType").val($scope.secFilingsTypeInfo[0].filingType),$scope.secFilingsTypeInfo.sort(),$scope.customFilter=function(data,dataColumn){commonFunctions.loaderShow(),$scope.postValue='{"FUNCTION":"EdgarRTList","NUMBERPERPAGE":"5000"}',angular.forEach($scope.secFilingsTypeInfo,function(value){value.filingType===data&&($scope.postValue=value.postValue)}),secFilingsServices.secFilingData($scope.postValue,function(dataFromJson){var dataValue,secFilingdata=dataFromJson;$scope.firstTimeLoad=0,secFilingdata=secFilingdata.EDGARRTLIST.RESULT.ROW;var secFilingsType=[],secFilingDate=[],secFilingDataTable=[];angular.forEach(secFilingdata,function(value){this.push(value.DOCTYPE)},secFilingsType),angular.forEach(secFilingdata,function(value){dataValue=value.FILINGDATE.split("-"),this.push(dataValue[0])},secFilingDate),$scope.secFilingsTypeDate=function(a){for(var temp={},i=0;i<a.length;i++)temp[a[i]]=!0;var r=[];for(var k in temp)"FWP"===k?r.unshift(k):r.push(k);return r}(secFilingDate);var browserName;-1!==navigator.userAgent.indexOf("Firefox")&&(browserName="Firefox"),"Firefox"!==browserName&&($scope.secFilingsTypeDate=$scope.secFilingsTypeDate.reverse()),$scope.secFilingsTypeDate.unshift("All Years"),$scope.lastSecYear=function(){angular.element(".secYears").val($scope.secFilingsTypeDate[0])},angular.forEach(secFilingdata,function(value){secFilingDataTable.push({DOCTYPE:value.DOCTYPE,FID:value.FID,DESCRIPTION:value.DESCRIPTION,FILINGDATE:globalConstant.formatDate(value.FILINGDATE,"-")})}),data=data.toLowerCase(),$timeout(function(){function paginateScroll(){var tableVal=angular.element(".tbl-a1").offset().top;tableVal=tableVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tableVal},800),$(".paginate_button").unbind("click",paginateScroll),$(".paginate_button").bind("click",paginateScroll)}var dtable=$("#table-a1-data").dataTable({destroy:!0,order:[[2,"desc"]],data:secFilingDataTable,columns:[{data:"DOCTYPE"},{data:"DESCRIPTION"},{data:"FILINGDATE"}],bLengthChange:!1,autoWidth:!1,responsive:!0,displayLength:20,oLanguage:{oPaginate:{sNext:'Next 20 <i class="fa fa-chevron-right"></i>',sPrevious:""},sInfo:"Showing _START_-_END_ of _TOTAL_",sInfoFiltered:""},columnDefs:[{className:"dataTables_nowrap",targets:[2]}],fnRowCallback:function(nRow,secFilingDataTable){return $("#table-a1-data").removeAttr("role"),$("td:eq(1)",nRow).html('<a href="http://investor.shareholder.com/lnc/secfiling.cfm?filingID='+secFilingDataTable.FID+'" title="View HTML" onclick="window.open(this.href,width=600,height=400); return false;" onkeypress="window.open(this.href,width=600,height=400); return false;" >'+secFilingDataTable.DESCRIPTION+"</a>"),nRow}});$("#table-a1-data_filter").hide();var filingType,filingYear;filingType=angular.element(".filingType").attr("data-val"),filingYear=angular.element(".secYears").val().toLowerCase(),"Year"===dataColumn&&(filingYear=data),"Both"===dataColumn&&(filingType="",filingYear="",data=""),"all years"!==data&&"all years"!==filingYear||(data="",filingYear=""),"all"!==data&&"all"!==filingType||(data="",filingType=""),""===filingType&&""===filingYear?dtable.fnFilter(""):""===filingType&&""!==filingYear?dtable.fnFilter(filingYear):""===filingYear&&""!==filingType?dtable.fnFilter(unescape("^"+filingType+"$"),0,!0,!1):""!==filingYear&&""!==filingType&&(dtable.fnFilter(unescape("^"+filingType+"$"),0,!0,!1),dtable.fnFilter(filingYear)),0===$scope.firstTimeLoad?($(".paginate_button").unbind("click",paginateScroll),$(".paginate_button").bind("click",paginateScroll),$scope.firstTimeLoad=1):paginateScroll(),commonFunctions.loaderHide()},200)})},$scope.customFilter("NullValue","Both")}]),function(){angular.module("lfgapp").controller("starRatingController",["RestService","$timeout",function(restService,$timeout){function starRatingService(requestBody,mode){starRating.spinner=!0,restService.post(url,requestBody,function(response){200===response.status?(starRating.rating=response.data.avgRating.toFixed(1),starRating.currStar=starRating.rating,starRating.totalRatings=response.data.count,starRating.serviceMsg="Thank you!"):starRating.serviceMsg="Please try again later",starRating.spinner=!1,"SAVE"===mode&&(starRating.saveMode=!1,starRating.successMode=!0,$timeout(function(){starRating.successMode=!1,$(".star-rating-cont").focus()},msgTimeout))})}var starRating=this,url="/pbl-gateway-service-app/rest/pbl-gateway/gatewayData",msgTimeout=2e3;starRating.rating=0,starRating.totalRatings=0,starRating.saveMode=!1,starRating.successMode=!1,starRating.spinner=!1,starRating.init=function(timeout){var requestBody={pageId:currentPageId,SERVICE_ID:"INT_STAR_RATING_GET"};timeout&&(msgTimeout=timeout),starRatingService(requestBody)},starRating.onHoverFocus=function(star){starRating.currStar=star},starRating.onHoverFocusExit=function(){starRating.currStar=starRating.rating},starRating.starClick=function(star){if(!starRating.saveMode){var data={event_action:"link",event_name:""+star,event_type:"star rating"};"undefined"!=typeof utag&&utag.link(data),starRating.saveMode=!0;starRatingService({pageId:currentPageId,pageTitle:document.title,pageVersion:"1",rating:star,appName:"LFG",SERVICE_ID:"INT_STAR_RATING_SAVE"},"SAVE")}}}])}(),function(){angular.module("LFGHeader").controller("AudienceAgeSelectorController",[function(){function toggleScroll(disableScroll){disableScroll?(angular.element("body").height(angular.element(window).height()).css({overflow:"hidden",position:"fixed"}),angular.element(".topheader").css({overflow:"visible"})):(angular.element("body").css({height:"auto",overflow:"auto",position:"static"}),angular.element(".topheader").css({overflow:"hidden"}))}var audienceAgeSelVM=this;audienceAgeSelVM.segmentVal=null,$(document).mouseup(function(event){0===$(".topheader-submenu-container--audience-age-sel").has(event.target).length&&($(".topheader-submenu-container--audience-age-sel").removeClass("topheader-submenu-container--audience-age-sel"),$(".topheader-menu__caret-show").removeClass("topheader-menu__caret-show"))}),$(".topheader-menu__item--audience").click(function(e){var audienceClass=$(".audience-age-selector").hasClass("topheader-submenu-container--audience-age-sel"),topHeaderClass=$(".topheader-submenu-container").hasClass("topheader-submenu-container--audience-age-sel");1==topHeaderClass&&1==audienceClass?$(".audience-age-selector").removeClass("topheader-submenu-container--audience-age-sel"):0==topHeaderClass&&0==audienceClass?$(".audience-age-selector").addClass("topheader-submenu-container--audience-age-sel"):0==topHeaderClass&&1==audienceClass?$(".audience-age-selector").removeClass("topheader-submenu-container--audience-age-sel"):1==topHeaderClass&&0==audienceClass&&$(".audience-age-selector").removeClass("topheader-submenu-container--audience-age-sel")}),audienceAgeSelVM.init=function(){void 0!==getCookie("visitorSegCookie")&&void 0!==getCookie("visitorSegCookie")&&""!==getCookie("visitorSegCookie")&&(audienceAgeSelVM.segmentVal=getCookie("visitorSegCookie")),currentPageId===individualPageId&&null===audienceAgeSelVM.segmentVal&&(audienceAgeSelVM.showAudienceAgeSel=!0)},audienceAgeSelVM.audienceAgeSel=function(){audienceAgeSelVM.showAudienceAgeSel?audienceAgeSelVM.showAudienceAgeSel=!1:audienceAgeSelVM.showAudienceAgeSel=!0},audienceAgeSelVM.mobileAudienceAgeSel=function(){audienceAgeSelVM.showAudienceAgeSelectorMobile?audienceAgeSelVM.showAudienceAgeSelectorMobile=!1:audienceAgeSelVM.showAudienceAgeSelectorMobile=!0,toggleScroll(audienceAgeSelVM.showAudienceAgeSelectorMobile)},audienceAgeSelVM.setSegment=function(segment){setCookie("visitorSegCookie",segment,"365");var dataInfo={event_action:"link",event_name:segment,event_type:"Generational Content"};"undefined"!=typeof utag&&utag.link(dataInfo),individualPageId===audience_top_nav_id?location.reload(!0):window.location.href=individualPageURL}}])}(),function(){angular.module("LFGHeader").controller("LFGLocaleController",[function(){var lfgLocaleVM=this,localeArray={en_US:"ENGLISH-EN",es_ES:"SPANISH-ES"};lfgLocaleVM.currLocaleDesktop="EN",lfgLocaleVM.currLocaleMobile="ENGLISH",lfgLocaleVM.init=function(){if(void 0!==currLocale&&null!==currLocale&&""!==currLocale){var currLocaleTemp=localeArray[currLocale].split("-");lfgLocaleVM.currLocaleDesktop=currLocaleTemp[1].toUpperCase(),lfgLocaleVM.currLocaleMobile=currLocaleTemp[0].toUpperCase()}},lfgLocaleVM.localeClick=function(localeDesc){window.location.href=locales[localeDesc]}}])}(),function(){angular.module("lfgapp").controller("securedContentController",["$scope","$window","$rootScope",function($scope,$window,$rootScope){$scope.securedContentVM={},$scope.securedContentVM.showLogin=1,$scope.securedContentVM.showDefault=0,$scope.securedContentVM.showSecured=0,$scope.securedContentVM.init=function(){console.log("securedContentVM init called");var loginFormName=angular.element("#secured-content-login form.elq-form").attr("name");null!=localStorage.getItem("elq_"+loginFormName+"_redirect")&&""!=localStorage.getItem("elq_"+loginFormName+"_redirect")||localStorage.setItem("elq_"+loginFormName+"_redirect","0");var loginState=localStorage.getItem("elq_"+loginFormName+"_redirect");console.log("loginFormName:",loginFormName),console.log("loginState:",localStorage.getItem("elq_"+loginFormName+"_redirect")),0==parseInt(loginState)?($scope.securedContentVM.showLogin=1,$scope.securedContentVM.showDefault=0,$scope.securedContentVM.showSecured=0):1==parseInt(loginState)?($scope.securedContentVM.showLogin=0,$scope.securedContentVM.showDefault=0,$scope.securedContentVM.showSecured=1,localStorage.setItem("elq_"+loginFormName+"_redirect","2"),void 0!==window.componentPageURL&&$(document).on("externalRedirect",function(){commonFunctions.loaderShow(),location.href=window.componentPageURL})):2==parseInt(loginState)&&($scope.securedContentVM.showLogin=0,$scope.securedContentVM.showDefault=1,$scope.securedContentVM.showSecured=0)}}])}(),lfgapp.controller("compareOverlayContrl",["$scope",function($scope){$scope.$on("compareOverlayData",function(event,data){$scope.compareChartData(data)});var chartCommon=function(){var chartModule={};return chartModule.filterChart=function(filterHeader){var categoriesXaxis,headerData,xAxisTitle,seriesValues=[];"3"===filterHeader.value?($scope.comparePdf=$scope.compareWithView.replace("{{viewId}}",globalConstant.monthlyQuarPdf),categoriesXaxis=["1 Yr","5 Yr","10 Yr or Since Inception"],angular.forEach($scope.chartValues.quarterlyPerform,function(value){seriesValues.push({name:value.investmentOption.replace(/&nbsp;/g,""),fundId:value.pflId,selected:!0,data:[Number(value.perfValueOneYear.replace("N/A",0)),Number(value.perfValueFiveYear.replace("N/A",0)),Number(value.perfValueTenYearSinceInception.replace("N/A",0))]})})):(categoriesXaxis=["1 Mo","3 Mo","1 Yr","3 Yr","5 Yr","10 Yr"],"2"===filterHeader.value?($scope.comparePdf=$scope.compareWithView.replace("{{viewId}}",globalConstant.monthlySurrPdf),headerData=$scope.chartValues.monthlyPerformSurrender):($scope.comparePdf=$scope.compareWithView.replace("{{viewId}}",globalConstant.monthlyPdf),headerData=$scope.chartValues.monthlyPerform),angular.forEach(headerData,function(value){seriesValues.push({name:value.subAccName.replace(/&nbsp;/g,""),fundId:value.pflId,selected:!0,data:[Number(value.perfValueOneMonth.replace("N/A",0)),Number(value.perfValueThreeMonth.replace("N/A",0)),Number(value.perfValueOneYear.replace("N/A",0)),Number(value.perfValueThreeYear.replace("N/A",0)),Number(value.perfValueFiveYear.replace("N/A",0)),Number(value.perfValueTenYear.replace("N/A",0))]})})),xAxisTitle=globalConstant.annualReturn+$scope.chartValues.lastPerfDate,chartModule.compareChartCreate(categoriesXaxis,seriesValues,xAxisTitle)},chartModule.compareChartCreate=function(categoriesXaxis,seriesValues,xAxisTitle){var legendWidth,legendStyleWidth,chkMarginTop,chkLeft,xaxisTitWidth,colors;colors=["#94AE0A","#115FA6","#A61120","#FF8809","#FFD13E"],ssm.isActive("mobile")?(legendWidth=260,legendStyleWidth=200,chkMarginTop="13%",chkLeft="83%",xaxisTitWidth=220):(legendWidth=500,legendStyleWidth=450,chkMarginTop="3%",chkLeft="83%",xaxisTitWidth=420),$("#compareContainer").highcharts({chart:{type:"column"},title:{text:null},xAxis:{gridLineWidth:1,labels:{style:{fontSize:"12px"}},categories:categoriesXaxis,title:{style:{fontWeight:"bold",width:xaxisTitWidth},text:xAxisTitle}},yAxis:{title:{style:{fontWeight:"bold"},text:globalConstant.perctChange},labels:{style:{fontSize:"12px"},formatter:function(){return this.value+"%"}}},tooltip:{formatter:function(){return"<b>"+this.x+"</b><br/>"+this.series.name+": <br/><b>"+this.y+"%</b>"}},credits:{enabled:!1},plotOptions:{column:{pointPadding:.2,borderWidth:.5},series:{showCheckbox:!0,events:{checkboxClick:function(event){event.checked?($scope.comparePdf=$scope.comparePdf.replace("NA",this.userOptions.fundId+""),$scope.$apply(),this.show(),this.legendSymbol.show()):($scope.comparePdf=$scope.comparePdf.replace(this.userOptions.fundId+"","NA"),$scope.$apply(),this.hide())},legendItemClick:function(){return!1}}},pie:{colors:colors}},colors:colors,legend:{title:{text:globalConstant.investOptions},borderWidth:1,itemWidth:legendWidth,itemStyle:{width:legendStyleWidth},margin:12},series:seriesValues},function(chart){for(var series=chart.series,i=0;i<series.length;i++)series[i].checkbox.style.marginTop=chkMarginTop,series[i].checkbox.style.marginLeft="-2%",series[i].checkbox.style.left=chkLeft})},chartModule}();$scope.changeHeaderFilter=function(filterHeader){chartCommon.filterChart(filterHeader)},$scope.compareChartData=function(chartData){$scope.chartValues=chartData,$scope.headerArray=chartData.viewPerform,$scope.filterHeader=chartData.filterHeader,$scope.riderName=chartData.riderName,$scope.comparePdf=chartData.comparePdf,$scope.compareWithView=chartData.compareWithView,chartCommon.filterChart(chartData.filterHeader),$scope.currentHeader=$scope.filterHeader.name,$scope.$watch("$last",function(){setTimeout(function(){angular.element("#landing-hero-compare").listPulldown()},100)})},$scope.printCompareOverlay=function(){$(".print-compare-overlay").print({iframe:!1,noPrintSelector:".print-hide",deferred:$.Deferred()})}}]),lfgapp.controller("invescoOverlayContrl",["$scope",function($scope){var performObj={alignLegend:"right",verticalAlignLegend:"middle",legendX:0,legendY:0,productId:null,heightPie:350,widthPie:400,heightBar:250,widthBar:380,heightBar1:280,widthBar1:400,splitedNumArray:null};$scope.invescoOverlay={},$(document).on("responsive:statechanged",function(e,param){performObj.param=param}),angular.element("#invesco-overlaytab").uITabSet(),angular.element("#lfg-topheader-pulldown").listPulldown(),$scope.$on("invescoOverlayData",function(event,data){angular.element("ul.tab-section > li:first-child").trigger("click"),$scope.invescoModule(data)}),performObj.filterIndex=1;var invescoUtil=function(){var invescoModules={};return invescoModules.checkDropDownNumber=function(num){"1"===num?(invescoModules.checkIndexValue("monthlyPerformance"),$scope.invescoOverlay.yearName=$scope.invescoOverlay.fundPerformanceData.fullperfData.productPerformance.monthlyPerfHeader,$scope.invescoOverlay.footerText=$scope.invescoOverlay.fundPerformanceData.fullperfData.productPerformance.monthlyPerfFooter):"2"===num?(invescoModules.checkIndexValue("monthlyPerformanceSurrender"),$scope.invescoOverlay.yearName=$scope.invescoOverlay.fundPerformanceData.fullperfData.productPerformance.monthlyPerfSurrenderHeader,$scope.invescoOverlay.footerText=$scope.invescoOverlay.fundPerformanceData.fullperfData.productPerformance.monthlyPerfSurrenderFooter):(invescoModules.checkIndexValue("quarterlyStandardPerformance"),$scope.invescoOverlay.yearName=$scope.invescoOverlay.fundPerformanceData.fullperfData.productPerformance.standardizedPerfHeader,$scope.invescoOverlay.footerText=$scope.invescoOverlay.fundPerformanceData.fullperfData.productPerformance.standardizedPerfFooter),performObj.filterIndex=num},invescoModules.checkIndexValue=function(status){angular.forEach($scope.invescoOverlay.fundPerformanceData.fullperfData.productPerformance[status],function(value){$scope.invescoOverlay.profileId===value.pflId&&($scope.invescoOverlay.performanceData=value)})},invescoModules.checkfundDetailArray=function(array){$scope.invescoOverlay.fundTopTenHoldings=[],performObj.totalHolding=0,$scope.invescoOverlay.fundClasses=[],$scope.invescoOverlay.barFundArr=[],$scope.invescoOverlay.barfundClassName=[],performObj.alignLegend="right",performObj.verticalAlignLegend="middle",performObj.legendX=0,performObj.legendY=0,performObj.heightPie=350,performObj.widthPie=400,performObj.heightBar=250,performObj.widthBar=380,performObj.heightBar1=380,performObj.widthBar1=400,angular.forEach(array,function(value){if($scope.invescoOverlay.profileId===value.fundId){$scope.invescoOverlay.funDetail=value,$scope.invescoOverlay.fundInceptionDate=value.fundInceptionDate,$scope.invescoOverlay.fundTopTenHoldings=value.fundTopTenHoldings,$scope.invescoOverlay.fundPortFolioDate=value.fundPortFolioDate;for(var i=0;i<$scope.invescoOverlay.fundTopTenHoldings.length;i++)performObj.totalHolding+=$scope.invescoOverlay.fundTopTenHoldings[i].pct;$scope.invescoOverlay.totalHolding=performObj.totalHolding.toFixed(1);for(var j=0;j<$scope.invescoOverlay.funDetail.fundClasses.length;j++)$scope.invescoOverlay.fundClasses.push({name:value.fundClasses[j].companyName+":",y:value.fundClasses[j].pct}),$scope.invescoOverlay.barFundArr.push(value.fundClasses[j].pct),$scope.invescoOverlay.barfundClassName.push(value.fundClasses[j].companyName);invescoModules.checkfundDisclosuresArray(value.footnoteNumbers)}})},invescoModules.checkfundDisclosuresArray=function(numbers){performObj.splitedNumArray=numbers.split(","),$scope.invescoOverlay.fundDisclosures=[],angular.forEach($scope.invescoOverlay.fundPerformanceData.fullperfData.productPerformance.fundDisclosures,function(value){for(var i=0;i<performObj.splitedNumArray.length;i++)performObj.splitedNumArray[i].trim()===value.discNo&&$scope.invescoOverlay.fundDisclosures.push({discText:value.discText})})},invescoModules}();$scope.invescoModule=function(data){performObj.productId=data.fullperfData.productPerformance.sacode1,$scope.invescoOverlay.fundPerformanceData=data,$scope.invescoOverlay.profileId=data.profileId,$scope.invescoOverlay.dropdownNum=data.dropdownNum,$scope.invescoOverlay.productDisclosures=$scope.invescoOverlay.fundPerformanceData.fullperfData.productPerformance.productDisclosures,$scope.invescoOverlay.complianceTop=data.fullperfData.productPerformance.complianceTop,invescoUtil.checkDropDownNumber($scope.invescoOverlay.dropdownNum),invescoUtil.checkfundDetailArray($scope.invescoOverlay.fundPerformanceData.fullperfData.productPerformance.fundDetail),"mobile"===performObj.param&&(performObj.alignLegend="center",performObj.verticalAlignLegend="bottom",performObj.legendX=20,performObj.legendY=10,performObj.widthPie=300,performObj.heightPie=300,performObj.heightBar=200,performObj.widthBar=300,performObj.heightBar1=200,performObj.widthBar1=300),$scope.showPieBarChart(!0),$scope.showOverlay($scope.invescoOverlay.profileId)},$scope.showOverlay=function(){performObj.monthlyPerformance=[];var title,a,monthViewCatArrary=[],monthViewValueArrary=[],monthView=[{0:"changeFrmPrevDayPerformance",1:"Change from Previous Day"},{0:"lastDailyPerfDate",1:"YTD as of ",2:"perfValueYtd1"},{0:"monthlyPerformanceYtd2Date",1:"YTD as of ",2:"perfValueYtd2"},{0:"perfValueOneMonth",1:"1 Month"},{0:"perfValueThreeMonth",1:"3 Month"},{0:"perfValueOneYear",1:"1 Year"},{0:"perfValueThreeYear",1:"3 Year"},{0:"perfValueFiveYear",1:"5 Year"},{0:"perfValueTenYear",1:"10 Year"},{0:"perfValueSinceInception",1:"Since Inception"},{0:"perfValueTenYearSinceInception",1:"10 Year  or Since Inception"}];"1"===performObj.filterIndex?angular.forEach($scope.invescoOverlay.fundPerformanceData.fullperfData.productPerformance.monthlyPerformance,function(value){if($scope.invescoOverlay.profileId===value.pflId){for(a in monthView)"perfValueTenYearSinceInception"!==monthView[a][0]&&("lastDailyPerfDate"===monthView[a][0]||"monthlyPerformanceYtd2Date"===monthView[a][0]?(title=monthView[a][1]+$scope.invescoOverlay.fundPerformanceData.fullperfData.productPerformance[monthView[a][0]],performObj.monthlyPerformance.push({title:title,value:value[monthView[a][2]]})):(title=monthView[a][1],performObj.monthlyPerformance.push({title:title,value:value[monthView[a][0]]})));performObj.fundIncDt=value.fundIncDt}}):"2"===performObj.filterIndex?angular.forEach($scope.invescoOverlay.fundPerformanceData.fullperfData.productPerformance.monthlyPerformanceSurrender,function(value){if($scope.invescoOverlay.profileId===value.pflId){for(a in monthView)"perfValueTenYearSinceInception"!==monthView[a][0]&&("lastDailyPerfDate"===monthView[a][0]||"monthlyPerformanceYtd2Date"===monthView[a][0]?(title=monthView[a][1]+$scope.invescoOverlay.fundPerformanceData.fullperfData.productPerformance[monthView[a][0]],performObj.monthlyPerformance.push({title:title,value:value[monthView[a][2]]})):(title=monthView[a][1],performObj.monthlyPerformance.push({title:title,value:value[monthView[a][0]]})));performObj.fundIncDt=value.fundIncDt}}):"3"===performObj.filterIndex&&angular.forEach($scope.invescoOverlay.fundPerformanceData.fullperfData.productPerformance.quarterlyStandardPerformance,function(value){if($scope.invescoOverlay.profileId===value.pflId)for(a in monthView)"perfValueOneYear"!==monthView[a][0]&&"perfValueFiveYear"!==monthView[a][0]&&"perfValueTenYearSinceInception"!==monthView[a][0]||performObj.monthlyPerformance.push({title:monthView[a][1],value:value[monthView[a][0]]})}),angular.forEach(performObj.monthlyPerformance,function(value){monthViewCatArrary.push(value.title),monthViewValueArrary.push("N/A"===value.value?0:Number(value.value))}),$("#prefPie2-container").highcharts({chart:{type:"column",height:performObj.heightBar1,width:performObj.widthBar1},title:{text:null},xAxis:{categories:monthViewCatArrary,title:{text:null},labels:{rotation:75}},yAxis:[{title:{text:null},labels:{overflow:"justify",format:"{value} %"},lineWidth:1,tickInterval:1}],tooltip:{formatter:function(){var decValue="0"===this.y.toFixed(2).split(".")[1]?this.y.toFixed(2).split(".")[0]:this.y.toFixed(2);return this.key+" ("+decValue+")%"}},plotOptions:{bar:{dataLabels:{enabled:!0}}},legend:{enabled:!1},credits:{enabled:!1},series:[{name:"",data:monthViewValueArrary}]})},$scope.isPieBar=!0,$scope.showPieBarChart=function(isPieBar){if($scope.isPieBar=isPieBar,isPieBar){var colors=["#90C53E","#5FA0D6","#5A4772","#B24F6A","#3A51A3"],chart=new Highcharts.Chart({chart:{renderTo:"prefPie-container",plotBackgroundColor:null,plotBorderWidth:null,plotShadow:!1,height:performObj.heightPie,width:performObj.widthPie},title:{text:""},tooltip:{formatter:function(){var decValue="0"===this.y.toFixed(1).split(".")[1]?this.y.toFixed(1).split(".")[0]:this.y.toFixed(1);return"<b>"+this.key+"</b>"+decValue+"%"}},plotOptions:{series:{marker:{enabled:!1}},pie:{allowPointSelect:!0,cursor:"pointer",dataLabels:{enabled:!1},point:{events:{mouseOver:function(){this.slice(!0)},mouseOut:function(){this.slice(!1)},legendItemClick:function(){return!1}}},showInLegend:!0,colors:colors}},colors:colors,legend:{align:performObj.alignLegend,verticalAlign:performObj.verticalAlignLegend,layout:"vertical",itemMarginBottom:8,x:performObj.legendX,labelFormatter:function(){return'<div class="highcharts-legend-item" style="text-align: left; width:130px;float:left;">'+this.name+'</div><div style="width:40px; float:left;text-align:right;">'+this.y+"%</div>"},y:performObj.legendY},series:[{type:"pie",data:$scope.invescoOverlay.fundClasses}]});$(".highcharts-legend-item text").mouseover(function(){var selectedLegend=$(this).text();selectedLegend=selectedLegend.trim();for(var totPts=chart.series[0].points.length,i=0;i<totPts;i++){chart.series[0].points[i].name.trim()+chart.series[0].points[i].y+"%"===selectedLegend?chart.series[0].points[i].slice(!0):chart.series[0].points[i].slice(!1)}}),$(".highcharts-legend-item text").mouseout(function(){
for(var totPts=chart.series[0].points.length,i=0;i<totPts;i++)chart.series[0].points[i].slice(!1)})}else $("#prefPie-container").highcharts({chart:{type:"bar",height:performObj.heightBar,width:performObj.widthBar},title:{text:null},xAxis:{gridLineWidth:1,categories:$scope.invescoOverlay.barfundClassName,title:{text:"<b>Distribution</b>"}},yAxis:{min:0,gridLineWidth:0,title:{text:"<b>Percentage Allocation</b>"},labels:{overflow:"justify",format:"{value} %"}},tooltip:{formatter:function(){var decValue="0"===this.y.toFixed(1).split(".")[1]?this.y.toFixed(1).split(".")[0]:this.y.toFixed(1);return"<b>"+this.key+": </b>"+decValue+"%"}},plotOptions:{bar:{dataLabels:{enabled:!0}},series:{colorByPoint:!0}},colors:["#90C53E","#5FA0D6","#5A4772","#B24F6A","#3A51A3"],legend:{enabled:!1,align:performObj.alignLegend,verticalAlign:performObj.verticalAlignLegend,layout:"vertical",itemMarginBottom:8,x:performObj.legendX,y:performObj.legendY},credits:{enabled:!1},series:[{data:$scope.invescoOverlay.barFundArr}]})},$scope.getDownload=function(name,type){var url="/afpquery-rest-ui";"FundPerformance"===name?url+="/service/product/download"+type.toUpperCase()+"FundPerformance/"+performObj.productId+"/"+$scope.invescoOverlay.profileId+"/m/"+name+"."+type:"FundUnitValues"===name?url+="/service/unitvalue/download"+type.toUpperCase()+"FundUnitValues/"+performObj.productId+"/"+$scope.invescoOverlay.profileId+"/"+name+"."+type:"FundProfile"===name&&(name+=$scope.isPieBar?"PieChart":"BarChart",url+="/service/fund/downloadPDFFundProfile/"+performObj.productId+"/"+$scope.invescoOverlay.profileId+"/"+$scope.isPieBar+"/"+name),window.open(url)}}]),function(){"use strict";lfgapp.factory("contactWholesalerService",["$http",function($http){return{contactWholesalerService:function(scope,data,callback){$http.post(globalConstant.formPostUrl,data).then(function(msg){callback(msg)})}}}])}(),function(){"use strict";lfgapp.factory("contactWholesalerLlavaService",["$http",function($http){return{contactWholesalerLlavaService:function(scope,data,callback){$http.post(globalConstant.formPostUrl,data).then(function(msg){console.log("before service callback"),callback(msg),console.log("after service callback: "+msg)},function(msg){console.log("calling service failed")})}}}])}(),lfgapp.factory("askCustomerServiceServices",["$http",function($http){return{askCustomerServicePost:function(scope,data,callback){$http.post(globalConstant.formPostUrl,data).then(function(msg){callback(msg)})}}}]),lfgapp.factory("formPostService",["$http",function($http){return{formPostData:function(scope,data,callback){$http.post(globalConstant.formPostUrl,data).then(function(msg){callback(msg)})}}}]),lfgapp.factory("contactFormService",["$http",function($http){return{formPostData:function(scope,data,callback){$http.post(globalConstant.formPostUrl,data).then(function(msg){callback(msg)})}}}]),lfgapp.factory("contactUsGpServices",["$http",function($http){return{contactUsGpInfoPost:function(scope,data,callback){$http.post(globalConstant.formPostUrl,data).then(function(msg){callback(msg)})}}}]),lfgapp.factory("disabilityWaiverServices",["$http",function($http){return{disabilityWaiverPost:function(scope,data,callback){$http.post(globalConstant.formPostUrl,data).then(function(msg){callback(msg)})}}}]),lfgapp.factory("drinkerBiddleServices",["$http",function($http){return{drinkerBiddlePost:function(scope,data,callback){$http.post(globalConstant.formPostUrl,data).then(function(msg){callback(msg)})}}}]),lfgapp.factory("requestInfoServices",["$http",function($http){return{requestInfoPost:function(scope,data,callback){$http.post(globalConstant.formPostUrl,data).then(function(msg){callback(msg)})}}}]),lfgapp.factory("fraudFormService",["$http",function($http){return{fraudFormPostData:function(scope,data,callback){$http.post(globalConstant.formPostUrl,data).then(function(msg){callback(msg)})}}}]),lfgapp.factory("formPostService",["$http",function($http){return{formPostData:function(scope,data,callback){$http.post(globalConstant.formPostUrl,data).then(function(msg){callback(msg)})}}}]),lfgapp.factory("lifeInsuranceDeathServices",["$http",function($http){return{lifeInsuranceDeathInfoPost:function(scope,data,callback){$http.post(globalConstant.formPostUrl,data).then(function(msg){callback(msg)})}}}]),lfgapp.factory("longTermCareServices",["$http",function($http){return{longTermCareInfoPost:function(scope,data,callback){$http.post(globalConstant.formPostUrl,data).then(function(msg){callback(msg)})}}}]),lfgapp.factory("registerSupplierServices",["$http",function($http){return{registerSupplierPost:function(scope,data,callback){$http.post(globalConstant.formPostUrl,data).then(function(msg){callback(msg)})}}}]),lfgapp.factory("lostPolicyFinderServices",["$http",function($http){return{lostPolicyFinderPost:function(scope,data,callback){$http.post(globalConstant.formPostUrl,data).then(function(msg){callback(msg)})}}}]),lfgapp.factory("securityReportingServices",["$http",function($http){return{securityReportingPost:function(scope,data,callback){$http.post(globalConstant.formPostUrl,data).then(function(msg){callback(msg)})}}}]),lfgapp.factory("spanishContactFormServices",["$http",function($http){return{spanishContactFormPost:function(scope,data,callback){$http.post(globalConstant.formPostUrl,data).then(function(msg){callback(msg)})}}}]),lfgapp.factory("performanceService",["$http",function($http){return{performanceData:function(scope,code,callback){var data={};$http.post("/afpquery-rest-ui/service/product/"+code,{}).success(function(result){data.data=result,callback(data)}).error(function(result){console.log("error : ",result)})}}}]),lfgapp.factory("historicalPricesService",["$http",function($http){return{historicalPricesData:function(scope,callback){$http.post("/pbl-investor-service-app/rest/ir/getDetails",{FUNCTION:"HistoricStockQuote",TICKER:"LNC",LOOKUPDATE:scope}).success(function(result){callback(JSON.parse(result.serviceReponseMessage))}).error(function(result){console.log(result)})}}}]),lfgapp.factory("insiderTradingService",["$http",function($http){return{insiderTradingData:function(scope,callback){callback($.parseJSON(globalConstant.insiderTrading))}}}]),function(){lfgapp.factory("lifeExpectancyCalcService",["$http",function($http){return{lifeExpectancyCalcService:function(scope,data,callback){$http({method:"POST",url:globalConstant.lifeExpectancyCalc,data:data}).then(function(response){callback(response)},function(response){callback(response)})}}}])}(),function(){lfgapp.factory("searchService",["$http",function($http){return{searchResults:function(url,data,callback){$http.post(url,data).then(function(msg){callback(msg)})}}}])}(),lfgapp.factory("secFilingsServices",["$http",function($http){return{secFilingData:function(scope,callback){$http.post("/pbl-investor-service-app/rest/ir/getDetails",scope).success(function(result){callback(JSON.parse(result.serviceReponseMessage))}).error(function(result){console.log(result)})}}}]),function(){angular.module("lfgapp").factory("GoogleMapService",["$q","$filter","CommonService",function($q,$filter,commonService){function listScroll(index){var prntEle=document.getElementById(mapInit.listPrntId),childEle=document.getElementsByName(mapInit.listChildName),scrollTop=childEle[index].offsetTop-prntEle.offsetTop;prntEle.scrollTop=scrollTop}function createInfoWindowMsg(advisor){var infoWindowContent='<div class="info-window"><p>';return commonService.isEmptyString(advisor.firstName)||(infoWindowContent+=advisor.firstName),commonService.isEmptyString(advisor.lastName)||(infoWindowContent=infoWindowContent+" "+advisor.lastName),infoWindowContent+="</p>",commonService.isEmptyString(advisor.email)||(infoWindowContent=infoWindowContent+'<p><a href="mailto:'+advisor.email+'">'+advisor.email+"</a></p>"),commonService.isEmptyString(advisor.distance)||(infoWindowContent=infoWindowContent+'<p class="directions"><a target="_blank" href="https://www.google.com/maps?daddr='+advisor.location.lat+","+advisor.location.lng+'">Directions</a></p>'),infoWindowContent+='<div class="address-cont">',commonService.isEmptyString(advisor.addressLine1)||(infoWindowContent=infoWindowContent+"<p>"+advisor.addressLine1+"</p>"),infoWindowContent+="<p>",commonService.isEmptyString(advisor.city)||(infoWindowContent+=advisor.city),commonService.isEmptyString(advisor.state)||(infoWindowContent=infoWindowContent+", "+advisor.state),commonService.isEmptyString(advisor.zipCode)||(infoWindowContent=infoWindowContent+" "+advisor.zipCode),infoWindowContent+="</p>",commonService.isEmptyString(advisor.phoneNumber)||(infoWindowContent=infoWindowContent+'<p class="blue-lbl"><a href="tel:'+advisor.phoneNumber+'">'+advisor.phoneNumber+"</a></p></div></div>"),infoWindowContent}function markerClick(advisor){var marker=advisor.marker,markerLbl=marker.label.text;return function(type){mapInit.vm.selMarker=markerLbl;var latlng={lat:marker.position.lat(),lng:marker.position.lng()},options={pixelOffset:new google.maps.Size(0,-40)};null!==marker.getMap()&&infowindow.setOptions(options),infowindow.setPosition(latlng),infowindow.setContent(createInfoWindowMsg(advisor)),infowindow.open(map),"trigger"!==type&&mapInit.scope.$apply(),listScroll(parseInt(markerLbl)-1)}}function markerClusterClick(cluster){for(var markers=cluster.getMarkers(),hasSameLatLng=!0,prevMarker=null,i=0;i<markers.length;i++){var marker=markers[i];if(null!==prevMarker&&(prevMarker.getPosition().lat()!==marker.getPosition().lat()||prevMarker.getPosition().lng()!==marker.getPosition().lng())){hasSameLatLng=!1;break}prevMarker=marker}if(hasSameLatLng){var clusterContent=null,latlng={lat:markers[0].getPosition().lat(),lng:markers[0].getPosition().lng()};markers.forEach(function(marker){var advisorIndex=parseInt(marker.label.text)-1,advisor=mapInit.results[advisorIndex];clusterContent=null===clusterContent?createInfoWindowMsg(advisor):clusterContent+'<hr class="info-window-hr">'+createInfoWindowMsg(advisor)}),infowindow.setContent(clusterContent),infowindow.setPosition(latlng),infowindow.open(map)}}function attachMarkers(){var markers=[];angular.forEach(mapInit.results,function(advisor,index){var markerLbl=parseInt(index)+1,marketLblFSize="12px";markerLbl>99&&(marketLblFSize="10px");var iconOrigin=new google.maps.Point(11,12);markerLbl>9&&(iconOrigin=new google.maps.Point(10,12));var latLng=new google.maps.LatLng(advisor.location.lat,advisor.location.lng),marker=new google.maps.Marker({position:latLng,animation:google.maps.Animation.DROP,icon:{url:"/static/wcs/lfg/images/icons/map-marker.png",labelOrigin:iconOrigin},label:{text:""+markerLbl,color:"white",fontSize:marketLblFSize,fontWeight:"bold"},map:map});advisor.marker=marker,marker.addListener("click",markerClick(advisor)),markers.push(marker)}),markerClusterer=new MarkerClusterer(map,markers,{imagePath:"/static/wcs/lfg/images/icons/m",maxZoom:18,zoomOnClick:!0}),markerClusterer.addListener("click",markerClusterClick)}function initMap(mapInitObj){mapInit=mapInitObj,map=new google.maps.Map(document.getElementById("map"),{zoom:0,maxZoom:18,center:mapInit.results[0].location});var latlngbounds=new google.maps.LatLngBounds;mapInit.results.forEach(function(advisor){latlngbounds.extend(advisor.location)}),map.fitBounds(latlngbounds),infowindow=new google.maps.InfoWindow,attachMarkers()}function triggerMarker(advisor){google.maps.event.trigger(advisor.marker,"click","trigger")}function geocodeLatLng(zipCode){var promise,deferred=$q.defer();return promise=deferred.promise,(new google.maps.Geocoder).geocode({address:zipCode},function(results,status){if("OK"===status){var location={};results.length>0&&(location.lat=results[0].geometry.location.lat(),location.lng=results[0].geometry.location.lng()),deferred.resolve(location)}else console.log("Geocode was not successful for the following reason: "+status),deferred.resolve(status)}),promise}var map,mapInit,markerClusterer,infowindow;return{listScroll:listScroll,triggerMarker:triggerMarker,initMap:initMap,geocodeLatLng:geocodeLatLng}}])}(),function(){angular.module("lfgapp").factory("CommonService",[function(){function validateZipCode(zipCode,evt){evt=evt||window.event;var charCode=evt.which?evt.which:evt.keyCode;return charCode>31&&(charCode<48||charCode>57)?(event.preventDefault(),zipCode):(void 0!==zipCode&&null!==zipCode&&(zipCode=zipCode.replace(/[^0-9]/g,"")),zipCode)}function validatePhoneNo(phoneNo,evt){return evt=evt||window.event,void 0!==phoneNo&&null!==phoneNo&&(3===phoneNo.length&&8!==evt.keyCode?(phoneNo=phoneNo.replace(/[^0-9]/g,""),phoneNo=phoneNo.replace(/(\d{3})/,"$1-")):7===phoneNo.length&&8!==evt.keyCode?(phoneNo=phoneNo.replace(/[^0-9]/g,""),phoneNo=phoneNo.replace(/(\d{3})(\d{3})/,"$1-$2-")):12===phoneNo.length?(phoneNo=phoneNo.replace(/[^0-9]/g,""),phoneNo=phoneNo.replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")):10===phoneNo.length&&(phoneNo=phoneNo.replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3"))),phoneNo}function scrollTop(className){var paramState;$(document).on("responsive:statechanged",function(e,param){paramState=param}),setTimeout(function(){var scrollTpVal,body;scrollTpVal=$(className).offset().top,body=$("html, body"),"mobile"===paramState?body.stop().animate({scrollTop:scrollTpVal},{queue:!1,easing:"swing",duration:500}):(scrollTpVal=scrollTpVal-10-$(".Topheader").height(),body.stop().animate({scrollTop:scrollTpVal},{queue:!1,easing:"swing",duration:500}))},200)}function formatPhoneNo(phoneNo){return void 0!==phoneNo&&null!==phoneNo&&(phoneNo=phoneNo.replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")),phoneNo}function isEmptyString(str){return void 0===str||null===str||"null"===str||""===str}return{scrollTop:scrollTop,validatePhoneNo:validatePhoneNo,validateZipCode:validateZipCode,formatPhoneNo:formatPhoneNo,isEmptyString:isEmptyString}}])}(),function(){angular.module("lfgapp").factory("RestService",["$http",function($http){return{post:function(url,data,callback){$http({method:"POST",url:url,data:data}).then(function(response){callback(response)},function(response){callback(response)})},get:function(url,callback){$http({method:"GET",url:url}).then(function(response){callback(response)},function(response){callback(response)})}}}])}(),lfgapp.directive("scroll",["$window",function($window){return function(scope){angular.element($window).bind("scroll",function(){this.pageYOffset>=10?angular.element("#getStarted-success-txt").css("top","80px"):angular.element("#getStarted-success-txt").css("top","150px"),scope.$apply()})}}]),lfgapp.directive("onlyNumberValidation",function(){return{require:"ngModel",restrict:"A",link:function(scope,element,attr,ctrl){function inputValue(val){if(val){var digits=val.replace(/[^0-9]/g,"");return digits!==val&&(ctrl.$setViewValue(digits),ctrl.$render()),digits}}ctrl.$parsers.push(inputValue)}}}),lfgapp.directive("lfsAddaccounts",["$compile",function($compile){return{restrict:"E",replace:!0,scope:{accList:"=",watchPrefixAndAccNum:"=method",type:"@"},template:"<p><a href='javascript:;' id='addMoreAccounts' class='UIButton UIButton--uppercase'>Add More Accounts</a></p>",link:function(scope,element){scope.count=0,element.find("a").bind("click",function(){if(scope.count%3==0&&0!==scope.count){var html=$compile("<section class='multiwapper accListwrapper'><lfs:account count='"+scope.count+"' acc-list='accList' data-method='watchPrefixAndAccNum' type="+scope.type+"></lfs:account></section>")(scope);angular.element($(".accListwrapper:last")).after(html)}else{var button=$compile("<lfs:account count='"+scope.count+"' acc-list='accList' data-method='watchPrefixAndAccNum' type="+scope.type+" ></lfs:account>")(scope);angular.element($(".accListwrapper:last")).append(button)}scope.count++,15===scope.count&&"reg"===scope.type&&$(this).hide(),9===scope.count&&"update"===scope.type&&$(this).hide()})}}}]),lfgapp.directive("lfsAdddelaccounts",["$compile",function($compile){return{restrict:"E",replace:!0,scope:{accDelList:"=",type:"@"},template:"<p><a href='javascript:;' id='addDelMoreAccounts' class='UIButton UIButton--uppercase'>Add More Accounts</a></p>",link:function(scope,element){scope.count=0,element.find("a").bind("click",function(){if(scope.count%3==0&&0!==scope.count){var html=$compile("<section class='multiwapper accDelListwrapper'><lfs:accountdel count='"+scope.count+"' acc-list='accDelList'></lfs:account></section>")(scope);angular.element($(".accDelListwrapper:last")).after(html)}else{var button=$compile("<lfs:accountdel count='"+scope.count+"' acc-list='accDelList'></lfs:account>")(scope);angular.element($(".accDelListwrapper:last")).append(button)}scope.count++,15===scope.count&&"reg"===scope.type&&$(this).hide(),9===scope.count&&"update"===scope.type&&$(this).hide()})}}}]),lfgapp.directive("lfsAccount",function(){function lfsAccountController($scope){$scope.validate=function(){if("reg"===$scope.type){var isPrefix1Changed=!(void 0===$scope.accList[0].prefix||""===$scope.accList[0].prefix),isAccNum1Changed=!(void 0===$scope.accList[0].accNum||""===$scope.accList[0].accNum);$scope.watchPrefixAndAccNum(isPrefix1Changed,isAccNum1Changed)}},$scope.$watch("prefix",function(newValue){var obj={};void 0===$scope.accList[$scope.count]?(obj={index:$scope.count,prefix:void 0===newValue?"":newValue},$scope.accList[$scope.count]=obj):(obj=$scope.accList[$scope.count],obj.prefix=void 0===newValue?"":newValue,0===$scope.count&&"reg"===$scope.type&&$scope.validate(),$scope.accList[$scope.count]=obj)}),$scope.$watch("accNum",function(newValue){var obj={};void 0===$scope.accList[$scope.count]?(obj={index:$scope.count,accNum:void 0===newValue?"":newValue},$scope.accList[$scope.count]=obj):(obj=$scope.accList[$scope.count],obj.accNum=void 0===newValue?"":newValue,0===$scope.count&&"reg"===$scope.type&&$scope.validate(),$scope.accList[$scope.count]=obj)})}return{restrict:"E",replace:!0,scope:{count:"=",accList:"=",watchPrefixAndAccNum:"=method",type:"@"},template:"<section class='f-col-3'><div class='se-box-new'><div class='reg_form_input_txt_field'><input type='text' ng-keyup='validate()' name='prefix' class='se-box-new-input' ng-model='prefix' placeholder='Prefix' maxlength='3'></div></div><span class='span-block'>__</span><div class='se-box-new'><div class='reg_form_input_txt_field'><input type='text' ng-keyup='validate()' name='accNum' class='se-box-new-input' ng-model='accNum' placeholder='Account Num' maxlength='6' name=''></div></div></section>",controller:lfsAccountController}}),lfgapp.directive("lfsAccountdel",function(){function lfsAccountController($scope){$scope.$watch("prefix",function(newValue){var obj={};void 0===$scope.accList[$scope.count]?(obj={index:$scope.count,prefix:void 0===newValue?"":newValue},$scope.accList[$scope.count]=obj):(obj=$scope.accList[$scope.count],obj.prefix=void 0===newValue?"":newValue,$scope.accList[$scope.count]=obj)}),$scope.$watch("accNum",function(newValue){var obj={};void 0===$scope.accList[$scope.count]?(obj={index:$scope.count,accNum:void 0===newValue?"":newValue},$scope.accList[$scope.count]=obj):(obj=$scope.accList[$scope.count],obj.accNum=void 0===newValue?"":newValue,$scope.accList[$scope.count]=obj)})}return{restrict:"E",replace:!0,scope:{count:"=",accList:"="},template:"<section class='f-col-3'><div class='se-box-new'><div class='reg_form_input_txt_field'><input type='text' ng-model='prefix' class='se-box-new-input' placeholder='Prefix' maxlength='3'></div></div><span class='span-block'>__</span><div class='se-box-new'><div class='reg_form_input_txt_field'><input type='text' ng-model='accNum' class='se-box-new-input' placeholder='Account Num' maxlength='6' name=''></div></div></section>",controller:lfsAccountController}}),lfgapp.directive("assetAbbr",function(){return{restrict:"A",link:function(scope,element,attr){var attrAsset,assetStr,i,assetCat=[];for(attrAsset=attr.asset,assetStr=attrAsset.replace(/ /g,""),i=0;i<assetStr.length;i++)assetStr[i]===assetStr[i].toUpperCase()&&(assetCat[i]=assetStr[i]);scope.assetsCat=assetCat.join("")}}}).directive("onFinishRender",function(){return{restrict:"A",link:function(scope){!0===scope.$last&&setTimeout(function(){scope.$emit("ngRepeatFinished")},100)}}}),function(){angular.module("LFGHeader").directive("alignMenu",["$window",function($window){return{link:function(scope,element,attr){function updateCol(subMenuContEle,subMenuWrapperEle,noOfCols,hasQuicklinks){subMenuContEle.classList.remove("megamenu-submenu--1col"),subMenuContEle.classList.remove("megamenu-submenu--2col"),subMenuContEle.classList.remove("megamenu-submenu--3col"),subMenuContEle.classList.remove("megamenu-submenu--4col"),subMenuWrapperEle.classList.remove("megamenu-submenu--1col-quicklinks"),subMenuWrapperEle.classList.remove("megamenu-submenu--1col"),subMenuWrapperEle.classList.remove("megamenu-submenu--2col-quicklinks"),subMenuWrapperEle.classList.remove("megamenu-submenu--2col"),subMenuWrapperEle.classList.remove("megamenu-submenu--3col-quicklinks"),subMenuWrapperEle.classList.remove("megamenu-submenu--3col"),subMenuWrapperEle.classList.remove("megamenu-submenu--4col-quicklinks"),subMenuWrapperEle.classList.remove("megamenu-submenu--4col"),4===noOfCols?(subMenuContEle.classList.add("megamenu-submenu--4col"),hasQuicklinks?subMenuWrapperEle.classList.add("megamenu-submenu--4col-quicklinks"):subMenuWrapperEle.classList.add("megamenu-submenu--4col")):3===noOfCols?(subMenuContEle.classList.add("megamenu-submenu--3col"),hasQuicklinks?subMenuWrapperEle.classList.add("megamenu-submenu--3col-quicklinks"):subMenuWrapperEle.classList.add("megamenu-submenu--3col")):2===noOfCols?(subMenuContEle.classList.add("megamenu-submenu--2col"),hasQuicklinks?subMenuWrapperEle.classList.add("megamenu-submenu--2col-quicklinks"):subMenuWrapperEle.classList.add("megamenu-submenu--2col")):(subMenuContEle.classList.add("megamenu-submenu--1col"),hasQuicklinks?subMenuWrapperEle.classList.add("megamenu-submenu--1col-quicklinks"):subMenuWrapperEle.classList.add("megamenu-submenu--1col"))}function alignMenu(){var subMenuWrapperEle,menuEle,siteNavEle,htmlEle=document.getElementsByTagName("html")[0],subMenuContEle=element[0],menuType=attr.menutype;if("megamenu"===menuType)siteNavEle=document.getElementsByClassName("site-navigation")[0],subMenuWrapperEle=subMenuContEle.parentElement,menuEle=subMenuWrapperEle.parentElement;else if("supportmenu"===menuType){siteNavEle=document.getElementsByClassName("topheader-navigation");for(var i=0;i<siteNavEle.length;i++)siteNavEle[i].classList.contains("topheader-navigation--mobile-contact-support")||(siteNavEle=siteNavEle[i]);subMenuWrapperEle=subMenuContEle,menuEle=subMenuContEle.parentElement}window.matchMedia("(min-width: 749px)").matches?setTimeout(function(){var paddingTop=parseFloat(window.getComputedStyle(subMenuContEle).getPropertyValue("padding-top")),paddingBottom=parseFloat(window.getComputedStyle(subMenuContEle).getPropertyValue("padding-bottom")),maxHeight=parseFloat(window.getComputedStyle(subMenuContEle).getPropertyValue("max-height"))-paddingTop-paddingBottom,colHeight=0,noOfCols=1,hasQuicklinks=!1;if("megamenu"===menuType){for(var z=0;z<subMenuContEle.children.length;z++){var subMenuItemEle=subMenuContEle.children[z];colHeight+=subMenuItemEle.offsetHeight,colHeight>=maxHeight&&(noOfCols+=1,colHeight=subMenuItemEle.offsetHeight,subMenuItemEle.style.borderTop="none",subMenuItemEle.offsetHeight>=maxHeight&&(noOfCols-=1,subMenuContEle.style.maxHeight="1500px",subMenuContEle.style.maxHeight=subMenuItemEle.offsetHeight+paddingBottom+paddingTop+"px"))}for(var j=0;j<subMenuWrapperEle.children.length;j++){subMenuWrapperEle.children[j].classList.contains("megamenu-submenu-container--quicklinks")&&(hasQuicklinks=!0)}updateCol(subMenuContEle,subMenuWrapperEle,noOfCols,hasQuicklinks)}var subMenuWidth=subMenuWrapperEle.offsetWidth,menuWidth=menuEle.offsetWidth,menuLeft=menuEle.offsetLeft,leftAlign=(menuWidth-subMenuWidth)/2,globalContWidth=siteNavEle.offsetWidth,globalContMarginLeft=parseFloat((htmlEle.offsetWidth-globalContWidth)/2),spaceOnRight=globalContWidth-(menuLeft-globalContMarginLeft+menuWidth),spaceOnLeft=menuLeft-globalContMarginLeft;spaceOnLeft+leftAlign<0?(subMenuWrapperEle.style.left="-"+spaceOnLeft+"px",subMenuWrapperEle.style.right="auto"):spaceOnRight+leftAlign<0?(subMenuWrapperEle.style.right="0px",subMenuWrapperEle.style.left="auto"):menuLeft+leftAlign<0?(subMenuWrapperEle.style.left="-"+menuLeft+"px",subMenuWrapperEle.style.right="auto"):(subMenuWrapperEle.style.left=leftAlign+"px",subMenuWrapperEle.style.right="auto")},100):(subMenuWrapperEle.style.removeProperty("left"),subMenuWrapperEle.style.removeProperty("right"),subMenuWrapperEle.style.removeProperty("width"),subMenuWrapperEle.style.removeProperty("height"),subMenuContEle.style.removeProperty("max-height"),subMenuContEle.style.removeProperty("left"),subMenuContEle.style.removeProperty("right"),subMenuContEle.style.removeProperty("width"),subMenuContEle.style.removeProperty("height"))}angular.element($window).on("resize",function(){alignMenu(),scope.$apply()}),alignMenu()}}}])}(),function(){angular.module("LFGHeader").directive("menuAnchor",[function(){return{link:function(scope,element){element.on("click",function(){if(window.matchMedia("(max-width: 749px)").matches){var menuEle=element[0],offsetTop=menuEle.offsetTop;if(menuEle.classList.contains("topheader-menu__item--show"))var i=window.pageYOffset,intervalId=setInterval(function(){window.scrollTo(0,i),(i+=10)>=offsetTop&&(window.scrollTo(0,offsetTop),clearInterval(intervalId))},5)}})}}}])}(),function(){angular.module("LFGHeader").directive("menuDrillDown",[function(){return{link:function(scope,element,attr){function addSlideClass(name,ele){ele.classList.remove("show--menu"),ele.classList.remove("hide--menu"),ele.classList.add(name)}function menuDrillDown(){var menu=element[0],dataLevel=menu.getAttribute("data-level"),menuId=menu.getAttribute("data-menuid"),hideMenuId=menu.getAttribute("data-hidemenuid"),containerId=menu.getAttribute("data-containerid"),contianerEle=document.querySelector('[data-container="'+containerId+'"]'),showMenu=document.querySelector('[data-for="'+menuId+'"]'),hideMenu=document.querySelector('[data-for="'+hideMenuId+'"]');showMenu&&addSlideClass("show--menu",showMenu),hideMenu&&addSlideClass("hide--menu",hideMenu),"megamenu"===attr.menutype?(megamenuEle.style.height=showMenu.offsetHeight+megamenuEleBW+"px",megamenuEle.style.left="-"+100*parseInt(dataLevel.replace(attr.menutype,""))+"%"):"supportmenu"===attr.menutype&&(contianerEle.style.height=showMenu.offsetHeight+"px",hideMenu.style.left="-"+100*parseInt(dataLevel.replace(attr.menutype,""))+"%")}function menuDrillUp(){var menu=element[0],dataLevel=menu.getAttribute("data-levelid"),hideMenuId=menu.getAttribute("data-hidemenuid"),showMenuId=menu.getAttribute("data-showmenuid"),containerId=menu.getAttribute("data-containerid"),contianerEle=document.querySelector('[data-container="'+containerId+'"]'),showMenu=document.querySelector('[data-for="'+showMenuId+'"]'),hideMenu=document.querySelector('[data-for="'+hideMenuId+'"]');hideMenu&&addSlideClass("hide--menu",hideMenu);var contHeight=0;if("megamenu"===attr.menutype){if(showMenu&&addSlideClass("show--menu",showMenu),1===parseInt(dataLevel.replace(attr.menutype,""))){for(var i=0;i<showMenu.children.length;i++){var submegamenu=showMenu.children[i];contHeight+=parseInt(window.getComputedStyle(submegamenu).getPropertyValue("min-height"))}megamenuEle.style.height=contHeight+megamenuEleBW+"px"}else megamenuEle.style.height=showMenu.offsetHeight+megamenuEleBW+"px";megamenuEle.style.left=parseInt(megamenuEle.style.left)+100+"%"}else if("supportmenu"===attr.menutype){if(1===parseInt(dataLevel.replace(attr.menutype,""))){for(var j=0;j<showMenu.children.length;j++){var subsupportmenu=showMenu.children[j];contHeight+=parseInt(window.getComputedStyle(subsupportmenu).getPropertyValue("height"))}contianerEle.style.height=contHeight+"px"}else megamenuEle.style.height=showMenu.offsetHeight+"px";showMenu.style.left=parseInt(showMenu.style.left)+100+"%"}}var megamenuEle=document.getElementsByClassName("megamenu")[0],megamenuEleBW=parseInt(window.getComputedStyle(megamenuEle).getPropertyValue("border-top-width"));element.on("click",function(){window.matchMedia("(max-width: 749px)").matches&&("true"===attr.drilldown?menuDrillDown():menuDrillUp())})}}}])}(),function(){angular.module("LFGHeader").directive("registerDropdown",[function(){return{link:function(scope,element){angular.element(element).on("mouseleave",function(){$("#yourAudience").removeClass("is-open"),$(".Register").hide()})}}}])}(),function(){angular.module("LFGHeader").directive("registerTooltip",[function(){return{link:function(scope,element){function showRegisterTooltip(ele){$(".Register.AudienceSelector--default").hide();var finalElDiff,eleTop=parseInt(ele.offset().top),docScrollTop=$(document).scrollTop(),eleLeft=parseInt(ele.offset().left),eleHeight=ele.height(),tltipEle=$("#"+ele.data("tooltip-id")),tlpWidth=tltipEle.outerWidth(),tlpHeight=tltipEle.height(),deviceHeight=$(window).height(),finalEleTop=0,finalArrowTop=0;window.matchMedia("(min-width: 749px)").matches?(finalEleTop=eleTop-docScrollTop,finalElDiff=finalEleTop+tlpHeight-deviceHeight,finalElDiff>0?(finalEleTop-=finalElDiff,finalArrowTop+=finalElDiff,$(".AudienceSelector-arrow",tltipEle).css({position:"relative",top:finalArrowTop+eleHeight/2}),finalEleTop-=45):finalEleTop-=45-eleHeight/2,tltipEle.css({top:finalEleTop,left:eleLeft-(tlpWidth+29)})):(tltipEle.css({top:eleTop-(tlpHeight+57),left:0}),$(".AudienceSelector-mobile-arrow",tltipEle).css({left:eleLeft-29})),tltipEle.show()}function hideRegisterTooltip(){$(".Register").hide()}var listEle=$(element),helpEle=$(element).find(".form-list-txthelp"),tooltipId=$(listEle).data("tooltip-id");angular.element(element).on("mouseenter",function(){window.matchMedia("(min-width: 999px)").matches&&showRegisterTooltip(listEle)}),angular.element(element).on("mouseleave",function(){window.matchMedia("(min-width: 999px)").matches&&hideRegisterTooltip()}),angular.element(helpEle).on("click touchstart",function(){showRegisterTooltip(helpEle)}),angular.element("#"+tooltipId+" .AudienceSelector-but-close").on("click touchstart",function(){return $("#"+tooltipId).hide(),!1})}}}])}(),function(){angular.module("LFGHeader").directive("wrapLinkWithIcon",[function(){return{link:function(scope,element,attr){!function(){var linkEle=element[0],linkTextArray=linkEle.text.trim().split(" "),lastWord=linkTextArray[linkTextArray.length-1];lastWord=attr.iconclass?'<span class="no--wrap">'+lastWord+'<i class="'+attr.iconclass+'"></i></span>':'<span class="no--wrap">'+lastWord+'<i class="fa fa-chevron-right megamenu-submenu__header-chevron"></i></span>',linkTextArray[linkTextArray.length-1]=lastWord,angular.element(linkEle).html(linkTextArray.join(" "))}()}}}])}(),function(){angular.module("lfgapp").directive("asyncComponent",function($compile){return{restrict:"A",replace:!0,link:function(scope,ele,attrs){scope.$watch(attrs.asyncComponent,function(html){ele.html(html),$compile(ele.contents())(scope)})}}})}(),jQuery.fn.extend({insertAtCaret:function(myValue){return this.each(function(i){if(document.selection)this.focus(),sel=document.selection.createRange(),sel.text=myValue,this.focus();else if(this.selectionStart||"0"==this.selectionStart){var startPos=this.selectionStart,endPos=this.selectionEnd,scrollTop=this.scrollTop;5==startPos&&5==endPos&&(this.value=this.value.substring(0,startPos)+myValue+this.value.substring(endPos,this.value.length),this.focus(),this.selectionStart=startPos+myValue.length,this.selectionEnd=startPos+myValue.length,this.scrollTop=scrollTop)}else this.value+=myValue,this.focus()})}});var transformedInput,transformedZipInput;$(document).ready(function(){$("#tableRespons").dataTable({responsive:!0,bLengthChange:!1,bSort:!1,bFilter:!1,paging:!1,info:!1}),$("#commonStockTblResponsive").dataTable({responsive:!0,bLengthChange:!1,bSort:!1,bFilter:!1,paging:!1,info:!1,autoWidth:!1}),$("#preferredStockTblResponsive").dataTable({responsive:!0,bLengthChange:!1,bSort:!1,
bFilter:!1,paging:!1,info:!1,autoWidth:!1}),$(".lfgDataTableResponsive").each(function(){$(this).dataTable({responsive:!0,bLengthChange:!1,bSort:!1,bFilter:!1,paging:!1,info:!1,autoWidth:!1})}),$("#warrantsTblResponsive").dataTable({responsive:!0,bLengthChange:!1,bSort:!1,bFilter:!1,paging:!1,info:!1,autoWidth:!1}),$("#StatuStmtTblResponsive").dataTable({responsive:!0,bLengthChange:!1,bSort:!1,bFilter:!1,paging:!1,info:!1,autoWidth:!1}),$("#analystCoverageTblResponsive").dataTable({responsive:!0,bLengthChange:!1,bSort:!1,bFilter:!1,paging:!1,info:!1,autoWidth:!1}),$(".page-landing-redirect li").click(function(e){var data={event_action:"link",event_name:$(this).text(),event_type:"hero"};utag.link(data)}),$(".onlyNumbers").on("keydown",function(evt){evt=evt||window.event;var charCode=evt.which?evt.which:evt.keyCode;return!(charCode>31&&(charCode<48||charCode>57))}),$(".page-landing-redirect li").on("click",function(){var openType="NewWindow"===$(this).attr("redirecttype")?"_blank":"_self";window.open($(this).attr("attr-href"),openType)}),$("table").attr("tabindex","0"),0===$(".bxslider").length&&($(".Hero-slogan h1").attr("tabindex",0),$(".Hero-slogan h2").attr("tabindex",0));var sharePageURL=window.location.href,description=$("meta[name='Description']").attr("content"),title=$(document).find("title").text();title=title.replace(/\|/g,"");var hostname=$("<a>").prop("href",sharePageURL).prop("hostname");null!=$(".Hero > img").attr("src")?$(".Hero > img").attr("src"):null!=$(".Hero > div > img").attr("src")&&$(".Hero > div > img").attr("src"),sharePageURL=encodeURIComponent(sharePageURL),$(".share--facebook").click(function(ele){return window.open("https://www.facebook.com/sharer/sharer.php?u="+sharePageURL,"popup","width=600,height=600"),!1}),$(".share--twitter").click(function(){return window.open("http://twitter.com/share?via=lincolnfingroup&text="+title+"&url="+sharePageURL,"popup","width=600,height=600"),!1}),$(".share--linkedin").click(function(){return window.open("https://www.linkedin.com/shareArticle?mini=true&url="+sharePageURL+"&title="+title+"&summary="+description+"&source=source","popup","width=600,height=600"),!1}),$(".share--email").attr("href",$(".share--email").attr("href")+sharePageURL),$("head").attr("prefix","og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/article#")});var slider;$(document).ready(function(){var slidetime=null;slidetime="undefined"==typeof time?5e3:time;var $bannerList,sliderObj={};sliderObj.nextSelector=".bx-slider-next",sliderObj.pause=slidetime,sliderObj.prevSelector=".bx-slider-pre",sliderObj.useCSS=!1,sliderObj.nextText="",sliderObj.controls=!1,sliderObj.prevText="",sliderObj.auto=!0,sliderObj.autoHover=!0,sliderObj.slideMargin=0,sliderObj.responsive=!0,sliderObj.infiniteLoop=!0,sliderObj.onSliderLoad=function(currentIndex){$bannerList=$(".bxslider li").not(".bx-clone").find(".Hero-slogan h2.copy").attr("tabindex",0),console.log("$bannerList",$bannerList),$(".bxslider li.bx-clone .Hero--landing").children("span").remove(),$(".bxslider li.bx-clone .Hero-slogan").attr("tabindex",-1),$(".bxslider li.bx-clone .Hero-slogan").find("a").attr("tabindex",-1),$(".bx-controls a").attr("tabindex",-1),$(".main-slider").hide(),$("div.bx-wrapper").addClass("Right"),$bannerList=$(".bxslider li"),$(".bxslider").show()},sliderObj.buildPager=function(slideIndex){return""},slider=$(".bxslider").show().bxSlider(sliderObj),$(".leftArrow").on("click",function(){slider.goToPrevSlide(),slider.stopAuto()}),$(".rightArrow").on("click",function(){slider.goToNextSlide(),slider.stopAuto()}),$(".adafocus0").focus(function(e){slider.stopAuto(),slider.goToSlide(0)}),$(".adafocus1").focus(function(e){slider.goToSlide(1)}),$(".adafocus2").focus(function(e){slider.goToSlide(2)}),$(".adafocus3").focus(function(e){slider.goToSlide(3)}),$(".adafocus4").focus(function(e){slider.goToSlide(4)}),$(".Tab-vertical ul.UITabset-nav li").on("click",function(event){event.preventDefault(),updateAnalytics($(this))}),$(".whats-new-overlay-wrapper button").on("click",function(event){event.preventDefault(),updateAnalytics($(this))}),$(".topheader-logo").on("click",function(event){var data={event_action:"link",event_name:"Lincoln Financial Group",event_type:"maincontent",event_version:"logo"};utag.link(data)})}),$(window).load(function(){$("#whatsNewOverlay").length>0&&"block"===$("#whatsNewOverlay").css("display")?($("body").height($(window).height()),$("body").addClass(".whats-new-overlay-open")):($("body").css({height:"auto"}),$("body").removeClass(".whats-new-overlay-open")),$(".addtocalendar").on("click touchstart","a,img",function(event){event.preventDefault(),event.stopPropagation(),console.log("event",event.type),$(".addtocalendar").hasClass("active")?($(".atcb-list").css({visibility:"hidden"}),$(".addtocalendar").removeClass("active")):($(".atcb-list").css({visibility:"visible"}),$(".addtocalendar").addClass("active"))}),$("ul.atcb-list li").on("click touchend",function(){var productLink=$(this).find("a");return productLink.attr("target","_blank"),window.open(productLink.attr("href")),!1}),$("ul.atcb-list a:last").blur(function(){$(".atcb-list").css({visibility:"hidden"}),$(".addtocalendar").removeClass("active")}),$("body").click(function(event){0===$(".addtocalendar").has(event.target).length&&($(".atcb-list").css({visibility:"hidden"}),$(".addtocalendar").removeClass("active"))}),$("div.title").on("focus",function(e){e.which||e.keyCode;$(this).next(".overlay_container").css("display","block")}),$("div.overlaycontent").on("blur","a",function(e){e.which||e.keyCode;$(this).parent().parent().removeAttr("style","")}),setTimeout(function(){if($(".RegAccordion").find("section").hasClass("is-expanded")){var openAcctop=$(".RegAccordion").find("section.is-expanded").offset().top-10;openAcctop-=$("header").height(),$("html, body").scrollTop(openAcctop)}},300),$(".errorMsgNone").css({display:"block"}),$(".AudienceSelector > .AudienceSelector--default").css("left",parseInt($("#aria-list-1").css("width"))+75+"px")});var commonFunctions=function(){var commonModule={};return commonModule.isNumber=function(evt){evt=evt||window.event;var charCode=evt.which?evt.which:evt.keyCode;return!(charCode>31&&(charCode<48||charCode>57))},commonModule.errorScrollPos=function(parentSection){if(angular.element(".err-border").length>0){var tisErrVal=angular.element(".err-border").eq(0).parent(parentSection).offset().top;tisErrVal=tisErrVal-angular.element(".Topheader-logoarea").outerHeight(!0)-20,angular.element("html, body").stop().animate({scrollTop:tisErrVal},600,function(){angular.element(".err-border").eq(0).focus()})}},commonModule.loaderShow=function(){angular.element("#fade").height(angular.element(window).height()),angular.element("html, body").scrollTop(0),angular.element("body").height(angular.element(window).height()).css({overflow:"hidden"}),angular.element("#status").fadeIn(),angular.element("#fade").fadeIn()},commonModule.loaderHide=function(){angular.element("#status").fadeOut(),angular.element("#fade").fadeOut(),angular.element("body").css({height:"auto",overflow:"auto"})},commonModule.isIE=function(version,comparison){var $div=$('<div style="display:none;"/>').appendTo($("body"));$div.html("\x3c!--[if "+(comparison||"")+" IE "+(version||"")+"]><a> </a><![endif]--\x3e");var ieTest=$div.find("a").length;return $div.remove(),ieTest},commonModule.callAccordion=function(cateName){setTimeout(function(){var attr=$("."+cateName).find("section").attr("data-accordion-idx");void 0===attr&&!1!==attr&&$("."+cateName).uIAccordion()},1e3)},commonModule.resetDatePicker=function(){$(".custom-div-year-dropdown").text("Year").attr("data-val","Year"),$(".custom-div-date-dropdown").text("Day").attr("data-val","Day"),$(".custom-div-month-dropdown").text("Month").removeAttr("data-val")},commonModule.resetField=function(evt,field){if("zip"===field){evt=evt||window.event;var charCode=evt.which?evt.which:evt.keyCode;if(charCode>31&&(charCode<48||charCode>57))return!1}return $(".searchby"+field).removeClass("c-err-box"),$(".searchby"+field).parent().next(".c-err-txt").hide(),$(".searchby"+field).next(".UIButton").show(),!0},commonModule.resetFormField=function(evt,field){if("zip"===field){evt=evt||window.event;var charCode=evt.which?evt.which:evt.keyCode;if(charCode>31&&(charCode<48||charCode>57))return!1}return $(".searchby"+field).removeClass("c-err-box"),$(".searchby"+field).siblings(".c-err-txt").hide(),$(".searchby"+field).next(".UIButton").show(),!0},commonModule}();commonFunctions.loaderHide();var deviceState;$(document).on("responsive:statechanged",function(e,param){deviceState=param}),$("a.fancybox-iframe").fancybox({type:"iframe",helpers:{overlay:{closeClick:!1}}}),$("a.leavingLFGOverlay").fancybox({arrows:!1,closeClick:!1,helpers:{overlay:{closeClick:!1}},beforeShow:function(){$("#leavingLFGOverlay .UIbtnContinue").attr("href",$(this.element).data("url"))},tpl:{closeBtn:'<a href="javascript:;"></a>'}}),$("#leavingLFGOverlay .UIbtnContinue, #leavingLFGOverlay .UIbtnCancel").on("click",function(){$.fancybox.close()});var fancyWidth,fancyHeight,isLlavaFancy;getMobileOperatingSystem(),$(window).resize(function(){"auto"!==fancyHeight&&""!==fancyHeight||$(".fancybox-opened").hasClass("curved--border--modal")&&modalScroll()});var globalConstant={ServicePblURL:"http://pbl-rest-dev.lfg.com",formToolCategories:{AnnuitySearchForms:"ANNUITY_SEARCH_FORMS",LifeSearchForms:"LIFE_SEARCH_FORMS",AnnuityClaimsForms:"ANNUITY_CLAIMS_FORMS",LifeClaimsForms:"LIFE_CLAIMS_FORMS",LongTermCareForms:"LONG_TERM_CARE_FORMS",LongTermClaimsForms:"LONG_TERM_CLAIMS_FORMS"},table1:"lfg-performance-values",table2:"lfg-performance-values-surrender",table3:"lfg-performance-values-quarterly",performPdf:"/afpquery-rest-ui/service/product/downloadPDFProductPerformance/{{jsonId}}/A/{{viewId}}/ProductPerformance_A{{viewId}}.pdf",performExcel:"/afpquery-rest-ui/service/product/downloadXLSProductPerformance/{{jsonId}}/A/{{viewId}}/ProductPerformance_A{{viewId}}.xls",performRMPdf:"/afpquery-rest-ui/service/product/downloadPDFProductPerformance/{{jsonId}}/R/{{viewId}}/ProductPerformance_R{{viewId}}.pdf",performRMExcel:"/afpquery-rest-ui/service/product/downloadXLSProductPerformance/{{jsonId}}/R/{{viewId}}/ProductPerformance_R{{viewId}}.xls",fundComparisonPdf:"/afpquery-rest-ui/service/product/downloadPDFFundComparison/{{jsonId}}/{{fundId}}/{{viewId}}/FundComparsion.pdf",unitValuesRMPdf:"/afpquery-rest-ui/service/unitvalue/downloadPDFUnitValues/{{jsonId}}/R/UnitValues_R.pdf",unitValuesPdf:"/afpquery-rest-ui/service/unitvalue/downloadPDFUnitValues/{{jsonId}}/A/UnitValues_A.pdf",moreThanOne:"Please Select more than 1 fund for comparison !!",lessThanFive:"You can't select more than five funds for comparison !!",monthlyPdf:"m",monthlySurrPdf:"ms",monthlyQuarPdf:"q",annualReturn:"Average Annual Total Return ( % ) as of ",perctChange:"Percentage Change",investOptions:"Selected Investment Options",reportsLink:"https://www.lfg.com",xmlToJson:function(xml){var obj={};if(1==xml.nodeType){if(xml.attributes.length>0){obj["@attributes"]={};for(var j=0;j<xml.attributes.length;j++){var attribute=xml.attributes.item(j);obj["@attributes"][attribute.nodeName]=attribute.nodeValue}}}else 3==xml.nodeType&&(obj=xml.nodeValue);if(xml.hasChildNodes())for(var i=0;i<xml.childNodes.length;i++){var item=xml.childNodes.item(i),nodeName=item.nodeName;if(void 0===obj[nodeName])obj[nodeName]=globalConstant.xmlToJson(item);else{if(void 0===obj[nodeName].push){var old=obj[nodeName];obj[nodeName]=[],obj[nodeName].push(old)}obj[nodeName].push(globalConstant.xmlToJson(item))}}return obj},formatDate:function(inputFormat,dateSeparator){if(null!=inputFormat){var result=inputFormat.split(" "),splitDate=result[0].split("-");return splitDate[1]+dateSeparator+splitDate[2]+dateSeparator+splitDate[0]}return null},formatAMPM:function(date){var dates=new Date(date),hours=dates.getHours(),minutes=dates.getMinutes(),ampm=hours>=12?"PM":"AM";return hours%=12,hours=hours||12,minutes=minutes<10?"0"+minutes:minutes,hours+":"+minutes+ampm},bytesToSize:function(bytes){var sizes=["Bytes","KB","MB","GB","TB"];if(0==bytes)return"0 Byte";var i=parseInt(Math.floor(Math.log(bytes)/Math.log(1024)));return Math.round(bytes/Math.pow(1024,i),2)+" "+sizes[i]},investorRelations:'{"STOCKQUOTE": {"-ROWCOUNT": "1","RESULT": {"ROW": {"ASK": "60.370","BID": "57.350","CHANGE": "0.720","DATETIME": "2015-04-20 16:02:41","DIVIDEND": "0.200","EPS": "5.810","EXCHANGE": "NYSE","HIGH": "57.690","LASTDATETIME": "2015-04-20 16:02:41","LASTPRICE": "57.510","LONGNAME": "Lincoln National Corporation","LOW": "56.960","OPEN": "57.130","PCHANGE": "1.268","PE": "9.000","PREVIOUSCLOSE": "56.790","SHARES": "256044","SHORTNAME": "Lincoln National Corp","TICKER": "LNC","TRADES": "8685","VOLUME": "1197500","YEARHIGH": "60.840","YEARLOW": "45.250","YIELD": "1.409"}},"STATUS": "No Error","STATUSCODE": "0"}}',
insiderTrading:'{"EDGARRTLIST":{"-ROWCOUNT":"50","RESULT":{"ROW":[{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"KELLY GARY C","DOCID":"10606190","DOCTYPE":"4","FID":"1214659-15-2821","FILINGDATE":"2015-04-02 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10606190","HTMLSIZE":"26532","ID":"1","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-2821&cik=59558","PDFSIZE":"25466","RECEIVEDDATE":"2015-04-02 11:05:25","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10606190","SIZE":"5955","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10606190","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10606190"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"TIDWELL ISAIAH","DOCID":"10606187","DOCTYPE":"4","FID":"1214659-15-2820","FILINGDATE":"2015-04-02 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10606187","HTMLSIZE":"26529","ID":"2","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-2820&cik=59558","PDFSIZE":"25511","RECEIVEDDATE":"2015-04-02 11:05:24","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10606187","SIZE":"5965","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10606187","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10606187"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"PITTARD PATRICK S","DOCID":"10606183","DOCTYPE":"4","FID":"1214659-15-2819","FILINGDATE":"2015-04-02 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10606183","HTMLSIZE":"26540","ID":"3","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-2819&cik=59558","PDFSIZE":"25542","RECEIVEDDATE":"2015-04-02 11:05:24","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10606183","SIZE":"5834","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10606183","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10606183"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"PAYNE WILLIAM PORTER","DOCID":"10606181","DOCTYPE":"4","FID":"1214659-15-2818","FILINGDATE":"2015-04-02 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10606181","HTMLSIZE":"26546","ID":"4","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-2818&cik=59558","PDFSIZE":"25575","RECEIVEDDATE":"2015-04-02 11:05:24","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10606181","SIZE":"6040","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10606181","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10606181"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"MEE MICHAEL F","DOCID":"10606178","DOCTYPE":"4","FID":"1214659-15-2817","FILINGDATE":"2015-04-02 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10606178","HTMLSIZE":"26533","ID":"5","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-2817&cik=59558","PDFSIZE":"25532","RECEIVEDDATE":"2015-04-02 11:05:24","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10606178","SIZE":"5855","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10606178","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10606178"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"LACHMAN M LEANNE","DOCID":"10606177","DOCTYPE":"4","FID":"1214659-15-2816","FILINGDATE":"2015-04-02 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10606177","HTMLSIZE":"26538","ID":"6","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-2816&cik=59558","PDFSIZE":"25542","RECEIVEDDATE":"2015-04-02 11:05:24","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10606177","SIZE":"5957","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10606177","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10606177"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"JOHNSON ERIC G","DOCID":"10606165","DOCTYPE":"4","FID":"1214659-15-2815","FILINGDATE":"2015-04-02 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10606165","HTMLSIZE":"26535","ID":"7","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-2815&cik=59558","PDFSIZE":"25522","RECEIVEDDATE":"2015-04-02 11:03:06","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10606165","SIZE":"5970","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10606165","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10606165"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"HENDERSON GEORGE W III","DOCID":"10606163","DOCTYPE":"4","FID":"1214659-15-2814","FILINGDATE":"2015-04-02 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10606163","HTMLSIZE":"26551","ID":"8","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-2814&cik=59558","PDFSIZE":"25582","RECEIVEDDATE":"2015-04-02 11:03:06","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10606163","SIZE":"5985","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10606163","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10606163"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"CUNNINGHAM WILLIAM H DR","DOCID":"10606155","DOCTYPE":"4","FID":"1214659-15-2813","FILINGDATE":"2015-04-02 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10606155","HTMLSIZE":"26555","ID":"9","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-2813&cik=59558","PDFSIZE":"25551","RECEIVEDDATE":"2015-04-02 11:03:06","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10606155","SIZE":"6011","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10606155","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10606155"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"AVERY WILLIAM J","DOCID":"10606152","DOCTYPE":"4","FID":"1214659-15-2812","FILINGDATE":"2015-04-02 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10606152","HTMLSIZE":"26537","ID":"10","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-2812&cik=59558","PDFSIZE":"25548","RECEIVEDDATE":"2015-04-02 11:03:06","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10606152","SIZE":"5976","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10606152","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10606152"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"KONEN MARK E","DOCID":"10555207","DOCTYPE":"4","FID":"1214659-15-2186","FILINGDATE":"2015-03-11 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10555207","HTMLSIZE":"33683","ID":"11","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-2186&cik=59558","PDFSIZE":"26484","RECEIVEDDATE":"2015-03-11 10:27:30","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10555207","SIZE":"10060","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10555207","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10555207"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"GLASS DENNIS R","DOCID":"10549201","DOCTYPE":"4","FID":"1214659-15-2099","FILINGDATE":"2015-03-09 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10549201","HTMLSIZE":"57735","ID":"12","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-2099&cik=59558","PDFSIZE":"30252","RECEIVEDDATE":"2015-03-09 16:12:25","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10549201","SIZE":"25285","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10549201","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10549201"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"MILLER DOUGLAS N","DOCID":"10549200","DOCTYPE":"4","FID":"1214659-15-2097","FILINGDATE":"2015-03-09 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10549200","HTMLSIZE":"27326","ID":"13","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-2097&cik=59558","PDFSIZE":"25236","RECEIVEDDATE":"2015-03-09 16:12:25","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10549200","SIZE":"5875","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10549200","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10549200"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"PITTARD PATRICK S","DOCID":"10545372","DOCTYPE":"4","FID":"1214659-15-2038","FILINGDATE":"2015-03-06 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10545372","HTMLSIZE":"25399","ID":"14","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-2038&cik=59558","PDFSIZE":"25250","RECEIVEDDATE":"2015-03-06 14:16:17","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10545372","SIZE":"5210","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10545372","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10545372"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"KONEN MARK E","DOCID":"10533939","DOCTYPE":"4","FID":"1214659-15-1926","FILINGDATE":"2015-03-03 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10533939","HTMLSIZE":"27464","ID":"15","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-1926&cik=59558","PDFSIZE":"25334","RECEIVEDDATE":"2015-03-03 15:00:52","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10533939","SIZE":"6707","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10533939","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10533939"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"GLASS DENNIS R","DOCID":"10526657","DOCTYPE":"4","FID":"1214659-15-1813","FILINGDATE":"2015-02-27 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10526657","HTMLSIZE":"32698","ID":"16","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-1813&cik=59558","PDFSIZE":"25767","RECEIVEDDATE":"2015-02-27 20:52:02","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10526657","SIZE":"9166","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10526657","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10526657"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"MILLER DOUGLAS N","DOCID":"10526656","DOCTYPE":"4","FID":"1214659-15-1812","FILINGDATE":"2015-02-27 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10526656","HTMLSIZE":"35788","ID":"17","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-1812&cik=59558","PDFSIZE":"27228","RECEIVEDDATE":"2015-02-27 20:52:02","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10526656","SIZE":"11247","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10526656","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10526656"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"KONEN MARK E","DOCID":"10526655","DOCTYPE":"4","FID":"1214659-15-1811","FILINGDATE":"2015-02-27 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10526655","HTMLSIZE":"32663","ID":"18","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-1811&cik=59558","PDFSIZE":"25861","RECEIVEDDATE":"2015-02-27 20:52:02","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10526655","SIZE":"9181","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10526655","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10526655"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"FREITAG RANDAL J","DOCID":"10526654","DOCTYPE":"4","FID":"1214659-15-1810","FILINGDATE":"2015-02-27 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10526654","HTMLSIZE":"41849","ID":"19","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-1810&cik=59558","PDFSIZE":"28268","RECEIVEDDATE":"2015-02-27 20:52:01","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10526654","SIZE":"15097","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10526654","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10526654"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"BUCKINGHAM LISA","DOCID":"10526653","DOCTYPE":"4","FID":"1214659-15-1809","FILINGDATE":"2015-02-27 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10526653","HTMLSIZE":"30336","ID":"20","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-1809&cik=59558","PDFSIZE":"25413","RECEIVEDDATE":"2015-02-27 20:52:01","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10526653","SIZE":"8422","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10526653","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10526653"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"CIONGOLI ADAM G.","DOCID":"10526652","DOCTYPE":"4","FID":"1214659-15-1808","FILINGDATE":"2015-02-27 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10526652","HTMLSIZE":"30741","ID":"21","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-1808&cik=59558","PDFSIZE":"25894","RECEIVEDDATE":"2015-02-27 20:52:01","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10526652","SIZE":"8715","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10526652","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10526652"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"COOPER ELLEN","DOCID":"10526651","DOCTYPE":"4","FID":"1214659-15-1807","FILINGDATE":"2015-02-27 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10526651","HTMLSIZE":"33870","ID":"22","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-1807&cik=59558","PDFSIZE":"27113","RECEIVEDDATE":"2015-02-27 20:52:01","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10526651","SIZE":"10683","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10526651","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10526651"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"CORNELIO CHARLES C","DOCID":"10526650","DOCTYPE":"4","FID":"1214659-15-1806","FILINGDATE":"2015-02-27 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10526650","HTMLSIZE":"28864","ID":"23","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-1806&cik=59558","PDFSIZE":"23327","RECEIVEDDATE":"2015-02-27 20:52:01","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10526650","SIZE":"6948","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10526650","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10526650"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"FULLER WILFORD H.","DOCID":"10526649","DOCTYPE":"4","FID":"1214659-15-1805","FILINGDATE":"2015-02-27 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10526649","HTMLSIZE":"30347","ID":"24","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-1805&cik=59558","PDFSIZE":"25471","RECEIVEDDATE":"2015-02-27 20:52:01","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10526649","SIZE":"8431","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10526649","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10526649"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"KONEN MARK E","DOCID":"10511742","DOCTYPE":"4","FID":"1214659-15-1647","FILINGDATE":"2015-02-24 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10511742","HTMLSIZE":"33298","ID":"25","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-1647&cik=59558","PDFSIZE":"27185","RECEIVEDDATE":"2015-02-24 17:26:08","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10511742","SIZE":"9522","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10511742","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10511742"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"GLASS DENNIS R","DOCID":"10511741","DOCTYPE":"4","FID":"1214659-15-1646","FILINGDATE":"2015-02-24 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10511741","HTMLSIZE":"31307","ID":"26","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-1646&cik=59558","PDFSIZE":"26960","RECEIVEDDATE":"2015-02-24 17:26:08","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10511741","SIZE":"8111","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10511741","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10511741"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"MILLER DOUGLAS N","DOCID":"10511740","DOCTYPE":"4","FID":"1214659-15-1645","FILINGDATE":"2015-02-24 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10511740","HTMLSIZE":"27662","ID":"27","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-1645&cik=59558","PDFSIZE":"25055","RECEIVEDDATE":"2015-02-24 17:26:08","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10511740","SIZE":"5808","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10511740","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10511740"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"FULLER WILFORD H.","DOCID":"10511720","DOCTYPE":"4","FID":"1214659-15-1644","FILINGDATE":"2015-02-24 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10511720","HTMLSIZE":"28590","ID":"28","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-1644&cik=59558","PDFSIZE":"26314","RECEIVEDDATE":"2015-02-24 17:26:08","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10511720","SIZE":"7209","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10511720","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10511720"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"FREITAG RANDAL J","DOCID":"10511719","DOCTYPE":"4","FID":"1214659-15-1643","FILINGDATE":"2015-02-24 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10511719","HTMLSIZE":"31241","ID":"29","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-1643&cik=59558","PDFSIZE":"26888","RECEIVEDDATE":"2015-02-24 17:26:08","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10511719","SIZE":"8115","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10511719","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10511719"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"BUCKINGHAM LISA","DOCID":"10511704","DOCTYPE":"4","FID":"1214659-15-1641","FILINGDATE":"2015-02-24 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10511704","HTMLSIZE":"28579","ID":"30","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-1641&cik=59558","PDFSIZE":"26269","RECEIVEDDATE":"2015-02-24 17:23:15","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10511704","SIZE":"7200","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10511704","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10511704"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"CORNELIO CHARLES C","DOCID":"10511671","DOCTYPE":"4","FID":"1214659-15-1642","FILINGDATE":"2015-02-24 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10511671","HTMLSIZE":"31273","ID":"31","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-1642&cik=59558","PDFSIZE":"27012","RECEIVEDDATE":"2015-02-24 17:20:19","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10511671","SIZE":"8229","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10511671","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10511671"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"TIDWELL ISAIAH","DOCID":"10390161","DOCTYPE":"4","FID":"1214659-15-73","FILINGDATE":"2015-01-05 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10390161","HTMLSIZE":"26531","ID":"32","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-73&cik=59558","PDFSIZE":"25500","RECEIVEDDATE":"2015-01-05 13:58:28","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10390161","SIZE":"5965","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10390161","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10390161"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"PITTARD PATRICK S","DOCID":"10390157","DOCTYPE":"4","FID":"1214659-15-72","FILINGDATE":"2015-01-05 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10390157","HTMLSIZE":"26542","ID":"33","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-72&cik=59558","PDFSIZE":"25533","RECEIVEDDATE":"2015-01-05 13:58:28","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10390157","SIZE":"5834","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10390157","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10390157"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"PAYNE WILLIAM PORTER","DOCID":"10390154","DOCTYPE":"4","FID":"1214659-15-71","FILINGDATE":"2015-01-05 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10390154","HTMLSIZE":"26548","ID":"34","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-71&cik=59558","PDFSIZE":"25566","RECEIVEDDATE":"2015-01-05 13:58:28","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10390154","SIZE":"6040","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10390154","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10390154"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"MEE MICHAEL F","DOCID":"10390149","DOCTYPE":"4","FID":"1214659-15-70","FILINGDATE":"2015-01-05 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10390149","HTMLSIZE":"26535","ID":"35","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-70&cik=59558","PDFSIZE":"25516","RECEIVEDDATE":"2015-01-05 13:58:28","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10390149","SIZE":"5855","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10390149","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10390149"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"LACHMAN M LEANNE","DOCID":"10390147","DOCTYPE":"4","FID":"1214659-15-69","FILINGDATE":"2015-01-05 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10390147","HTMLSIZE":"26540","ID":"36","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-69&cik=59558","PDFSIZE":"25556","RECEIVEDDATE":"2015-01-05 13:55:55","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10390147","SIZE":"5957","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10390147","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10390147"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"KELLY GARY C","DOCID":"10390144","DOCTYPE":"4","FID":"1214659-15-68","FILINGDATE":"2015-01-05 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10390144","HTMLSIZE":"26534","ID":"37","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-68&cik=59558","PDFSIZE":"25441","RECEIVEDDATE":"2015-01-05 13:55:54","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10390144","SIZE":"5955","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10390144","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10390144"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"JOHNSON ERIC G","DOCID":"10390139","DOCTYPE":"4","FID":"1214659-15-67","FILINGDATE":"2015-01-05 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10390139","HTMLSIZE":"26536","ID":"38","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-67&cik=59558","PDFSIZE":"25514","RECEIVEDDATE":"2015-01-05 13:55:54","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10390139","SIZE":"5969","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10390139","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10390139"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"HENDERSON GEORGE W III","DOCID":"10390136","DOCTYPE":"4","FID":"1214659-15-66","FILINGDATE":"2015-01-05 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10390136","HTMLSIZE":"26552","ID":"39","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-66&cik=59558","PDFSIZE":"25568","RECEIVEDDATE":"2015-01-05 13:55:54","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10390136","SIZE":"5984","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10390136","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10390136"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"CUNNINGHAM WILLIAM H DR","DOCID":"10390135","DOCTYPE":"4","FID":"1214659-15-65","FILINGDATE":"2015-01-05 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10390135","HTMLSIZE":"26557","ID":"40","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-65&cik=59558","PDFSIZE":"25573","RECEIVEDDATE":"2015-01-05 13:55:54","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10390135","SIZE":"6011","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10390135","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10390135"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"AVERY WILLIAM J","DOCID":"10390120","DOCTYPE":"4","FID":"1214659-15-64","FILINGDATE":"2015-01-05 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10390120","HTMLSIZE":"26538","ID":"41","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-15-64&cik=59558","PDFSIZE":"25538","RECEIVEDDATE":"2015-01-05 13:53:11","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10390120","SIZE":"5975","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10390120","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10390120"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"MILLER DOUGLAS N","DOCID":"10360757","DOCTYPE":"4","FID":"1214659-14-8370","FILINGDATE":"2014-12-16 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10360757","HTMLSIZE":"27325","ID":"42","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-14-8370&cik=59558","PDFSIZE":"24774","RECEIVEDDATE":"2014-12-16 09:52:47","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10360757","SIZE":"5718","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10360757","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10360757"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"AVERY WILLIAM J","DOCID":"10360130","DOCTYPE":"4","FID":"1214659-14-8360","FILINGDATE":"2014-12-15 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10360130","HTMLSIZE":"25009","ID":"43","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-14-8360&cik=59558","PDFSIZE":"24888","RECEIVEDDATE":"2014-12-15 17:49:40","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10360130","SIZE":"5159","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10360130","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10360130"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"CORNELIO CHARLES C","DOCID":"10353399","DOCTYPE":"4","FID":"1214659-14-8300","FILINGDATE":"2014-12-11 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10353399","HTMLSIZE":"33450","ID":"44","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-14-8300&cik=59558","PDFSIZE":"27067","RECEIVEDDATE":"2014-12-11 12:04:10","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10353399","SIZE":"9893","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10353399","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10353399"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"LACHMAN M LEANNE","DOCID":"10345232","DOCTYPE":"4","FID":"1214659-14-8214","FILINGDATE":"2014-12-05 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10345232","HTMLSIZE":"26504","ID":"45","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-14-8214&cik=59558","PDFSIZE":"22869","RECEIVEDDATE":"2014-12-05 16:40:17","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10345232","SIZE":"6090","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10345232","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10345232"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"KONEN MARK E","DOCID":"10325300","DOCTYPE":"4","FID":"1214659-14-7941","FILINGDATE":"2014-11-24 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10325300","HTMLSIZE":"51281","ID":"46","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-14-7941&cik=59558","PDFSIZE":"30428","RECEIVEDDATE":"2014-11-24 14:14:59","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10325300","SIZE":"21129","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10325300","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10325300"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"MILLER DOUGLAS N","DOCID":"10322553","DOCTYPE":"4","FID":"1214659-14-7923","FILINGDATE":"2014-11-21 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10322553","HTMLSIZE":"27329","ID":"47","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-14-7923&cik=59558","PDFSIZE":"24899","RECEIVEDDATE":"2014-11-21 14:11:54","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10322553","SIZE":"5672","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10322553","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10322553"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"KONEN MARK E","DOCID":"10322551","DOCTYPE":"4","FID":"1214659-14-7922","FILINGDATE":"2014-11-21 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10322551","HTMLSIZE":"29658","ID":"48","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-14-7922&cik=59558","PDFSIZE":"25461","RECEIVEDDATE":"2014-11-21 14:11:53","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10322551","SIZE":"6395","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10322551","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10322551"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"CORNELIO CHARLES C","DOCID":"10322550","DOCTYPE":"4","FID":"1214659-14-7921","FILINGDATE":"2014-11-21 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10322550","HTMLSIZE":"26467","ID":"49","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-14-7921&cik=59558","PDFSIZE":"23262","RECEIVEDDATE":"2014-11-21 14:11:53","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10322550","SIZE":"5428","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10322550","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10322550"},{"CIK":"59558","COMPANYNAME":"Lincoln National Corporation","DESCRIPTION":"CORNELIO CHARLES C","DOCID":"10286699","DOCTYPE":"4","FID":"1214659-14-7460","FILINGDATE":"2014-11-06 00:00:00","HTMLLINK":"http://apps.shareholder.com/sec/viewerContent.aspx?companyid=LNC&docid=10286699","HTMLSIZE":"28120","ID":"50","PDFLINK":"http://investor.shareholder.com/common/download/sec.cfm?companyid=LNC&fid=1214659-14-7460&cik=59558","PDFSIZE":"26087","RECEIVEDDATE":"2014-11-06 16:00:11","RTF":"True","RTFLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=rtf&companyid=LNC&id=10286699","SIZE":"6354","TOTALRECORDS":"1454","XBRL":"False","XBRLLINK":"http://apps.shareholder.com/sec/XBRLNav.aspx?companyid=LNC&docid=10286699","XLS":"True","XLSLINK":"http://www.shareholder.com/visitors/activeedgardoc.cfm?f=xls&companyid=LNC&id=10286699"}]},"STATUS":"No Error","STATUSCODE":"0"}}',
formPostUrl:"/pbl-email-service-app/rest/secureEmail/sendEmail",searchURL:"/static/wcs/lfg/mock/datafile_advisorData.xml",lifeExpectancyCalc:"/pbl-calc-service-app/rest/calc/lifeExpectancy",llavaRedirect:"/public/leveladvantage/redirect",llavaToolRedirect:"/public/leveladvantage/tool/redirect",historicalPrices:'{"HISTORICSTOCKQUOTE":{"-ROWCOUNT":"1","RESULT":{"ROW":{"CLOSE":"58.14","CUSIP":"534187109","EXACTDATE":"0","HIGH":"58.195","LOW":"56.92","MINPRICEDATE":"1980-07-28 00:00:00","MINYEAR":"1980","OPEN":"57.6","PRICEDATE":"2015-04-22 00:00:00","VOLUME":"1529565"}},"STATUS":"No Error","STATUSCODE":"0"}}',quotesAndCharts:'{"STOCKQUOTE":{"-ROWCOUNT":"1","RESULT":{"ROW":{"ASK":"60.370","BID":"57.350","CHANGE":"0.720","DATETIME":"2015-04-20 16:02:41","DIVIDEND":"0.200","EPS":"5.810","EXCHANGE":"NYSE","HIGH":"57.690","LASTDATETIME":"2015-04-20 16:02:41","LASTPRICE":"57.510","LONGNAME":"Lincoln National Corporation","LOW":"56.960","OPEN":"57.130","PCHANGE":"1.268","PE":"9.000","PREVIOUSCLOSE":"56.790","SHARES":"256044","SHORTNAME":"Lincoln National Corp","TICKER":"LNC","TRADES":"8685","VOLUME":"1197500","YEARHIGH":"60.840","YEARLOW":"45.250","YIELD":"1.409"}},"STATUS":"No Error","STATUSCODE":"0"}}',lfgSitePath:"https://www.lfg.com",annualFilingsPath:"/lfg/DOCS/pdf/",productType:["Variable Annuity","Variable Universal Life Insurance"]};$(document).ready(function(){linkAnalytics($("a"))}),$(document).ready(function(){function documentHandler(){if(!$(this).is("iframe")){(this===document?$(this):$(this).contents()).mousemove(function(e){jQuery.mlp={x:e.pageX,y:e.pageY}})}}$.mlp={x:0,y:0},$(documentHandler),$.fn.ismouseover=function(){var result=!1;return this.eq(0).each(function(){var $current=$(this).is("iframe")?$(this).contents().find("body"):$(this),offset=$current.offset();result=offset.left<=$.mlp.x&&offset.left+$current.outerWidth()>$.mlp.x&&offset.top<=$.mlp.y&&offset.top+$current.outerHeight()>$.mlp.y}),result};var initDataDrivenElements=function(){$("[data-toggle]").each(function(){var trigger=$(this).attr("data-toggle");switch(trigger){case"matchHeights":$(this).find("> *").matchHeight();break;case"expandable-search-field":$(this).expandableSearchField();break;case"list-pulldown":$(this).listPulldown();break;case"imagefill":$(this).imageFill();break;case"content-extender":$(this).contentExtender();break;case"dropdown":$(this).uIDropdown();break;case"accordion":$(this).uIAccordion();break;case"tabset":$(this).uITabSet();break;default:throw new Error("Unable to find toggle for trigger:",trigger)}})},modernize=function(){Modernizr.addTest("picture","HTMLPictureElement"in window),Modernizr.addTest("srcset","srcset"in document.createElement("img"))};$(document).ready(function(){initDataDrivenElements(),modernize()})}),function($){"use strict";var _uniqueID=0;$.fn.getUniqueID=function(){return++_uniqueID},$.fn.getLastUniqueID=function(){return _uniqueID}}(jQuery);var calloutGridWithFilter=function(){function calloutFilter(filter,filterSubCat){var visibleTileCount=0,matchedCount=0;$(".grid-block-2column-category div.callout-grid-item").each(function(){var tileCat=$(this).find("header").text().trim(),subTileCat=$(this).find("subheader").text().trim();"all"==filter||tileCat.toLowerCase()==filter&&subTileCat.toLowerCase()==filterSubCat||tileCat.toLowerCase()==filter&&"all"==filterSubCat?(visibleTileCount<TILES_TO_SHOW?(isMobile.matches?($(this).parent("li").css({display:"block","border-top":"1px solid #dcdee0"}),$(this).parent("li:first-child").css({"border-top":"none"}),0==visibleTileCount?$(this).find("figure").css({display:"block"}):$(this).find("figure").css({display:""})):$(this).parent("li").css({display:"list-item"}),visibleTileCount++):($(this).parent("li").css("display","none"),$(this).parent("li").addClass("queued")),matchedCount++):($(this).parent("li").css("display","none"),$(this).parent("li").removeClass("queued"))}),isMobile.matches||setRowHeight(),matchedCount>TILES_TO_SHOW?$("#loadMoreCategories").show():$("#loadMoreCategories").hide()}function setRowHeight(){$("#categoryTile li").css("height",""),$("#categoryTile li:visible").each(function(index){(index+1)%2>0?leftTile=$(this):(rightTile=$(this),rightTile.height()<leftTile.height()&&(rightTile.css("height",leftTile.height()+"px"),leftTile.css("height",leftTile.height()+"px")),rightTile.height()>leftTile.height()&&(leftTile.css("height",rightTile.height()+"px"),rightTile.css("height",rightTile.height()+"px")))})}function loadMore(){var showQty=TILES_TO_SHOW;$("#categoryTile li.queued:lt("+showQty+")").show(),$("#categoryTile li.queued:lt("+showQty+")").removeClass("queued"),isMobile.matches||setRowHeight(),0==$("#categoryTile li.queued").length&&$("#loadMoreCategories").hide()}var TILES_TO_SHOW=6,isMobile=window.matchMedia("only screen and (max-width: 760px)"),_categoryList=window.categoryList?window.categoryList:[],_subCategoryList=[];$(".grid-block-2column ul.custom-selectbox-list-cont").append('<li tabindex="0">All</li>');for(var i=0;i<_categoryList.sort().length;i++)_categoryList[i]!=_categoryList[i-1]&&$(".grid-block-2column ul#Category").append('<li tabindex="0">'+_categoryList[i]+"</li>");var urlParams=location.search.split("&");if(urlParams.indexOf("prefilter")>-1){for(var p=0;p<urlParams.length;p++)if(urlParams[p].indexOf("prefilter")>-1){var pair=urlParams[p].split("="),urlCat=pair[1];""!=urlCat&&calloutFilter(urlCat);break}}else calloutFilter("all");$(".grid-block-2column ul#Category li").click(function(){var dropdownCat=$(this).text();if($("#subCategoryDiv").css({display:"none"}),void 0!=_categoryList[dropdownCat]&&(_categoryList[dropdownCat].length>1||1==_categoryList[dropdownCat].length&&"All"!=_categoryList[dropdownCat][0])){_subCategoryList=_categoryList[dropdownCat],$(".grid-block-2column ul#subCategory").empty(),$("#subCategoryDiv").css({display:"block"}),$("#subCategoryDiv div.custom-selectbox.contactState.ng-rept-element-div").html("All"),$(".grid-block-2column ul#subCategory").append('<li tabindex="0">All</li>');for(var i=0;i<_subCategoryList.sort().length;i++)"All"!=_subCategoryList[i]&&$(".grid-block-2column ul#subCategory").append('<li tabindex="0">'+_subCategoryList[i]+"</li>");$(".grid-block-2column ul#subCategory li").click(function(){var subDropdownCat=$(this).text().trim().toLowerCase();calloutFilter(dropdownCat.trim().toLowerCase(),subDropdownCat)})}calloutFilter(dropdownCat.trim().toLowerCase(),"all")}),$(".callout-grid-item a").click(function(event){event.preventDefault();var url=($(this).closest("div").find("header").text().trim(),$(this).attr("href"));"_blank"==$(this).attr("target")?window.open(url,"_blank"):location.href=url}),$("#loadMoreCategories").click(function(){loadMore()}),$(window).resize(function(){isMobile.matches||setRowHeight()})};$(document).ready(function(){$(".grid-block-2column .custom-selectbox")[0]&&calloutGridWithFilter()}),$(window).load(function(){window.matchMedia("only screen and (max-width: 760px)").matches||($("#categoryTile li").css("height",""),$("#categoryTile li:visible").each(function(index){(index+1)%2>0?leftTile=$(this):(rightTile=$(this),"undefined"!=typeof leftTile&&"undefined"!=typeof rightTile&&null!=leftTile&&null!=rightTile&&rightTile.height()<leftTile.height()&&(rightTile.css("height",leftTile.height()+"px"),leftTile.css("height",leftTile.height()+"px")),"undefined"!=typeof leftTile&&"undefined"!=typeof rightTile&&null!=leftTile&&null!=rightTile&&rightTile.height()>leftTile.height()&&(leftTile.css("height",rightTile.height()+"px"),rightTile.css("height",rightTile.height()+"px")))}))}),function(){lfgapp.controller("commercialRealEstateContrl",["$scope","$timeout",function($scope,$timeout){angular.element(".isNoResults").hide(),$scope.cityCodes=[];var stateNameControl=function(){var stateModule={};return stateModule.checkStateData=function(name,scope){angular.forEach(commercialRealEstate.cityCodeList,function(value,index){index===name&&(scope.state=value[0].state,value[0].address?(angular.element(".isNoResults").hide(),scope.stateDatas.push(value)):(angular.element(".isNoResults").show(),scope.stateDatas=[]))})},stateModule}();angular.forEach(commercialRealEstate.cityCodeList,function(value,index){$scope.cityCodes.push(index)}),angular.element(document).ready(function(){angular.element("ul.custom-selectbox-list-cont li").on("click",function(){$timeout(function(){$scope.stateDatas=[],"Select a State"!==angular.element("#networkState").text()?stateNameControl.checkStateData(angular.element("#networkState").text(),$scope):($scope.state="",angular.element(".isNoResults").hide())},200)})})}])}(),lfgapp.controller("LongTermCareFormsContrl",["$scope","$http","$timeout",function($scope,$http){$scope.init=function(cateName){$http.post("/pbl-forms-service-app/rest/forms/searchForms",{identity:globalConstant.formToolCategories[cateName]}).success(function(data){"Success"===data.statusMessage&&($scope.categoryFormList=data.formDetailList,commonFunctions.callAccordion(cateName))}).error(function(data){console.log("Error : ",data)})}}]),function($){$.PageTimeline=function(el){var base=this;base.$el=$(el),base.el=el,base.$el.data("PageTimeline",base);var currentBreakpoint="",$blocks=$(".PageTimeline .PageTimeline-Timeline > dd > figure"),throttledUpdateTimeout=null,throttlingInProgress=!1;base.init=function(){currentBreakpoint=detectCurrentBreakpoint(),$(document).on("responsive:statechanged",onResponsiveStatechanged),$blocks.length>0&&"mobile"!==currentBreakpoint&&(wire(),updateHeights())};var throttledUpdate=function(){null===throttledUpdateTimeout&&(throttledUpdateTimeout=setTimeout(checkAndUpdate,250))},checkAndUpdate=function(){throttlingInProgress=!1,throttledUpdateTimeout=null,updateHeights()},wire=function(){$(window).on("resize",throttledUpdate)},unwire=function(){$blocks.each(function(){$(this).css({height:""})}),$(window).off("resize",throttledUpdate),clearThrottling()},clearThrottling=function(){try{clearTimeout(throttledUpdateTimeout)}catch(e){console.log(e)}throttledUpdateTimeout=null,updateHeights()},updateHeights=function(){$blocks.each(function(){var timelineHolder=$(this).closest(".PageTimeline-Section").find(".PageTimeline-Timeline").last(),sectionHolder=$(this).closest(".PageTimeline-Section");if(timelineHolder&&sectionHolder){var holderBottomEdgeY=timelineHolder.offset().top+timelineHolder.height(),figureBottomEdgeY=$(this).offset().top+$(this).height();figureBottomEdgeY>holderBottomEdgeY?sectionHolder.css({height:timelineHolder.position().top+timelineHolder.height()+(figureBottomEdgeY-holderBottomEdgeY)+parseInt($(this).css("margin-bottom"))}):sectionHolder.css({height:""})}})},onResponsiveStatechanged=function(e,newstate){newstate!==currentBreakpoint&&(currentBreakpoint=newstate,$blocks.length>0&&"mobile"!==currentBreakpoint?(unwire(),wire()):unwire())},detectCurrentBreakpoint=function(){return ssm.isActive("desktop")?"desktop":ssm.isActive("tablet")?"tablet":ssm.isActive("mobile")?"mobile":void 0};base.init()},$.fn.pageTimeline=function(){return this.each(function(){new $.PageTimeline(this)})}}(jQuery),$(document).ready(function(){$(document).pageTimeline()}),$(document).ready(function(){$("section.questionnaire-expand-collapse").each(function(){applyExpandCollapseButton($(this))})}),$(document).on("DOMNodeInserted",function(event){$(event.target).hasClass("questionnaire-expand-collapse")&&applyExpandCollapseButton(event.target)}),function($){$.fn.hasScrollBar=function(){return this.get(0).scrollHeight>this.height()}}(jQuery),$(document).ready(function(){if($("#whatsNewOverlay").length>0){var wno_version=$("#continueToSiteClose").data("version");if(void 0!==audience_top_nav_id&&null!==audience_top_nav_id){var wno_cookie_val=getCookie("WNO_"+audience_top_nav_id);void 0!==wno_cookie_val&&null!==wno_cookie_val&&""!==wno_cookie_val?wno_cookie_val!==wno_version&&($(".bx-wrapper").attr("aria-hidden","true"),$(".Topheader").attr("aria-hidden","true"),$(".login-quicklink-container").attr("aria-hidden","true"),$("main").attr("aria-hidden","true"),$("footer").attr("aria-hidden","true"),$("#whatsNewOverlay").show(),$("#whatsNewOverlay").hasScrollBar()&&$(".continue-to-site-close").css("right","40px")):($(".bx-wrapper").attr("aria-hidden","true"),$(".Topheader").attr("aria-hidden","true"),$(".login-quicklink-container").attr("aria-hidden","true"),$("main").attr("aria-hidden","true"),$("footer").attr("aria-hidden","true"),$("#whatsNewOverlay").show(),$("#whatsNewOverlay").hasScrollBar()&&$(".continue-to-site-close").css("right","40px"))}}$("#continueToSiteClose, #continueToSiteBtn").on("click",function(){var wno_version=$(this).data("version");$("#whatsNewOverlay").hide(),$("body").css({height:"auto"}),$("body").removeClass(".whats-new-overlay-open"),$(".bx-wrapper").attr("aria-hidden","false"),$(".Topheader").attr("aria-hidden","false"),$(".login-quicklink-container").attr("aria-hidden","false"),$("main").attr("aria-hidden","false"),$("footer").attr("aria-hidden","false"),void 0!==audience_top_nav_id&&null!==audience_top_nav_id&&setCookie("WNO_"+audience_top_nav_id,wno_version,30)}),$.fn.getFocusableChilds=function(){return $(this).find("a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object:not([disabled]), embed, *[tabindex], *[contenteditable]").filter(":visible")},$("#continueToSiteClose").on("blur",function(event){event.preventDefault(),$("#whatsNewOverlay").getFocusableChilds().filter(":first").focus()}),$("#whatsNewOverlay").on("mousedown",function(event){event.preventDefault(),event.stopImmediatePropagation()}),$(document).on("focus",function(event){event.preventDefault(),$("#whatsNewOverlay").getFocusableChilds().filter(":first").focus()}),$(".whats-new-title").attr("tabindex","0")}),$(document).ready(function(){function brightcoveVideoRatio(brightcoveWid,brightcoveHgt){var vidElemWid,brightcoveContTop;$(".video-js").hasClass("noDimensions")||$(window).width()<1e3?(vidElemWid="70%",$(".video-cont-js").css({width:vidElemWid}).promise().done(function(){var brightcoveVideoWidth,brightcoveVideoHeight,brightcoveVideoHeightVal,brightcoveContTop;$(".video-wrap .video-cont-js").find(".brightcoveVideoWidthInput").val(),$(".video-wrap .video-cont-js").find(".brightcoveVideoHgtInput").val();brightcoveVideoWidth=$(".video-wrap .video-cont-js").width(),brightcoveVideoHeightVal=brightcoveVideoWidth,brightcoveVideoHeightVal*=1,brightcoveVideoHeight=Math.round(brightcoveVideoHeightVal/4*3),$(".video-wrap .video-cont-js .vjs-tech").width(brightcoveVideoWidth).height(brightcoveVideoHeight),brightcoveContTop=window.innerHeight-brightcoveVideoHeight,brightcoveContTop=brightcoveContTop/2+30,$(".video-wrap .video-js").width(brightcoveVideoWidth).height(brightcoveVideoHeight-30),$(".video-wrap .video-cont-js").width(brightcoveVideoWidth).height(brightcoveVideoHeight-30).css({top:brightcoveContTop+"px"})})):($(".video-wrap .video-cont-js .vjs-tech").width(brightcoveWid).height(brightcoveHgt),$(".video-wrap .video-js").css({width:brightcoveWid+"px",height:brightcoveHgt+"px"}),brightcoveContTop=window.innerHeight-brightcoveHgt,brightcoveContTop/=2,$(".video-wrap .video-cont-js").width(brightcoveWid).height(brightcoveHgt).css({top:brightcoveContTop+"px"}))}function brightcoveInlineVideoRatio(){var brightcoveVideoInlineWidth,brightcoveVideoInlineHeight,brightcoveVideoInlineHeightVal,vid;for(vid=0;vid<$(".inline-video-js").length;vid++)($(".inline-video-js").eq(vid).hasClass("noDimensions")||$(window).width()<750)&&(brightcoveVideoInlineWidth=$(".inline-video-js").eq(vid).parent().width(),brightcoveVideoInlineHeightVal=brightcoveVideoInlineWidth,brightcoveVideoInlineHeightVal*=1,brightcoveVideoInlineHeight=Math.round(brightcoveVideoInlineHeightVal/4*3),$(".inline-video-js").eq(vid).css({width:brightcoveVideoInlineWidth+"px",height:brightcoveVideoInlineHeight+"px"}),$(".inline-video-js").eq(vid).find(".vjs-tech").width(brightcoveVideoInlineWidth).height(brightcoveVideoInlineHeight))}$(".video-thumb-js").on("click",function(){var brightcovePlayerID="lfg_brightcove_"+$(this).data("videoid"),brightcoveWid=$(this).data("width"),brightcoveHgt=$(this).data("height")-30,video='<video id="lfg_brightcove_'+$(this).data("videoid")+'" style="width: '+brightcoveWid+"px;height: "+brightcoveHgt+'px;" data-video-id="'+$(this).data("videoid")+'" data-account="1134849171001"data-player="d0b489e2-50ef-400c-a9b1-83985cc7b4ef" data-embed="default" class="video-js" controls></video><script src="//players.brightcove.net/1134849171001/d0b489e2-50ef-400c-a9b1-83985cc7b4ef_default/index.min.js"><\/script>\t';0===$("#"+brightcovePlayerID).length&&($(".video-wrap .video-cont-js object, .video-wrap .video-cont-js script, .video-wrap .video-cont-js div").remove(),$(".video-wrap .video-cont-js").append(video).promise().done(function(){brightcoveVideoRatio(brightcoveWid,brightcoveHgt)})),$(".video-wrap .video-cont-js, #fade").show(),$(window).resize(function(){videojs(brightcovePlayerID).isFullScreen()||brightcoveVideoRatio(brightcoveWid,brightcoveHgt)})}),$(".u-play-icon").on("click",function(e){e.stopPropagation(),e.preventDefault(),$(this).next().find(".video-thumb-js").trigger("click")}),brightcoveInlineVideoRatio(),$(window).resize(function(){brightcoveInlineVideoRatio()}),$(".vdo-close-icon").on("click",function(){var videoObject=$($(".vdo-close-icon").parent().find("div")[0]),playerID="lfg_brightcove_"+$(videoObject).data("video-id");videojs(playerID).dispose(),$(".video-wrap .video-cont-js, #fade").hide()}),$(document).on("click",".vjs-fullscreen-control",function(event){var videoStyle,videoId=$(event.currentTarget).parent().parent().attr("data-video-id");document.getElementById("lfg_brightcove_"+videoId+"_html5_api")&&(videoStyle=document.getElementById("lfg_brightcove_"+videoId+"_html5_api").style,setTimeout(function(){$(".video-js").hasClass("vjs-fullscreen")&&(videoStyle.width="100%",videoStyle.height="100%",$(".video-js").css("min-width","100%"))},100))})}),function(){$(document).ready(function(){$("#sbb4-login").on("click",function(){setUserCookie($("#sbb4-username").val())}),$("#sbb4-username").keypress(function(e){if(13===e.which){setUserCookie($("#sbb4-username").val())}}),$("#login-dropdown").on("click",function(){if(!$(this).hasClass("disable")){setUserCookie($("#dropdown-username").val())}}),$("#dropdown-username").keypress(function(e){if(13===e.which){setUserCookie($("#dropdown-username").val())}}),$("#next-btn-banner").on("click",function(){if(!$(this).hasClass("disable")){setUserCookie($("#banner-username").val())}}),$("#banner-username").keypress(function(e){if(13===e.which){setUserCookie($("#banner-username").val())}}),$("#login-dropdown").length>0&&($("#login-dropdown").removeClass("disable"),$("#dropdown-username").prop("disabled",!1)),$("#next-btn-banner").length>0&&($("#next-btn-banner").removeClass("disable"),$("#banner-username").prop("disabled",!1)),$("#yourAudienceRedirect").click(function(e){e.preventDefault(),$("#yourAudience li").each(function(){if($(this).hasClass("is-active")){var url=$(this).attr("attr-href"),searchString=url+(-1===url.indexOf("?")?"?audience=":"&audience=");window.location.href=searchString+$(this).find("a").text().toLowerCase().replace(/\s/g,"-"),sessionStorage.removeItem("lastname")}})})})}(),function($){var paramState;$(document).on("responsive:statechanged",function(e,param){paramState=param}),$.UIAccordion=function(el){var s={easing:"swing",openDuration:200,closeDuration:350,closeButton:!1,closeChar:"ⓧ",closeTop:0,closeRight:0,closest:null,offsetTop:100,offsetBottom:-100,queue:!1},prevHeight=0,stickyEl=$("#stickr"),stickyParentEl=null,relativeOffset=null;stickyEl.length>0&&(stickyParentEl=s.closest?stickyEl.closest(s.closest):stickyEl.parent(),relativeOffset=stickyEl.offset().top-stickyParentEl.offset().top-s.offsetTop);var base=this;base.$el=$(el),base.el=el,base.$el.data("UIAccordion",base),base.$items=null,base.$contentHolders=null,base.expandSpeed=700,base.collapseSpeed=200;var $selectedHeader=null,selectedHeaderIdx=-1;base.init=function(){base.$items=base.$el.find("> section").attr("role","tab"),base.$headers=base.$items.find("> header"),base.$contentHolders=base.$el.find("> section > article"),base.$contentHolders.attr("role","tabpanel"),base.$items.each(function(idx){var $elt=$(this),toggle=$elt.find("> header");$elt.attr("data-accordion-idx",idx),toggle.on("click",base.toggle)}),base.$headers.attr("tabindex",0),base.$headers.on("focus",base.onHeaderFocus),base.$headers.on("blur",base.onHeaderBlur),base.$el.attr("role","tablist").attr("aria-multiselectable","false"),base.$headers.each(function(idx){var $header=$(this),$panel=base.$contentHolders.eq(idx),uid=$(document).getUniqueID();$header.attr("role","tab").attr("aria-selected","false").attr("aria-expanded","false").attr("aria-controls","accordion-panel-"+uid).attr("id","accordion-tab-"+uid).attr("tabindex","0").data("idx",idx),$header.bind("keydown.return",base.toggle),$header.bind("keydown.space",base.toggle),$header.bind("keydown.up",base.selectPrev),$header.bind("keydown.down",base.selectNext),$panel.attr("role","tabpanel").attr("aria-labelledby","accordion-tab-"+uid).attr("aria-expanded","false").attr("id","accordion-panel-"+uid).data("idx",idx)})},base.onHeaderFocus=function(e){var $elt=$(e.target);base.selectHeaderIdx($elt.data("idx"))},base.onHeaderBlur=function(e){var $elt=$(e.target);base.deselectHeaderIdx($elt.data("idx"))},base.selectNext=function(e){e.preventDefault();var $elt=$(e.target),idx=$elt.data("idx");idx<base.$headers.length-1&&(-1!==selectedHeaderIdx&&base.deselectHeaderIdx(selectedHeaderIdx),base.selectHeaderIdx(idx+1))},base.selectPrev=function(e){e.preventDefault();var $elt=$(e.target),idx=$elt.data("idx");idx>0&&(-1!==selectedHeaderIdx&&base.deselectHeaderIdx(selectedHeaderIdx),base.selectHeaderIdx(idx-1))},base.selectHeaderIdx=function(idx){var $elt=base.$headers.eq(idx);$elt.addClass("selected"),$selectedHeader=$elt,$selectedHeader.attr("aria-selected",!0),selectedHeaderIdx=idx,base.$headers.off("focus",base.onHeaderFocus),$elt.focus(),base.$headers.on("focus",base.onHeaderFocus)},base.deselectHeaderIdx=function(idx){base.$headers.eq(idx).removeClass("selected"),null!==$selectedHeader&&$selectedHeader.attr("aria-selected",!1),$selectedHeader=null,selectedHeaderIdx=-1},base.toggle=function(evt){evt.preventDefault();var $elt=$(this).closest("section"),clickedidx=parseInt($elt.attr("data-accordion-idx"));$elt.hasClass("is-expanded")?base.closeIdx(clickedidx):base.$items.each(function(idx){idx===clickedidx?base.openIdx(idx):base.closeIdx(idx)})},base.openIdx=function(idx){var $curitem=base.$items.eq(idx);prevHeight=$curitem.height();var currWinScrTp=$(window).scrollTop();$curitem.hasClass("is-expanded")||($curitem.addClass("is-expanded"),$(".lfgAnalytics:first",$curitem).trigger("click"),base.$headers.eq(idx).attr("aria-expanded","true"),base.$contentHolders.eq(idx).attr("aria-hidden","false"),base.$contentHolders.eq(idx).attr("aria-expanded","true"),base.$contentHolders.eq(idx).attr("tabindex","0"),base.$contentHolders.eq(idx).stop().animate({"max-height":3e3},function(){base.$contentHolders.eq(idx).css("max-height","auto")}).promise().done(function(){var scrollTpVal,body;scrollTpVal=$("#"+base.$headers.eq(idx).attr("id")).offset().top,body=$("html, body"),"mobile"===paramState?body.scrollTop(scrollTpVal):(scrollTpVal=scrollTpVal-10-$("header").height(),body.scrollTop(scrollTpVal),base.stickr("Open",$curitem.height(),currWinScrTp,scrollTpVal))}))},base.closeIdx=function(idx){var $curitem=base.$items.eq(idx);if(!$curitem.hasClass("is-expanded"))return!1;base.$headers.eq(idx).attr("aria-expanded","false"),base.$contentHolders.eq(idx).attr("aria-hidden","true"),base.$contentHolders.eq(idx).attr("aria-expanded","false"),base.$contentHolders.eq(idx).attr("data-info",""),base.$contentHolders.eq(idx).attr("tabindex","-1"),"mobile"!==paramState&&base.stickr("Close",$curitem.height()),base.$contentHolders.eq(idx).stop().animate({"max-height":0},function(){base.$contentHolders.eq(idx).css("max-height",""),$curitem.removeClass("is-expanded")})},base.stickr=function(eventType,dynamicHeight,currWinScrTp,scrollTpVal){if(stickyEl.length>0){var stickyPadding=parseInt(stickyEl.css("padding-top")),stickyPrntPosition=stickyParentEl.height()+stickyParentEl.position().top+s.offsetBottom,rightNavHeight=0;$(".right-rail-nav").length>0&&(rightNavHeight=$(".right-rail-nav").height()),"Close"===eventType&&(stickyPrntPosition=stickyPrntPosition-dynamicHeight+prevHeight);var winScrlTop=$(window).scrollTop(),stickyPrntTop=stickyParentEl.offset().top,stickyHeight=stickyEl.height();if(winScrlTop>stickyPrntTop+relativeOffset-rightNavHeight&&stickyPrntPosition>=winScrlTop+stickyHeight)"Close"===eventType?$(".right-rail-nav").length>0?!(stickyPrntTop+relativeOffset-rightNavHeight-rightNavHeight)<0&&stickyEl.animate({top:stickyPrntTop+relativeOffset-rightNavHeight-rightNavHeight+"px"},{queue:s.queue,easing:s.easing,duration:s.duration}):stickyEl.animate({top:$(window).scrollTop()-(stickyPrntTop+relativeOffset)+"px"},{queue:s.queue,easing:s.easing,duration:s.duration}):10*Math.ceil(currWinScrTp/10)==10*Math.ceil(scrollTpVal/10)&&($(".right-rail-nav").length>0?!(stickyPrntTop+relativeOffset-rightNavHeight-rightNavHeight)<0&&stickyEl.animate({top:$(window).scrollTop()-(stickyPrntTop+relativeOffset)+"px"},{queue:s.queue,easing:s.easing,duration:s.duration}):stickyEl.animate({top:$(window).scrollTop()-(stickyPrntTop+relativeOffset)+"px"},{queue:s.queue,easing:s.easing,duration:s.duration}));else{var scrollTop=stickyParentEl.height()-stickyEl.height()+s.offsetBottom+stickyPadding;"Close"===eventType?(scrollTop=scrollTop-dynamicHeight+prevHeight,$(".right-rail-nav").length>0&&(scrollTop-=rightNavHeight)):$(".right-rail-nav").length>0&&(scrollTop-=rightNavHeight),stickyEl.animate({top:scrollTop+"px"},{queue:s.queue,easing:s.easing,duration:s.duration})}}},base.init()},$.fn.uIAccordion=function(){return this.each(function(){new $.UIAccordion(this)})}}(jQuery),$(document).ready(function(){ssm.addState({id:"mobile",maxWidth:750,onEnter:function(){jQuery.event.trigger("responsive:statechanged",["mobile"])}}),ssm.addState({id:"tablet",minWidth:751,maxWidth:999,onEnter:function(){jQuery.event.trigger("responsive:statechanged",["tablet"])}}),ssm.addState({id:"desktop",minWidth:1e3,onEnter:function(){jQuery.event.trigger("responsive:statechanged",["desktop"])}}),ssm.ready()}),function(){function lfgBackToTop(options){function windowOnScrollListener(){window.pageYOffset<lastScrollY?bttEle.style.display="block":bttEle.style.display="none",lastScrollY=window.pageYOffset,0===window.pageYOffset&&(bttEle.style.display="none")}function animateScroll(){0===window.pageYOffset?(clearInterval(intervalId),intervalId=null):window.scrollTo(0,window.pageYOffset-scrollYDiff)}function bttOnClickListener(){null===intervalId&&(intervalId=setInterval(animateScroll,options.interval))}function registerEvents(){window.onscroll=windowOnScrollListener,bttEle.onclick=bttOnClickListener}var lastScrollY=0,bttEle=null,intervalId=null,scrollYDiff=100;!function(){void 0!==options.id&&null!==options.id&&""!==options.id.trim()&&(bttEle=document.getElementById(options.id)),void 0!==bttEle&&null!==bttEle&&registerEvents()}()}$(document).ready(function(){$("#backToTop").length>0&&lfgBackToTop({id:"backToTop",interval:15})})}();var timer,c2cClickCount=getCookie("c2cClickCount");null===c2cClickCount||void 0==c2cClickCount||""==c2cClickCount?(c2cClickCount=0,setCookie("c2cClickCount",0,1)):(c2cClickCount=parseInt(c2cClickCount),c2cClickCount+=1,updateCookie("c2cClickCount",c2cClickCount,1));var c2cOpenValue=getCookie("c2cOpenValue");null===c2cOpenValue||void 0===c2cOpenValue||""===c2cOpenValue?setCookie("c2cOpenValue",null,1):updateCookie("c2cOpenValue",c2cOpenValue,1);var cTabValue=getCookie("cTabValue"+c2cClickCount);null===cTabValue||void 0===cTabValue||""===cTabValue?setCookie("cTabValue",null,1):updateCookie("c2cOpenValue",cTabValue,1);var Ac2cClickCount=getCookie("Ac2cClickCount");null===Ac2cClickCount||void 0==Ac2cClickCount||""==Ac2cClickCount?(Ac2cClickCount=0,setCookie("Ac2cClickCount",0,1)):(Ac2cClickCount=parseInt(Ac2cClickCount),Ac2cClickCount+=1,updateCookie("Ac2cClickCount",Ac2cClickCount,1));var Ac2cOpenValue=getCookie("Ac2cOpenValue");null===Ac2cOpenValue||void 0===Ac2cOpenValue||""===Ac2cOpenValue?setCookie("Ac2cOpenValue",null,1):updateCookie("Ac2cOpenValue",Ac2cOpenValue,1);var AcTabValue=getCookie("AcTabValue"+Ac2cClickCount);null===AcTabValue||void 0===AcTabValue||""===AcTabValue?setCookie("AcTabValue",null,1):updateCookie("Ac2cOpenValue",AcTabValue,1);var openChatWindow=function(){if(checker()){var chatForm=document.createElement("form");chatForm.target="Live Chat",chatForm.method="POST",chatForm.action="/pbl-gateway-service-app/servlet/pbl-gateway/gatewayServlet";var params={role:"",SERVICE_ID:"PUBLIC_CHAT_BOT_SERVICE",appId:"100",pageId:"100",actvtySrcName:"LFGPUBCTC",lob:"Life"};for(var prop in params)if(params.hasOwnProperty(prop)){var hiddenInput=document.createElement("input");hiddenInput.type="hidden",hiddenInput.name=prop,hiddenInput.value=params[prop],chatForm.appendChild(hiddenInput)}document.body.appendChild(chatForm),window.popupReference=window.open("","Live Chat","scrollbars=1, toolbar=0, menubar=0, status=0, resizable=1, left=400, width=620, height=550"),timer=setInterval(updateStatus,1e3),window.popupReference&&chatForm.submit(),document.body.removeChild(chatForm)}else alert("Life - chat window is already open")},openChatWindowAnnuities=function(){if(checkerAnnuity()){var chatForm=document.createElement("form");chatForm.target="Live Chat",chatForm.method="POST",chatForm.action="/pbl-gateway-service-app/servlet/pbl-gateway/gatewayServlet";var params={role:"",SERVICE_ID:"PUBLIC_CHAT_BOT_SERVICE",appId:"1000",pageId:"1000",actvtySrcName:"IAOCHATBOT",lob:"ANNUITY"};for(var prop in params)if(params.hasOwnProperty(prop)){var hiddenInput=document.createElement("input");hiddenInput.type="hidden",hiddenInput.name=prop,hiddenInput.value=params[prop],chatForm.appendChild(hiddenInput)}document.body.appendChild(chatForm),window.annuityChatWindow=window.open("","Live Chat","scrollbars=1,toolbar=0,menubar=0,status=0,resizable=1,left=400,width=620,height=550"),timer=setInterval(annuityWindowStatus,1e3),window.annuityChatWindow&&chatForm.submit(),document.body.removeChild(chatForm)}else alert("Annuity - chat window is already open")};$(window).on("beforeunload",function(){var c2cUnloadItem=getCookie("c2cTabValue"+c2cClickCount);"c2cTrue"===c2cUnloadItem&&updateCookie("c2cOpenValue",null,1),updateCookie("c2cTabValue"+c2cClickCount,"",-1),window.popupReference.close();getCookie("Ac2cTabValue"+Ac2cClickCount);"c2cTrue"===c2cUnloadItem&&updateCookie("Ac2cOpenValue",null,1),updateCookie("Ac2cTabValue"+Ac2cClickCount,"",-1),window.annuityChatWindow.close()}),$(".lfg-c2c-link").on("click",function(){openChatWindow()}),$(".lfg-c2c-link-annuities").on("click",function(){openChatWindowAnnuities()}),function($){$.ContentExtender=function(el,options){var base=this;base.$el=$(el),base.el=el,base.$el.data("ContentExtender",base);var currentBreakpoint="",isActive=!1,deferUpdateTimout=null;base.init=function(){base.options=$.extend({},$.ContentExtender.defaultOptions,options),base.$el.attr("data-disable-for-breakpoints")&&(base.options.disableForBreakpoints=base.$el.attr("data-disable-for-breakpoints").split(",")),currentBreakpoint=detectCurrentBreakpoint(),$(document).on("responsive:statechanged",onResponsiveStatechanged),handleActiveState()};var detectCurrentBreakpoint=function(){return ssm.isActive("desktop")?"desktop":ssm.isActive("tablet")?"tablet":ssm.isActive("mobile")?"mobile":void 0},handleActiveState=function(){isActiveForCurrentBreakpoint()?activate():deactivate()},activate=function(){isActive||($(window).on("resize",update),isActive=!0)},deactivate=function(){$(window).off("resize",update),isActive=!1;try{clearTimeout(deferUpdateTimout)}catch(e){
console.log(e)}base.$el.css({"margin-left":"","margin-right":""})},update=function(){try{clearTimeout(deferUpdateTimout)}catch(e){console.log(e)}deferUpdateTimout=setTimeout(deferredUpdate,base.options.deferUpdateMsecs)},deferredUpdate=function(){var winW=$(window).width(),eltW=base.$el.outerWidth(),delta=Math.ceil(Math.abs((winW-eltW)/2));base.$el.css({"margin-left":-delta,"margin-right":-delta})},onResponsiveStatechanged=function(e,newstate){newstate!==currentBreakpoint&&(currentBreakpoint=newstate,handleActiveState())},isActiveForCurrentBreakpoint=function(){return-1===base.options.disableForBreakpoints.indexOf(currentBreakpoint)};base.init()},$.ContentExtender.defaultOptions={disableForBreakpoints:["mobile","tablet"],deferUpdateMsecs:500},$.fn.contentExtender=function(options){return this.each(function(){new $.ContentExtender(this,options)})},$.fn.getContentExtender=function(){this.data("ContentExtender")}}(jQuery);var customSelectbox=function(){var clickedOnImmediateDropDown=!1;$(".custom-selectbox").each(function(){var firstVal;firstVal=$(this).next().find("li").hasClass("activeList")?$(this).next().find("li.activeList").text():$(this).next().find("li:first-child").text(),firstVal=firstVal.trim(),$(".custom-selectbox").hasClass("ng-rept-element-input")||$(".custom-selectbox").hasClass("ng-rept-element-div")||$(this).val(firstVal).attr("data-val",firstVal)}),$(document).on("click",function(){clickedOnImmediateDropDown=!1,$(".custom-selectbox").removeClass("custom-selectbox-active"),$(".custom-selectbox-list-cont").hide()}),$(".custom-selectbox").on("click",function(e){e.stopPropagation(),clickedOnImmediateDropDown=!0,$(this).next().is(":visible")?$(this).removeClass("custom-selectbox-active").next().slideUp():$(this).hasClass("custom-selectbox-element-down")?($(".custom-selectbox-list-cont").removeClass("custom-selectbox-active").hide(),$(this).addClass("custom-selectbox-active").next().css({position:"static"}).slideDown(function(){$(this).css("overflow","auto")})):($(".custom-selectbox-list-cont").removeClass("custom-selectbox-active").hide(),$(this).addClass("custom-selectbox-active").next().slideDown(function(){$(this).css("overflow","auto")}))}),$(".custom-selectbox-arrow").on("click",function(e){e.stopPropagation(),$(this).next().trigger("click")}),$(".custom-selectbox").keypress(function(e){13===e.keyCode&&$(this).trigger("click")}),$("body").on("click",".custom-selectbox-list-cont li",function(e){e.preventDefault(),e.stopPropagation(),clickedOnImmediateDropDown=!1,null!==$(this).data("link")&&void 0!==$(this).data("link")&&(location.href=$(this).data("link"));var selectedVal,selectedDataVal;if(selectedVal=$(this).text(),selectedDataVal=$(this).attr("data-val"),selectedDataVal=void 0===selectedDataVal||null===selectedDataVal?"":selectedDataVal,selectedVal=selectedVal.trim(),$(".custom-selectbox").hasClass("ng-rept-element-div")?$(this).parent().prev().html(selectedVal).attr("data-val",selectedDataVal):$(this).parent().prev().val(selectedVal).attr("data-val",selectedDataVal),$(this).removeClass("custom-selectbox-active").parent().hide(),$(this).parent().parent().hasClass("custom-date-dropdown")){var custMonth=$(this).closest(".date-wrapper").find("ul").eq(0).attr("id");calcDate($(this).closest(".date-wrapper").find("ul").eq(1).attr("id"),custMonth,$(this).closest(".date-wrapper").find("ul").eq(2).attr("id"),$(this).closest(".date-wrapper").find(".custom-date-dropdown-fld").attr("id"),$(this).closest(".date-wrapper").find(".custom-div-date-dropdown").text(),$(this).closest(".date-wrapper").find(".custom-div-month-dropdown").attr("data-val"),$(this).closest(".date-wrapper").find(".custom-div-year-dropdown").text(),$(this).closest(".date-wrapper").find(".date-field-container"),$(this).closest("ul").attr("id"),$(this).closest(".date-wrapper").find(".custom-div-date-dropdown"))}}),$("body").on("keypress",".custom-selectbox-list-cont li",function(e){13===e.keyCode&&($(this).trigger("click"),$(this).closest(".custom-selectbox-wrap").find(".custom-selectbox").focus())}),$(window).resize(function(){$(".custom-selectbox").removeClass("custom-selectbox-active").next().hide()}),$(".custom-selectbox").on("blur",function(){setTimeout(function(){clickedOnImmediateDropDown||$(".custom-selectbox-list-cont li").is(":focus")||$(".custom-selectbox").removeClass("custom-selectbox-active").next().hide()},500)})};$(document).ready(function(){customSelectbox()});var submitClicked=!1;!function(){function extendDefaults(source,properties){var property;for(property in properties)properties.hasOwnProperty(property)&&(source[property]=properties[property]);return source}function bindDate(_){var dt,mnth,yr,doc=document,theMonths=["January","February","March","April","May","June","July","August","September","October","November","December"],nw=new Date,curDate=nw.getDate(),curMonth=nw.getMonth()+1,curYear=nw.getFullYear(),lastDayOfMonth=new Date(curYear,curMonth,0).getDate();dt="string"==typeof _.options.dateId?document.getElementById(_.options.dateId):_.options.dateId,mnth="string"==typeof _.options.monthId?doc.getElementById(_.options.monthId):_.options.monthId,yr="string"==typeof _.options.yearId?doc.getElementById(_.options.yearId):_.options.yearId,_.dateDropDown=dt,_.monthDropDown=mnth,_.yearDropDown=yr,_.hiddenId=doc.getElementById(_.options.hiddenId);for(var li="<li tabindex='0'>Day</li>",i=0;i<lastDayOfMonth;i++){var dat=1+~~i;li+="<li tabindex='0' data-val="+dat+" data-flag='date'>"+dat+"</li>"}for(_.dateDropDown.innerHTML=li,li="<li tabindex='0'>Month</li>",i=0;i<theMonths.length;i++){li+="<li tabindex='0' data-val="+(i+1)+" data-flag='month'>"+theMonths[i]+"</li>"}for(_.monthDropDown.innerHTML=li,li="<li tabindex='0'>Year</li>",i=0;i<_.options.numberOfYears;i++){var yar=~~curYear-i;li+="<li tabindex='0' data-val="+yar+" data-flag='year'>"+yar+"</li>"}_.yearDropDown.innerHTML=li,_.options.autoSelect&&(_.dateDropDown.value=curDate,_.monthDropDown.value=curMonth,_.yearDropDown.value=curYear)}this.Calendar=function(){this.dateDropDown=null,this.monthDropDown=null,this.yearDropDown=null,this.hiddenId=null;var defaults={dateId:"",monthId:"",yearId:"",hiddenId:"",numberOfYears:30,autoSelect:!1};arguments[0]&&"object"==typeof arguments[0]&&(this.options=extendDefaults(defaults,arguments[0])),bindDate(this)}}(),$(document).ready(function(){var multiddHtml='<dl class="dropdown"><dt><a href="#"><span class="select-label floating-label hide">Select product type</span><i class="fa fa-sort-desc custom-dropdown"></i><p class="multiSel"><span class="selectedOptions"></span></p></a></dt><dd><div class="multiSelect"><ul><li><label class="unCheckAll">Clear all</label></li>';$("form.elq-inline .eloquaMultiSelectDropDown__Select option").each(function(){multiddHtml+='<li class="lfgcheck-box"><div class="checkbox"><span class="checkedVal" style="display: none;">'+$(this).val()+'</span></div><label class="inp-lbl inp-lbl--chkbox">'+$(this).val()+"</label></li>"}),multiddHtml+="</ul></div></dd></dl>",$("form.elq-inline .eloquaMultiSelectDropDown__Select").parent().append(multiddHtml),$("form.elq-inline .eloquaMultiSelectDropDown__Select").hide(),$("form.elq-inline .dropdown dd ul").hide(),$("form.elq-inline .dropdown dt").on("click",function(event){event.preventDefault(),$("form.elq-inline .dropdown dd ul").slideToggle("fast")}),$("form.elq-inline .dropdown dd ul li a").on("click",function(){$("form.elq-inline .dropdown dd ul").hide()}),$(document).bind("click",function(e){$(e.target).parents().hasClass("dropdown")||$("form.elq-inline .dropdown dd ul").hide()});var selectedOptionCount=0,selectedTexts="";$("form.elq-inline label.unCheckAll").on("click",function(){$("form.elq-inline .eloquaMultiSelectDropDown__Select option").each(function(){$("form.elq-inline .multiSelect div.checkbox").removeClass("checked"),$("form.elq-inline .eloquaMultiSelectDropDown__Select option").prop("selected",!1)}),selectedOptionCount=0,selectedTexts="",$("form.elq-inline .selectedOptions").text(selectedTexts),$("form.elq-inline .dropdown dt a span.select-label").removeClass("pull-up"),$("form.elq-inline .dropdown dt a span.select-label").removeClass("pull-up-extra")}),$("form.elq-inline .multiSelect div.checkbox").on("click",function(){$("form.elq-inline .dropdown dt a span.select-label").addClass("pull-up"),$("form.elq-inline .dropdown dt a span.select-label").addClass("pull-up-extra"),$(this).toggleClass("checked");var title=$(this).find("span.checkedVal").html(),title=$(this).find("span.checkedVal").html()+",",titleNew=$(this).find("span.checkedVal").html();if($(this).hasClass("checked")){var titleHtml='<span style="display: none;" title="'+title+'">'+title+"</span>";$("form.elq-inline .multiSel").append(titleHtml),$("form.elq-inline .eloquaMultiSelectDropDown__Select option[value='"+title.replace(",","")+"']").prop("selected",!0),selectedTexts.length>0?selectedTexts+=", "+titleNew:selectedTexts=titleNew,selectedOptionCount=selectedTexts.match(/,/gim),selectedOptionCount=selectedOptionCount?selectedOptionCount.length+1:0,selectedOptionCount>3?$("form.elq-inline .selectedOptions").text(selectedOptionCount+" selected"):$("form.elq-inline .selectedOptions").text(selectedTexts)}else $('span[title="'+title+'"]').remove(),$("form.elq-inline .eloquaMultiSelectDropDown__Select option[value='"+title.replace(",","")+"']").prop("selected",!1),$("form.elq-inline .multiSel").css("white-space","normal"),selectedTexts=selectedTexts.replace(titleNew,""),selectedTexts=selectedTexts.replace(", , ",", "),", "==selectedTexts.substring(0,2)&&(selectedTexts=selectedTexts.substring(2)),", "==selectedTexts.substring(selectedTexts.length-2)&&(selectedTexts=selectedTexts.substring(0,selectedTexts.length-2)),selectedOptionCount=selectedTexts.match(/,/gim),selectedOptionCount=selectedOptionCount?selectedOptionCount.length+1:0,selectedOptionCount<=3?$("form.elq-inline .selectedOptions").text(selectedTexts):$("form.elq-inline .selectedOptions").text(selectedOptionCount+" selected"),selectedTexts.length>0?($("form.elq-inline .dropdown dt a span.select-label").addClass("pull-up"),$("form.elq-inline .dropdown dt a span.select-label").addClass("pull-up-extra")):($("form.elq-inline .dropdown dt a span.select-label").removeClass("pull-up"),$("form.elq-inline .dropdown dt a span.select-label").removeClass("pull-up-extra")),$("form.elq-inline .multiSel").css("white-space","nowrap")})});var $carouselContWid=$(".carousel-sidenav-cont").parent(),count=0,mobileWid=767,tabletWid=1023,showList,updatedWid,showMarg,arrParentWid,$carouselContWidList=$(".carousel-sidenav-cont li").eq(0),carouselFirstImgHgt,carouselFirstImgMtop=$(".carousel-sidenav-cont").css("margin-top"),carouselContWidListLength=$(".carousel-sidenav-cont li").length,carouselContULWid;angular.element(document).ready(function(){carouselresize(),$(".carousel-sidenav-count").val(0),$(".carousel-sidenav-right-arrow").on("click",function(){var $totalCarouselList=$(this).closest(".bioSlider").find(".carousel-sidenav-cont li");if((count=parseInt($(this).closest("span").find("input").val()))>=0&&count<$totalCarouselList.length-showList){count=parseInt($(this).closest("span").find("input").val())+1,$(this).closest("span").find("input").val(count);var leftVal=count*updatedWid+count*parseInt($carouselContWidList.css("margin-right"))+count*parseInt($carouselContWidList.css("margin-left"));$(this).closest(".bioSlider").find(".carousel-sidenav-cont").stop(!1,!0).animate({left:-leftVal+"px"}),$(this).prev().addClass("carousel-sidenav-left-arrow"),count>=$totalCarouselList.length-showList&&$(this).removeClass("carousel-sidenav-right-arrow")}}),$(".carousel-sidenav-left-arrow").on("click",function(){count=parseInt($(this).closest("span").find("input").val());var $totalCarouselList=$(this).closest(".bioSlider").find(".carousel-sidenav-cont li");if(count>0&&count<=$totalCarouselList.length-showList){count=parseInt($(this).closest("span").find("input").val())-1,$(this).closest("span").find("input").val(count);var leftVal=count*updatedWid+count*parseInt($carouselContWidList.css("margin-right"))+count*parseInt($carouselContWidList.css("margin-left"));$(this).closest(".bioSlider").find(".carousel-sidenav-cont").stop(!1,!0).animate({left:-leftVal+"px"}),$(this).next().addClass("carousel-sidenav-right-arrow"),count<=0&&$(this).removeClass("carousel-sidenav-left-arrow")}})}),angular.element(window).load(function(){carouselresize()}),$(window).resize(function(){carouselresize()}),function($){var whichDevice;$(document).on("responsive:statechanged",function(e,param){whichDevice=param});var winWid,txtElemLeft,elemPos;angular.element(".form-txthelp").on("mouseover focus",function(){winWid=angular.element(window).width(),angular.element(this).find(".form-txthelp-wrap").show().promise().done(function(){txtElemLeft=angular.element(this).offset().left,elemPos=winWid-txtElemLeft,txtElemLeft<125&&elemPos>240?angular.element(this).find(".form-txthelp-cont").css("left","-15px"):txtElemLeft>125&&elemPos<150?angular.element(this).find(".form-txthelp-cont").css("left","-215px"):"mobile"===whichDevice&&angular.element(this).find(".form-txthelp-cont").css("left",-txtElemLeft/2+"px"),angular.element(this).addClass("visible-elem")})}),angular.element(".form-txthelp").on("mouseout blur",function(){angular.element(this).find(".form-txthelp-wrap").hide(),angular.element(this).removeClass("visible-elem")}),angular.element(".form-txthelp").on("click",function(event){event.stopPropagation()}),angular.element(".form-tooltip-close").on("click",function(){angular.element(".form-txthelp-wrap").removeClass("visible-elem")})}(jQuery),angular.element(document).ready(function(){function carouselTopresize(elemIndex){carouselTopContWidListLength=$(".carousel-top-cont").eq(elemIndex).find("li").length,$(".left.carousel-top-control").removeClass("carousel-top-left-arrow"),$(".carousel-top-cont").css("left","0"),$(".carousel-top-count").val(0),countTop=0;var windWid=$(window).width(),listMarginTopCarous=parseInt($carouselTopContWidList.css("margin-right"));$(".left.carousel-top-control").removeClass("carousel-top-left-arrow"),$(".right.carousel-top-control").addClass("carousel-top-right-arrow"),windWid<=mobileWid?(showListTop=2,updatedWidTop=$carouselTopContWid.width()/showListTop,updatedWidTop-=listMarginTopCarous,updatedWidTop+=10):windWid<=tabletWid?(showListTop=4,updatedWidTop=$carouselTopContWid.width()/showListTop,updatedWidTop-=listMarginTopCarous,updatedWidTop+=10):(showListTop=5,updatedWidTop=$carouselTopContWid.width()/showListTop,updatedWidTop-=listMarginTopCarous,updatedWidTop+=5),carouselTopContULWid=updatedWidTop*carouselTopContWidListLength+listMarginTopCarous*carouselTopContWidListLength,$(".carousel-top-cont").eq(elemIndex).css("width",carouselTopContULWid+"px").find("li").css("width",updatedWidTop+"px")}for(var showListTop,updatedWidTop,carouselTopContWidListLength,carouselTopContULWid,$carouselTopContWid=$(".carousel-top-cont").parent(),countTop=0,mobileWid=767,tabletWid=1023,$carouselTopContWidList=$(".carousel-top-cont li").eq(0),carouselTopContLength=$(".carousel-top-cont li").length,i=0;i<=carouselTopContLength;i++)carouselTopresize(i);$(".carousel-top-count").val(0),$(window).resize(function(){for(var j=0;j<=carouselTopContLength;j++){carouselTopresize(j)}}),$(".carousel-top-right-arrow").on("click",function(){var $totalTopCarouselList=$(this).closest(".bioSlider").find(".carousel-top-cont li");if((countTop=parseInt($(this).closest("span").find("input").val()))>=0&&countTop<$totalTopCarouselList.length-showListTop){countTop=parseInt($(this).closest("span").find("input").val())+1,$(this).closest("span").find("input").val(countTop);var leftValTopCarous=countTop*updatedWidTop+countTop*parseInt($carouselTopContWidList.css("margin-right"))+countTop*parseInt($carouselTopContWidList.css("margin-left"));$(this).closest(".bioSlider").find(".carousel-top-cont").stop().animate({left:-leftValTopCarous+"px"}),$(this).prev().addClass("carousel-top-left-arrow"),countTop>=$totalTopCarouselList.length-showListTop&&$(this).removeClass("carousel-top-right-arrow")}}),$(".carousel-top-left-arrow").on("click",function(){countTop=parseInt($(this).closest("span").find("input").val());var $totalTopCarouselList=$(this).closest(".bioSlider").find(".carousel-top-cont li");if(countTop>0&&countTop<=$totalTopCarouselList.length-showListTop){countTop=parseInt($(this).closest("span").find("input").val())-1,$(this).closest("span").find("input").val(countTop);var leftValTopCarous=countTop*updatedWidTop+countTop*parseInt($carouselTopContWidList.css("margin-right"))+countTop*parseInt($carouselTopContWidList.css("margin-left"));$(this).closest(".bioSlider").find(".carousel-top-cont").stop(!0,!1).animate({left:-leftValTopCarous+"px"}),$(this).next().addClass("carousel-top-right-arrow"),countTop<=0&&$(this).removeClass("carousel-top-left-arrow")}})}),$(document).ready(function(){checkFloatingLabels(this)}),$(document).on("DOMNodeInserted",function(e){checkFloatingLabels(e.target)}),function(){var fixForm=document.querySelector('form.elq-form[name*="safari_fix"]');if(fixForm)if(navigator.userAgent.indexOf("Safari")>-1&&navigator.userAgent.indexOf("CriOS")<0&&navigator.vendor.indexOf("Apple")>-1)fixForm.submit();else if("undefined"!=typeof campaignRedirectionPageURL&&null!==campaignRedirectionPageURL&&""!==campaignRedirectionPageURL){var index=location.search.indexOf("?")>=0?location.search.indexOf("?"):0;location.href=campaignRedirectionPageURL+(""!=location.search?"?":"")+encodeURIComponent(location.search.substring(index+1,location.search.length))}}(),function(){function async_load(){var script=document.createElement("script");script.type="text/javascript",script.async=!0,script.src="//img.en25.com/i/elqCfg.min.js";var scriptEle=document.getElementsByTagName("script")[0];scriptEle.parentNode.insertBefore(script,scriptEle)}window.attachEvent?window.attachEvent("onload",async_load):window.addEventListener("DOMContentLoaded",async_load,!1)}(),window.lockSubmit=!1,window.elqRecaptchaEnabled=!0,window.currElqForm=$("form.elq-form"),location.host.indexOf("preprod")>-1&&(window.elqRecaptchaEnabled=!1,$("form .elq-form")[0]&&$(".g-recaptcha").css("display","none"));var useExisting=!1;$(document).ready(function(){lfgElqInit();var _elqQReadyCheck1=setInterval(function(){"function"==typeof _elqQ.push&&(window._elqQ=_elqQ||[],window._elqQ.push(["elqSetSiteId",window.elqUserData.elqSiteID]),window._elqQ.push(["elqUseFirstPartyCookie","eloqua.com"]),window._elqQ.push(["elqTrackPageView"]),clearInterval(_elqQReadyCheck1))},500);if(location.href.indexOf("/public/bounce")>-1)doBounce();else if(document.querySelectorAll('form.elq-form:not([name*="safari_fix"])')[0]&&(window.elqUserData.campaign=$("input[name='utm_campaign']").val(),window.elqUserData.elqSiteID=$("input[name='elqSiteId']").val(),"undefined"!=typeof campaignRedirectionPageURL&&null!==campaignRedirectionPageURL&&""!==campaignRedirectionPageURL&&(window.elqUserData.confirmationPage=campaignRedirectionPageURL),window.isLoginForm?parseInt(localStorage.getItem("elq_"+window.formName+"_redirect"))<1&&localStorage.setItem("elqUserData",JSON.stringify(window.elqUserData)):localStorage.setItem("elqUserData",JSON.stringify(window.elqUserData)),window.isLoginForm||void 0!==localStorage.elq_complete&&null!==localStorage.elq_complete&&""!==localStorage.elq_complete&&parseInt(localStorage.elq_complete)>1&&"undefined"!=typeof campaignRedirectionPageURL&&(location.href=campaignRedirectionPageURL),elqFormFormat()),window.isLoginForm||!document.querySelectorAll("form.elq-form")[0]&&location.href.indexOf(window.elqUserData.confirmationPage)>-1&&1===parseInt(localStorage.elq_complete)&&localStorage.setItem("elq_complete","2"),(2===parseInt(localStorage.elq_complete)||parseInt(localStorage.getItem("elq_"+window.formName+"_redirect"))>0)&&window.elqUserData.elqSiteID&&window.elqUserData.email)var _elqQReadyCheck2=setInterval(function(){"function"==typeof _elqQ.push&&(doEloquaLookup(document.querySelector("form.elq-form")),clearInterval(_elqQReadyCheck2))},500)}),function($){"use strict";$.ExpandableSearchField=function(el,options){var base=this;base.$el=$(el),base.el=el,base.$el.data("ExpandableSearchField",base);var $button=base.$el.find(".UIButton"),$textfield=base.$el.find("input[type=search]");base.init=function(){base.options=$.extend({},$.ExpandableSearchField.defaultOptions,options),$button.on("mousedown touchdown",onSearchButtonClick),$button.bind("keydown.space",onSearchButtonClick),$button.bind("keydown.return",onSearchButtonClick),$textfield.on("focus",onTextFieldFocus),$(document).on("responsive:statechanged",function(e,state){"mobile"===state?base.$el.removeClass("is-collapsed"):base.$el.addClass("is-collapsed"),searchFieldRewire()}),ssm.isActive("mobile")&&base.$el.removeClass("is-collapsed")};var onTextFieldFocus=function(){isCollapsed()&&searchFieldExpand()},performSearch=function(){var searhParam=$("#searchParam").val();null!==searchPageURL&&void 0!==searchPageURL&&(searchPageURL=searchPageURL+"&q="+searhParam,window.location.href=searchPageURL)},onSearchButtonClick=function(e){e.preventDefault(),e.stopPropagation(),ssm.isActive("mobile")?performSearch():isCollapsed()?searchFieldExpand():performSearch()},onSearchKeypress=function(e){if(13===e.keyCode){var data={event_name:"search",event_action:"search",event_type:"global"};utag.link(data),performSearch()}},searchFieldRewire=function(){$textfield.off("blur",searchFieldCollapse),$textfield.off("keypress",onSearchKeypress),$textfield.on("blur",searchFieldCollapse),$textfield.on("keypress",onSearchKeypress)},searchFieldExpand=function(){base.$el.removeClass("is-collapsed"),$textfield.focus(),$textfield.on("blur",searchFieldCollapse),$textfield.on("keypress",onSearchKeypress)},searchFieldCollapse=function(){base.$el.addClass("is-collapsed"),$textfield.off("blur",searchFieldCollapse),$textfield.off("keypress",onSearchKeypress)},isCollapsed=function(){return base.$el.hasClass("is-collapsed")};base.init()},$.ExpandableSearchField.defaultOptions={},$.fn.expandableSearchField=function(options){return this.each(function(){new $.ExpandableSearchField(this,options)})},$.fn.getExpandableSearchField=function(){return this.data("ExpandableSearchField")}}(jQuery),function($){$.ImageFill=function(el,options){var base=this;base.$el=$(el),base.el=el,base.$el.data("ImageFill",base);var imgw,imgh,$img=base.$el.find("img"),currentBreakpoint="",isActive=!1;base.init=function(){base.options=$.extend({},$.ImageFill.defaultOptions,options),base.$el.css({overflow:"hidden",position:"relative"}),base.$el.attr("data-disable-for-breakpoints")&&(base.options.disableForBreakpoints=base.$el.attr("data-disable-for-breakpoints").split(",")),currentBreakpoint=detectCurrentBreakpoint(),$(document).on("responsive:statechanged",onResponsiveStatechanged),$img.prop("complete")?wireImg():$img.on("load",function(){wireImg()})};var detectCurrentBreakpoint=function(){return ssm.isActive("desktop")?"desktop":ssm.isActive("tablet")?"tablet":ssm.isActive("mobile")?"mobile":void 0},onResponsiveStatechanged=function(e,newstate){newstate!==currentBreakpoint&&(currentBreakpoint=newstate,handleActiveState())},isActiveForCurrentBreakpoint=function(){return-1===base.options.disableForBreakpoints.indexOf(currentBreakpoint)},handleActiveState=function(){isActiveForCurrentBreakpoint()?activate():deactivate()},activate=function(){isActive||(base.$el.css({overflow:"hidden"}),$img.css({width:"",height:"",position:"absolute"}),$(window).on("resize",base.resize),base.resize(),isActive=!0)},deactivate=function(){$(window).off("resize",base.resize),isActive=!1,base.$el.css({overflow:"visible"}),$img.css({width:"",height:"",position:"relative"})},wireImg=function(){imgw=$img.get(0).naturalWidth,imgh=$img.get(0).naturalHeight,handleActiveState(),setInterval(base.resize,1e3)};base.resize=function(){var targetHeight,ratio,targetWidth;imgw/imgh<base.$el.innerWidth()/base.$el.innerHeight()?(targetHeight=base.$el.innerHeight(),ratio=targetHeight/imgh,targetWidth=imgw*ratio,$img.css({width:targetWidth,height:targetHeight})):(targetWidth=base.$el.innerWidth(),ratio=targetWidth/imgw,targetHeight=imgh*ratio,$img.css({width:targetWidth,height:targetHeight}))},base.init()},$.ImageFill.defaultOptions={disableForBreakpoints:[]},$.fn.imageFill=function(options){return this.each(function(){new $.ImageFill(this,options)})},$.fn.getImageFill=function(){return this.data("ImageFill")}}(jQuery),function($){$.ListPulldown=function(el,options){var base=this;base.$el=$(el),base.el=el,base.$el.data("ListPulldown",base);var currentBreakpoint="",$listTitle=$('<li class="list-title"><a href="#">(select option)</a></li>'),$listItems=base.$el.find(">li"),curActiveIdx=-1;base.init=function(){if(base.$el.hasClass("list-pulldown-initialized"))return!1;base.$el.addClass("list-pulldown-initialized"),base.$el.addClass("ListPulldown-base"),base.options=$.extend({},$.ListPulldown.defaultOptions,options),base.$el.attr("data-disable-for-breakpoints")&&(base.options.disableForBreakpoints=base.$el.attr("data-disable-for-breakpoints").split(",")),base.$el.attr("data-default-prompt")&&(base.options.defaultPrompt=base.$el.attr("data-default-prompt")),""===base.$el.attr("data-empty-prompt")&&(base.options.defaultPrompt=""),$listItems.each(function(idx){$(this).data("idx",idx).addClass("list-item"),$(this).attr("tabindex","-1"),$(this).attr("aria-label",$(this).find("a").html()),0===$(this).find(">a").length&&$(this).html("<span>"+$(this).html()+"</span>")}),currentBreakpoint=detectCurrentBreakpoint(),$(document).on("responsive:statechanged",onResponsiveStatechanged),setCurrentIdx(detectCurrentIdx()),base.$el.prepend($listTitle),base.setupAccessibility(),handleActiveState()},base.isListOpen=function(){return base.$el.hasClass("is-open")},base.setupAccessibility=function(){base.$el.attr("role","listbox"),base.$el.attr("aria-expanded","false"),$listItems.attr("role","option");var listid="aria-list-"+$(document).getUniqueID();base.$el.attr("aria-labelledby",listid),$listTitle.attr("id",listid),$listTitle.find("a").on("focus",function(){base.$el.addClass("is-focused")}),$listTitle.find("a").on("blur",function(){base.$el.removeClass("is-focused")}),$listItems.on("mouseenter",base.onItemMouseenter),$listItems.on("mouseleave",base.onItemMouseleave)},base.setActiveIdx=function(idx){base.clearActiveIdx(),$listItems.removeClass("is-current").eq(idx).addClass("is-current").find(">a").addClass("is-current"),$listItems.eq(idx).focus(),curActiveIdx=idx},base.clearActiveIdx=function(){$listItems.find(".is-current").removeClass("is-current"),curActiveIdx=-1},base.onItemMouseenter=function(e){var $elt=$(e.target),$li=$elt.closest("li"),eltidx=$li.data("idx");base.setActiveIdx(eltidx)},base.onItemMouseleave=function(){base.clearActiveIdx()},base.onKeyUp=function(e){e.preventDefault(),-1===curActiveIdx?curActiveIdx=0:curActiveIdx>0&&(curActiveIdx-=1),base.setActiveIdx(curActiveIdx)},base.onKeyDown=function(e){if(e.preventDefault(),!base.isListOpen())return void openMenu();-1===curActiveIdx?curActiveIdx=0:curActiveIdx<$listItems.length-1&&(curActiveIdx+=1),base.setActiveIdx(curActiveIdx)},base.onEscape=function(e){e.preventDefault(),closeMenu()},base.onReturn=function(e){if(e.preventDefault(),!base.isListOpen())return openMenu(),void base.setActiveIdx(curActiveIdx);if(-1!==curActiveIdx){var $elt=$(e.target),$li=$elt.closest("li");$li.find("> a").length>0&&(document.location.href=$li.find("a").attr("href")),setCurrentIdx($li.data("idx")),closeMenu()}};var setCurrentIdx=function(idx){var title,originalIdx=base.getCurrentIdx();-1===idx&&(!0===base.options.forceSelection?title=base.options.defaultPrompt:idx=0),idx>$listItems.length-1&&(idx=0),-1!==idx&&(title=0===$listItems.eq(idx).find("a").length?$listItems.eq(idx).html():$listItems.eq(idx).find("a").html()),$listItems.removeClass("is-active"),-1!==idx&&$listItems.eq(idx).addClass("is-active"),$listTitle.find("a").html(title),$listTitle.attr("aria-label",title),originalIdx!==idx&&base.$el.trigger("listpulldown:changed",[idx])},detectCurrentIdx=function(){var foundidx=-1;return $listItems.each(function(idx){!0===$(this).hasClass("is-active")&&(foundidx=idx)}),foundidx},onResponsiveStatechanged=function(e,newstate){newstate!==currentBreakpoint&&(closeMenu(),currentBreakpoint=newstate,base.unwire(),handleActiveState())},handleActiveState=function(){isActiveForCurrentBreakpoint()?base.wire():base.unwire()},isActiveForCurrentBreakpoint=function(){return-1===base.options.disableForBreakpoints.indexOf(currentBreakpoint)},detectCurrentBreakpoint=function(){return ssm.isActive("desktop")?"desktop":ssm.isActive("tablet")?"tablet":ssm.isActive("mobile")?"mobile":void 0},onListTitleClick=function(e){e.preventDefault(),e.stopPropagation(),isMenuOpen()?closeMenu():(openMenu(),$("ul.Topheader-navigation-sections").hasClass("gendrp-open")&&$("ul.Topheader-navigation-sections").removeClass("gendrp-open"),$(".list-wrapper .Audience-age-selector").hide())},isMenuOpen=function(){return base.$el.hasClass("is-open")},onListItemClick=function(e){if(e.preventDefault(),isMenuOpen()){var $elt=$(e.target);if($elt.hasClass("form-list-txthelp"))return!1;if($elt.hasClass("ageselectorlink"))return $(".list-wrapper .Audience-age-selector").show(),$(this).parent().addClass("gendrp-open"),!0;var $li=$elt.closest("li");$li.find("> a").length>0&&(document.location.href=$li.find("a").attr("href")),setCurrentIdx($li.data("idx"))}},openMenu=function(){base.$el.attr("aria-expanded","true"),$listTitle.attr("aria-hidden","true"),$listItems.each(function(idx){$(this).stop().css({opacity:"0",filter:"alpha(opacity=0)",visibility:"hidden"}),$(this).delay(25*idx).css({visibility:"visible"}).animate({opacity:1,filter:"alpha(opacity=100)"},70)}),base.$el.addClass("is-open"),wireMenuClose(),base.$el.trigger("listpulldown:opened")},closeMenu=function(){base.$el.removeClass("is-open"),unwireMenuClose(),base.$el.attr("aria-expanded","false"),$listTitle.attr("aria-hidden","false"),$listTitle.find("a").focus()};base.setSelectorPopupState=function(state){!0===state?base.$el.addClass("is-hilited"):base.$el.removeClass("is-hilited")},base.wire=function(){base.$el.addClass("ListPulldown-active"),base.$el.on("click  touchstart",onListTitleClick),$listItems.on("click  touchstart",onListItemClick),base.$el.bind("keydown.up",base.onKeyUp),base.$el.bind("keydown.down",base.onKeyDown),base.$el.bind("keydown.esc",base.onEscape),base.$el.bind("keydown.return",base.onReturn)},base.unwire=function(){base.$el.removeClass("ListPulldown-active"),base.$el.off("click  touchstart",onListTitleClick),$listItems.off("click  touchstart",onListItemClick),unwireMenuClose(),base.$el.unbind("keydown.up",base.onKeyUp),base.$el.unbind("keydown.down",base.onKeyDown),base.$el.unbind("keydown.esc",base.onEscape),base.$el.unbind("keydown.return",base.onReturn)};var wireMenuClose=function(){$(window).on("click touchstart",checkOutsideClick)},unwireMenuClose=function(){$(window).off("click touchstart",checkOutsideClick)},checkOutsideClick=function(evt){$(evt.target).hasClass("ListPulldown")||0!==$(evt.target).closest(".ListPulldown").length||$(evt.target).is(".ListPulldown--register-account .form-list-txthelp")||0!==$(evt.target).closest(".Register.AudienceSelector--default").length||$(".Register.AudienceSelector--default").hide()};base.getCurrentIdx=function(){return detectCurrentIdx()},base.setCurrentIdx=function(idx){setCurrentIdx(idx)},base.getWidth=function(){return $listTitle.outerWidth(!0)},base.init()},$.ListPulldown.defaultOptions={disableForBreakpoints:[],defaultPrompt:"select option",forceSelection:!1},$.fn.listPulldown=function(options){return this.each(function(){new $.ListPulldown(this,options)})},$.fn.getListPulldown=function(){return this.data("ListPulldown")}}(jQuery);var ReCaptchaUtils={getWidgets:function(){var _this=this;$(".g-recaptcha").each(function(){_this._renderWidget($(this))}),$(window).on("DOMNodeInserted",function(){
$(event.target).hasClass("g-recaptcha")?_this._renderWidget($(event.target)):$(event.target).find(".g-recaptcha").each(function(){_this._renderWidget($(this))})})},_renderWidget:function(widget){null!==widget.attr("id")&&(window["widget"+widget.attr("id")]=grecaptcha.render(widget.attr("id"),{sitekey:"6LeLmBwUAAAAAA1w5qzI4idpXBHP_EfrUXhtYEc-",theme:"light"}))},rwdReCaptcha:function(data){var hostForm=data.form,mq=data.mq,widthContainer=data.widthContainer,max=data.maxScale,reCaptchaDiv=hostForm.find(".g-recaptcha");if(mq.matches){var scaleFactor=Math.ceil(widthContainer.width()/hostForm.find(".g-recaptcha > div").width()*100)/100;null!==max&&scaleFactor<max?(reCaptchaDiv.css("transform","scale("+scaleFactor+")"),scaleFactor<1?reCaptchaDiv.css("height",78-78*(1-scaleFactor)+"px"):reCaptchaDiv.css("height",78+78*(scaleFactor-1)+"px")):(reCaptchaDiv.css("transform","scale("+max+")"),reCaptchaDiv.css("height",78+78*(max-1)+"px"))}else reCaptchaDiv.css("transform","scale(1)")}},globalReCaptchaCallback=function(){ReCaptchaUtils.getWidgets()};$(document).ready(function(){function singleCarouselresize(){singleArrParentWid=$(".carousel-single-sidenav-right-arrow").parent().outerWidth();var singleMarginLeft=parseInt($singleCarouselContWidList.css("margin-right"));$(".left.carousel-single-sidenav-control").removeClass("carousel-single-sidenav-left-arrow"),$(".carousel-single-sidenav-cont").css({left:"0"}).parent().css("overflow","hidden"),$(".carousel-single-sidenav-count").val(0),singleCount=0;$(window).width();$(".left.carousel-single-sidenav-control").removeClass("carousel-single-sidenav-left-arrow"),$(".right.carousel-single-sidenav-control").addClass("carousel-single-sidenav-right-arrow"),singleShowList=1,singleShowMarg=singleArrParentWid/singleShowList,singleMarginLeft=parseInt(singleMarginLeft*(singleShowList-1)),singleUpdatedWid=($singleCarouselContWid.width()-singleMarginLeft)/singleShowList,singleCarouselContULWid=singleUpdatedWid*singleCarouselContWidListLength+singleMarginLeft*singleCarouselContWidListLength,$(".carousel-single-sidenav-cont").css("width",singleCarouselContULWid+"px").find("li").css("width",singleUpdatedWid+"px")}var singleShowList,singleUpdatedWid,singleShowMarg,singleArrParentWid,singleCarouselContULWid,$singleCarouselContWid=$(".carousel-single-sidenav-cont").parent(),singleCount=0,$singleCarouselContWidList=$(".carousel-single-sidenav-cont li").eq(0),singleCarouselContWidListLength=$(".carousel-single-sidenav-cont li").length;singleCarouselresize(),$(".carousel-single-sidenav-count").val(0),$(window).resize(function(){singleCarouselresize()}),$(".carousel-single-sidenav-right-arrow").on("click",function(){var $singleTotalCarouselList=$(this).closest(".bioSlider").find(".carousel-single-sidenav-cont li");if((singleCount=parseInt($(this).closest("span").find("input").val()))>=0&&singleCount<$singleTotalCarouselList.length-singleShowList){singleCount=parseInt($(this).closest("span").find("input").val())+1,$(this).closest("span").find("input").val(singleCount);var singleLeftVal=singleCount*singleUpdatedWid+singleCount*parseInt($singleCarouselContWidList.css("margin-right"))+singleCount*parseInt($singleCarouselContWidList.css("margin-left"));$(this).closest(".bioSlider").find(".carousel-single-sidenav-cont").stop(!1,!0).animate({left:-singleLeftVal+"px"}),$(this).prev().addClass("carousel-single-sidenav-left-arrow"),singleCount>=$singleTotalCarouselList.length-singleShowList&&$(this).removeClass("carousel-single-sidenav-right-arrow")}}),$(".carousel-single-sidenav-left-arrow").on("click",function(){singleCount=parseInt($(this).closest("span").find("input").val());var $singleTotalCarouselList=$(this).closest(".bioSlider").find(".carousel-single-sidenav-cont li");if(singleCount>0&&singleCount<=$singleTotalCarouselList.length-singleShowList){singleCount=parseInt($(this).closest("span").find("input").val())-1,$(this).closest("span").find("input").val(singleCount);var singleLeftVal=singleCount*singleUpdatedWid+singleCount*parseInt($singleCarouselContWidList.css("margin-right"))+singleCount*parseInt($singleCarouselContWidList.css("margin-left"));$(this).closest(".bioSlider").find(".carousel-single-sidenav-cont").stop(!1,!0).animate({left:-singleLeftVal+"px"}),$(this).next().addClass("carousel-single-sidenav-right-arrow"),singleCount<=0&&$(this).removeClass("carousel-single-sidenav-left-arrow")}})}),function(){if($(".UITabset .tabBlockBlueBtn").length>0){var tabBlock=$(".UITabset .tabBlockBlueBtn").parent(),tabContents=tabBlock.children();$.each(tabContents,function(tabIndex,value){var tiles=$(value).find(".grid-block-tile-2column li"),noOfTiles=tiles.length;noOfTiles>6?($(value).data("tiles",6),$.each(tiles,function(tileIndex,tileValue){tileIndex>5&&$(tileValue).css("display","none")})):$(value).data("tiles",noOfTiles),0===tabIndex&&noOfTiles<=6&&$(".UITabset .tabBlockBlueBtn").css("display","none")}),$(".UITabset.blue li").on("click",function(){var inSwitchToIdx=$(this).data("idx"),targetname=$(this).parent().attr("data-target"),clickedTabBlock=$(document).find("[data-name="+targetname+"]");$(document).find("[data-name="+targetname+"]").children().each(function(idx){if(idx===inSwitchToIdx){var visibleTiles=parseInt($(this).data("tiles")),noOfTiles=$(this).find(".grid-block-tile-2column li").length;noOfTiles>6&&visibleTiles<noOfTiles?$(clickedTabBlock).find(".tabBlockBlueBtn").css("display","inline-block"):$(clickedTabBlock).find(".tabBlockBlueBtn").css("display","none")}})}),$(".UITabset .tabBlockBlueBtn").on("click",function(){var currTab=$(this).parent().find(".is-active"),visibleTiles=parseInt($(currTab).data("tiles")),noOfTiles=$(currTab).find(".grid-block-tile-2column li").length;if(noOfTiles-visibleTiles>6){for(var tilesList=$(currTab).find(".grid-block-tile-2column ul"),i=visibleTiles;i<visibleTiles+6;i++){var tile=$(tilesList).find("li:eq("+i+")");$(tile).css("display","block")}$(currTab).data("tiles",visibleTiles+6)}else $(currTab).find(".grid-block-tile-2column li").css("display","block"),$(this).css("display","none"),$(currTab).data("tiles",visibleTiles+(noOfTiles-visibleTiles))})}}(),function($){$.UITabSet=function(el){var base=this;base.$el=$(el),base.el=el,base.curidx=-1,base.$el.data("UITabSet",base),base.callbackFunctionName=void 0,base.$tabsetTabs=[],base.$tabsetPanels=[];var focusedTabIdx=-1;base.init=function(){var targetname=base.$el.attr("data-target");base.callbackFunctionName=base.$el.attr("data-callback");var curidx=0;base.$tabsetTabs=base.$el.children(),base.$tabsetPanels=$(document).find("[data-name="+targetname+"]").children(),base.$tabsetTabs.each(function(idx){$(this).attr("data-idx",idx).addClass("internal-tabset-tab"),$(this).data("idx",idx),$(this).hasClass("is-active")&&(curidx=idx)}),base.$tabsetTabs.on("focus",onTabFocus),base.$tabsetTabs.on("blur",onTabBlur),base.$el.attr("role","tablist"),base.$tabsetTabs.attr("role","tab"),base.$tabsetPanels.attr("role","tabpanel"),base.$tabsetTabs.each(function(idx){var uid=$(document).getUniqueID(),$tab=$(this),$tabpanel=base.$tabsetPanels.eq(idx);$tab.attr("id","tabset-tab-"+uid).attr("aria-controls","tabset-panel-"+uid).attr("aria-expanded","false").attr("aria-selected","false").attr("tabindex",0===idx?"0":"-1"),$tabpanel.attr("id","tabset-panel-"+uid).attr("aria-labelledby","tabset-tab-"+uid).attr("aria-expanded","false").attr("aria-hidden","true")}),base.$tabsetPanels.each(function(){$(this).children().first().is("div")?$(this).children().first().children().first().attr("tabindex","0"):$(this).children().first().attr("tabindex","0")}),base.$tabsetTabs.on("click",base.tabClick),base.$tabsetTabs.bind("keydown.space",base.tabSwitchToFocused),base.$tabsetTabs.bind("keydown.return",base.tabSwitchToFocused),base.$tabsetTabs.bind("keydown.left",base.tabFocusPrev),base.$tabsetTabs.bind("keydown.right",base.tabFocusNext),base.$tabsetTabs.bind("keydown.tab",base.focusOnCurrentPanel),base.switchToIdx(curidx)};var onTabFocus=function(e){var $elt=$(e.target);focusedTabIdx=$elt.data("idx"),$elt.attr("aria-selected","true")},onTabBlur=function(e){var $elt=$(e.target);focusedTabIdx=-1,$elt.attr("aria-selected","false")};base.tabFocusNext=function(e){e.preventDefault();var $elt=$(e.target),idx=$elt.data("idx");idx<base.$tabsetTabs.length-1&&base.$tabsetTabs.eq(idx+1).focus()},base.tabSwitchToFocused=function(e){e.preventDefault(),-1!==focusedTabIdx&&base.switchToIdx(focusedTabIdx)},base.tabFocusPrev=function(e){e.preventDefault();var $elt=$(e.target),idx=$elt.data("idx");idx>0&&base.$tabsetTabs.eq(idx-1).focus()},base.tabClick=function(e){var $elt=$(e.currentTarget);e.preventDefault(),e.stopPropagation(),void 0!==$elt.data("idx")&&null!==$elt.data("idx")&&""!==$elt.data("idx")?base.switchToIdx(parseInt($elt.data("idx"))):base.switchToIdx(parseInt($elt.parent().data("idx")))},base.switchToIdx=function(inSwitchToIdx){if(base.curidx===inSwitchToIdx)return!1;base.$tabsetTabs.each(function(idx){idx===inSwitchToIdx?$(this).addClass("is-active"):$(this).removeClass("is-active")}),base.$tabsetPanels.each(function(idx){idx===inSwitchToIdx?$(this).addClass("is-active"):$(this).removeClass("is-active")}),-1!==base.curidx&&(base.$tabsetTabs.eq(base.curidx).attr("aria-expanded","false"),base.$tabsetPanels.eq(base.curidx).attr("aria-expanded","false"),base.$tabsetPanels.eq(base.curidx).attr("aria-hidden","true")),base.$tabsetTabs.eq(inSwitchToIdx).attr("aria-expanded","true"),base.$tabsetPanels.eq(inSwitchToIdx).attr("aria-expanded","true"),base.$tabsetPanels.eq(inSwitchToIdx).attr("aria-hidden","false"),base.curidx=inSwitchToIdx,base.dispatchCallback(inSwitchToIdx,base)},base.dispatchCallback=function(arg,arg2){if(void 0!==base.callbackFunctionName){var fn=base.callbackFunctionName;return fn="function"==typeof fn?fn:window[fn],fn.call(this,arg,arg2)}},base.setSwitchCallback=function(callbackFunctionName){base.callbackFunctionName=callbackFunctionName},base.init()},$.fn.uITabSet=function(){return this.each(function(){new $.UITabSet(this)})}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZm9ybS1hc2stY3VzdG9tZXItc2VydmljZS9hc2stY3VzdG9tZXItc2VydmljZS5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9mb3JtLWxvc3QtcG9saWN5LWZpbmRlci9sb3N0LXBvbGljeS1maW5kZXIuY29udHJvbGxlci5qcyIsImNvcmUvY29tbW9uLmpzIiwiY29yZS9nbG9iYWwuanMiLCJjb3JlL2xmZy1hbmFseXRpY3MuanMiLCJjb21wb25lbnRzL3F1ZXN0aW9ubmFpcmUtZXhwYW5kLWNvbGxhcHNlL3F1ZXN0aW9ubmFpcmUtZXhwYW5kLWNvbGxhcHNlLmpzIiwic2hhcmVkL2NoYXRib3QtYzJjL2NoYXRib3QtYzJjLmpzIiwic2hhcmVkL2N1c3RvbS1kYXRlcGlja2VyL2N1c3RvbS1kYXRlcGlja2VyLmpzIiwic2hhcmVkL2N1c3RvbS1zaWRlbmF2LWNhcm91c2VsL2N1c3RvbS1zaWRlbmF2LWNhcm91c2VsLmpzIiwic2hhcmVkL2Zsb2F0aW5nLWxhYmVsL2Zsb2F0aW5nLWxhYmVsLmpzIiwic2hhcmVkL2Vsb3F1YS9lbG9xdWEuanMiLCJjdXN0b20tc2xpZGVyLmRpcmVjdGl2ZS5qcyIsImxmZy1oZWFkZXIuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvY29udGFjdC13aG9sZXNhbGVyL2NvbnRhY3Qtd2hvbGVzYWxlci5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9jb250YWN0LXdob2xlc2FsZXItbGxhdmEvY29udGFjdC13aG9sZXNhbGVyLWxsYXZhLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2ZhYS9mYWEuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvZm9ybS1hbm51YWwtZmlsaW5ncy9hbm51YWwtZmlsaW5ncy5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9mb3JtLWNsYWltL2NsYWltLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2Zvcm0tY29udGFjdC9jb250YWN0LmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2Zvcm0tY29udGFjdC11cy1ncC9jb250YWN0LXVzLWdwLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2Zvcm0tZGlzYWJpbGl0eS13YWl2ZXIvZGlzYWJpbGl0eS13YWl2ZXIuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvZm9ybS1kcmlua2VyLWJpZGRsZS9kcmlua2VyLWJpZGRsZS5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9mb3JtLWZhYS9yZXF1ZXN0LWluZm8uY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvZm9ybS1mYWEtZW1wbG95ZXIvcmVxdWVzdC1pbmZvLWVtcGxveWVyLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2Zvcm0tZmFhLXVwZGF0ZWQvcmVxdWVzdC1pbmZvLXVwZGF0ZWQuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvZm9ybS1mcmF1ZC1yZXBvcnRpbmcvZnJhdWQtcmVwb3J0aW5nLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2Zvcm0tam9pbi1sZm4vaG93LXRvLWdldHN0YXJ0ZWQuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvZm9ybS1sZmEtcmVnL2xmYS1yZWcuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvZm9ybS1sZmEtdXBkYXRlL2xmYS11cGRhdGUuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvZm9ybS1sZnMtcmVnL2xmcy1yZWcuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvZm9ybS1sZnMtdXBkYXRlL2xmcy11cGRhdGUuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvZm9ybS1saWZlLWluc3VyYW5jZS1kZWF0aC9saWZlLWluc3VyYW5jZS1kZWF0aC5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9mb3JtLWxvbmctdGVybS1jYXJlL2xvbmctdGVybS1jYXJlLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2Zvcm0tcmVnaXN0ZXItc3VwcGxpZXIvcmVnaXN0ZXItc3VwcGxpZXIuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvZm9ybS1zZWN1cml0eS1yZXBvcnRpbmcvc2VjdXJpdHktcmVwb3J0aW5nLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2Zvcm0tc3BhbmlzaC1jb250YWN0L3NwYW5pc2gtY29udGFjdC5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9mb3Jtcy1hbm51aXR5LXNlYXJjaC9hbm51aXR5LXNlYXJjaC5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9mb3Jtcy1hbm51aXR5LWNsYWltcy9hbm51aXR5LWNsYWltcy5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9mb3Jtcy1saWZlLXNlYXJjaC9saWZlLXNlYXJjaC1mb3Jtcy5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9mb3Jtcy1saWZlLWNsYWltcy9saWZlLWNsYWltcy5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9mb3Jtcy1sb25nLXRlcm0tY2FyZS1jbGFpbXMvbG9uZy10ZXJtLWNhcmUtY2xhaW1zLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2Zvcm1zLXRvb2wvZm9ybXMtdG9vbC5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9mdW5kcy1wZXJmb3JtYW5jZS10b29sL2Z1bmRzLXBlcmZvcm1hbmNlLXRvb2wuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvZnVuZC1wZXJmb3JtYW5jZS9tYWluLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2Z1bmQtcGVyZm9ybWFuY2UvcGVyZm9ybWFuY2UuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvZnVuZC1wZXJmb3JtYW5jZS9wcm9zcGVjdHVzLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2Z1bmQtcGVyZm9ybWFuY2UvdW5pdC12YWx1ZXMuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvZ2xvc3NhcnkvZ2xvc2FycnkuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvaGlzdG9yaWNhbC1wcmljZXMvaGlzdG9yaWNhbC1wcmljZXMuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvaW4tcGFnZS1yb3RhdGUtYmFubmVyL2luLXBhZ2Utcm90YXRlLWJhbm5lci5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9pbnNpZGVyLXRyYWRpbmcvaW5zaWRlci10cmFkaW5nLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2xpcy9saXMuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvbHRjLXN0YXRlLXNlbGVjdG9yL2x0Yy1zdGF0ZS1zZWxlY3Rvci5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9saWZlLWV4cGVjdGFuY3ktY2FsYy9saWZlLWV4cGVjdGFuY3ktY2FsYy5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9sdGMtc3RhdGUtc2VsZWN0b3ItbGluay9sdGMtc3RhdGUtc2VsZWN0b3ItbGluay5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9tdWx0aS1zbGlkZS9tdWx0aS1zbGlkZS5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9xdWVzdGlvbm5haXJlL3F1ZXN0aW9ubmFpcmUuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvcXVpY2stcG9sbC9xdWljay1wb2xsLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL3F1b3Rlcy1jaGFydHMvcXVvdGVzLWNoYXJ0cy5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9xdWVzdGlvbm5haXJlLXByb2dyZXNzLWJhci9xdWVzdGlvbm5haXJlLXByb2dyZXNzLWJhci5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9yZWdpc3Rlci9yZWdpc3Rlci5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9zZWFyY2gvc2VhcmNoLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL3NlYy1maWxpbmdzL3NlYy1maWxpbmdzLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL3N0YXItcmF0aW5nL3N0YXItcmF0aW5nLmNvbnRyb2xsZXIuanMiLCJjb3JlL2F1ZGllbmNlLWFnZS1zZWxlY3Rvci9hdWRpZW5jZS1hZ2Utc2VsZWN0b3IuY29udHJvbGxlci5qcyIsImNvcmUvbGZnLWxvY2FsZS9sZmctbG9jYWxlLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL3NlY3VyZWQtY29udGVudC9zZWN1cmVkLWNvbnRlbnQuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvZnVuZC1wZXJmb3JtYW5jZS9jb21wYXJlLW92ZXJsYXkvY29tcGFyZS1vdmVybGF5LmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2Z1bmQtcGVyZm9ybWFuY2UvaW52ZXNjby1vdmVybGF5L2ludmVzY28tb3ZlcmxheS5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9jb250YWN0LXdob2xlc2FsZXIvY29udGFjdC13aG9sZXNhbGVyLnNlcnZpY2UuanMiLCJjb21wb25lbnRzL2NvbnRhY3Qtd2hvbGVzYWxlci1sbGF2YS9jb250YWN0LXdob2xlc2FsZXItbGxhdmEuc2VydmljZS5qcyIsImNvbXBvbmVudHMvZm9ybS1hc2stY3VzdG9tZXItc2VydmljZS9hc2stY3VzdG9tZXItc2VydmljZS5zZXJ2aWNlLmpzIiwiY29tcG9uZW50cy9mb3JtLWNsYWltL2NsYWltLnNlcnZpY2UuanMiLCJjb21wb25lbnRzL2Zvcm0tY29udGFjdC9jb250YWN0LnNlcnZpY2UuanMiLCJjb21wb25lbnRzL2Zvcm0tY29udGFjdC11cy1ncC9jb250YWN0LXVzLWdwLnNlcnZpY2UuanMiLCJjb21wb25lbnRzL2Zvcm0tZGlzYWJpbGl0eS13YWl2ZXIvZGlzYWJpbGl0eS13YWl2ZXIuc2VydmljZS5qcyIsImNvbXBvbmVudHMvZm9ybS1kcmlua2VyLWJpZGRsZS9kcmlua2VyLWJpZGRsZS5zZXJ2aWNlLmpzIiwiY29tcG9uZW50cy9mb3JtLWZhYS9yZXF1ZXN0LWluZm8uc2VydmljZS5qcyIsImNvbXBvbmVudHMvZm9ybS1mcmF1ZC1yZXBvcnRpbmcvZnJhdWQtcmVwb3J0aW5nLnNlcnZpY2UuanMiLCJjb21wb25lbnRzL2Zvcm0tam9pbi1sZm4vaG93LXRvLWdldHN0YXJ0ZWQuc2VydmljZS5qcyIsImNvbXBvbmVudHMvZm9ybS1saWZlLWluc3VyYW5jZS1kZWF0aC9saWZlLWxuc3VyYW5jZS1kZWF0aC5zZXJ2aWNlLmpzIiwiY29tcG9uZW50cy9mb3JtLWxvbmctdGVybS1jYXJlL2xvbmctdGVybS1jYXJlLnNlcnZpY2UuanMiLCJjb21wb25lbnRzL2Zvcm0tcmVnaXN0ZXItc3VwcGxpZXIvcmVnaXN0ZXItc3VwcGxpZXIuc2VydmljZS5qcyIsImNvbXBvbmVudHMvZm9ybS1sb3N0LXBvbGljeS1maW5kZXIvbG9zdC1wb2xpY3ktZmluZGVyLnNlcnZpY2UuanMiLCJjb21wb25lbnRzL2Zvcm0tc2VjdXJpdHktcmVwb3J0aW5nL3NlY3VyaXR5LXJlcG9ydGluZy5zZXJ2aWNlLmpzIiwiY29tcG9uZW50cy9mb3JtLXNwYW5pc2gtY29udGFjdC9zcGFuaXNoLWNvbnRhY3Quc2VydmljZS5qcyIsImNvbXBvbmVudHMvZnVuZC1wZXJmb3JtYW5jZS9mdW5kLXBlcmZvcm1hbmNlLnNlcnZpY2UuanMiLCJjb21wb25lbnRzL2hpc3RvcmljYWwtcHJpY2VzL2hpc3RvcmljYWwtcHJpY2VzLnNlcnZpY2UuanMiLCJjb21wb25lbnRzL2luc2lkZXItdHJhZGluZy9pbnNpZGVyLXRyYWRpbmcuc2VydmljZS5qcyIsImNvbXBvbmVudHMvbGlmZS1leHBlY3RhbmN5LWNhbGMvbGlmZS1leHBlY3RhbmNlLWNhbGMuc2VydmljZS5qcyIsImNvbXBvbmVudHMvc2VhcmNoL3NlYXJjaC5zZXJ2aWNlLmpzIiwiY29tcG9uZW50cy9zZWMtZmlsaW5ncy9zZWMtZmlsaW5ncy5zZXJ2aWNlLmpzIiwiY29yZS9nb29nbGUtbWFwL2dvb2dsZS1tYXAtdXRpbC5zZXJ2aWNlLmpzIiwiY29yZS9sZmctY29yZS1tb2R1bGUvbGZnLWNvbW1vbi5zZXJ2aWNlLmpzIiwiY29yZS9sZmctY29yZS1tb2R1bGUvbGZnLXJlc3Quc2VydmljZS5qcyIsImNvbXBvbmVudHMvZm9ybS1qb2luLWxmbi9qb2luLWxmbi5kaXJlY3RpdmUuanMiLCJjb21wb25lbnRzL2Zvcm0tbGZzLXJlZy9zdHJlZXQtc2NhcGUtZm9ybS5kaXJlY3RpdmUuanMiLCJjb21wb25lbnRzL2Z1bmQtcGVyZm9ybWFuY2UvZnVuZC1wZXJmb3JtYW5jZS5kaXJlY3RpdmUuanMiLCJjb3JlL2hlYWRlci1mb290ZXIvYWxpZ24tbWVudS5kaXJlY3RpdmUuanMiLCJjb3JlL2hlYWRlci1mb290ZXIvbWVudS1hbmNob3IuZGlyZWN0aXZlLmpzIiwiY29yZS9oZWFkZXItZm9vdGVyL21lbnUtZHJpbGwtZG93bi5kaXJlY3RpdmUuanMiLCJjb3JlL2hlYWRlci1mb290ZXIvcmVnaXN0ZXItZHJvcGRvd24uZGlyZWN0aXZlLmpzIiwiY29yZS9oZWFkZXItZm9vdGVyL3JlZ2lzdGVyLXRvb2x0aXAuZGlyZWN0aXZlLmpzIiwiY29yZS9oZWFkZXItZm9vdGVyL3dyYXAtbGluay13aXRoLWljb24uZGlyZWN0aXZlLmpzIiwic2hhcmVkL2xmZy1zaGFyZWQtbW9kdWxlL2FzeW5jLWNvbXBvbmVudC5kaXJlY3RpdmUuanMiLCJjb3JlL2NvbnN0YW50LmpzIiwiY29yZS9tYWluLmpzIiwic2hhcmVkL3VuaXF1ZWlkLmpzIiwiY29tcG9uZW50cy9jYWxsb3V0LWdyaWQtZmlsdGVyL2NhbGxvdXQtZ3JpZC1maWx0ZXIuanMiLCJjb21wb25lbnRzL2NvcnJlc3BvbmRlbnQvY29yc3B0LW5ldHdvcmtieS1zdGF0ZS5qcyIsImNvbXBvbmVudHMvZm9ybXMtbG9uZy10ZXJtLWNhcmUvbG9uZy10ZXJtLWNhcmUtZm9ybXMtY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvcGFnZS10aW1lbGluZS9wYWdlLXRpbWVsaW5lLmpzIiwiY29tcG9uZW50cy93aGF0cy1uZXctb3ZlcmxheS93aGF0cy1uZXctb3ZlcmxheS5qcyIsImNvcmUvYnJpZ2h0Y292ZS9icmlnaHRjb3ZlLmpzIiwiY29yZS9sb2dpbi1yZWdpc3Rlci9sb2dpbi1yZWdpc3Rlci5qcyIsInNoYXJlZC9hY2NvcmRpb24vYWNjb3JkaW9uLmpzIiwic2hhcmVkL2JyZWFrcG9pbnRzLXN1cHBvcnQvYnJlYWtwb2ludHMtc3VwcG9ydC5qcyIsInNoYXJlZC9iYWNrLXRvLXRvcC9iYWNrLXRvLXRvcC5qcyIsInNoYXJlZC9jb250ZW50LWV4dGVuZGVyL2NvbnRlbnQtZXh0ZW5kZXIuanMiLCJzaGFyZWQvY3VzdG9tLWRyb3Bkb3duL2N1c3RvbS1kcm9wZG93bi5qcyIsInNoYXJlZC9jdXN0b20tbXVsdGlzZWxlY3QtZHJvcGRvd24vY3VzdG9tLW11bHRpc2VsZWN0LWRyb3Bkb3duLmpzIiwic2hhcmVkL2N1c3RvbS10b29sdGlwL2N1c3RvbS10b29sdGlwLmpzIiwic2hhcmVkL2N1c3RvbS10b3BuYXYtY2Fyb3VzZWwvY3VzdG9tLXRvcG5hdi1jYXJvdXNlbC5qcyIsInNoYXJlZC9leHBhbmRhYmxlLXNlYXJjaC1maWVsZC9leHBhbmRhYmxlLXNlYXJjaC1maWVsZC5qcyIsInNoYXJlZC9pbWFnZS1maWxsL2ltYWdlLWZpbGwuanMiLCJzaGFyZWQvbGlzdC1wdWxsZG93bi9saXN0LXB1bGxkb3duLmpzIiwic2hhcmVkL3JlY2FwdGNoYS9yZWNhcHRjaGEtdXRpbHMuanMiLCJzaGFyZWQvY3VzdG9tLXNpbmdsZS1zaWRlbmF2LWNhcm91c2VsL2N1c3RvbS1zaW5nbGUtc2lkZW5hdi1jYXJvdXNlbC5qcyIsInNoYXJlZC90YWJzZXQvdGFic2V0LWxvYWQtbW9yZS5qcyIsInNoYXJlZC90YWJzZXQvdGFic2V0LmpzIl0sIm5hbWVzIjpbIlZhbGlkYXRlRHJvcCIsImNvbnRUeXBlIiwiY3RybE5hbWUiLCJldmVudCIsImN1cnJlbnREYXRhIiwiJCIsImlkIiwidmFsIiwicGFzdGVkRGF0YSIsInR5cGUiLCJkYXRhVHJhbnNmZXIiLCJnZXREYXRhIiwiUHJvY2Vzc0RhdGFGb3JDb3JyZWN0aW9uIiwiJHNjb3BlIiwiZ2V0U2NvcGUiLCJhc2tDdXN0b21lclNlcnZpY2VGb3JtVmFsdWUiLCJjaGFyTGVuZ3RoIiwiYXR0ciIsImxlbmd0aCIsInNsaWNlIiwiJGFwcGx5IiwicHJldmVudERlZmF1bHQiLCJzZWwiLCJhbmd1bGFyIiwiZWxlbWVudCIsInNjb3BlIiwiY2hhbmdlRGV0YWlscyIsInNpbGRlQ291bnQiLCJ3aW5kb3ciLCJ3aWR0aCIsImhpZGVTdW1tYXJ5IiwibmV4dENvdW50IiwiY3NzIiwibmV4dEFsbCIsInByZXZBbGwiLCJoaWRlIiwic2hvdyIsInNob3dTdW1tYXJ5IiwiaW5uZXJXaWR0aCIsImFkZENsYXNzIiwiZmFkZU91dCIsInRvZ2dsZSIsImRpcmVjdGlvbiIsInJlbW92ZUNsYXNzIiwiZmFkZUluIiwic2hvd0hpZGVTdW1tYXJ5IiwiaGFzQ2xhc3MiLCJsb3N0UG9saWN5RGF0YSIsImNoYW5nZVR5cGUiLCJjb21tb25GdW5jdGlvbnMiLCJpc051bWJlciIsImNoYW5nZVNTTlR5cGUiLCJzZXRUaW1lb3V0Iiwic2hvd1NzbiIsImdldE1vYmlsZU9wZXJhdGluZ1N5c3RlbSIsInVzZXJBZ2VudCIsIm5hdmlnYXRvciIsInZlbmRvciIsIm9wZXJhIiwibWF0Y2giLCJmYW5jeWJveCIsImF1dG9TaXplIiwiYmVmb3JlTG9hZCIsInRoaXMiLCJtaW5IZWlnaHQiLCJkZXZpY2VTdGF0ZSIsImhlaWdodCIsInVuZGVmaW5lZCIsInBhcnNlSW50IiwiZGF0YSIsInNjcm9sbFRvcCIsImhlbHBlcnMiLCJvdmVybGF5IiwiY2xvc2VDbGljayIsInRpdGxlIiwiYmVmb3JlQ2xvc2UiLCJjYWxsQ2xvc2VBbmFseXRpY3MiLCJhZnRlckxvYWQiLCJjdXJ2ZWRGYW5jeU1vZGFsIiwicGFkZGluZyIsIm1hcmdpbiIsImlzTGxhdmFGYW5jeSIsImV2ZW50X2FjdGlvbiIsImV2ZW50X25hbWUiLCJldmVudF90eXBlIiwiZXZlbnRfdmVyc2lvbiIsImRpc3BsYXlTdWNjZXNzTXNnIiwidXRhZyIsImxpbmsiLCJtb2RhbFNjcm9sbCIsImZhbmN5IiwibW9kYWxDaGVja0ludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJmaW5kIiwiY2hlY2tJRSIsImNsZWFySW50ZXJ2YWwiLCJlbGUiLCJmYW5jeVdpZHRoIiwiZmFuY3lIZWlnaHQiLCJwYXJlbnRzIiwiaXNJRSIsInZlcnNpb24iLCJjb21wYXJpc29uIiwiJGRpdiIsImFwcGVuZFRvIiwiaHRtbCIsImllVGVzdCIsInJlbW92ZSIsImluZGV4T2YiLCJhcHBWZXJzaW9uIiwiVmFsaWRhdGVDaGFyIiwiZSIsInRhcmdldCIsInZhbHVlIiwibmV3RGF0YSIsInRvdGFsTGVuIiwiaUNudCIsInZhbGlkYXRlX2FscGhhIiwiY2hhckF0IiwidmFsaWRhdGVfYWxwaGFOdW0iLCJ2YWxpZGF0ZV9pbml0aWFsIiwidmFsaWRhdGVfYWRkbmwiLCJ2YWxpZGF0ZV9jb250cmFjdCIsInZhbGlkYXRlX3NzbiIsImxldHRlcnNfRGFzaF9BcG9zdHJvcGhlX0FjY2VudHNfT25seSIsImV2dCIsIndoaWNoIiwia2V5Q29kZSIsImtleSIsImNoYXJUb1ZhbGlkYXRlIiwiY2hhckNvZGUiLCJjaGFyQ29kZUF0IiwidGVzdCIsImxldHRlcnNfQWNjZW50c19Pbmx5IiwiYWxwaGFudW1fRGFzaF9BcG9zdHJvcGhlX0FjY2VudHNfT25seSIsImFkZG5sX0luZm9fT25seSIsImNvbnRyYWN0X051bWJlcl9Pbmx5IiwidHJpbSIsInNldEh1YjJDb29raWUiLCJuYW1lIiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJkb2N1bWVudCIsImNvb2tpZSIsImVzY2FwZSIsInRvR01UU3RyaW5nIiwic2V0Q29va2llIiwiY25hbWUiLCJjdmFsdWUiLCJleGRheXMiLCJkIiwiRGF0ZSIsInNldFRpbWUiLCJnZXRUaW1lIiwidG9VVENTdHJpbmciLCJzZXRTZXNzaW9uQ29va2llIiwidXBkYXRlQ29va2llIiwiZ2V0Q29va2llIiwiY2EiLCJzcGxpdCIsImkiLCJjIiwic3Vic3RyaW5nIiwic2V0VXNlckNvb2tpZSIsInVzZXJOYW1lIiwibG9jYXRpb24iLCJocmVmIiwiaHViRG9tYWluIiwidXBkYXRlQW5hbHl0aWNzIiwiZGF0YUluZm8iLCJldnRUeXBlRmxhZyIsImV2ZW50TmFtZSIsImxpbmtUZXh0IiwidGV4dCIsImFzc2V0SWQiLCJldmVudF9hc3NldGlkIiwiZXZlbnRBY3Rpb24iLCJldmVudFR5cGUiLCJlYWNoIiwiaW5kZXgiLCJwYXJlbnQiLCJwYXJlbnRJZCIsImV2ZW50X3BhcmVudGlkIiwiZXZlbnRWZXJzaW9uIiwibGlua0FuYWx5dGljcyIsImxpbmtzIiwib24iLCJhcHBseUV4cGFuZENvbGxhcHNlQnV0dG9uIiwiZWwiLCJzaWJsaW5ncyIsImlzIiwidXBkYXRlU3RhdHVzIiwicG9wdXBSZWZlcmVuY2UiLCJjbG9zZWQiLCJjMmNDbGlja0NvdW50IiwidGltZXIiLCJhbm51aXR5V2luZG93U3RhdHVzIiwiYW5udWl0eUNoYXRXaW5kb3ciLCJBYzJjQ2xpY2tDb3VudCIsImNoZWNrZXIiLCJjaGVja2VyVmFsdWUiLCJjbGlja0NvdW50Q2hlY2tlciIsIlN0cmluZyIsImNoZWNrZXJBbm51aXR5IiwiY2FsY0RhdGUiLCJjdXN0RGF0ZSIsImN1c3RNb250aCIsImN1c3RZZWFyIiwiY3VzdEhpZGRuIiwiZGl2RGF0ZSIsImRpdk1vbnRoIiwiZGl2WWVhciIsImVyciIsInNlbGVjdGVkRGF5VmFsdWUiLCJpc1ZhbGlkRGF0ZSIsImxhc3REYXlPZk1vbnRoIiwiZGl2TW9udGhzIiwibnciLCJjdXJZZWFyIiwiZ2V0RnVsbFllYXIiLCJsaSIsImdldERhdGUiLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJzdWJtaXRDbGlja2VkIiwiZWxlbVNjb3AiLCJub3RpZmllckRvYiIsImNsYWltSW5mb0Zvcm1EYXRhIiwiZGVjZWFzZWRQZXJET0IiLCJkaXNhYmlsaXR5V2FpdmVyRGF0YSIsImluc3VyZWREYXRlT2ZCaXJ0aCIsImluc3VyZWREaXNhYmlsaXR5RGF0ZSIsImxpZmVJbnN1cmFuY2VEZWF0aERhdGEiLCJpbnN1cmVkRG9iIiwiaW5zdXJlZERlYXRoRGF0ZSIsImxvbmdUZXJtQ2FyZURhdGEiLCJpbnN1cmVkQ2FyZU9uc2V0IiwiZHQiLCJjYXJvdXNlbHJlc2l6ZSIsImFyclBhcmVudFdpZCIsIm91dGVyV2lkdGgiLCJjYXJvdXNlbEFyclRvcCIsIm1hcmdpbkxlZnQiLCIkY2Fyb3VzZWxDb250V2lkTGlzdCIsImFyclBhcmVudFdpZGhhbGYiLCJsZWZ0IiwibWFyZ2luLWxlZnQiLCJjb3VudCIsIndpbmRXaWQiLCJzaG93TGlzdCIsIm1vYmlsZVdpZCIsInRhYmxldFdpZCIsInNob3dNYXJnIiwidXBkYXRlZFdpZCIsIiRjYXJvdXNlbENvbnRXaWQiLCJjYXJvdXNlbENvbnRVTFdpZCIsImNhcm91c2VsQ29udFdpZExpc3RMZW5ndGgiLCJwcm9taXNlIiwiZG9uZSIsImNhcm91c2VsRmlyc3RJbWdIZ3QiLCJjYXJvdXNlbEZpcnN0SW1nTXRvcCIsIm91dGVySGVpZ2h0IiwidmlzaWJpbGl0eSIsInRvcCIsImNoZWNrRmxvYXRpbmdMYWJlbHMiLCJhcHBseUZsb2F0aW5nTGFiZWxzIiwic2VsZWN0ZWRJbmRleCIsImxmZ0VscUluaXQiLCJpc0xvZ2luRm9ybSIsImN1c3RvbVZhbCIsImVscUdVSUQiLCJob3N0IiwiZWxxTG9va3VwS2V5IiwibG9jYWxTdG9yYWdlIiwiZWxxVXNlckRhdGEiLCJKU09OIiwicGFyc2UiLCJhbHRFbHFVc2VyRGF0YSIsImZvcm1OYW1lIiwiZWxxRm9ybUZvcm1hdCIsImZpZWxkVHh0IiwicmVwbGFjZSIsIm5leHQiLCJhZnRlciIsImxpY1Byb2ZTZWxlY3RJRCIsInJpYVNlbGVjdElEIiwiZmlyc3RPcHRpb25UeHQiLCJvcHRpb25zIiwiZWxxUmVjYXB0Y2hhRW5hYmxlZCIsImJlZm9yZSIsInJ3ZFJlQ2FwdGNoYURhdGEiLCJtcSIsIm1hdGNoTWVkaWEiLCJmb3JtIiwid2lkdGhDb250YWluZXIiLCJtYXhTY2FsZSIsImNoZWNrRm9yUmVDYXB0Y2hhUmVuZGVyIiwiY2hpbGRyZW4iLCJSZUNhcHRjaGFVdGlscyIsInJ3ZFJlQ2FwdGNoYSIsImFwcGVuZCIsImVscUZvcm1CaW5kaW5nIiwicGhWYWxpZGF0aW9uIiwicGgiLCJudW1iZXIiLCJlbHFMT0IiLCJlbHFjaGVja1NoYXJlZEVtYWlscyIsImVscUFsbG93U3VibWl0IiwibG9ja1N1Ym1pdCIsInJlbW92ZUF0dHIiLCJjdXJyZW50VGFyZ2V0IiwicGhGbGQiLCJjdXJyRWxxRm9ybSIsImNoZWNrRm9yRGlzYWJsZWRTdWJtaXQiLCJmaWVsZCIsInRoaXNGb3JtIiwiY29uc29sZSIsImxvZyIsImRhdGFTdG9yZSIsImVtYWlsIiwiZG9FbG9xdWFMb29rdXAiLCJzaG93TWluaUxvYWRlciIsImNsZWFyVGltZW91dCIsIm5vVXNlckZvdW5kVGltZW91dCIsImhpZGVNaW5pTG9hZGVyIiwiY29udGFjdElEIiwiaW5wdXRGaXJzdE5hbWUiLCJ0b0xvd2VyQ2FzZSIsImlucHV0TGFzdE5hbWUiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsInVzZUV4aXN0aW5nIiwic2hvd0xGR0Vycm9yTXNnIiwiaW5wdXRFbWFpbCIsInBvcFNoYXJlZEVtYWlsT3ZlcmxheSIsImhpZGVMRkdFcnJvck1zZyIsInRyaWdnZXIiLCJhbHRFbWFpbFJhZGlvSFRNTCIsIndyYXAiLCJwcmVwZW5kIiwiY2hlY2tSZWNhcHRjaGEiLCJlbHFSZWNhcHRjaGFWYWwiLCJsYXN0UmVjYXB0Y2hhVmFsIiwic2Vzc2lvblN0b3JhZ2UiLCJlbHFSZWNhcHRjaGEiLCJyZUNhcHRjaGFEYXRhIiwiU0VSVklDRV9JRCIsIkNBUFRDSEEiLCJsb2FkZXJTaG93IiwiYWpheCIsInVybCIsInN0cmluZ2lmeSIsImRhdGFUeXBlIiwiY29udGVudFR5cGUiLCJhc3luYyIsInN0YXR1cyIsImNhcHRjaGFTdGF0dXMiLCJsb2FkZXJIaWRlIiwic2V0SXRlbSIsInNldEVscUNvbXBsZXRpb24iLCJlcnJvckRlc2NyaXB0aW9uIiwiZGlzYWJsZUhUTUxTdWJtaXQiLCJibHVyIiwiY2hhbmdlIiwiY2hlY2tGb3JDYXB0Y2hhRXJyb3IiLCJjYXB0Y2hhUmVzIiwiaXNMaWNlbnNlZCIsImxpY2Vuc2VDaGsiLCJlbnRlcmVkRmlyc3ROYW1lIiwiZW50ZXJlZExhc3ROYW1lIiwiY29tcGFueSIsImV2ZW50X3N0YXR1cyIsInN1Ym1pdCIsImFsdEVtYWlsIiwibGFzdENhbXBhaWduIiwiX2VscVEiLCJwdXNoIiwiU2V0RWxxQ29udGVudCIsIkdldEVscUNvbnRlbnRQZXJzb25hbGl6YXRpb25WYWx1ZSIsInBhc3NEYXRhIiwidXNlckRhdGEiLCJjYW1wYWlnbiIsInBhcmFtU3RyIiwiYm91bmNlTGlua0ZvdW5kIiwibGlua1VybCIsInF1ZXJ5U3RyIiwiZWxxX2NvbXBsZXRlIiwiZ2V0SXRlbSIsImVscURhdGFJbmZvIiwidXRtX2NhbXBhaWduX3VkbyIsImVscWlkX3VkbyIsIm1zZyIsInRvcFBvcyIsIm9mZnNldCIsImRvQm91bmNlIiwic2VhcmNoIiwiY2hlY2tGb3JVdGFnIiwibW9kdWxlIiwiZGlyZWN0aXZlIiwiJHdpbmRvdyIsInJlc3RyaWN0IiwiY3VzdG9tU2xpZGVyIiwic2V0TWF4TGVnZW5kVmFsdWUiLCJtYXhWYWx1ZSIsIm1heExlZ2VuZFZhbHVlIiwic2V0TG9jYWxWYWx1ZXMiLCJtaW5WYWx1ZSIsInZhbHVlRGlmZiIsIm1pblJhbmdlIiwibWF4UmFuZ2UiLCJyYW5nZURpZmYiLCJjYWxCYXJHcmFkaWVudCIsInRpY2tXaWR0aCIsInRpY2tFbGUiLCJvZmZzZXRXaWR0aCIsIm1pblZhbHVlUmFuZ2UiLCJ0aWNrcyIsIm1pblZhbHVlVGljayIsIm1heFZhbHVlUmFuZ2UiLCJtYXhWYWx1ZVRpY2siLCJtYXhSYW5nZVRpY2siLCJiYXJHcmFkaWVudCIsImJhY2tncm91bmQiLCJjYWxUaWNrc1Bvc2l0aW9uIiwiYmFyV2lkdGgiLCJjdXN0b21TbGlkZXJCYXJFbGUiLCJNYXRoIiwicm91bmQiLCJ2YWx1ZVRpY2siLCJjYWxMZWdlbmRzUG9zIiwibGVnZW5kV2lkdGgiLCJsZWdlbmRFbGUiLCJsZWdlbmRzIiwibWluUmFuZ2VMZWdlbmQiLCJtaW5WYWx1ZUxlZ2VuZCIsInRleHQtYWxpZ24iLCJtYXhWYWx1ZUxlZ2VuZCIsIm1heFJhbmdlTGVnZW5kIiwiZGlzcGxheSIsImNhbFZhbEJveFBvcyIsImljb25XaWR0aCIsInZhbEJveEVsZSIsInZhbFRleHRFbGUiLCJ2YWxUZXh0SWNvbkVsZSIsInZhbHVlQm94V2lkdGgiLCJ2YWx1ZVRleHRTdHlsZSIsInBhZGRpbmctcmlnaHQiLCJ2YWx1ZUJveFN0eWxlIiwidmFsdWVCb3hQb3MiLCJmbG9hdCIsInBhZGRpbmctbGVmdCIsInZhbHVlVGV4dEljb25TdHlsZSIsImNhbFJhbmdlVGV4dFBvcyIsInJhbmdlVGV4dFdpZHRoIiwicmFuZ2VUZXh0RWxlIiwibWluVmFsUG9zIiwibWF4VmFsUG9zIiwicmFuZ2VUZXh0TGVmdFBvcyIsInJhbmdlVGV4dFN0eWxlIiwiJHdhdGNoIiwibmV3VmFsdWUiLCJvbGRWYWx1ZSIsInRlbXBsYXRlIiwiY29udHJvbGxlciIsImJsYWNrT3ZlcmxheSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJsZmdIZWFkZXJWTSIsInNob3dDb250YWN0U3VwcG9ydCIsInNob3dTZWFyY2giLCJzaG93TWVnYW1lbnUiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0b2dnbGVNZW51IiwibWVudVR5cGUiLCJub1RyYW5zaXRpb24iLCJtb3VzZXVwIiwiaGFzIiwiaW5pdCIsImF1ZGllbmNlX3RvcF9uYXZfaWQiLCJjb250YWN0U3VwcG9ydEV4cENvbCIsInNlYXJjaEV4cENvbCIsIm1lZ2FNZW51RXhwQ29sIiwic2VhcmNoUGFnZVVSTCIsInNlYXJjaFBhcmFtIiwiaW5wU2VhcmNoIiwiJGV2ZW50IiwiYXVkaWVuY2VNZW51RXhwQ29sIiwic2hvd0F1ZGllbmNlTWVudSIsImF1ZGllbmNlQWdlU2VsZWN0b3IiLCJzaG93QXVkaWVuY2VBZ2VTZWxlY3RvciIsInN1cHBvcnRNZW51RXhwQ29sIiwic3VwcG9ydG1lbnUiLCJwYXJlbnRFbGVtZW50IiwiY29udGFpbnMiLCJzdXBwb3J0TWVudUV4cENvbF9uZXciLCJtZW51Q2xpY2siLCJjdXJyTWVudSIsIm1lbnVFeHBDb2wiLCJtZW51TGlzdCIsIm1lbnUiLCJsZmdhcHAiLCJyYWRpb0VsZW1lbnQiLCJmb2N1cyIsImNvbnRhY3RXaG9sZXNhbGVyQ29udHJvbGxlciIsIiR0aW1lb3V0IiwiY29udGFjdFdob2xlc2FsZXJTZXJ2aWNlIiwiaXNUd29aaXBDb2RlIiwiYm9vbGVhblZhbHVlIiwiaXNDb3JyZWN0WmlwRm9ybWF0IiwidmFsaWRGb3JtIiwiaXNQcmVwcm9kIiwidmFsaWRhdGVSZUNhcHRjaGEiLCJpc0VtYWlsVmFsaWQiLCJyZUNhcHRjaGFFcnJvciIsImNvbnRhY3Rfd2hvbGVzYWxlcl9mb3JtIiwiJHZhbGlkIiwiZ2V0Rm9ybURhdGEiLCJyZXF1ZXN0Qm9keSIsImRpc3BsYXlFcnJvck1zZyIsImRpc3BsYXlFcnJvciIsImlzUHJlcHJvZEVudiIsIndhcm5pbmdNc2ciLCJmb3JtRmFjdG9yIiwicmVjYXB0Y2hhU2l0ZUtleSIsImdsb2JhbENvbnN0YW50IiwicmVxdWVzdEluZm9EYXRhIiwiTElTRGF0YSIsInNlc3Npb25MSVNEYXRhIiwicHJpbWFyeUJlbmVmaXQiLCJzZWNvbmRhcnlCZW5lZml0IiwiYW5zd2VyMSIsImFuc3dlcjIiLCJhbnN3ZXIzIiwiYW5zd2VyNCIsIk9iamVjdCIsImFzc2lnbiIsImlzRm9ybVN1Ym1pdHRlZCIsImRpc3BsYXlXYXJuaW5nTXNnIiwicGFyYW0iLCJ2YWxpZGF0ZUVtYWlsIiwiZW1haWxWYWx1ZSIsIkVNQUlMX1JFR0VYUCIsIm51bWJlckZvcm1hdCIsImlucHV0VmFsdWUiLCJ6aXBPclBob25lIiwicGF0dCIsImlzQ29ycmVjdEZvcm1hdCIsInN0ciIsIlJlZ0V4cCIsInBhdHRaaXAiLCJpbnNlcnRBdENhcmV0IiwiaWRlbnRpdHkiLCJlbWFpbElEIiwiZmlybU5hbWUiLCJwaG9uZSIsInBob25lTnVtYmVyIiwiemlwQ29kZSIsImdSZWNhcHRjaGFWYWwiLCJnUmVjYXB0Y2hhUmVzcG9uc2UiLCJzdWJtaXRDb250YWN0V2hvbGVzYWxlckZvcm0iLCJyZXNwb25zZSIsImRhdGFSZXNwb25zZSIsInJlc3BvbnNlU3RhdHVzQ29kZSIsImlzU3VjY2VzcyIsImVycm9yTXNnIiwicHJvZHVjdF9uYW1lIiwiY29udGFjdFdob2xlc2FsZXJMbGF2YUNvbnRyb2xsZXIiLCJjb250YWN0V2hvbGVzYWxlckxsYXZhU2VydmljZSIsInJlYWR5IiwiaXNGb3JtVG91Y2hlZCIsImlzQ29ycmVjdFBob25lRm9ybWF0IiwiY29udGFjdE51bWJlciIsImZpbmFuY2lhbFBybyIsIlJlZGlyZWN0VG9VUkwiLCJvcmlnaW4iLCJsYW5kaW5nVXJsIiwibGxhdmFSZWRpcmVjdCIsInN1Ym1pdExsYXZhQ29udGFjdFdob2xlc2FsZXJGb3JtIiwiZ29vZ2xlTWFwU2VydmljZSIsInJlc3RTZXJ2aWNlIiwiY29tbW9uU2VydmljZSIsIiRmaWx0ZXIiLCJzdGlja3lNYXAiLCJtYXRjaGVzIiwic3RpY2t5RWxlIiwic3R5bGUiLCJwb3NpdGlvbiIsInN0aWNreUVsZUhlaWdodCIsIkFycmF5IiwicHJvdG90eXBlIiwiY2FsbCIsImZvckVhY2giLCJjaGlsZEVsZSIsImNsaWVudEhlaWdodCIsInBhcmVudEVsZSIsInBhcmVudEVsZUhlaWdodCIsInNjcm9sbFkiLCJjb250VG9wIiwib2Zmc2V0VG9wIiwic3RpY2t5VG9wIiwibm9uU3RpY2t5TWFwIiwiZmFhVk0iLCJsaW1pdFRvIiwicmVzZXQiLCJyZXN1bHRzTW9kZSIsInNlYXJjaFJlc3VsdHMiLCJmaWx0ZXJPcHRpb25zIiwiZGFmcCIsInBmbWZsdGMiLCJwbWZ3bGkiLCJwb213Iiwic2ZjIiwibW1yaWwiLCJmaWx0ZXJUZXh0IiwiZmlsdGVyQnRuVGV4dCIsInNlYXJjaEJ5UGgiLCJzZWFyY2hCeSIsImxvYWRNb3JlIiwidHJpZ2dlck1hcmtlciIsImFkdmlzb3IiLCJsaXN0U2Nyb2xsIiwiaXNWYWxpZFNlYXJjaEZvcm0iLCJ0cmlnZ2VyQW5hbHl0aWNzIiwiZXZlbnRfcG9zaXRpb24iLCJ0cmlnZ2VyQW5hbHl0aWNzV2l0aERpc3RhbmNlIiwiZGlzdGFuY2UiLCJldmVudF9yZXN1bHRzIiwiY2xpY2tFbnRlciIsInNlYXJjaEFkdmlzb3IiLCJjbGlja0VudGVyQ29udGFjdFlvdSIsImlzVmFsaWRDb250YWN0Rm9ybSIsImNvbnRhY3RZb3UiLCJwaG9uZU5vUHRybiIsInBob25lTm8iLCJ1cGRhdGVSZXN1bHRzIiwibm9SZXN1bHRzIiwibm9SZXN1bHRzTW9kZSIsImdlb2NvZGVQcm9taXNlIiwiZ2VvY29kZUxhdExuZyIsImlsbGVnYWxDaHJSZWdleCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImZpbHRlciIsInBvc3QiLCJxIiwiYWdlbnRzIiwibWFwSW5pdCIsInJlc3VsdHMiLCJ2bSIsImxpc3RQcm50SWQiLCJsaXN0Q2hpbGROYW1lIiwiaW50ZXJ2YWwiLCJpbml0TWFwIiwib25zY3JvbGwiLCJyZXNpemUiLCJmaWx0ZXJPcHRzIiwiZm9ybV9tYyIsImV2ZW50X3NlYXJjaF90ZXJtcyIsImV2ZW50X3NlYXJjaF9yZXN1bHRzIiwiYW5udWFsVGV4dFBhdGgiLCJsZmdTaXRlUGF0aCIsImFubnVhbEZpbGluZ3NQYXRoIiwiYW5udWFsVGV4dFBhdGgyMDAxIiwiYW5udWFsUGRmUGF0aCIsImFza0N1c3RvbWVyU2VydmljZVNlcnZpY2VzIiwiZ2V0Q2FwdGNoYURhdGEiLCJwcm9kdWN0IiwicHJvZHVjdE5hbWUiLCJjdXN0b21lclNlcnZpY2VEYXRhIiwidXNlcm5hbWUiLCJxdWVzdGlvbiIsImNvbnRhY3RCeSIsImNvbnRhY3RtZXRob2QiLCJwb2xpY3lOdW1iZXIiLCJwb2xpY3lDb250YWN0IiwidG9waWMiLCJ0aW1lIiwiZGlzcGxheUVyciIsInRpc0VyclZhbCIsImVxIiwic3RvcCIsImFuaW1hdGUiLCJjYXBjaGFWYWwiLCJpc0NhcHRjaGFBdmFpbCIsInRpbWVOZWVkZWQiLCJ0aW1lRmxhZyIsImFza0N1c3RvbWVyU2VydmljZUZvcm0iLCJtYWlsT3JOdW0iLCJpc1ZhaWxkTWFpbCIsImlzUHJvZHVjdENsaWNrZWQiLCJpc0NvbnRhY3RNZXRob2RDbGlja2VkIiwiaXNTdWJtaXRDbGlja2VkIiwiZW1haWxGb3JtYXQiLCJpc1Bob25lU2VsZWN0ZWQiLCJ0b3BpY0ZsYWciLCJ1dGFnX2RhdGEiLCJjb250YWN0TWV0aG9kIiwicHJvZHVjdE9iaiIsIkFMTElBTkNFIiwiTVVMVElGVU5EIiwiR1ZBIiwiRElSRUNUT1IiLCJTTUFSVEZVVFVSRSIsIkxFR0FDWSIsIm1haWwiLCJjaGVja1JhZGlvQnV0dG9uIiwiZGVmYXVsdFZhbHVlIiwiY29udGFjdE5hbWUiLCJjb21tb25SZXF1ZXN0IiwiY2hlY2tEcm9wVmFsaWRhdGlvbiIsImRyb3BWYWx1ZSIsImNvbW1vblJlcXVlc3RNb2R1bGUiLCJkcm9wRG93blZhbGlkYXRpb24iLCJmbGFnTmFtZSIsInNlbGVjdFBob25lIiwic2VsZWN0RW1haWwiLCJQaG9uZU51bSIsIlZhbGlkYXRlUGFzdGUiLCJhdHRyaWJ1dGVzIiwiY2xpcERhdGEiLCJjbGlwYm9hcmREYXRhIiwib3JpZ2luYWxFdmVudCIsIlVwZGF0ZUpTT04iLCJjb250YWN0Rm9ybU1ldGhvZCIsIiRlcnJvciIsImFza0N1c3RvbWVyU2VydmljZVBvc3QiLCJkYXRhQWpheCIsIkludmFsaWRGaWVsZHNTdHIiLCJzZXJ2aWNlUmVwb25zZU1lc3NhZ2UiLCJJbnZhbGlkRmllbGRzIiwidG9TdHJpbmciLCJpbnZhbGlkRmxhZyIsInRrc1BhZ2VVUkwiLCJwYWdpbmF0ZVNjcm9sbCIsIm5jQ21kTmV3Q2hhbGxlbmdlIiwidGFibGVWYWwiLCJmb3JtUG9zdFNlcnZpY2UiLCJpc0NvcnJlY3REZWNlYXNlZFppcEZvcm1hdCIsImNsYWltRm9ybURhdGEiLCJjbGFpbUZvcm1GYWN0b3IiLCJub3RpZmllck5hbWUiLCJub3RpZmllclJlbGF0aW9uc2hpcCIsInJlbGF0aW9uc2hpcEluc3VyZWQiLCJub3RpZmllclN0cmVldEFkZHJlc3MiLCJhZGRyZXNzIiwibm90aWZpZXJDaXR5IiwiY2l0eSIsIm5vdGlmaWVyU3RhdGUiLCJzdGF0ZSIsIm5vdGlmaWVyWmlwQ29kZSIsInppcCIsIm5vdGlmaWVyUHJlZmVycmVkUGhvbmUiLCJldmVQaG9OdW1iZXIiLCJub3RpZmllckVtYWlsIiwiZW1haWxBZGRyZXNzIiwiaW5zdXJlZE5hbWUiLCJkZWNlYXNlZFBlck5hbWUiLCJpbnN1cmVkUG9saWNpZXMiLCJkZWNlYXNlZFBlclBvbGljeU51bWJlciIsImluc3VyZWRMYXN0NFNTTiIsImRlY2Vhc2VkUGVyU1NOIiwiaW5zdXJlZE90aGVyUG9saWNpZXMiLCJpbnN1cmVkT3RoZXJQb2xpY2llc0RldGFpbCIsImluc3VyZWREaXNhYmlsaXR5Q2F1c2UiLCJpbnN1cmVkQmVuZWZpdENsYWltIiwiaW5zdXJlZENsYWltQ2F1c2UiLCJlQ29uc2VudEFjY2VwdGVkIiwiY2xhaW1JbmZvRm9ybSIsIkNhbGVuZGFyIiwiZGF0ZUlkIiwibW9udGhJZCIsInllYXJJZCIsImhpZGRlbklkIiwibnVtYmVyT2ZZZWFycyIsInN1Ym1pdEZsYWciLCJzdGF0ZUZsYWciLCJkb2JNb250aEZsYWciLCJwZXJzb25hbEluZm9ybWF0aW9uIiwiZGVjZWFzZWRQZXJJbmZvIiwiQWRkaXRpb25hbERldGFpbEZvcm1EYXRhIiwic3RhdGVWYWxpZGF0aW9uIiwiZG9iTW9udGhWYWxpZGF0aW9uIiwiZG9iTW9udGgiLCJkb2JEYXRlVmFsaWRhdGlvbiIsImRvYkRhdGUiLCJkb2JEYXRlRmxhZyIsImRvYlllYXJWYWxpZGF0aW9uIiwiZG9iWWVhciIsImRvYlllYXJGbGFnIiwiZG9iVmFsaWRhdGlvbiIsImRlY2Vhc2VkUGVyU3RhdGVWYWxpZGF0aW9uIiwiZGVjZWFzZWRQZXJTdGF0ZSIsImRlY2Vhc2VkUGVyU3RhdGVGbGFnIiwiY29udmVydEZvcm1EYXRhIiwiZGlzYWJsaXR5UGhvbmVOdW0iLCJkaXNwX25vbmUiLCJvcGVuUG9wVXAiLCJjYWxsQW5hbHl0aWMiLCJkb09uT3JpZW50YXRpb25DaGFuZ2UiLCJzY3JlZW4iLCJvcmllbnRhdGlvbiIsImhndCIsInN0b3BQcm9wYWdhdGlvbiIsImNoZWNrYm94IiwiZGF0YTEiLCJhZGRFdmVudExpc3RlbmVyIiwiaXNBY2NlcHQiLCJkYXRhMiIsImZvcm1Qb3N0RGF0YSIsImRhdGFSZXNwb25jZSIsInJlc2V0RGF0ZVBpY2tlciIsImNvbnRhY3RGb3JtU2VydmljZSIsImNvbnRhY3REYXRhIiwiY29udGFjdEZvcm0iLCJ2YWxpZGF0aW9uRXJyb3JTaG93IiwicmVzZXRWYWx1ZXMiLCJyZXNwZWN0VmFsdWUiLCJkb2luZ0F0Iiwib3JnYW5pemF0aW9uIiwiZmF4IiwiY29udGFjdEZvcm1QaG9uZU51bSIsImNoZWNrUmVzcGVjdCIsImNvbnRhY3RGb3JtU3VibWl0IiwiY29udGFjdFVzR3BTZXJ2aWNlcyIsImNvbnRhY3RVc0dwRGF0YSIsImNvbnRhY3R1c0dwRm9ybUZhY3RvciIsInVzZXJUeXBlIiwiY29udGFjdFVzR3BDb21tb24iLCJjaGVja0RhdGFFbXB0eSIsImNvbnRhY3RVc0dwRm9ybSIsImNvbnRhY3RVc01vZHVsZSIsInZhbHVlVHlwZSIsImNvbnRhY3R1c0dwUGhvbmVOdW0iLCJleHRlbmQiLCJpc0NvbnRhY3RVc0dwQ2xpY2tlZCIsInN1Ym1pdENvbnRhY3RVc0dwIiwiY29udGFjdFVzR3BJbmZvUG9zdCIsImVycm9yTWVzc2FnZSIsImRpc2FiaWxpdHlXYWl2ZXJDb250cmwiLCJkaXNhYmlsaXR5V2FpdmVyU2VydmljZXMiLCJpc0NvcnJlY3RJbnN1cmVkWmlwRm9ybWF0IiwiZGlzYWJpbGl0eVdhaXZlckZhY3RvciIsImluc3VyZWRSZWxhdGlvbnNoaXAiLCJjb21tb25EaXNhYmlsaXR5IiwiY2hlY2tEYXRhIiwibm90aWZpZXJFdmVuaW5nUGhvbmUiLCJpbnN1cmVkQ2F1c2VPZkRpc2FiaWxpdHkiLCJpbnN1cmVkU3RhdGUiLCJkaXNhYmlsaXR5X3dhaXZlcl9mb3JtIiwibm90aWZpZXJTdGF0ZUZsYWciLCJpbnN1cmVkU3RhdGVGbGFnIiwiaXNDb3JyZWN0RGF5Rm9ybWF0IiwiZGlzYWJpbGl0eVdhaXZlckNvdW50IiwiY29tbW9uRGlzYWJpbGl0eU1vZHVsZSIsImlzRGlzYWJpbGl0eUNsaWNrZWQiLCJzdWJtaXRSZXF1ZXN0IiwiZGlzYWJpbGl0eVdhaXZlclBvc3QiLCJkYXRhX2FuYWx5dGljcyIsIiRpbmplY3QiLCJkcmlua2VyQmlkZGxlQ29udHJsIiwiZHJpbmtlckJpZGRsZVNlcnZpY2VzIiwiZHJpbmtlckJpZGRsZURhdGEiLCJyZXF1ZXN0Rm9ybUZhY3RvciIsImRyaW5rZXJCaWRkbGVGb3JtIiwiZHJpbmtlckJpZGRsZVBob25lTnVtIiwiaXNEcmlua2VyU3VibWl0IiwiY2xpY2tEcmlua2VyU3VibWl0IiwiZHJpbmtlckJpZGRsZVBvc3QiLCJyZXF1ZXN0SW5mb0NvbnRybCIsInJlcXVlc3RJbmZvU2VydmljZXMiLCJudWNhcHRjaGFBbnNFbnRyIiwibnVjYXB0Y2hhQW5zRXh0IiwibG1zdWJtaXR0ZWQiLCJ0aW1lRWFybGllc3RBdmFpbCIsImNoZWNrT3B0aW9uYWxEcm9wRGF0YSIsInRpbWVMYXN0ZXN0QXZhaWwiLCJoZWFyQWJvdXRVcyIsImluY29tZVJhbmdlIiwiYW5udWFsUmV2ZW51ZSIsIm51bWJlckVtcGxveWVlcyIsIm1pZGRsZUluaXRpYWwiLCJidXNpbmVzc05hbWUiLCJhZGRyZXNzTGluZTIiLCJ3ZWVrZGF5cyIsIndlZWtlbmRzIiwicGVyc29uYWxQbGFubmluZyIsImJ1c2luZXNzUGxhbm5pbmciLCJidXNpbmVzc1R5cGUiLCJlbXBsb3ltZW50U3RhdHVzIiwiYW5udWl0aWVzIiwiZmluYW5jaWFsUGxhbm5pbmciLCJsaWZlSW5zdXJhbmNlIiwiaW52ZXN0bWVudHMiLCJwZW5zaW9uUmV0aXJlbWVudCIsImNvbGxlZ2VJbnZlc3RtZW50IiwibG9uZ1Rlcm1FeHBlbnNlIiwid2VhbHRoQWNjdW11bGF0aW9uIiwiZXN0YXRlQ29uc2VydmF0aW9uIiwiZGVmaW5lZEJlbmVmaXRQcm9ncmFtIiwiZGVmaW5lZENvbnRyaWJ1dGlvblByb2dyYW0iLCJncm91cEluc3VyYW5jZSIsImV4ZWN1dGl2ZUNvbXBlbnNhdGlvbiIsInBheXJvbGxEZWR1Y3Rpb24iLCJmaW5hbmNpYWxQbGFubmluZ0J1cyIsImJ1c2luZXNzU3VjY2Vzc2lvblBsYW5uaW5nIiwiZXhpc3RpbmdDdXN0b21lckluZm9ybWF0aW9uIiwiZXhpc3RpbmdDdXN0b21lciIsInJlcXVlc3RfaW5mb19mb3JtIiwiZWFybGllc3RGbGFnIiwibGF0ZXN0RmxhZyIsImhlYXJBYm91dEZsYWciLCJyZXF1ZXN0SW5mb1Bob25lTnVtIiwiaXNSZXF1ZXN0SW5mb0NsaWNrZWQiLCJyZXF1ZXN0SW5mb1Bvc3QiLCJyZXF1ZXN0SW5mb0VtcGxveWVyQ29udHJsIiwiZW1haWxDb25maXJtYXRpb24iLCJwaG9uZU9wdGlvbmFsIiwiaGF2ZVByb2R1Y3QiLCJpbmR1c3RyeVR5cGUiLCJub09mRW1wIiwiYW5udWFsQ29udHJpYnV0aW9uIiwibG5jUHJpdmFjeU5vdGljZSIsInBhZ2VVUkwiLCJwYWdlX3JlZmVycmluZ191cmwiLCJ1c2Vzc2lvbmlkIiwic2V0SW5mb0xpc3QiLCJyZXF1ZXN0X2luZm9fZW1wbG95ZXIiLCJub09mRW1wRmxhZyIsImlzSW5mb3JtYXRpb25TZWxlY3RlZCIsImlzUmVxdWVzdEluZm9FbXBsb3llckNsaWNrZWQiLCJpc0ZpcnN0Q2xpY2siLCJpbmZvTGlzdCIsImluZm9PYmoiLCJhZGRJbmZvIiwiaXNFbXB0eSIsImdldE93blByb3BlcnR5TmFtZXMiLCJvbkZvY3VzQW5hbHl0aWNzIiwiaW5mb09wbiIsImFubnVhbENvbnRyaWJ1dGlvbkZsYWciLCJuZWVkSW5mb0xpc3QiLCJmb3JtX3ppcGNvZGUiLCJmb3JtX3llc25vIiwiam9pbiIsImluZm9PcHQiLCJyZXF1ZXN0SW5mb1VwZGF0ZUNvbnRybCIsImNvbnRhY3RUaW1lIiwic2V0R29hbHMiLCJpc0dvYWxzU2VsZWN0ZWQiLCJnb2FscyIsImdvYWxzTGlzdCIsInJlcXVlc3RfaW5mb191cGRhdGUiLCJiZXN0VGltZSIsImlzUmVxdWVzdEluZm9VcGRhdGVDbGlja2VkIiwiZmFhSW5pdCIsImZhYUNvbnRhY3QiLCJyZW1vdmVJdGVtIiwidXBkYXRlR29hbCIsImdvYWwiLCJzZWxlY3RlZEdvYWxzIiwiJGh0dHAiLCJmcmF1ZEZvcm1TZXJ2aWNlIiwiZnJhdWRSZXBvcnRpbmdQb3N0RGF0YSIsImZyYXVkRm9ybUZhY3RvciIsInF1ZXN0aW9uMSIsImZyYXVkUmVwb3J0aW5nRGF0YSIsInBlcnNvbk9yQ29tcGFueSIsInF1ZXN0aW9uMiIsImFkZHJlc3NPclRlbGVwaG9uZU51bWJlciIsInF1ZXN0aW9uMyIsImFkZGl0aW9uYWxGcmF1ZEluZm8iLCJxdWVzdGlvbjQiLCJpbnN1cmFuY2VEYXRhIiwicXVlc3Rpb241IiwicG9saWN5Q29udHJhY3RBY2N0Tm8iLCJxdWVzdGlvbjYiLCJkb2xsYXJBbXQiLCJxdWVzdGlvbjciLCJkYXRlT2ZJbmNpZGVudCIsInF1ZXN0aW9uOCIsInN1c3BpY2lvdXNTaXR1YXRpb24iLCJxdWVzdGlvbjkiLCJkb2N1bWVudFByb29mIiwicXVlc3Rpb24xMCIsImFkZGl0aW9uYWxJbmNpZGVudEluZm8iLCJxdWVzdGlvbjExIiwiYWRkaXRpb25hbFJlcG9ydGVySW5mbyIsImZyYXVkRm9ybVBvc3REYXRhIiwiZGF0YVJlc3Bhb25jZSIsInZhbGlkYXRlU3RhdGUiLCJjbG9zZXN0IiwiaXNWYWxpZFN0YXRlIiwidmFsaWRhdFJvbGUiLCJiYWNrZ3JvdW5kSW5mb3IiLCJjdXJyZW50Um9sZSIsImlzVmFsaWRSb2xlIiwidmFsaWRhdGVJbnRlcmVzdCIsImludGVyZXN0IiwiaXNWYWxpZEludGVyZXN0IiwidmFsaWRhdGVBbm51YWxHcm9zcyIsImlzVmFsaWRBbm51YWxHcm9zcyIsInZhbGlkYXRlV2Vic2l0ZSIsImlzVmFsaWRXZWJzaXRlIiwiZ2V0U3RhcnRlZEZvcm1Qb3N0RGF0YSIsImdldFN0YXJ0ZWRmb3JtRmFjdG9yIiwiZ2V0U3RhcnRlZEZvcm1EYXRhIiwicGhvbmVUeXBlIiwiYmFja2dyb3VuZEluZm8iLCJhbnN3ZXIiLCJnZXRTdGFydGVkRm9ybSIsImpRdWVyeSIsInZhbGlkYXRlTGVuZ3RoIiwidW5DaGVjayIsImxmYVN0cmVldFNjYXBlUmVnRm9ybUNvbnRybCIsImlzbGZhc3RyZWV0U2NhcGVSZWdGb3JtQ2xpY2tlZCIsImlzUHJlZml4MUZpbGxlZCIsImlzQWNjTnVtMUZpbGxlZCIsIndhdGNoUHJlZml4YW5kQWNjTnVtIiwicHJlZml4VmFsdWUiLCJhY2NOdW1WYWx1ZSIsImZpcnN0IiwiYWNjTGlzdCIsImxmYVN0cmVldFNjYXBlUmVnVmFsdWUiLCJsZmFTdHJlZXRTY2FwZUZvcm1TdWJtaXQiLCJsZmFyZWdzaXRlcmZvcm0iLCJsZmFTdHJlZVNjYXBldmFsdWUiLCJmb3JtRmFjdG9yeSIsInBvcnRmb2xpb0luY2x1ZGUiLCJwb3J0Zm9saW8iLCJ0YXhTZXR1cCIsImluc3RpdHV0ZVNldHVwIiwiZW50aXR5T3JJbnN0aXR1dGlvbmFsTmFtZSIsIkVudGl0eXZhbHVlIiwibWlkZGxlTmFtZSIsImFkZHJlc3NMaW5lMSIsInppcGNvZGUiLCJQaG9uZW51bWJlciIsImVtYWlsSWQiLCJjbGVhclZhbHVlcyIsImxmYVN0cmVldFNjYXBlVXBkYXRlRm9ybUNvbnRybCIsImlzbGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtQ2xpY2tlZCIsImFjY0RlbExpc3QiLCJsZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhIiwibGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtU3VibWl0IiwibGZhVXBkYXRlZm9ybSIsInN0cmVlU2NhcGVVcGRhdGVEYXRhIiwiYWNjZXNzUHJpb3IiLCJteVN0cmVldHNjYXBlSUQiLCJzdHJlZXRTY2FwZUlEIiwiaW5zdGl0dXRpb25hbE5hbWUiLCJtaWRkbGVJbnRpYWwiLCJhY2NUb0FkZCIsImFjY1RvRGVsZXRlIiwidXBkYXRlRW1haWwiLCJzdHJlZXRTY2FwZVJlZ0Zvcm1Db250cmwiLCIkcm9vdFNjb3BlIiwiaXNzdHJlZXRTY2FwZVJlZ0Zvcm1DbGlja2VkIiwic3RyZWV0U2NhcGVSZWdWYWx1ZSIsInN0cmVldFNjYXBlRm9ybVN1Ym1pdCIsInN0cmVldFNjYXBlUmVnRm9ybSIsInN0cmVlU2NhcGV2YWx1ZSIsIm5vdGlmaWVyRmlyc3ROYW1lIiwibm90aWZpZXJMYXN0TmFtZSIsInN0cmVldFNjYXBlVXBkYXRlRm9ybUNvbnRybCIsImlzc3RyZWV0U2NhcGVVcGRhdGVGb3JtQ2xpY2tlZCIsInN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGEiLCJ2YWxpZGF0ZVN0cmVldFNjYXBJZCIsInN0cmVldFNjYXBlVXBkYXRlRm9ybVN1Ym1pdCIsInN0cmVldFNjYXBlVXBkYXRlRm9ybSIsImxpZmVJbnN1cmFuY2VEZWF0aFNlcnZpY2VzIiwibGlmZUluc3VyYW5jZURlYXRoRmFjdG9yIiwibGlmZUluc3VyYW5jZURlYXRoQ29tbW9uIiwiY2hlY2tFbXB0eURhdGEiLCJpbnN1cmVkRGVhdGhQbGFjZSIsImluc3VyZWREZWF0aENhdXNlIiwibGlmZUluc3VyYW5jZURlYXRoRm9ybSIsImxpZmVJbnN1cmFuY2VDb3VudCIsImxpZmVJbnN1cmFuY2VEZWF0aFBob25lTnVtIiwibGlmZUluc3VyYW5jZURlYXRoTW9kdWxlIiwic3RhdGVEcm9wVmFsaWRhdGlvbiIsImlzTGlmZUluc3VyYW5jZURlYXRoQ2xpY2tlZCIsInByaW50RGl2IiwicHJpbnRDb250ZW50cyIsInBvcHVwV2luIiwib3BlbiIsIndyaXRlIiwicHJpbnQiLCJjbG9zZSIsInN1Ym1pdExpZmVJbnN1cmFuY2VEZWF0aCIsImxpZmVJbnN1cmFuY2VEZWF0aEluZm9Qb3N0IiwibG9uZ1Rlcm1DYXJlU2VydmljZXMiLCJpc0NvcnJlY3RpbnN1cmVkWmlwRm9ybWF0IiwibG9uZ1Rlcm1DYXJlRmFjdG9yIiwibG9uZ1Rlcm1DYXJlQ29tbW9uIiwibG9uZ1Rlcm1DYXJlRm9ybSIsImxvbmdDYXJlQ291bnQiLCJsb25nVGVybUNhcmVNb2R1bGUiLCJpc0xvbmdUZXJtQ2FyZVN1Ym1pdCIsInN1Ym1pdExvbmdUZXJtQ2FyZSIsImxvbmdUZXJtQ2FyZUluZm9Qb3N0IiwicmVnaXN0ZXJTdXBwbGllclNlcnZpY2VzIiwicmVnaXN0ZXJTdXBwaWxlciIsImNlcnRpZmljYXRpb25JbmZvIiwib3duZXJzaGlwQ2VydGlmaWNhdGlvblNtYWxsQnVzaW5lc3MiLCJidXNpbmVzcyIsIlNNIiwib3duZXJzaGlwQ2VydGlmaWNhdGlvbk90aGVyIiwiT1RIRVIiLCJvd25lcnNoaXBDZXJ0aWZpY2F0aW9uTGdidCIsIkxHQlQiLCJvd25lcnNoaXBDZXJ0aWZpY2F0aW9uSHViem9uZSIsIkhVQlpvbmUiLCJvd25lcnNoaXBDZXJ0aWZpY2F0aW9uVm9zYiIsIlZPU0IiLCJvd25lcnNoaXBDZXJ0aWZpY2F0aW9uU2RiIiwiU0RCIiwib3duZXJzaGlwQ2VydGlmaWNhdGlvbldvc2IiLCJXT1NCIiwib3duZXJzaGlwQ2VydGlmaWNhdGlvbk90aGVyVmFsdWUiLCJvdGhlckJ1c2luZXNzIiwib3duZXJFdGhuaWNpdGllcyIsIm93bmVyRXRobmljaXRpZXNPdGhlciIsImV0aG5pY2l0eU90aGVycyIsImNvbXBhbnlJbmZvIiwicmVnaXN0ZXJTdXBwbGllckZhY3RvciIsInN1cHBsaWVyR29vZHNTZXJ2aWNlc090aGVyIiwiZXJyTGVuZ3RoIiwiY2VydGZMZW5ndGgiLCJpc293bmVyQnVzaW5lc3NDaGVja2VkIiwiaXNvd25lckV0aG5pY2l0aWVzT3RoZXJzQ2hlY2tlZCIsImlzY2VydGlmaWNhdGlvbkNoZWNrZWQiLCJyZWdpc3RlclN1cHBsaWVyRm9ybSIsImJ1c2luZXNzQ2hlY2tib3hlcyIsImlzRW1wdHlPdGhlck93bmVyc2hpcCIsImNlcnRkYXRlTGVuZ3RoIiwic3RhdGVWYWwiLCJpc05vdENoZWNrZWRPd25lcnNoaXAiLCJpc1NCRENoZWNrZWQiLCJyZWdpc3RlckNvbW1vbiIsInRhYmxlQ2VydGlmaWNhdGlvbiIsImNoZWNrYm94ZXNDb21weUluZm8iLCJjZXJ0aWZpY2F0aW9uQ2hlY2tib3hlcyIsImNlcnRkYXRlT2JqIiwidGFibGVDb3VudCIsInRhYmxlX2lkcyIsInBsdXMtTk1TREMiLCJwbHVzLVdCRU5DIiwicGx1cy1OV0JPQyIsInBsdXMtdmV0ZXJhbk93bmVkIiwicGx1cy12ZXRPd25lZCIsInBsdXMtU0JBSHViWm9uZSIsInBsdXMtU0JBIiwicGx1cy1hd2FyZE1hbmFnZW1lbnQiLCJwbHVzLVVTUEFOIiwicGx1cy1VU0JMTiIsInBsdXMtTkdMQ0MiLCJwbHVzLWNlcnRpZmljYXRlT3RoZXIiLCJjaGVja2VkSWQiLCJyZWdpc3Rlck1vZHVsZSIsImNvbnRpbnVlQmFja0ZvY3VzIiwib2xIZWlnaHQiLCJkYXRhVGFibGUiLCJkZXN0cm95IiwicmVzcG9uc2l2ZSIsImJMZW5ndGhDaGFuZ2UiLCJiU29ydCIsImJGaWx0ZXIiLCJwYWdpbmciLCJpbmZvIiwiYXV0b1dpZHRoIiwic3RhdGVWYWxpZGF0ZUZ1bmMiLCJzdGF0ZVZhbHVlIiwidmFsaWRhdGVDb21wYW55R29vZHMiLCJnb29kc1ZhbGlkIiwib3RoZXJzVmFsaWQiLCJnb29kc1NlbGVjdGVkIiwiZ29vZHMiLCJnb29kczE0IiwicHJvcCIsImNlcnRpZnlDb250YWN0IiwiY2VydGlmaWNhdGlvbiIsImNlcnROdW1iZXIiLCJjZXJ0ZGF0ZSIsImNlcnRkYXRlTW9iaWxlIiwiY2VydGRhdGVWYWwiLCJleHBpcnlEYXRlIiwicmVnaXN0ZXJTdXBwbGllclBob25lTnVtIiwicmVnaXN0ZXJDb21weUluZm9EYXRhIiwiaXNQcmltYXJ5Q29ycmVjdEZvcm1hdCIsImRhdGVwaWNrZXIiLCJjaGFuZ2VNb250aCIsImNoYW5nZVllYXIiLCJvblNlbGVjdCIsImRhdGVUZXh0IiwiaW5zdCIsImlzQ29udGludWVDbGlja2VkIiwiY29udGludWVCYWNrIiwiYnVzaW5lc3NBcyIsImJyYWRzaGVldE51bSIsIm9yZ1Bob25lTnVtRXh0biIsInByaW1hcnlDb250UGhvbmVOdW1FeHRuIiwidmFsaWRhdGVHb29kc1NlcnZpY2VzIiwiY29udGludWVTdWJtaXQiLCJjbGFpbUZvcm0iLCJwcmltYXJ5QWRkcmVzcyIsInByaW1hcnlDb250YWN0Iiwic3VwcGxpZXJHb29kc1NlcnZpY2VzIiwicmVnaXN0ZXJDb21weUluZm8iLCJjb21wYW55TGVnYWxOYW1lIiwibGVnYWxOYW1lIiwiZG9pbmdCdXNpbmVzc0FzIiwiZHVuQnJhZHN0cmVldE51bWJlciIsIm9yZ0FkZHJlc3MiLCJvcmdDaXR5Iiwib3JnU3RhdGUiLCJvcmdaaXBDb2RlIiwib3JnWmlwIiwib3JnRW1haWwiLCJvcmdQaG9uZU51bWJlciIsIm9yZ1Bob25lTnVtIiwib3JnUGhvbmVFeHQiLCJvcmdXZWJzaXRlIiwiY29udGFjdEZpcnN0TmFtZSIsInByaW1hcnlDb250Rmlyc3RuYW1lIiwiY29udGFjdExhc3ROYW1lIiwicHJpbWFyeUNvbnRMYXN0bmFtZSIsImNvbnRhY3RUaXRsZSIsInByaW1hcnlDb250VGl0bGUiLCJjb250YWN0UGhvbmVOdW1iZXIiLCJwcmltYXJ5Q29udFBob25lTnVtIiwiY29udGFjdFBob25lTnVtRXh0IiwiY29udGFjdEVtYWlsIiwicHJpbWFyeUNvbnRFbWFpbCIsImJhY2tUb0NvbXBhbnkiLCJ2YWxpZGF0ZUNlcnRpZnlCdXNpbmVzcyIsImNlcnRpZnlCdXNpbmVzcyIsInZhbGlkYXRlT3duZXJFdGhuaWNpdGllcyIsInZhbGlkYXRlQ2VydGlmeUNvbnRhY3QiLCJjbGlja1NEQkJveCIsIm93bmVyc2hpcENlcnRpZmljYXRpb24iLCJzb21lU2VsZWN0ZWQiLCJvYmplY3QiLCJrZXlzIiwic29tZSIsInJlZ2lzdGVyU3VwcGxpZXJQb3N0IiwibG9zdFBvbGljeUZpbmRlckNvbnRybCIsImxvc3RQb2xpY3lGaW5kZXJTZXJ2aWNlcyIsImxvc3RQb2xpY3lEYXRhRm9ybUZhY3RvciIsInJlcXVlc3RvclN0YXRlIiwidmFsaWRGb3JtX1N0ZXAxIiwicmV0VmFsdWUiLCJsb3N0UG9saWN5RmluZGVyMSIsInZhbGlkc3NuIiwidmFsaWRGb3JtX1N0ZXAyIiwibG9zdFBvbGljeUZpbmRlcjIiLCJyZXF1ZXN0b3JFbWFpbCIsInZhbGlkRm9ybV9TdGVwMyIsImxvc3RQb2xpY3lGaW5kZXIzIiwidmFsaWRGb3JtRmluYWwiLCJsb3N0UG9saWN5RmluZGVyNCIsImxvc3RQb2xpY3lGaW5kZXIiLCJsb3N0UG9saWN5Q291bnQiLCJ0ZXJtc0NvbmRpdGlvbkFjayIsImlzTG9zdFBvbGljeUZpbmRlckNsaWNrZWQiLCJsYXN0U3RhdGVGbGFnIiwiaXNEYXRlVmFsaWQiLCJpc0FncmVlIiwiU2V0QWxsQ2xpY2tGYWxzZSIsImlzbG9zdFBvbGljeUZpbmRlcjFDbGlja2VkIiwiaXNsb3N0UG9saWN5RmluZGVyMkNsaWNrZWQiLCJpc2xvc3RQb2xpY3lGaW5kZXIzQ2xpY2tlZCIsImlzbG9zdFBvbGljeUZpbmRlcjRDbGlja2VkIiwiY2xpY2siLCJwcmV2QnV0dG9uIiwibmV4dFNlY3Rpb24iLCJOdW1iZXIiLCJzc24iLCJmb3JtYXQiLCJ0b2dnbGVTaG93U3NuIiwiYWRkRGFzaCIsInN1Ym1pdEZpbmFsUmVxdWVzdCIsImxvc3RQb2xpY3lGaW5kZXJQb3N0Iiwic2VjdXJpdHlSZXBvcnRpbmdDb250cmwiLCJzZWN1cml0eVJlcG9ydGluZ1NlcnZpY2VzIiwic2VjdXJpdHlSZXBvcnREYXRhIiwic2VjdXJpdHlSZXBvcnREYXRhRm9ybUZhY3RvciIsImlzc3VlRGVzY3JpcHRpb24iLCJzZWN1cml0eVJlcG9ydGluZyIsImlzU2VjdXJpdHlSZXBvcnRpbmdDbGlja2VkIiwic2VjdXJpdHlSZXBvcnRpbmdQb3N0Iiwic3BhbmlzaENvbnRhY3RGb3JtQ29udHJsIiwic3BhbmlzaENvbnRhY3RGb3JtU2VydmljZXMiLCJzcGFuaXNoQ29udGFjdEZvcm1EYXRhIiwic3BhbmlzaENvbnRhY3RGb3JtRGF0YUZvcm1GYWN0b3IiLCJmdWxsTmFtZSIsImZpbmFuY2lhbE5lZWQiLCJzcGFuaXNoQ29udGFjdEZvcm0iLCJsb2NhdGlvbkZsYWciLCJmdWxsTmFtZUZvcm1hdCIsImlzU3BhbmlzaENvbnRhY3RGb3JtQ2xpY2tlZCIsInNwYW5pc2hDb250YWN0Rm9ybVBvc3QiLCJjYXRlTmFtZSIsImZvcm1Ub29sQ2F0ZWdvcmllcyIsInN1Y2Nlc3MiLCJoZWFkZXJzIiwiY29uZmlnIiwic3RhdHVzTWVzc2FnZSIsImNhdGVnb3J5Rm9ybUxpc3QiLCJmb3JtRGV0YWlsTGlzdCIsImNhbGxBY2NvcmRpb24iLCJlcnJvciIsInNldEludGVydmFsTGltaXRlZCIsImNhbGxiYWNrIiwieCIsImF1dG9UYWJIZWlnaHQiLCJ0YWJWYWx1ZSIsImJpZ2dlc3RIZWlnaHQiLCJ0aW1lT3V0VmFsdWUiLCJpc05hTiIsImFsdGVybmF0ZVByb2R1Y3RMaXN0Q29sb3IiLCJwcm9kdWN0Q3VzdG9tQW5hbHl0aWNzIiwiYWN0aXZlVGFiUGFuZWwiLCJzdWl0ZUlEIiwic3VpdGVOYW1lIiwicHJvZHVjdENsaWNrZWQiLCIkYnJvYWRjYXN0IiwiYW5hbHl0aWNzQ29udHJvbCIsInNob3dQcm9kdWN0cyIsInNob3dSZXN1bHRzIiwidGFiQWN0aXZlQ2hhbmdlIiwidmlzaWJsZVByb2R1Y3RzIiwic3VpdGVDYXQiLCJzdWl0ZVRpdGxlIiwicHJvZHVjdFRpdGxlIiwicHJvZHVjdExDTiIsIk5vdEF2YWlsYWJsZVN1aXRlIiwidGlsZVNpemUiLCJ0YWJWYWx1ZUFyciIsInRhYkNsaWNrVmFsdWUiLCJzZWxlY3RJbmRleCIsIm5vdCIsIm9uY2xpY2tTdWl0ZSIsInN1aXRlVGlsZSIsInRpbGVQYXIiLCJvbkF2YWlsUHJvZHVjdENsaWNrIiwicHJvZHVjdFRpbGUiLCJvbk5vdEF2YWlsUHJvZHVjdENsaWNrIiwicHJvZHVjdExpbmsiLCJub3RBdmFpbGFibGVQcm9kdWN0cyIsInNsaWRlVG9nZ2xlIiwidGlsZVNpemVWYWx1ZSIsInNvcnROb3RBdmFpbGFibGVTdWl0ZUxpc3QiLCJhY3RpdmVUYWJQYW5lbEZvckNhdGVnb3J5IiwiYWN0aXZlTm90QXZhaWxTZWN0aW9uIiwiYWN0aXZlTm90QXZhaWxEYXRhQ29sdW1ucyIsIm5vdEF2YWlsUHJvZHMiLCJub3RBdmFpbEtleXMiLCJOYXRpb25hbE5vdEF2YWlsYWJsZUxpbmtzIiwiTllOb3RBdmFpbGFibGVMaW5rcyIsInRhYlBhbmVsIiwibGlua3NMaXN0IiwidG9VcHBlckNhc2UiLCJzb3J0IiwibGFzdFByb2RDb2RlIiwiayIsInRoaXNMaW5rIiwic3BsaWNlIiwiZW1wdHkiLCJvdXRlckhUTUwiLCJjb2x1bW5TcGxpdExlbmd0aCIsImNlaWwiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJiaW5kIiwicGVyZm9ybWFuY2VTZXJ2aWNlIiwianNvbkNvZGVzIiwiY291bnRVbml0IiwidGFiTmFtZSIsInRpc0luZGV4IiwiZnVuZFBlcmZvcm1hbmNlVXRpbCIsImZ1bmRQZXJmb3JtYW5jZU1vZHVsZSIsInBlcmZvcm1hbmNlU2VydmljZUNhbGwiLCJjb2RlIiwicGVyZm9ybWFuY2VEYXRhIiwicGVyZm9ybWFuY2VUYWJsZURhdGEiLCJjYWxjdWxhdGVUaW1lIiwiX2NvZGUxIiwiX2NvZGUyIiwiY3VycmVudFRpbWUiLCJmdW5kUGVyZm9ybWFuY2VJbml0Iiwic2hvd0R5bmFtaWNQcm9kdWN0cyIsIndhcm5pbmdJY29uIiwicmlkZXJWYWx1ZSIsInRvcE5hdnRhYnNEYXRhIiwicHJvZHVjdFR5cGUiLCJuYXZpZ2F0aW9uSXRlbSIsImlzVmFyaWFibGVBbm51aXR5IiwicmlkZXJzIiwib2JqIiwicHJvZHVjdENvZGUiLCJiaW5kU2hhcmVOYW1lIiwidG9wTmF2RGF0YSIsImlzU3RhdGljVGFic0F2YWlsIiwiY2xpY2tlZFRhYiIsIiRvbiIsImJTaGFyZVNlbGVjdCIsIiRjb21waWxlIiwicGVyZm9ybURhdGEiLCJwZXJmb3JtQ29tbW9uIiwicGVyZm9ybVBkZiIsInBlcmZvcm1STVBkZiIsInBlcmZvcm1FeGNlbCIsInBlcmZvcm1STUV4Y2VsIiwidGJsQ29sdW1uIiwidGJsRGF0YSIsImNvbXBsaWFuY2VUb3BNc2ciLCJjb21wYXJlT2JqIiwicGVyZlRibENvdW50MSIsInBlcmZUYmxDb3VudDIiLCJwZXJmVGJsQ291bnQzIiwibmV3T2JqZWN0IiwiaXNQZXJtZkFzc2V0Q2F0ZWdvcnkiLCJpc0dyb3VwZWQiLCJodG1scmVnZXgiLCJwZXJmb3JtTW9kdWxlIiwibW9udGhseVBlcmZvcm0iLCJtb250aGx5UGVyZm9ybVN1cnJlbmRlciIsInF1YXJ0ZXJseVBlcmZvcm0iLCJ2aWV3UGVyZm9ybSIsImZpbHRlckhlYWRlciIsInJpZGVyTmFtZSIsImNvbXBhcmVQZGYiLCJjb21wYXJlV2l0aFZpZXciLCJzZWxlY3Rpb24iLCJkYXRhVGFibGVNZXRob2RzIiwidGJsSWQiLCJjdXN0b21Db2x1bW5EZWZzIiwiRGF0YVRhYmxlIiwic2Nyb2xsWCIsInNjcm9sbENvbGxhcHNlIiwiY29sdW1ucyIsImNvbHVtbkRlZnMiLCJmblJvd0NhbGxiYWNrIiwiblJvdyIsImlEaXNwbGF5SW5kZXgiLCJhbmNoIiwiY29tcGlsZUFuY2giLCJlbGVtIiwiaW52ZXN0TmFtZSIsInRhYmxlMyIsImludmVzdG1lbnRPcHRpb24iLCJzdWJBY2NOYW1lIiwicGZsSWQiLCJvcmRlciIsImJQYWdpbmF0ZSIsImJJbmZvIiwiZHJhd0NhbGxiYWNrIiwiZ3JvdXBpbmdVbml0IiwicGVyZm9ybWFuY2VQZGYiLCJ2aWV3SWQiLCJwZXJmb3JtYW5jZUV4Y2VsIiwiY29scyIsImFwaSIsInJvd3MiLCJsYXN0IiwicGFnZSIsIm5vZGVzIiwiY29sdW1uIiwiZ3JvdXAiLCJvdmVybGF5UG9zaXRpb24iLCJib2R5SGd0IiwibW9udGhseVRhYmxlIiwicHJvZHVjdElkIiwicGVyZl9jb3VudCIsInBlcmZEYXRhIiwiY2hhbmdlUGVyZm9ybSIsImhlYWRlckFycmF5IiwicHJvc3BlY3R1c0xpbmsiLCJsaXN0UHVsbGRvd24iLCJpc1RhYmxlU2hvdyIsInByb2R1Y3RQZXJmb3JtYW5jZSIsImNvbXBsaWFuY2VUb3AiLCJwZXJmb3JtYW5jZVZhbHVlcyIsIm1vbnRobHlQZXJmb3JtYW5jZSIsInRhYmxlMSIsInl0ZDEiLCJsYXN0RGFpbHlQZXJmRGF0ZSIsInl0ZDIiLCJtb250aGx5UGVyZm9ybWFuY2VZdGQyRGF0ZSIsIm1vbnRobHlQZXJmSGVhZGVyIiwibW9udGhseVBlcmZTdXJyZW5kZXJIZWFkZXIiLCJzdGFuZGFyZGl6ZWRQZXJmSGVhZGVyIiwiaWR4IiwiZnVuZERpc2Nsb3N1cmVzIiwicHJvZHVjdERpc2Nsb3N1cmVzIiwiY2hlY2tlZEZ1bmRJZCIsInBlcmZfcHJvZHVjdE5hbWUiLCJ0YmwzV2lkdGgiLCJmb290ZXJUZXh0IiwibW9udGhseVBlcmZGb290ZXIiLCJjb2x1bW5EZWZzMSIsImNsYXNzIiwiZGVmYXVsdENvbnRlbnQiLCJ0YXJnZXRzIiwiY3JlYXRlZENlbGwiLCJ0ZCIsImNlbGxEYXRhIiwicm93RGF0YSIsInJvdyIsImNvbCIsInQiLCJ0b3RhbFJldHVybiIsIm1vbnRobHlQZXJmQ29sdW1uSGVhZGVyIiwibW9udGhseVBkZiIsInBlcmZvcm1hbmNlRGVmYXVsdFZpZXciLCJtb250aGx5UGVyZlN1cnJlbmRlckZvb3RlciIsImNvbHVtbkRlZnMyIiwicGVyZm9ybWFuY2VWYWx1ZXNTdXJyZW5kZXIiLCJtb250aGx5UGVyZm9ybWFuY2VTdXJyZW5kZXIiLCJtb250aGx5UGVyZm9ybWFuY2VTdXJyZW5kZXJZdGQyRGF0ZSIsIm1vbnRobHlQZXJmU3VycmVuZGVyQ29sdW1uSGVhZGVyIiwidGFibGUyIiwibW9udGhseVN1cnJQZGYiLCJzdGFuZGFyZGl6ZWRQZXJmRm9vdGVyIiwiY29sdW1uRGVmczMiLCJwZXJmb3JtYW5jZVZhbHVlc1F1YXRlcmx5IiwicXVhcnRlcmx5U3RhbmRhcmRQZXJmb3JtYW5jZSIsInN0YW5kYXJkaXplZFBlcmZDb2x1bW5IZWFkZXIiLCJtb250aGx5UXVhclBkZiIsInNob3dJbmRpdiIsImZ1bGxwZXJmRGF0YSIsInByb2ZpbGVJZCIsImRyb3Bkb3duTnVtIiwiZm5Tb3J0TmV1dHJhbCIsImNvbXBhcmVQZXJmb3JtIiwiYWxlcnQiLCJtb3JlVGhhbk9uZSIsImxlc3NUaGFuRml2ZSIsInBkZkhlYWRlciIsImZ1bmRDb21wYXJpc29uUGRmIiwic2VsVmFsIiwibGFzdFBlcmZEYXRlIiwibW9udGhseVBlcmZvcm1WYWx1ZSIsIm1vbnRobHlTdXJWYWx1ZSIsInF1YXJ0ZXJseVZhbHVlIiwiY3JlYXRlUHJvZHVjdFByb3NwZWN0dXNWaWV3IiwicHJvZHVjdFByb3NwZWN0dXMiLCJmdW5kUHJvc3BlY3R1c1BhbmVsTGlua3MiLCJwcm9kdWN0U3RhdGVtZW50UGFuZWxMaW5rcyIsImZ1bmRGZWVFeHBsTGlua3MiLCJwcm9kdWN0UHJvc3BlY3R1c1BhbmVsTGlua3MiLCJwcm9zcGVjdHVzUHJvZFByb3MiLCJwcm9zcGVjdHVzUHJvZFByb3NTdXBzIiwicHJvc3BlY3R1c1NBSXMiLCJwcm9zcGVjdHVzU0FJU3VwcyIsInByb3NwZWN0dXNGbmRQcm9zIiwicHJvc3BlY3R1c0ZuZFByb3NTdXBzIiwicHJvc3BlY3R1c1NlbSIsInByb3NwZWN0dXNBbiIsInByb3NwZWN0dXNmdW5kRmVlRXhwIiwicHJvZHVjdFN0YXRlbWVudFBhbmVsIiwicmVwb3J0c1BhbmVsIiwidXNhZ2VUeXBlIiwicmVwb3J0c0xpbmsiLCJkaXNwbGF5VGV4dCIsInNlbWlBbnVSZXAiLCJhbm51YWxSZXBvcnRzIiwidUlBY2NvcmRpb24iLCJwcm9kdWN0UHJvc3BlY3R1c0xpbmsiLCJ1bml0VmFsdWVzQ29tbW9uIiwicHJvZElkIiwidW5pdFZhbHVlc01vZHVsZSIsImRhdGFUYWJsZXMiLCJmdW5kSWQiLCJmdW5kTmFtZSIsImJEZXN0cm95IiwidW5pdFZhbHVlc1BkZiIsInVuaXRWYWx1ZXNSTVBkZiIsImV2bnQiLCJ1bml0dmFsdWVzX2NvdW50IiwidW5pdFZhbHVlc0RhdGEiLCJ1bml0VmFsdWVzIiwidW5pdFZhbF9wcm9kdWN0TmFtZSIsImZ1bmREZXRhaWwiLCJ5ZWFyRW5kRGF0ZSIsImxhc3RVbml0VmFsdWVZZWFyRGF0ZSIsImRhaWx5RGF0ZSIsImxhc3RVbml0VmFsdWVEYXRlIiwidW5pdFZhbHVlc0RlZmF1bHRWaWV3IiwiZ2xvc3NhcnkiLCJkYXRhQXZhaWxMZXR0ZXJzIiwiYWxwaGFQYWdlcmFycmF5IiwidGVybUNsYXNzIiwiaGlzdG9yaWNhbFByaWNlc1NlcnZpY2UiLCJtYXhEYXRlIiwiaGlzdG9yaWNhbENvbW1vbiIsImhpc3RvcmljYWxNb2R1bGUiLCJoaXN0b3J5ZGF0YSIsImhpc3RvcnlEYXQiLCJnZXRMYXN0V29ya2luZ0RheSIsImRhdGUiLCJkYXRlRm9ybWF0IiwiZ2V0RGF5Iiwic2V0RGF0ZSIsImZvcm1hdERhdGUiLCJ1cGRhdGVQcmljZXMiLCJjdXJyZW50ZGF0ZSIsImhpc3RvcmljYWxQcmljZXNEYXRhIiwieG1sIiwiaGlzdG9yaWNhbGRhdGEiLCJpc0VtcHR5T2JqZWN0IiwiSElTVE9SSUNTVE9DS1FVT1RFIiwiUkVTVUxUIiwiUk9XIiwiQ0xPU0UiLCJ0b0ZpeGVkIiwiSElHSCIsIkxPVyIsIk9QRU4iLCJWT0xVTUUiLCJyZXNpemVXaW5kb3dDaGFuZ2VzIiwic2V0U2xpZGVzSGVpZ2h0Iiwic2V0TWluU2xvZ2FuSGVpZ2h0IiwibWluLWhlaWdodCIsImltYWdlIiwiSW1hZ2UiLCJzcmMiLCJ0aGlzTWluSGVpZ2h0IiwibmF0dXJhbEhlaWdodCIsInNldE1pbkhlaWdodCIsInRoaXNIZWlnaHQiLCJzbGlkZUhndCIsImFycm93SGd0IiwiYXJyb3dUb3AiLCJzbGlkZU51bWJlclRvcCIsImNhbkNsaWNrTmV4dCIsImNhbkNsaWNrUHJldiIsImZpbmlzaCIsInRvdGFsQmFubmVycyIsImZpcnN0U2xpZGUiLCJkZXRhY2giLCJpbnNpZGVyVHJhZGluZ1NlcnZpY2UiLCJpbnNpZGVyQ29tbW9uIiwiaW5zaWRlck1vZHVsZSIsInVuYmluZCIsImluc2lkZXJkYXRhIiwiY2xhc3NOYW1lIiwiZGlzcGxheUxlbmd0aCIsIm9MYW5ndWFnZSIsIm9QYWdpbmF0ZSIsInNOZXh0Iiwic1ByZXZpb3VzIiwic0luZm8iLCJjdXN0b21TZWFyY2giLCJkdGFibGUiLCJmbkZpbHRlciIsImRhdGFTcGxpdCIsImZuU2V0dGluZ3MiLCJmblJlY29yZHNEaXNwbGF5IiwiaW5zaWRlclRyYWRpbmdEYXRhIiwiRURHQVJSVExJU1QiLCJET0NUWVBFIiwiREVTQ1JJUFRJT04iLCJSRUNFSVZFRERBVEUiLCJTSVpFIiwiYnl0ZXNUb1NpemUiLCIkc2NlIiwiZHluYW1pY1F1ZXN0aW9uQ2hlY2siLCJxdWVzdGlvbk5vIiwiZmlsdGVyS2V5IiwiaXRlbSIsImlucHV0IiwibGlzTWFwcGluZyIsImdldFJlc3VsdHMiLCJmaWx0ZXJlZFJlc3VsdHMiLCJsaXNWTSIsImxpc0RhdGEiLCJodG1sUmVnZXgiLCJ0cmFkZU1hcmtSZWdleCIsIm1ldGhvZCIsInByaW1hcnlSZXN1bHQiLCJzZWNvbmRhcnlSZXN1bHQiLCJOb3ciLCJOb3ctRG93biIsIk5vdy1Eb3duLVllcyIsIk5vdy1Eb3duLVllcy1TdHJvbmciLCJOb3ctRG93bi1ZZXMtUmVsaWFibGUiLCJOb3ctRG93bi1ZZXMtSW52ZXN0bWVudCIsIk5vdy1Eb3duLU5vIiwiTm93LURvd24tTm8tU2F2aW5ncyIsIk5vdy1Eb3duLU5vLVN0cm9uZyIsIk5vdy1Eb3duLVNvbWUiLCJOb3ctRG93bi1Tb21lLVN0cm9uZyIsIk5vdy1Eb3duLVNvbWUtUmVsaWFibGUiLCJOb3ctRG93bi1Tb21lLVNhdmluZ3MiLCJOb3ctRmxhdCIsIk5vdy1GbGF0LVllcyIsIk5vdy1GbGF0LVllcy1JbnZlc3RtZW50IiwiTm93LUZsYXQtWWVzLVN0cm9uZyIsIk5vdy1GbGF0LVllcy1SZWxpYWJsZSIsIk5vdy1GbGF0LU5vIiwiTm93LUZsYXQtTm8tU2F2aW5ncyIsIk5vdy1GbGF0LU5vLVN0cm9uZyIsIk5vdy1GbGF0LVNvbWUiLCJOb3ctRmxhdC1Tb21lLVN0cm9uZyIsIk5vdy1GbGF0LVNvbWUtUmVsaWFibGUiLCJOb3ctRmxhdC1Tb21lLUludmVzdG1lbnQiLCJOb3ctVXAiLCJOb3ctVXAtWWVzIiwiTm93LVVwLVllcy1JbnZlc3RtZW50IiwiTm93LVVwLVllcy1SZXRpcmVtZW50IiwiTm93LVVwLVllcy1SZWxpYWJsZSIsIk5vdy1VcC1ObyIsIk5vdy1VcC1Oby1TYXZpbmdzIiwiTm93LVVwLU5vLVN0cm9uZyIsIk5vdy1VcC1Tb21lIiwiTm93LVVwLVNvbWUtSW52ZXN0bWVudCIsIk5vdy1VcC1Tb21lLVJlbGlhYmxlIiwiTm93LVVwLVNvbWUtU3Ryb25nIiwiTGF0ZXI1IiwiTGF0ZXI1LURvd24iLCJMYXRlcjUtRG93bi1ZZXMiLCJMYXRlcjUtRG93bi1ZZXMtUmV0aXJlbWVudCIsIkxhdGVyNS1Eb3duLVllcy1TdHJvbmciLCJMYXRlcjUtRG93bi1ZZXMtUmVsaWFibGUiLCJMYXRlcjUtRG93bi1ObyIsIkxhdGVyNS1Eb3duLU5vLVNhdmluZ3MiLCJMYXRlcjUtRG93bi1Oby1TdHJvbmciLCJMYXRlcjUtRG93bi1Tb21lIiwiTGF0ZXI1LURvd24tU29tZS1TdHJvbmciLCJMYXRlcjUtRG93bi1Tb21lLVJlbGlhYmxlIiwiTGF0ZXI1LURvd24tU29tZS1SZXRpcmVtZW50IiwiTGF0ZXI1LUZsYXQiLCJMYXRlcjUtRmxhdC1ZZXMiLCJMYXRlcjUtRmxhdC1ZZXMtUmV0aXJlbWVudCIsIkxhdGVyNS1GbGF0LVllcy1SZWxpYWJsZSIsIkxhdGVyNS1GbGF0LVllcy1TdHJvbmciLCJMYXRlcjUtRmxhdC1ObyIsIkxhdGVyNS1GbGF0LU5vLVNhdmluZ3MiLCJMYXRlcjUtRmxhdC1Oby1TdHJvbmciLCJMYXRlcjUtRmxhdC1Tb21lIiwiTGF0ZXI1LUZsYXQtU29tZS1SZXRpcmVtZW50IiwiTGF0ZXI1LUZsYXQtU29tZS1TdHJvbmciLCJMYXRlcjUtRmxhdC1Tb21lLVJlbGlhYmxlIiwiTGF0ZXI1LVVwIiwiTGF0ZXI1LVVwLVllcyIsIkxhdGVyNS1VcC1ZZXMtUmV0aXJlbWVudCIsIkxhdGVyNS1VcC1ZZXMtUmVsaWFibGUiLCJMYXRlcjUtVXAtWWVzLVN0cm9uZyIsIkxhdGVyNS1VcC1ObyIsIkxhdGVyNS1VcC1Oby1TYXZpbmdzIiwiTGF0ZXI1LVVwLU5vLVN0cm9uZyIsIkxhdGVyNS1VcC1Tb21lIiwiTGF0ZXI1LVVwLVNvbWUtUmV0aXJlbWVudCIsIkxhdGVyNS1VcC1Tb21lLVJlbGlhYmxlIiwiTGF0ZXI1LVVwLVNvbWUtU3Ryb25nIiwiTGF0ZXIxMCIsIkxhdGVyMTAtRG93biIsIkxhdGVyMTAtRG93bi1ZZXMiLCJMYXRlcjEwLURvd24tWWVzLVJlbGlhYmxlIiwiTGF0ZXIxMC1Eb3duLVllcy1GbGV4aWJpbGl0eSIsIkxhdGVyMTAtRG93bi1ZZXMtU3Ryb25nIiwiTGF0ZXIxMC1Eb3duLU5vIiwiTGF0ZXIxMC1Eb3duLU5vLVNhdmluZ3MiLCJMYXRlcjEwLURvd24tTm8tU3Ryb25nIiwiTGF0ZXIxMC1Eb3duLVNvbWUiLCJMYXRlcjEwLURvd24tU29tZS1SZWxpYWJsZSIsIkxhdGVyMTAtRG93bi1Tb21lLVN0cm9uZyIsIkxhdGVyMTAtRG93bi1Tb21lLUZsZXhpYmlsaXR5IiwiTGF0ZXIxMC1GbGF0IiwiTGF0ZXIxMC1GbGF0LVllcyIsIkxhdGVyMTAtRmxhdC1ZZXMtUmVsaWFibGUiLCJMYXRlcjEwLUZsYXQtWWVzLUZsZXhpYmlsaXR5IiwiTGF0ZXIxMC1GbGF0LVllcy1SZXRpcmVtZW50IiwiTGF0ZXIxMC1GbGF0LU5vIiwiTGF0ZXIxMC1GbGF0LU5vLVNhdmluZ3MiLCJMYXRlcjEwLUZsYXQtTm8tU3Ryb25nIiwiTGF0ZXIxMC1GbGF0LVNvbWUiLCJMYXRlcjEwLUZsYXQtU29tZS1GbGV4aWJpbGl0eSIsIkxhdGVyMTAtRmxhdC1Tb21lLVJlbGlhYmxlIiwiTGF0ZXIxMC1GbGF0LVNvbWUtU3Ryb25nIiwiTGF0ZXIxMC1VcCIsIkxhdGVyMTAtVXAtWWVzIiwiTGF0ZXIxMC1VcC1ZZXMtRmxleGliaWxpdHkiLCJMYXRlcjEwLVVwLVllcy1SZXRpcmVtZW50IiwiTGF0ZXIxMC1VcC1ZZXMtUmVsaWFibGUiLCJMYXRlcjEwLVVwLU5vIiwiTGF0ZXIxMC1VcC1Oby1TYXZpbmdzIiwiTGF0ZXIxMC1VcC1Oby1TdHJvbmciLCJMYXRlcjEwLVVwLVNvbWUiLCJMYXRlcjEwLVVwLVNvbWUtUmVsaWFibGUiLCJMYXRlcjEwLVVwLVNvbWUtUmV0aXJlbWVudCIsIkxhdGVyMTAtVXAtU29tZS1GbGV4aWJpbGl0eSIsImN1cnJTbGlkZSIsImNhdGVnb3J5TmFtZSIsInN0ZXBWYWxpZGF0aW9uIiwic2VsUXVlc3Rpb25PcHRpb25zIiwibm9PZlNsaWRlcyIsInRvdGFsUmVzdWx0cyIsInRvdGFsUmVzdWx0c0NvZGUiLCJmaWx0ZXJlZFJlc3VsdHNDb2RlIiwibmV4dFNsaWRlIiwicHJldlNsaWRlIiwicHJldktleURvd24iLCJuZXh0S2V5RG93biIsInRlbXBGaWx0ZXJLZXkiLCJtYXBSZXN1bHRzIiwibWFwUmVzdWx0c0NvZGUiLCJyZXN1bHQiLCJmaWx0ZXJlZFJlc3VsdHNUZW1wIiwibWFwUmVzdWx0IiwiZXZlbnRUcmlnZ2VyIiwic2hvd1BvcHVwIiwib3ZlcmZsb3ciLCJzdGFydE92ZXIiLCJjbG9zZVBvcHVwIiwicmVzdGFydCIsInNob3dNYXAiLCJmbGFnIiwic3RhdGVDb29raWUiLCJsdGNWTSIsInNlbGVjdGVkU3RhdGUiLCJzaG93TW9kYWwiLCJzdGF0ZXNOQSIsImRpc2FibGVNb2RhbENsb3NlIiwicGFyZW50UGFnZUlkIiwiY3VycmVudFBhZ2VJZCIsImxpbmtTZWxlY3RlZCIsInN0YXRlU2VsZWN0b3IiLCJsdGNTdGF0ZVNlbGVjdG9ycyIsInJlbGF0ZWRJbnRlcm5hbExpbmtzIiwibGlua0lkIiwiY3VyclBhZ2UiLCJMR01hcCIsIm1hcCIsIm1hcEZvbGRlciIsIm9uUmVhZHkiLCJ1cGRhdGVTZWxlY3RlZFN0YXRlIiwib25TdGF0ZUNsaWNrIiwidW5zZWxlY3QiLCJzZWxlY3RlZFN0YXRlVGV4dCIsImxpbmtTZWxlY3QiLCJzZWxlY3RMaW5rIiwic2VsZWN0ZWRMaW5rIiwiT3B0aW9uQXNzb2MiLCJEaXNwbGF5VmFsdWUiLCJQYWdlQXNzb2MiLCJfbGlua18iLCJjaGFuZ2VTdGF0ZSIsImxpZmVFeHBlY3RhbmN5Q2FsY0NvbnRybCIsImxpZmVFeHBlY3RhbmN5Q2FsY1NlcnZpY2UiLCJnZXRDYWxMaWZlRXhwZWN0YW5jeSIsImxpZmVFeHBlY3RhbmN5IiwibGlmZUNhbGNWTSIsImNhbGN1bGF0ZWREYXRhIiwibGVMb3dlckFnZSIsImxlVXBwZXJBZ2UiLCJsZUFnZSIsInZhbHVlVGV4dCIsInJhbmdlVGV4dCIsImFnZSIsImdlbmRlciIsIm1vcnRhbGl0eSIsInNtb2tpbmciLCJsdGNMaW5rVk0iLCJtYXBJZCIsImx0Y1N0YXRlU2VsZWN0b3JzTGluayIsInNsaWRlIiwibXVsdGlTbGlkZVZNIiwibXVsdGlTbGlkZUluaXQiLCJlbGxpcHNlU2xpZGUiLCIkcGFyc2UiLCJjYWxjdWxhdGVQb2ludHMiLCJxdWVzdGlvbm5haXJlIiwicXVlc3Rpb25Qb2ludHMiLCJwb2ludHMiLCJmaW5hbFBvaW50cyIsInBhcnNlRmxvYXQiLCJibWlQb2ludCIsInVwZGF0ZVNlcnZpY2UiLCJjYWxjdWxhdGVCTUlQb2ludHMiLCJibWkiLCJCTUkiLCJjYWxjdWxhdGVCTUkiLCJ3ZWlnaHQiLCJwb3ciLCJ1cGRhdGVFbmdhZ2UiLCJlbmdhZ2VEYXRhIiwidXBkYXRlUG9pbnRzIiwicG9pbnQiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsInNlcnZpY2VEYXRhIiwicUV2ZW50VHlwZSIsInBhcmFtU3RhdGUiLCJzbGlkZXJzIiwidmFsaWRhdGlvbiIsIm5vT2ZTdGVwcyIsImN1cnJTdGVwIiwiZGVmYXVsdERET3B0aW9ucyIsImNpZCIsInZpc2l0b3JBdHRyIiwic3RlcCIsInRvdGFsUXRucyIsInNpbmdsZVNlbGVjdFF0bnMiLCJoYXNTUyIsIm11bHRpU2VsZWN0UXRucyIsImhhc01TIiwic3RlcDEiLCJzbGlkZXJHbG9iYWwiLCJzbGlkZXIiLCJvbkNoYW5nZSIsImlzTnVtZXJpYyIsIm9wdGlvblBvaW50cyIsInRyYW5zbGF0ZSIsInNob3dUaWNrcyIsImZsb29yIiwic3RhcnRWYWx1ZSIsImVuZFZhbHVlIiwiaW5jcmVtZW50IiwicHJlY2lzaW9uIiwic3RlcHNBcnJheSIsImlucHV0T2JqIiwiaXNWYWxpZGF0ZWQiLCJmb3JtU3VibWl0IiwiZm9ybVVSTCIsImhhc0VuZ2FnZURhdGEiLCJmb3JtVVJMUmVkaXJlY3QiLCJuYXZTdGVwcyIsInNjcm9sbFRwVmFsIiwiYm9keSIsInF1ZXVlIiwiZWFzaW5nIiwiZHVyYXRpb24iLCJkYXRhTmFtZSIsImVsZUlkIiwiaGlkZGVuSW5wdXRWYWwiLCJsaUVsZSIsInVsRWxlIiwiY2hlY2tib3hFbGUiLCIkaW50ZXJ2YWwiLCJwb2xsQW5pbVN0b3AiLCJxdWlja1BvbGxDb250cm9sbGVyVk0iLCJwb2xsT3B0aW9uQ291bnQiLCJwb2xsT3B0aW9uVGVtcENvdW50IiwicG9sbE9wdE1hdGNoIiwicmVjb3JkUG9sbFVSTCIsImdldFBvbGxSZXN1bHRzbFVSTCIsInJlY29yZCIsInBvbGxEYXRhIiwib3B0aW9uTGlua3MiLCJiYXJTdHlsZSIsInBvbGxPcHRpb24iLCJnZXRQb2xsUmVzdWx0cyIsInBvbGxSZXN1bHRzQW5pbSIsInJlc3BvbnNlRGF0YSIsImNhbmNlbCIsInN1Ym1pdFZvdGUiLCJ0b3RhbFBvbGxDb3VudCIsImJvcmRlciIsInNjcm9sbGluZ1ZhbHVlIiwiYXBwbHlHcmFkaWVudCIsInFwYlZNIiwicHJvZ3Jlc3MiLCJncmFkaWVudFBlcmN0IiwiYmFjayIsImFyciIsImFydE1heFN0eWxlIiwiZmlyc3RUb1VwcGVyQ2FzZSIsImxldHRlciIsInNob3dMYXN0Q2xpY2tlZCIsIm1heC1oZWlnaHQiLCJzZWFyY2hTZXJ2aWNlIiwiX3NlYXJjaFJlc3VsdE9iaiIsInJlc3VsdHNGb3IiLCJub1Jlc3VsdHNGb3IiLCJpc0xlc3NUZW4iLCJtb2JpbGVMaXN0Q291bnQiLCJkaXNhYmxlTmV4dCIsImRpc2FibGVQcmV2Iiwic3RhcnRGcm9tIiwic2VhcmNoUmVzdWx0c0luaXQiLCJnZXRVUkxQYXJhbWV0ZXIiLCJyZWdleCIsImV4ZWMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZXN1bHRMaXN0Iiwic2VhcmNoT2JqIiwicXVlcnlTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnQiLCJzaXRlIiwic2l0ZVZhbHVlIiwic2VydmljZVVSTCIsImFjdGl2ZUVsZW1lbnQiLCJwcm90b2NvbCIsInNlYXJjaFF1ZXJ5IiwiR1NQIiwiUkVTIiwiRU4iLCJSIiwiVCIsIlMiLCJyZXN1bHRzTGVuZ3RoIiwicmVzdWx0U2VjdGlvbiIsInNldEFuZFJlc2V0IiwibnVtYmVyT2ZQYWdlcyIsImNvdW50UGVyUGFnZSIsImFuY2hvckFycmF5IiwiZ2VuZXJhdGVQYWdpbmF0aW9uIiwiY3VycmVudFBhZ2UiLCJjbGlja2VkTnVtIiwic2hvd01vcmVSZXN1bHRzIiwiaXNOb1Jlc3VsdCIsIlEiLCJ2aWV3ZWRDb3VudCIsInNob3dDdXJyZW50UGFnZSIsIkxJU1ROVU0iLCJnZXRQcmVOZXh0UGFnZSIsImN1cnJlbnRQYWdlSW5kZXgiLCJ0b3RhbFBhZ2VDb3VudCIsInBhZ2VzQXJyYXkiLCJuYXZBcnJheSIsImZpcnN0bW92ZSIsInN0YXJ0RWxsaXBzZXNJbmRleCIsImVuZEVsbGlwc2VzSW5kZXgiLCJsYXN0SW5kZXhPZiIsIm1hdGNoZWQiLCJnZXROZXh0U2V0UGFnZXMiLCJnZXRQcmV2aW91c1NldFBhZ2VzIiwic3RhcnRMaW1pdCIsInVwcGVyTGltaXQiLCJtaWRBcnJheSIsImRpZmYiLCJoYXZlTmV4dFNldFBhZ2VzIiwibG93TGltaXQiLCJnZXRNb3JlUmVzdWx0cyIsInN0YXJ0Iiwic2VjRmlsaW5nc1NlcnZpY2VzIiwic2VjRmlsaW5nc1R5cGVJbmZvIiwiZmlsaW5nVHlwZSIsInBvc3RWYWx1ZSIsImZpbGluZ0ZpbHRlclR5cGUiLCJjdXN0b21GaWx0ZXIiLCJkYXRhQ29sdW1uIiwic2VjRmlsaW5nRGF0YSIsImRhdGFGcm9tSnNvbiIsImRhdGFWYWx1ZSIsInNlY0ZpbGluZ2RhdGEiLCJmaXJzdFRpbWVMb2FkIiwic2VjRmlsaW5nc1R5cGUiLCJzZWNGaWxpbmdEYXRlIiwic2VjRmlsaW5nRGF0YVRhYmxlIiwiRklMSU5HREFURSIsInNlY0ZpbGluZ3NUeXBlRGF0ZSIsImEiLCJ0ZW1wIiwiciIsInVuc2hpZnQiLCJicm93c2VyTmFtZSIsInJldmVyc2UiLCJsYXN0U2VjWWVhciIsIkZJRCIsInNJbmZvRmlsdGVyZWQiLCJmaWxpbmdZZWFyIiwidW5lc2NhcGUiLCJzdGFyUmF0aW5nU2VydmljZSIsIm1vZGUiLCJzdGFyUmF0aW5nIiwic3Bpbm5lciIsInJhdGluZyIsImF2Z1JhdGluZyIsImN1cnJTdGFyIiwidG90YWxSYXRpbmdzIiwic2VydmljZU1zZyIsInNhdmVNb2RlIiwic3VjY2Vzc01vZGUiLCJtc2dUaW1lb3V0IiwidGltZW91dCIsInBhZ2VJZCIsIm9uSG92ZXJGb2N1cyIsInN0YXIiLCJvbkhvdmVyRm9jdXNFeGl0Iiwic3RhckNsaWNrIiwicGFnZVRpdGxlIiwicGFnZVZlcnNpb24iLCJhcHBOYW1lIiwidG9nZ2xlU2Nyb2xsIiwiZGlzYWJsZVNjcm9sbCIsImF1ZGllbmNlQWdlU2VsVk0iLCJzZWdtZW50VmFsIiwiYXVkaWVuY2VDbGFzcyIsInRvcEhlYWRlckNsYXNzIiwiaW5kaXZpZHVhbFBhZ2VJZCIsInNob3dBdWRpZW5jZUFnZVNlbCIsImF1ZGllbmNlQWdlU2VsIiwibW9iaWxlQXVkaWVuY2VBZ2VTZWwiLCJzaG93QXVkaWVuY2VBZ2VTZWxlY3Rvck1vYmlsZSIsInNldFNlZ21lbnQiLCJzZWdtZW50IiwicmVsb2FkIiwiaW5kaXZpZHVhbFBhZ2VVUkwiLCJsZmdMb2NhbGVWTSIsImxvY2FsZUFycmF5IiwiZW5fVVMiLCJlc19FUyIsImN1cnJMb2NhbGVEZXNrdG9wIiwiY3VyckxvY2FsZU1vYmlsZSIsImN1cnJMb2NhbGUiLCJjdXJyTG9jYWxlVGVtcCIsImxvY2FsZUNsaWNrIiwibG9jYWxlRGVzYyIsImxvY2FsZXMiLCJzZWN1cmVkQ29udGVudFZNIiwic2hvd0xvZ2luIiwic2hvd0RlZmF1bHQiLCJzaG93U2VjdXJlZCIsImxvZ2luRm9ybU5hbWUiLCJsb2dpblN0YXRlIiwiY29tcG9uZW50UGFnZVVSTCIsImNvbXBhcmVDaGFydERhdGEiLCJjaGFydENvbW1vbiIsImNoYXJ0TW9kdWxlIiwiZmlsdGVyQ2hhcnQiLCJjYXRlZ29yaWVzWGF4aXMiLCJoZWFkZXJEYXRhIiwieEF4aXNUaXRsZSIsInNlcmllc1ZhbHVlcyIsImNoYXJ0VmFsdWVzIiwic2VsZWN0ZWQiLCJhbm51YWxSZXR1cm4iLCJjb21wYXJlQ2hhcnRDcmVhdGUiLCJsZWdlbmRTdHlsZVdpZHRoIiwiY2hrTWFyZ2luVG9wIiwiY2hrTGVmdCIsInhheGlzVGl0V2lkdGgiLCJjb2xvcnMiLCJzc20iLCJpc0FjdGl2ZSIsImhpZ2hjaGFydHMiLCJjaGFydCIsInhBeGlzIiwiZ3JpZExpbmVXaWR0aCIsImxhYmVscyIsImZvbnRTaXplIiwiY2F0ZWdvcmllcyIsImZvbnRXZWlnaHQiLCJ5QXhpcyIsInBlcmN0Q2hhbmdlIiwiZm9ybWF0dGVyIiwidG9vbHRpcCIsInNlcmllcyIsInkiLCJjcmVkaXRzIiwiZW5hYmxlZCIsInBsb3RPcHRpb25zIiwicG9pbnRQYWRkaW5nIiwiYm9yZGVyV2lkdGgiLCJzaG93Q2hlY2tib3giLCJldmVudHMiLCJjaGVja2JveENsaWNrIiwiY2hlY2tlZCIsInVzZXJPcHRpb25zIiwibGVnZW5kU3ltYm9sIiwibGVnZW5kSXRlbUNsaWNrIiwicGllIiwibGVnZW5kIiwiaW52ZXN0T3B0aW9ucyIsIml0ZW1XaWR0aCIsIml0ZW1TdHlsZSIsIm1hcmdpblRvcCIsImNoYW5nZUhlYWRlckZpbHRlciIsImNoYXJ0RGF0YSIsImN1cnJlbnRIZWFkZXIiLCJwcmludENvbXBhcmVPdmVybGF5IiwiaWZyYW1lIiwibm9QcmludFNlbGVjdG9yIiwiZGVmZXJyZWQiLCJEZWZlcnJlZCIsInBlcmZvcm1PYmoiLCJhbGlnbkxlZ2VuZCIsInZlcnRpY2FsQWxpZ25MZWdlbmQiLCJsZWdlbmRYIiwibGVnZW5kWSIsImhlaWdodFBpZSIsIndpZHRoUGllIiwiaGVpZ2h0QmFyIiwid2lkdGhCYXIiLCJoZWlnaHRCYXIxIiwid2lkdGhCYXIxIiwic3BsaXRlZE51bUFycmF5IiwiaW52ZXNjb092ZXJsYXkiLCJ1SVRhYlNldCIsImludmVzY29Nb2R1bGUiLCJmaWx0ZXJJbmRleCIsImludmVzY29VdGlsIiwiaW52ZXNjb01vZHVsZXMiLCJjaGVja0Ryb3BEb3duTnVtYmVyIiwibnVtIiwiY2hlY2tJbmRleFZhbHVlIiwieWVhck5hbWUiLCJmdW5kUGVyZm9ybWFuY2VEYXRhIiwiY2hlY2tmdW5kRGV0YWlsQXJyYXkiLCJhcnJheSIsImZ1bmRUb3BUZW5Ib2xkaW5ncyIsInRvdGFsSG9sZGluZyIsImZ1bmRDbGFzc2VzIiwiYmFyRnVuZEFyciIsImJhcmZ1bmRDbGFzc05hbWUiLCJmdW5EZXRhaWwiLCJmdW5kSW5jZXB0aW9uRGF0ZSIsImZ1bmRQb3J0Rm9saW9EYXRlIiwicGN0IiwiaiIsImNvbXBhbnlOYW1lIiwiY2hlY2tmdW5kRGlzY2xvc3VyZXNBcnJheSIsImZvb3Rub3RlTnVtYmVycyIsIm51bWJlcnMiLCJkaXNjTm8iLCJkaXNjVGV4dCIsInNhY29kZTEiLCJzaG93UGllQmFyQ2hhcnQiLCJzaG93T3ZlcmxheSIsIm1vbnRoVmlld0NhdEFycmFyeSIsIm1vbnRoVmlld1ZhbHVlQXJyYXJ5IiwibW9udGhWaWV3IiwiMCIsIjEiLCIyIiwiZnVuZEluY0R0Iiwicm90YXRpb24iLCJsaW5lV2lkdGgiLCJ0aWNrSW50ZXJ2YWwiLCJkZWNWYWx1ZSIsImJhciIsImRhdGFMYWJlbHMiLCJpc1BpZUJhciIsIkhpZ2hjaGFydHMiLCJDaGFydCIsInJlbmRlclRvIiwicGxvdEJhY2tncm91bmRDb2xvciIsInBsb3RCb3JkZXJXaWR0aCIsInBsb3RTaGFkb3ciLCJtYXJrZXIiLCJhbGxvd1BvaW50U2VsZWN0IiwiY3Vyc29yIiwibW91c2VPdmVyIiwibW91c2VPdXQiLCJzaG93SW5MZWdlbmQiLCJhbGlnbiIsInZlcnRpY2FsQWxpZ24iLCJsYXlvdXQiLCJpdGVtTWFyZ2luQm90dG9tIiwibGFiZWxGb3JtYXR0ZXIiLCJtb3VzZW92ZXIiLCJzZWxlY3RlZExlZ2VuZCIsInRvdFB0cyIsIm1vdXNlb3V0IiwibWluIiwiY29sb3JCeVBvaW50IiwiZ2V0RG93bmxvYWQiLCJmYWN0b3J5IiwiZm9ybVBvc3RVcmwiLCJGVU5DVElPTiIsIlRJQ0tFUiIsIkxPT0tVUERBVEUiLCJwYXJzZUpTT04iLCJpbnNpZGVyVHJhZGluZyIsImxpZmVFeHBlY3RhbmN5Q2FsYyIsIiRxIiwicHJudEVsZSIsImdldEVsZW1lbnRzQnlOYW1lIiwiY3JlYXRlSW5mb1dpbmRvd01zZyIsImluZm9XaW5kb3dDb250ZW50IiwiaXNFbXB0eVN0cmluZyIsImxhdCIsImxuZyIsIm1hcmtlckNsaWNrIiwibWFya2VyTGJsIiwibGFiZWwiLCJzZWxNYXJrZXIiLCJsYXRsbmciLCJwaXhlbE9mZnNldCIsImdvb2dsZSIsIm1hcHMiLCJTaXplIiwiZ2V0TWFwIiwiaW5mb3dpbmRvdyIsInNldE9wdGlvbnMiLCJzZXRQb3NpdGlvbiIsInNldENvbnRlbnQiLCJtYXJrZXJDbHVzdGVyQ2xpY2siLCJjbHVzdGVyIiwibWFya2VycyIsImdldE1hcmtlcnMiLCJoYXNTYW1lTGF0TG5nIiwicHJldk1hcmtlciIsImdldFBvc2l0aW9uIiwiY2x1c3RlckNvbnRlbnQiLCJhZHZpc29ySW5kZXgiLCJhdHRhY2hNYXJrZXJzIiwibWFya2V0TGJsRlNpemUiLCJpY29uT3JpZ2luIiwiUG9pbnQiLCJsYXRMbmciLCJMYXRMbmciLCJNYXJrZXIiLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJEUk9QIiwiaWNvbiIsImxhYmVsT3JpZ2luIiwiY29sb3IiLCJhZGRMaXN0ZW5lciIsIm1hcmtlckNsdXN0ZXJlciIsIk1hcmtlckNsdXN0ZXJlciIsImltYWdlUGF0aCIsIm1heFpvb20iLCJ6b29tT25DbGljayIsIm1hcEluaXRPYmoiLCJNYXAiLCJ6b29tIiwiY2VudGVyIiwibGF0bG5nYm91bmRzIiwiTGF0TG5nQm91bmRzIiwiZml0Qm91bmRzIiwiSW5mb1dpbmRvdyIsImRlZmVyIiwiR2VvY29kZXIiLCJnZW9jb2RlIiwiZ2VvbWV0cnkiLCJ2YWxpZGF0ZVppcENvZGUiLCJ2YWxpZGF0ZVBob25lTm8iLCJmb3JtYXRQaG9uZU5vIiwiZ2V0IiwicGFnZVlPZmZzZXQiLCJ0b3BIZWFkZXJQb3MyIiwidG9wSGVhZGVyUG9zMSIsInJlcXVpcmUiLCJjdHJsIiwiZGlnaXRzIiwiJHNldFZpZXdWYWx1ZSIsIiRyZW5kZXIiLCIkcGFyc2VycyIsIndhdGNoUHJlZml4QW5kQWNjTnVtIiwiYnV0dG9uIiwibGZzQWNjb3VudENvbnRyb2xsZXIiLCJ2YWxpZGF0ZSIsImlzUHJlZml4MUNoYW5nZWQiLCJwcmVmaXgiLCJpc0FjY051bTFDaGFuZ2VkIiwiYWNjTnVtIiwiYXR0ckFzc2V0IiwiYXNzZXRTdHIiLCJhc3NldENhdCIsImFzc2V0IiwiYXNzZXRzQ2F0IiwiJGxhc3QiLCIkZW1pdCIsInVwZGF0ZUNvbCIsInN1Yk1lbnVDb250RWxlIiwic3ViTWVudVdyYXBwZXJFbGUiLCJub09mQ29scyIsImhhc1F1aWNrbGlua3MiLCJhbGlnbk1lbnUiLCJtZW51RWxlIiwic2l0ZU5hdkVsZSIsImh0bWxFbGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIm1lbnV0eXBlIiwicGFkZGluZ1RvcCIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGFkZGluZ0JvdHRvbSIsIm1heEhlaWdodCIsImNvbEhlaWdodCIsInoiLCJzdWJNZW51SXRlbUVsZSIsIm9mZnNldEhlaWdodCIsImJvcmRlclRvcCIsInN1Yk1lbnVXaWR0aCIsIm1lbnVXaWR0aCIsIm1lbnVMZWZ0Iiwib2Zmc2V0TGVmdCIsImxlZnRBbGlnbiIsImdsb2JhbENvbnRXaWR0aCIsImdsb2JhbENvbnRNYXJnaW5MZWZ0Iiwic3BhY2VPblJpZ2h0Iiwic3BhY2VPbkxlZnQiLCJyaWdodCIsInJlbW92ZVByb3BlcnR5IiwiaW50ZXJ2YWxJZCIsInNjcm9sbFRvIiwiYWRkU2xpZGVDbGFzcyIsIm1lbnVEcmlsbERvd24iLCJkYXRhTGV2ZWwiLCJnZXRBdHRyaWJ1dGUiLCJtZW51SWQiLCJoaWRlTWVudUlkIiwiY29udGFpbmVySWQiLCJjb250aWFuZXJFbGUiLCJxdWVyeVNlbGVjdG9yIiwic2hvd01lbnUiLCJoaWRlTWVudSIsIm1lZ2FtZW51RWxlIiwibWVnYW1lbnVFbGVCVyIsIm1lbnVEcmlsbFVwIiwic2hvd01lbnVJZCIsImNvbnRIZWlnaHQiLCJzdWJtZWdhbWVudSIsInN1YnN1cHBvcnRtZW51IiwiZHJpbGxkb3duIiwic2hvd1JlZ2lzdGVyVG9vbHRpcCIsImZpbmFsRWxEaWZmIiwiZWxlVG9wIiwiZG9jU2Nyb2xsVG9wIiwiZWxlTGVmdCIsImVsZUhlaWdodCIsInRsdGlwRWxlIiwidGxwV2lkdGgiLCJ0bHBIZWlnaHQiLCJkZXZpY2VIZWlnaHQiLCJmaW5hbEVsZVRvcCIsImZpbmFsQXJyb3dUb3AiLCJoaWRlUmVnaXN0ZXJUb29sdGlwIiwibGlzdEVsZSIsImhlbHBFbGUiLCJ0b29sdGlwSWQiLCJsaW5rRWxlIiwibGlua1RleHRBcnJheSIsImxhc3RXb3JkIiwiaWNvbmNsYXNzIiwiYXR0cnMiLCJhc3luY0NvbXBvbmVudCIsImNvbnRlbnRzIiwiZm4iLCJteVZhbHVlIiwiY3JlYXRlUmFuZ2UiLCJzZWxlY3Rpb25TdGFydCIsInN0YXJ0UG9zIiwiZW5kUG9zIiwic2VsZWN0aW9uRW5kIiwidHJhbnNmb3JtZWRJbnB1dCIsInRyYW5zZm9ybWVkWmlwSW5wdXQiLCJvcGVuVHlwZSIsInNoYXJlUGFnZVVSTCIsImRlc2NyaXB0aW9uIiwiaG9zdG5hbWUiLCJzbGlkZXRpbWUiLCIkYmFubmVyTGlzdCIsInNsaWRlck9iaiIsIm5leHRTZWxlY3RvciIsInBhdXNlIiwicHJldlNlbGVjdG9yIiwidXNlQ1NTIiwibmV4dFRleHQiLCJjb250cm9scyIsInByZXZUZXh0IiwiYXV0byIsImF1dG9Ib3ZlciIsInNsaWRlTWFyZ2luIiwiaW5maW5pdGVMb29wIiwib25TbGlkZXJMb2FkIiwiY3VycmVudEluZGV4IiwiYnVpbGRQYWdlciIsInNsaWRlSW5kZXgiLCJieFNsaWRlciIsImdvVG9QcmV2U2xpZGUiLCJzdG9wQXV0byIsImdvVG9OZXh0U2xpZGUiLCJnb1RvU2xpZGUiLCJsb2FkIiwib3BlbkFjY3RvcCIsImNvbW1vbk1vZHVsZSIsImVycm9yU2Nyb2xsUG9zIiwicGFyZW50U2VjdGlvbiIsInJlc2V0RmllbGQiLCJyZXNldEZvcm1GaWVsZCIsImFycm93cyIsImJlZm9yZVNob3ciLCJ0cGwiLCJjbG9zZUJ0biIsIlNlcnZpY2VQYmxVUkwiLCJBbm51aXR5U2VhcmNoRm9ybXMiLCJMaWZlU2VhcmNoRm9ybXMiLCJBbm51aXR5Q2xhaW1zRm9ybXMiLCJMaWZlQ2xhaW1zRm9ybXMiLCJMb25nVGVybUNhcmVGb3JtcyIsIkxvbmdUZXJtQ2xhaW1zRm9ybXMiLCJ4bWxUb0pzb24iLCJub2RlVHlwZSIsImF0dHJpYnV0ZSIsIm5vZGVOYW1lIiwibm9kZVZhbHVlIiwiaGFzQ2hpbGROb2RlcyIsImNoaWxkTm9kZXMiLCJvbGQiLCJpbnB1dEZvcm1hdCIsImRhdGVTZXBhcmF0b3IiLCJzcGxpdERhdGUiLCJmb3JtYXRBTVBNIiwiZGF0ZXMiLCJob3VycyIsImdldEhvdXJzIiwibWludXRlcyIsImdldE1pbnV0ZXMiLCJhbXBtIiwiYnl0ZXMiLCJzaXplcyIsImludmVzdG9yUmVsYXRpb25zIiwic2VhcmNoVVJMIiwibGxhdmFUb29sUmVkaXJlY3QiLCJoaXN0b3JpY2FsUHJpY2VzIiwicXVvdGVzQW5kQ2hhcnRzIiwiZG9jdW1lbnRIYW5kbGVyIiwibW91c2Vtb3ZlIiwibWxwIiwicGFnZVgiLCJwYWdlWSIsImlzbW91c2VvdmVyIiwiJGN1cnJlbnQiLCJpbml0RGF0YURyaXZlbkVsZW1lbnRzIiwibWF0Y2hIZWlnaHQiLCJleHBhbmRhYmxlU2VhcmNoRmllbGQiLCJpbWFnZUZpbGwiLCJjb250ZW50RXh0ZW5kZXIiLCJ1SURyb3Bkb3duIiwiRXJyb3IiLCJtb2Rlcm5pemUiLCJNb2Rlcm5penIiLCJhZGRUZXN0IiwiY3JlYXRlRWxlbWVudCIsIl91bmlxdWVJRCIsImdldFVuaXF1ZUlEIiwiZ2V0TGFzdFVuaXF1ZUlEIiwiY2FsbG91dEdyaWRXaXRoRmlsdGVyIiwiY2FsbG91dEZpbHRlciIsImZpbHRlclN1YkNhdCIsInZpc2libGVUaWxlQ291bnQiLCJtYXRjaGVkQ291bnQiLCJ0aWxlQ2F0Iiwic3ViVGlsZUNhdCIsIlRJTEVTX1RPX1NIT1ciLCJpc01vYmlsZSIsImJvcmRlci10b3AiLCJzZXRSb3dIZWlnaHQiLCJsZWZ0VGlsZSIsInJpZ2h0VGlsZSIsInNob3dRdHkiLCJfY2F0ZWdvcnlMaXN0IiwiY2F0ZWdvcnlMaXN0IiwiX3N1YkNhdGVnb3J5TGlzdCIsInVybFBhcmFtcyIsInAiLCJwYWlyIiwidXJsQ2F0IiwiZHJvcGRvd25DYXQiLCJzdWJEcm9wZG93bkNhdCIsImNpdHlDb2RlcyIsInN0YXRlTmFtZUNvbnRyb2wiLCJzdGF0ZU1vZHVsZSIsImNoZWNrU3RhdGVEYXRhIiwiY29tbWVyY2lhbFJlYWxFc3RhdGUiLCJjaXR5Q29kZUxpc3QiLCJzdGF0ZURhdGFzIiwiUGFnZVRpbWVsaW5lIiwiYmFzZSIsIiRlbCIsImN1cnJlbnRCcmVha3BvaW50IiwiJGJsb2NrcyIsInRocm90dGxlZFVwZGF0ZVRpbWVvdXQiLCJ0aHJvdHRsaW5nSW5Qcm9ncmVzcyIsImRldGVjdEN1cnJlbnRCcmVha3BvaW50Iiwib25SZXNwb25zaXZlU3RhdGVjaGFuZ2VkIiwid2lyZSIsInVwZGF0ZUhlaWdodHMiLCJ0aHJvdHRsZWRVcGRhdGUiLCJjaGVja0FuZFVwZGF0ZSIsInVud2lyZSIsIm9mZiIsImNsZWFyVGhyb3R0bGluZyIsInRpbWVsaW5lSG9sZGVyIiwic2VjdGlvbkhvbGRlciIsImhvbGRlckJvdHRvbUVkZ2VZIiwiZmlndXJlQm90dG9tRWRnZVkiLCJuZXdzdGF0ZSIsInBhZ2VUaW1lbGluZSIsImhhc1Njcm9sbEJhciIsInNjcm9sbEhlaWdodCIsIndub192ZXJzaW9uIiwid25vX2Nvb2tpZV92YWwiLCJnZXRGb2N1c2FibGVDaGlsZHMiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJicmlnaHRjb3ZlVmlkZW9SYXRpbyIsImJyaWdodGNvdmVXaWQiLCJicmlnaHRjb3ZlSGd0IiwidmlkRWxlbVdpZCIsImJyaWdodGNvdmVDb250VG9wIiwiYnJpZ2h0Y292ZVZpZGVvV2lkdGgiLCJicmlnaHRjb3ZlVmlkZW9IZWlnaHQiLCJicmlnaHRjb3ZlVmlkZW9IZWlnaHRWYWwiLCJpbm5lckhlaWdodCIsImJyaWdodGNvdmVJbmxpbmVWaWRlb1JhdGlvIiwiYnJpZ2h0Y292ZVZpZGVvSW5saW5lV2lkdGgiLCJicmlnaHRjb3ZlVmlkZW9JbmxpbmVIZWlnaHQiLCJicmlnaHRjb3ZlVmlkZW9JbmxpbmVIZWlnaHRWYWwiLCJ2aWQiLCJicmlnaHRjb3ZlUGxheWVySUQiLCJ2aWRlbyIsInZpZGVvanMiLCJpc0Z1bGxTY3JlZW4iLCJ2aWRlb09iamVjdCIsInBsYXllcklEIiwiZGlzcG9zZSIsInZpZGVvU3R5bGUiLCJ2aWRlb0lkIiwia2V5cHJlc3MiLCJzZWFyY2hTdHJpbmciLCJVSUFjY29yZGlvbiIsInMiLCJvcGVuRHVyYXRpb24iLCJjbG9zZUR1cmF0aW9uIiwiY2xvc2VCdXR0b24iLCJjbG9zZUNoYXIiLCJjbG9zZVRvcCIsImNsb3NlUmlnaHQiLCJvZmZzZXRCb3R0b20iLCJwcmV2SGVpZ2h0Iiwic3RpY2t5RWwiLCJzdGlja3lQYXJlbnRFbCIsInJlbGF0aXZlT2Zmc2V0IiwiJGl0ZW1zIiwiJGNvbnRlbnRIb2xkZXJzIiwiZXhwYW5kU3BlZWQiLCJjb2xsYXBzZVNwZWVkIiwiJHNlbGVjdGVkSGVhZGVyIiwic2VsZWN0ZWRIZWFkZXJJZHgiLCIkaGVhZGVycyIsIiRlbHQiLCJvbkhlYWRlckZvY3VzIiwib25IZWFkZXJCbHVyIiwiJGhlYWRlciIsIiRwYW5lbCIsInVpZCIsInNlbGVjdFByZXYiLCJzZWxlY3ROZXh0Iiwic2VsZWN0SGVhZGVySWR4IiwiZGVzZWxlY3RIZWFkZXJJZHgiLCJjbGlja2VkaWR4IiwiY2xvc2VJZHgiLCJvcGVuSWR4IiwiJGN1cml0ZW0iLCJjdXJyV2luU2NyVHAiLCJzdGlja3IiLCJkeW5hbWljSGVpZ2h0Iiwic3RpY2t5UGFkZGluZyIsInN0aWNreVBybnRQb3NpdGlvbiIsInJpZ2h0TmF2SGVpZ2h0Iiwid2luU2NybFRvcCIsInN0aWNreVBybnRUb3AiLCJzdGlja3lIZWlnaHQiLCJhZGRTdGF0ZSIsIm1heFdpZHRoIiwib25FbnRlciIsIm1pbldpZHRoIiwibGZnQmFja1RvVG9wIiwid2luZG93T25TY3JvbGxMaXN0ZW5lciIsImxhc3RTY3JvbGxZIiwiYnR0RWxlIiwiYW5pbWF0ZVNjcm9sbCIsInNjcm9sbFlEaWZmIiwiYnR0T25DbGlja0xpc3RlbmVyIiwicmVnaXN0ZXJFdmVudHMiLCJvbmNsaWNrIiwiYzJjT3BlblZhbHVlIiwiY1RhYlZhbHVlIiwiQWMyY09wZW5WYWx1ZSIsIkFjVGFiVmFsdWUiLCJvcGVuQ2hhdFdpbmRvdyIsImNoYXRGb3JtIiwiYWN0aW9uIiwicGFyYW1zIiwicm9sZSIsImFwcElkIiwiYWN0dnR5U3JjTmFtZSIsImxvYiIsImhhc093blByb3BlcnR5IiwiaGlkZGVuSW5wdXQiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwib3BlbkNoYXRXaW5kb3dBbm51aXRpZXMiLCJjMmNVbmxvYWRJdGVtIiwiQ29udGVudEV4dGVuZGVyIiwiZGVmZXJVcGRhdGVUaW1vdXQiLCJkZWZhdWx0T3B0aW9ucyIsImRpc2FibGVGb3JCcmVha3BvaW50cyIsImhhbmRsZUFjdGl2ZVN0YXRlIiwiaXNBY3RpdmVGb3JDdXJyZW50QnJlYWtwb2ludCIsImFjdGl2YXRlIiwiZGVhY3RpdmF0ZSIsInVwZGF0ZSIsIm1hcmdpbi1yaWdodCIsImRlZmVycmVkVXBkYXRlIiwiZGVmZXJVcGRhdGVNc2VjcyIsIndpblciLCJlbHRXIiwiZGVsdGEiLCJhYnMiLCJnZXRDb250ZW50RXh0ZW5kZXIiLCJjdXN0b21TZWxlY3Rib3giLCJjbGlja2VkT25JbW1lZGlhdGVEcm9wRG93biIsImZpcnN0VmFsIiwic2xpZGVVcCIsInNsaWRlRG93biIsInNlbGVjdGVkVmFsIiwic2VsZWN0ZWREYXRhVmFsIiwicHJldiIsImV4dGVuZERlZmF1bHRzIiwic291cmNlIiwicHJvcGVydGllcyIsInByb3BlcnR5IiwiYmluZERhdGUiLCJfIiwibW50aCIsInlyIiwiZG9jIiwidGhlTW9udGhzIiwiY3VyRGF0ZSIsImN1ck1vbnRoIiwiZ2V0TW9udGgiLCJkYXRlRHJvcERvd24iLCJtb250aERyb3BEb3duIiwieWVhckRyb3BEb3duIiwiZGF0IiwieWFyIiwiYXV0b1NlbGVjdCIsImRlZmF1bHRzIiwiYXJndW1lbnRzIiwibXVsdGlkZEh0bWwiLCJzZWxlY3RlZE9wdGlvbkNvdW50Iiwic2VsZWN0ZWRUZXh0cyIsInRvZ2dsZUNsYXNzIiwidGl0bGVOZXciLCJ0aXRsZUh0bWwiLCIkdG90YWxDYXJvdXNlbExpc3QiLCJsZWZ0VmFsIiwid2hpY2hEZXZpY2UiLCJ3aW5XaWQiLCJ0eHRFbGVtTGVmdCIsImVsZW1Qb3MiLCJjYXJvdXNlbFRvcHJlc2l6ZSIsImVsZW1JbmRleCIsImNhcm91c2VsVG9wQ29udFdpZExpc3RMZW5ndGgiLCJjb3VudFRvcCIsImxpc3RNYXJnaW5Ub3BDYXJvdXMiLCIkY2Fyb3VzZWxUb3BDb250V2lkTGlzdCIsInNob3dMaXN0VG9wIiwidXBkYXRlZFdpZFRvcCIsIiRjYXJvdXNlbFRvcENvbnRXaWQiLCJjYXJvdXNlbFRvcENvbnRVTFdpZCIsImNhcm91c2VsVG9wQ29udExlbmd0aCIsIiR0b3RhbFRvcENhcm91c2VsTGlzdCIsImxlZnRWYWxUb3BDYXJvdXMiLCJmaXhGb3JtIiwiY2FtcGFpZ25SZWRpcmVjdGlvblBhZ2VVUkwiLCJhc3luY19sb2FkIiwic2NyaXB0Iiwic2NyaXB0RWxlIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsImF0dGFjaEV2ZW50IiwiX2VscVFSZWFkeUNoZWNrMSIsImVscVNpdGVJRCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjb25maXJtYXRpb25QYWdlIiwiX2VscVFSZWFkeUNoZWNrMiIsIkV4cGFuZGFibGVTZWFyY2hGaWVsZCIsIiRidXR0b24iLCIkdGV4dGZpZWxkIiwib25TZWFyY2hCdXR0b25DbGljayIsIm9uVGV4dEZpZWxkRm9jdXMiLCJzZWFyY2hGaWVsZFJld2lyZSIsImlzQ29sbGFwc2VkIiwic2VhcmNoRmllbGRFeHBhbmQiLCJwZXJmb3JtU2VhcmNoIiwic2VhcmhQYXJhbSIsIm9uU2VhcmNoS2V5cHJlc3MiLCJzZWFyY2hGaWVsZENvbGxhcHNlIiwiZ2V0RXhwYW5kYWJsZVNlYXJjaEZpZWxkIiwiSW1hZ2VGaWxsIiwiaW1ndyIsImltZ2giLCIkaW1nIiwid2lyZUltZyIsIm5hdHVyYWxXaWR0aCIsInRhcmdldEhlaWdodCIsInJhdGlvIiwidGFyZ2V0V2lkdGgiLCJnZXRJbWFnZUZpbGwiLCJMaXN0UHVsbGRvd24iLCIkbGlzdFRpdGxlIiwiJGxpc3RJdGVtcyIsImN1ckFjdGl2ZUlkeCIsImRlZmF1bHRQcm9tcHQiLCJzZXRDdXJyZW50SWR4IiwiZGV0ZWN0Q3VycmVudElkeCIsInNldHVwQWNjZXNzaWJpbGl0eSIsImlzTGlzdE9wZW4iLCJsaXN0aWQiLCJvbkl0ZW1Nb3VzZWVudGVyIiwib25JdGVtTW91c2VsZWF2ZSIsInNldEFjdGl2ZUlkeCIsImNsZWFyQWN0aXZlSWR4IiwiJGxpIiwiZWx0aWR4Iiwib25LZXlVcCIsIm9uS2V5RG93biIsIm9wZW5NZW51Iiwib25Fc2NhcGUiLCJjbG9zZU1lbnUiLCJvblJldHVybiIsIm9yaWdpbmFsSWR4IiwiZ2V0Q3VycmVudElkeCIsImZvcmNlU2VsZWN0aW9uIiwiZm91bmRpZHgiLCJvbkxpc3RUaXRsZUNsaWNrIiwiaXNNZW51T3BlbiIsIm9uTGlzdEl0ZW1DbGljayIsIm9wYWNpdHkiLCJkZWxheSIsIndpcmVNZW51Q2xvc2UiLCJ1bndpcmVNZW51Q2xvc2UiLCJzZXRTZWxlY3RvclBvcHVwU3RhdGUiLCJjaGVja091dHNpZGVDbGljayIsImdldFdpZHRoIiwiZ2V0TGlzdFB1bGxkb3duIiwiZ2V0V2lkZ2V0cyIsIl90aGlzIiwiX3JlbmRlcldpZGdldCIsIndpZGdldCIsImdyZWNhcHRjaGEiLCJyZW5kZXIiLCJzaXRla2V5IiwidGhlbWUiLCJob3N0Rm9ybSIsIm1heCIsInJlQ2FwdGNoYURpdiIsInNjYWxlRmFjdG9yIiwiZ2xvYmFsUmVDYXB0Y2hhQ2FsbGJhY2siLCJzaW5nbGVDYXJvdXNlbHJlc2l6ZSIsInNpbmdsZUFyclBhcmVudFdpZCIsInNpbmdsZU1hcmdpbkxlZnQiLCIkc2luZ2xlQ2Fyb3VzZWxDb250V2lkTGlzdCIsInNpbmdsZUNvdW50Iiwic2luZ2xlU2hvd0xpc3QiLCJzaW5nbGVTaG93TWFyZyIsInNpbmdsZVVwZGF0ZWRXaWQiLCIkc2luZ2xlQ2Fyb3VzZWxDb250V2lkIiwic2luZ2xlQ2Fyb3VzZWxDb250VUxXaWQiLCJzaW5nbGVDYXJvdXNlbENvbnRXaWRMaXN0TGVuZ3RoIiwiJHNpbmdsZVRvdGFsQ2Fyb3VzZWxMaXN0Iiwic2luZ2xlTGVmdFZhbCIsInRhYkJsb2NrIiwidGFiQ29udGVudHMiLCJ0YWJJbmRleCIsInRpbGVzIiwibm9PZlRpbGVzIiwidGlsZUluZGV4IiwidGlsZVZhbHVlIiwiaW5Td2l0Y2hUb0lkeCIsInRhcmdldG5hbWUiLCJjbGlja2VkVGFiQmxvY2siLCJ2aXNpYmxlVGlsZXMiLCJjdXJyVGFiIiwidGlsZXNMaXN0IiwidGlsZSIsIlVJVGFiU2V0IiwiY3VyaWR4IiwiY2FsbGJhY2tGdW5jdGlvbk5hbWUiLCIkdGFic2V0VGFicyIsIiR0YWJzZXRQYW5lbHMiLCJmb2N1c2VkVGFiSWR4Iiwib25UYWJGb2N1cyIsIm9uVGFiQmx1ciIsIiR0YWIiLCIkdGFicGFuZWwiLCJ0YWJDbGljayIsInRhYlN3aXRjaFRvRm9jdXNlZCIsInRhYkZvY3VzUHJldiIsInRhYkZvY3VzTmV4dCIsImZvY3VzT25DdXJyZW50UGFuZWwiLCJzd2l0Y2hUb0lkeCIsImRpc3BhdGNoQ2FsbGJhY2siLCJhcmciLCJhcmcyIiwic2V0U3dpdGNoQ2FsbGJhY2siXSwibWFwcGlu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L1MsS0FBQXNVLGlCQUFBdkIsY0FBQS9TLE9BSUFBLEtBQUFzVSxpQkFBQSxTQUFBQyxJQUFBQyxNQUNBLE9BQUEzd0YsS0FBQW04RSxLQUFBd1QscUJBQUEsQ0FJQSxHQUFBM2IsSUFBQW1JLEtBQUF3VCxvQkFNQSxPQUZBM2IsSUFBQSxrQkFBQUEsSUFBQUEsR0FBQXYyRSxPQUFBdTJFLElBRUFBLEdBQUFsekQsS0FBQWxoQixLQUFBOHdGLElBQUFDLFFBR0F4VSxLQUFBeVUsa0JBQUEsU0FBQWpCLHNCQUNBeFQsS0FBQXdULHFCQUFBQSxzQkFHQXhULEtBQUF0aUUsUUFHQTNkLEVBQUE4M0UsR0FBQW5QLFNBQUEsV0FDQSxNQUFBamxFLE1BQUFxSCxLQUFBLFdBRUEsR0FBQS9LLEdBQUF1ekYsU0FBQTd2RixVQUdBczdCIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5sZmdhcHAuY29udHJvbGxlcignYXNrQ3VzdG9tZXJTZXJ2aWNlQ29udHJsJywgWyckc2NvcGUnLCAnJHRpbWVvdXQnLCAnJHdpbmRvdycsICdhc2tDdXN0b21lclNlcnZpY2VTZXJ2aWNlcycsIGZ1bmN0aW9uKFxyXG4gICAgJHNjb3BlLCAkdGltZW91dCwgJHdpbmRvdywgYXNrQ3VzdG9tZXJTZXJ2aWNlU2VydmljZXMpIHtcclxuICAgICRzY29wZS5pc1Byb2R1Y3RDbGlja2VkID0gdHJ1ZTtcclxuICAgICRzY29wZS5pc0NvbnRhY3RNZXRob2RDbGlja2VkID0gdHJ1ZTtcclxuICAgICRzY29wZS5pc1N1Ym1pdENsaWNrZWQgPSBmYWxzZTtcclxuICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAkc2NvcGUuZW1haWxGb3JtYXQgPSAvXihbYS16QS1aMC05X1xcLVxcLl0rKUAoKFthLXpBLVowLTlfXFwtXStcXC4pKykoW2EtekEtWl17Miw0fXxbMC05XXsxLDN9KShcXF0/KSQvO1xyXG4gICAgJHNjb3BlLmFza0N1c3RvbWVyU2VydmljZUZvcm1WYWx1ZSA9IHtcclxuXHJcbiAgICB9O1xyXG4gICAgJHNjb3BlLmlzUGhvbmVTZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLnRvcGljRmxhZyA9IHRydWU7XHJcbiAgICAkc2NvcGUudGltZUZsYWcgPSB0cnVlO1xyXG5cclxuICAgIC8qICQoZG9jdW1lbnQpLmxvYWQoZnVuY3Rpb24gKCkge1xyXG4gICAgXHR2YXIgZGF0YT17Ki9cclxuICAgIHV0YWdfZGF0YS5ldmVudF9hY3Rpb24gPSAnZm9ybSc7XHJcbiAgICB1dGFnX2RhdGEuZXZlbnRfbmFtZSA9ICdSZXRpcmVtZW50IFBsYW4gU3VwcG9ydCc7XHJcbiAgICB1dGFnX2RhdGEuZXZlbnRfdHlwZSA9ICdjb250YWN0JztcclxuICAgIHV0YWdfZGF0YS5ldmVudF9zdGF0dXMgPSAnc3RhcnQnO1xyXG5cclxuICAgIC8qIH1cclxuXHRcdHV0YWcubGluayhkYXRhKTtcclxuXHR9KTsqL1xyXG5cclxuICAgIHZhciBmb3JtRmFjdG9yLFxyXG4gICAgICAgIGNvbnRhY3RNZXRob2QgPSBudWxsLFxyXG4gICAgICAgIG1haWxPck51bSA9ICcnLFxyXG4gICAgICAgIGlzVmFpbGRNYWlsLCB3YXJuaW5nTXNnLFxyXG4gICAgICAgIHByb2R1Y3RPYmogPSB7XHJcblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHJvZHVjdE5hbWU7XHJcblxyXG4gICAgcHJvZHVjdE9iaiA9IHtcclxuICAgICAgICAnQUxMSUFOQ0UnICAgOiAnTGluY29sbiBBbGxpYW5jZcKuJyxcclxuICAgICAgICAnTVVMVElGVU5EJyAgOiAnTGluY29sbiBNdWx0aS1GdW5kwq4gU3VpdGUnLFxyXG4gICAgICAgICdHVkEnICAgICAgICA6ICdMaW5jb2xuIEdyb3VwIFZhcmlhYmxlIEFubnVpdHknLFxyXG4gICAgICAgICdESVJFQ1RPUicgICA6ICdMaW5jb2xuIERpcmVjdG9yU00nLFxyXG4gICAgICAgICdTTUFSVEZVVFVSRSc6ICdMaW5jb2xuIFNtYXJ0RnV0dXJlwq4nLFxyXG4gICAgICAgICdMRUdBQ1knICAgICA6ICdMaW5jb2xuIEFtZXJpY2FuIExlZ2FjeSBSZXRpcmVtZW50U00nXHJcblxyXG4gICAgfTtcclxuICAgICRzY29wZS5jdXN0b21lclNlcnZpY2VEYXRhID0ge1xyXG5cclxuICAgIH07XHJcbiAgICAkc2NvcGUuY3VzdG9tZXJTZXJ2aWNlRGF0YS5pZGVudGl0eSA9ICdBU0tfQ1VTVE9NRVJfU0VSVklDRSc7XHJcbiAgICAkc2NvcGUuY3VzdG9tZXJTZXJ2aWNlRGF0YS5wb2xpY3lDb250YWN0ID0gJyc7XHJcbiAgICAkc2NvcGUubWFpbCA9ICcnO1xyXG4gICAgJHNjb3BlLm51bWJlciA9ICcnO1xyXG4gICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5oaWRlKCk7XHJcbiAgICBhbmd1bGFyLmVsZW1lbnQoJyonKS5yZW1vdmVDbGFzcygnbm9uZScpO1xyXG5cclxuICAgICRzY29wZS5jaGVja1JhZGlvQnV0dG9uID0gZnVuY3Rpb24oZXZ0KSB7XHJcbiAgICAgICAgaWYgKGV2dC50YXJnZXQubmFtZSA9PT0gJ3Byb2R1Y3QnKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5pc1Byb2R1Y3RDbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRzY29wZS5jdXN0b21lclNlcnZpY2VEYXRhLnByb2R1Y3QgPSBldnQudGFyZ2V0LmRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHByb2R1Y3RPYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJHNjb3BlLmN1c3RvbWVyU2VydmljZURhdGEucHJvZHVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3ROYW1lID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGV2dC50YXJnZXQubmFtZSA9PT0gJ2NvbnRhY3QtbWV0aG9kJykge1xyXG4gICAgICAgICAgICAkc2NvcGUuY29udGFjdE5hbWUgPSBldnQudGFyZ2V0LmRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgY29udGFjdE1ldGhvZCA9IGV2dC50YXJnZXQuZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAkc2NvcGUuaXNDb250YWN0TWV0aG9kQ2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUuY3VzdG9tZXJTZXJ2aWNlRGF0YS5jb250YWN0bWV0aG9kID0gY29udGFjdE1ldGhvZDtcclxuICAgIH07XHJcbiAgICAkKGRvY3VtZW50KS5vbigncmVzcG9uc2l2ZTpzdGF0ZWNoYW5nZWQnLCBmdW5jdGlvbihlLCBwYXJhbSkge1xyXG4gICAgICAgIGZvcm1GYWN0b3IgPSBwYXJhbTtcclxuICAgIH0pO1xyXG5cclxuICAgIGFuZ3VsYXIuZWxlbWVudCgndWwuY3VzdG9tLXNlbGVjdGJveC1saXN0LWNvbnQgbGknKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgY29tbW9uUmVxdWVzdC5jaGVja0Ryb3BWYWxpZGF0aW9uKCk7XHJcbiAgICAgICAgfSwgMjAwKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHZhciBjb21tb25SZXF1ZXN0ID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBjb21tb25SZXF1ZXN0TW9kdWxlID0ge1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZHJvcFZhbHVlO1xyXG5cclxuICAgICAgICBjb21tb25SZXF1ZXN0TW9kdWxlLmRyb3BEb3duVmFsaWRhdGlvbiA9IGZ1bmN0aW9uKGlkLCBmbGFnTmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgZHJvcFZhbHVlID0gYW5ndWxhci5lbGVtZW50KCcjJyArIGlkKS50ZXh0KCk7XHJcbiAgICAgICAgICAgIGlmIChkcm9wVmFsdWUgIT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGVbZmxhZ05hbWVdID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGVbZmxhZ05hbWVdID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29tbW9uUmVxdWVzdE1vZHVsZS5jaGVja0Ryb3BWYWxpZGF0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGNvbW1vblJlcXVlc3RNb2R1bGUuZHJvcERvd25WYWxpZGF0aW9uKCdzZWxlY3RUb3BpYycsICd0b3BpY0ZsYWcnLCAnU2VsZWN0IHRvcGljJyk7XHJcbiAgICAgICAgICAgIGNvbW1vblJlcXVlc3RNb2R1bGUuZHJvcERvd25WYWxpZGF0aW9uKCdzZWxlY3RUaW1lJywgJ3RpbWVGbGFnJyxcclxuICAgICAgICAgICAgICAgICdUaGUgYmVzdCB0aW1lIHRvIGNvbnRhY3QgbWUnKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gY29tbW9uUmVxdWVzdE1vZHVsZTtcclxuICAgIH0pKCRzY29wZSk7XHJcblxyXG4gICAgYW5ndWxhci5lbGVtZW50KCcjY29udGFjdC1waG9uZScpLm9uKCdmb2N1cycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICRzY29wZS5jb250YWN0TmFtZSA9ICdQaG9uZSc7XHJcbiAgICAgICAgY29udGFjdE1ldGhvZCA9ICdQaG9uZSc7XHJcbiAgICAgICAgJHNjb3BlLmlzQ29udGFjdE1ldGhvZENsaWNrZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8gaWYoJHNjb3BlLm51bWJlciAhPT0gJycgJiYgdHlwZW9mICRzY29wZS5udW1iZXIgIT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdFBob25lID0gdHJ1ZTtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0RW1haWwgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuY3VzdG9tZXJTZXJ2aWNlRGF0YS5jb250YWN0bWV0aG9kID0gY29udGFjdE1ldGhvZDtcclxuXHJcbiAgICAgICAgLy9cdH1cclxuICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICB9KTtcclxuICAgIGFuZ3VsYXIuZWxlbWVudCgnI2NvbnRhY3QtZW1haWwnKS5vbignZm9jdXMnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAkc2NvcGUuY29udGFjdE5hbWUgPSAnRW1haWwnO1xyXG4gICAgICAgIGNvbnRhY3RNZXRob2QgPSAnRW1haWwnO1xyXG4gICAgICAgICRzY29wZS5pc0NvbnRhY3RNZXRob2RDbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLmN1c3RvbWVyU2VydmljZURhdGEuY29udGFjdG1ldGhvZCA9IGNvbnRhY3RNZXRob2Q7XHJcblxyXG4gICAgICAgIC8vIGlmKCRzY29wZS5tYWlsICE9PSAnJyApe1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RQaG9uZSA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RFbWFpbCA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBnZXRDYXB0Y2hhRGF0YSgpIHtcclxuICAgICAgICB2YXIgbnVjYXB0Y2hhQW5zRW50ciwgbnVjYXB0Y2hhQW5zRXh0O1xyXG5cclxuICAgICAgICBpZiAoIWFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZW50ZXInKSkge1xyXG4gICAgICAgICAgICBudWNhcHRjaGFBbnNFbnRyID0gJyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRW50ciA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZW50ZXInKS52YWwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKSkge1xyXG4gICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSAnJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKS52YWwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyokc2NvcGUuYXNrQ3VzdG9tZXJTZXJ2aWNlRm9ybVZhbHVlWydudWNhcHRjaGEtZXBkJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtZXBkJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmFza0N1c3RvbWVyU2VydmljZUZvcm1WYWx1ZVsnbnVjYXB0Y2hhLWFuc3dlciddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlcicpLnZhbCgpO1xyXG4gICAgICAgICRzY29wZS5hc2tDdXN0b21lclNlcnZpY2VGb3JtVmFsdWVbJ251Y2FwdGNoYS1hbnN3ZXItZW50ZXInXSA9IG51Y2FwdGNoYUFuc0VudHI7XHJcbiAgICAgICAgJHNjb3BlLmFza0N1c3RvbWVyU2VydmljZUZvcm1WYWx1ZVsnbnVjYXB0Y2hhLWFuc3dlci1leGl0J10gPSBudWNhcHRjaGFBbnNFeHQ7XHJcbiAgICAgICAgJHNjb3BlLmFza0N1c3RvbWVyU2VydmljZUZvcm1WYWx1ZS5sbXN1Ym1pdHRlZCA9IGFuZ3VsYXIuZWxlbWVudCgnI2xtc3VibWl0dGVkJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmFza0N1c3RvbWVyU2VydmljZUZvcm1WYWx1ZVsnbnVjYXB0Y2hhLWluZGV4J10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtaW5kZXgnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUuYXNrQ3VzdG9tZXJTZXJ2aWNlRm9ybVZhbHVlWydudWNhcHRjaGEtZGF0YXR5cGUnXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1kYXRhdHlwZScpLnZhbCgpO1xyXG4gICAgICAgICRzY29wZS5hc2tDdXN0b21lclNlcnZpY2VGb3JtVmFsdWVbJ251Y2FwdGNoYS1wdHlwZSddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLXB0eXBlJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmFza0N1c3RvbWVyU2VydmljZUZvcm1WYWx1ZVsnbnVjYXB0Y2hhLWxhbmd1YWdlJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtbGFuZ3VhZ2UnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUuYXNrQ3VzdG9tZXJTZXJ2aWNlRm9ybVZhbHVlWydudWNhcHRjaGEtcmVnaW9uJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtcmVnaW9uJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmFza0N1c3RvbWVyU2VydmljZUZvcm1WYWx1ZVsnbnVjYXB0Y2hhLW1lZGlhLWRvd25sb2FkLXRpbWUnXSA9ICcnO1xyXG4gICAgICAgICRzY29wZS5hc2tDdXN0b21lclNlcnZpY2VGb3JtVmFsdWVbJ251Y2FwdGNoYS1hZHNlcnYtZG93bmxvYWQtdGltZSddID0gJyc7XHJcbiAgICAgICAgJHNjb3BlLmFza0N1c3RvbWVyU2VydmljZUZvcm1WYWx1ZVsnbnVjYXB0Y2hhLWZhbGxiYWNrLXRva2VuJ10gPSAnJzsqL1xyXG4gICAgICAgICRzY29wZS5hc2tDdXN0b21lclNlcnZpY2VGb3JtVmFsdWVbJ2dSZWNhcHRjaGFSZXNwb25zZSddID0gJCgnI2ctcmVjYXB0Y2hhLXJlc3BvbnNlJykudmFsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Rm9ybURhdGEoKSB7XHJcbiAgICAgICAgJHNjb3BlLmFza0N1c3RvbWVyU2VydmljZUZvcm1WYWx1ZS5pZGVudGl0eSA9ICdDT05UQUNUX1VTX1JTJztcclxuICAgICAgICAkc2NvcGUuYXNrQ3VzdG9tZXJTZXJ2aWNlRm9ybVZhbHVlLmZvcm1GYWN0b3IgPSBmb3JtRmFjdG9yO1xyXG4gICAgICAgICRzY29wZS5hc2tDdXN0b21lclNlcnZpY2VGb3JtVmFsdWUucHJvZHVjdCA9IHByb2R1Y3ROYW1lO1xyXG4gICAgICAgICRzY29wZS5hc2tDdXN0b21lclNlcnZpY2VGb3JtVmFsdWUucHJvZHVjdE5hbWUgPSAkc2NvcGUuY3VzdG9tZXJTZXJ2aWNlRGF0YS5wcm9kdWN0O1xyXG4gICAgICAgICRzY29wZS5hc2tDdXN0b21lclNlcnZpY2VGb3JtVmFsdWUubmFtZSA9ICRzY29wZS5jdXN0b21lclNlcnZpY2VEYXRhLnVzZXJuYW1lO1xyXG4gICAgICAgICRzY29wZS5hc2tDdXN0b21lclNlcnZpY2VGb3JtVmFsdWUucXVlc3Rpb24gPSAkc2NvcGUuY3VzdG9tZXJTZXJ2aWNlRGF0YS5xdWVzdGlvbjtcclxuICAgICAgICAkc2NvcGUuYXNrQ3VzdG9tZXJTZXJ2aWNlRm9ybVZhbHVlLmNvbnRhY3RCeSA9ICRzY29wZS5jdXN0b21lclNlcnZpY2VEYXRhLmNvbnRhY3RtZXRob2Q7XHJcbiAgICAgICAgJHNjb3BlLmFza0N1c3RvbWVyU2VydmljZUZvcm1WYWx1ZS5wb2xpY3lOdW1iZXIgPSAkc2NvcGUuY3VzdG9tZXJTZXJ2aWNlRGF0YS5wb2xpY3lDb250YWN0O1xyXG4gICAgICAgICRzY29wZS5hc2tDdXN0b21lclNlcnZpY2VGb3JtVmFsdWUucGhvbmUgPSAkc2NvcGUuY3VzdG9tZXJTZXJ2aWNlRGF0YS5waG9uZTtcclxuICAgICAgICAkc2NvcGUuYXNrQ3VzdG9tZXJTZXJ2aWNlRm9ybVZhbHVlLmVtYWlsID0gJHNjb3BlLmN1c3RvbWVyU2VydmljZURhdGEuZW1haWw7XHJcbiAgICAgICAgJHNjb3BlLmFza0N1c3RvbWVyU2VydmljZUZvcm1WYWx1ZS50b3BpYyA9IGFuZ3VsYXIuZWxlbWVudCgnI3NlbGVjdFRvcGljJykudGV4dCgpO1xyXG4gICAgICAgICRzY29wZS5hc2tDdXN0b21lclNlcnZpY2VGb3JtVmFsdWUudGltZSA9IGFuZ3VsYXIuZWxlbWVudCgnI3NlbGVjdFRpbWUnKS50ZXh0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZGlzcGxheUVycigpIHtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gdHJ1ZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLmMtZXJyLWJveCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbywgLmVyci1ib3JkZXInKS5sZW5ndGhcclxuICAgICAgICAgICAgICAgID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRpc0VyclZhbCA9IGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8sIC5lcnItYm9yZGVyJykuZXEoMCkucGFyZW50KClcclxuICAgICAgICAgICAgICAgICAgICAub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlckhndCA9IGFuZ3VsYXIuZWxlbWVudCgnLnNpdGUtbmF2aWdhdGlvbicpLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRpc0VyclZhbCA9ICh0aXNFcnJWYWwgLSBoZWFkZXJIZ3QpIC0gNTA7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3Njcm9sbFRvcCc6IHRpc0VyclZhbFxyXG4gICAgICAgICAgICAgICAgfSwgNjAwLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvLCAuZXJyLWJvcmRlcicpLmVxKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAwKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCAyMDApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHZhbGlkRm9ybSgpIHtcclxuICAgICAgICB2YXIgaXNDYXB0Y2hhQXZhaWwgPSBmYWxzZSxcclxuICAgICAgICAgICAgY2FwY2hhVmFsLFxyXG4gICAgICAgICAgICB0aW1lTmVlZGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5nLXJlY2FwdGNoYScpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgaXNDYXB0Y2hhQXZhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICBjYXBjaGFWYWwgPSBhbmd1bGFyLmVsZW1lbnQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpO1xyXG4gICAgICAgICAgICBpZiAoY2FwY2hhVmFsKSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLnNob3coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoJHNjb3BlLmN1c3RvbWVyU2VydmljZURhdGEuY29udGFjdG1ldGhvZCA9PT0gJ1Bob25lJykge1xyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLnRpbWVGbGFnKSB7XHJcbiAgICAgICAgICAgICAgICB0aW1lTmVlZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoJHNjb3BlLmFza0N1c3RvbWVyU2VydmljZUZvcm0uJHZhbGlkICYmIChtYWlsT3JOdW0gIT09ICcnICYmICFpc1ZhaWxkTWFpbCkgJiYgKChpc0NhcHRjaGFBdmFpbFxyXG4gICAgICAgICAgICAgICAgJiYgY2FwY2hhVmFsKSB8fCAhaXNDYXB0Y2hhQXZhaWwpICYmICEkc2NvcGUuaXNDb3JyZWN0Rm9ybWF0ICYmICF0aW1lTmVlZGVkKSB7XHJcbiAgICAgICAgICAgIGlmIChpc0NhcHRjaGFBdmFpbCkge1xyXG4gICAgICAgICAgICAgICAgZ2V0Q2FwdGNoYURhdGEoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBnZXRGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNyZWZyZXNoJykudHJpZ2dlcignY2xpY2snKTtcclxuICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlclNob3coKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkaXNwbGF5RXJyKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAkc2NvcGUuUGhvbmVOdW0gPSBmdW5jdGlvbihldnQsIGlucHV0VmFsdWUsIG5hbWUsIHppcE9yUGhvbmUpIHtcclxuICAgICAgICBpZiAoaW5wdXRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgJHNjb3BlLm51bWJlciA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTktXS9nLCAnJyk7XHJcbiAgICAgICAgaWYgKHppcE9yUGhvbmUgPT09ICdwaG9uZScpIHtcclxuICAgICAgICAgICAgdmFyIHBhdHQgPSAvXihcXGR7M31cXC1cXGR7M30tXFxkezR9KSQvO1xyXG5cclxuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0Rm9ybWF0ID0gIShwYXR0LnRlc3QoJHNjb3BlLm51bWJlcikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUubnVtYmVyLmxlbmd0aCA9PT0gMyAmJiBldnQua2V5Q29kZSAhPT0gOCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm51bWJlciA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5udW1iZXIgPSAkc2NvcGUubnVtYmVyLnJlcGxhY2UoLyhcXGR7M30pLywgJyQxLScpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5udW1iZXIubGVuZ3RoID09PSA3ICYmIGV2dC5rZXlDb2RlICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubnVtYmVyID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm51bWJlciA9ICRzY29wZS5udW1iZXIucmVwbGFjZSgvKFxcZHszfSkoXFxkezN9KS8sICckMS0kMi0nKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUubnVtYmVyLmxlbmd0aCA9PT0gMTIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5udW1iZXIgPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubnVtYmVyID0gJHNjb3BlLm51bWJlci5yZXBsYWNlKC8oXFxkezN9KShcXGR7M30pKFxcZHs0fSkvLCAnJDEtJDItJDMnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUubnVtYmVyLmxlbmd0aCA9PT0gMTApIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5udW1iZXIgPSAkc2NvcGUubnVtYmVyLnJlcGxhY2UoLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuaXNDb3JyZWN0Rm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLm51bWJlci5sZW5ndGggPj0gMTIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyID0gJHNjb3BlLm51bWJlcjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm51bWJlciA9IHN0ci5zbGljZSgwLCAxMik7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdEZvcm1hdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuVmFsaWRhdGVQYXN0ZSA9IGZ1bmN0aW9uKGNvbnRUeXBlLCBlKSB7XHJcbiAgICAgICAgdmFyIGN0cmxOYW1lID0gZS50YXJnZXQuYXR0cmlidXRlcy5pZC52YWx1ZTtcclxuICAgICAgICB2YXIgcGFzdGVkRGF0YSA9IFwiXCI7XHJcbiAgICAgICAgaWYgKGUudHlwZSA9PSBcImRyb3BcIikge1xyXG4gICAgICAgICAgICBwYXN0ZWREYXRhID0gZS5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcIlRleHRcIik7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlLnR5cGUgPT0gXCJwYXN0ZVwiKSB7XHJcbiAgICAgICAgICAgIHZhciBjbGlwRGF0YTtcclxuICAgICAgICAgICAgY2xpcERhdGEgPSBlLmNsaXBib2FyZERhdGEgfHwgd2luZG93LmNsaXBib2FyZERhdGE7XHJcbiAgICAgICAgICAgIGlmIChjbGlwRGF0YSA9PSB1bmRlZmluZWQpIGNsaXBEYXRhID0gZS5vcmlnaW5hbEV2ZW50LmNsaXBib2FyZERhdGE7XHJcbiAgICAgICAgICAgIGlmIChjbGlwRGF0YSAhPSB1bmRlZmluZWQpIHBhc3RlZERhdGEgPSBjbGlwRGF0YS5nZXREYXRhKCdUZXh0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjdXJyZW50RGF0YSA9IFByb2Nlc3NEYXRhRm9yQ29ycmVjdGlvbihjb250VHlwZSwgY3RybE5hbWUsIHBhc3RlZERhdGEpO1xyXG4gICAgICAgIHZhciBjaGFyTGVuZ3RoID0gJChcIiNcIitjdHJsTmFtZSkuYXR0cignbWF4TGVuZ3RoJyk7XHJcbiAgICAgICAgaWYgKGN1cnJlbnREYXRhLmxlbmd0aCA+IGNoYXJMZW5ndGgpIHtcclxuICAgICAgICAgICAgY3VycmVudERhdGEgPSBjdXJyZW50RGF0YS5zbGljZSgwLCBjaGFyTGVuZ3RoKTtcclxuICAgICAgICAgICAgJChcIiNcIitjdHJsTmFtZSkudmFsKGN1cnJlbnREYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHNjb3BlLmFza0N1c3RvbWVyU2VydmljZUZvcm1WYWx1ZVtjdHJsTmFtZV0gPSBjdXJyZW50RGF0YTtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgJHNjb3BlLlVwZGF0ZUpTT04gPSBmdW5jdGlvbihjb250VHlwZSwgZSkge1xyXG4gICAgICAgIHZhciBjdHJsTmFtZSA9IGUudGFyZ2V0LmF0dHJpYnV0ZXMuaWQudmFsdWU7XHJcbiAgICAgICAgdmFyIGNoYXJMZW5ndGggPSAkKFwiI1wiK2N0cmxOYW1lKS5hdHRyKCdtYXhMZW5ndGgnKTtcclxuICAgICAgICB2YXIgdmFsdWUgPSAkKFwiI1wiK2N0cmxOYW1lKS52YWwoKTtcclxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAkKFwiI1wiK2N0cmxOYW1lKS52YWwoXCJcIik7XHJcbiAgICAgICAgICAgIHZhbHVlID0gUHJvY2Vzc0RhdGFGb3JDb3JyZWN0aW9uKGNvbnRUeXBlLCBjdHJsTmFtZSwgdmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gY2hhckxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgJChcIiNcIitjdHJsTmFtZSkudmFsKHZhbHVlLnNsaWNlKDAsIGNoYXJMZW5ndGgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUuYXNrQ3VzdG9tZXJTZXJ2aWNlRm9ybVZhbHVlW2N0cmxOYW1lXSA9ICQoXCIjXCIrY3RybE5hbWUpLnZhbCgpLnRyaW0oKTtcclxuICAgICAgICAgICAgJHNjb3BlW1wiaW52YWxpZFwiICsgY3RybE5hbWVdID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAkc2NvcGUuaXNTdWJtaXRDbGlja2VkID0gdHJ1ZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgaXNWYWlsZE1haWwgPSBmYWxzZTtcclxuICAgICAgICBpZiAoY29udGFjdE1ldGhvZCA9PT0gJ0VtYWlsJykge1xyXG4gICAgICAgICAgICAkc2NvcGUuY3VzdG9tZXJTZXJ2aWNlRGF0YS5jb250YWN0bWV0aG9kID0gY29udGFjdE1ldGhvZDtcclxuICAgICAgICAgICAgbWFpbE9yTnVtID0gJHNjb3BlLm1haWw7XHJcbiAgICAgICAgICAgIGlzVmFpbGRNYWlsID0gJHNjb3BlLmNvbnRhY3RGb3JtTWV0aG9kLm1haWwuJGVycm9yLmVtYWlsO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGFjdE1ldGhvZCA9PT0gJ1Bob25lJykge1xyXG4gICAgICAgICAgICAkc2NvcGUuY3VzdG9tZXJTZXJ2aWNlRGF0YS5jb250YWN0bWV0aG9kID0gY29udGFjdE1ldGhvZDtcclxuICAgICAgICAgICAgbWFpbE9yTnVtID0gJHNjb3BlLm51bWJlcjtcclxuICAgICAgICAgICAgaXNWYWlsZE1haWwgPSBmYWxzZTtcclxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRhY3RNZXRob2QgPT09ICduby1yZXNwb25zZScpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmN1c3RvbWVyU2VydmljZURhdGEuY29udGFjdG1ldGhvZCA9ICcnO1xyXG4gICAgICAgICAgICBtYWlsT3JOdW0gPSBudWxsO1xyXG4gICAgICAgICAgICBpc1ZhaWxkTWFpbCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUuY3VzdG9tZXJTZXJ2aWNlRGF0YS5waG9uZSA9ICRzY29wZS5udW1iZXI7XHJcbiAgICAgICAgJHNjb3BlLmN1c3RvbWVyU2VydmljZURhdGEuZW1haWwgPSAkc2NvcGUubWFpbDtcclxuICAgICAgICAkc2NvcGUuY3VzdG9tZXJTZXJ2aWNlRGF0YS5tYWlsT3JOdW0gPSBtYWlsT3JOdW07XHJcblxyXG4gICAgICAgIC8vIHZhciBkYXRhUmVzcG9uc2UgPSAnU1VDQ0VTUycsIHRrc1BhZ2VVUkwgPSBudWxsO1xyXG4gICAgICAgIGlmICh2YWxpZEZvcm0oKSkge1xyXG4gICAgICAgICAgICBhc2tDdXN0b21lclNlcnZpY2VTZXJ2aWNlcy5hc2tDdXN0b21lclNlcnZpY2VQb3N0KCRzY29wZSwgJHNjb3BlLmFza0N1c3RvbWVyU2VydmljZUZvcm1WYWx1ZSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGRhdGFBamF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFSZXNwb25zZSA9IGRhdGFBamF4LmRhdGEucmVzcG9uc2VTdGF0dXNDb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhUmVzcG9uc2UgPT09ICdUSU1FRF9PVVQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnVElNRUQgT1VUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25zZSA9PT0gJ0lOVEVSTkFMX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIEludmFsaWRGaWVsZHNTdHIgPSBkYXRhQWpheC5kYXRhLnNlcnZpY2VSZXBvbnNlTWVzc2FnZS5yZXBsYWNlKFwiW1wiLCBcIlwiKS5yZXBsYWNlKFwiXVwiLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBJbnZhbGlkRmllbGRzID0gSW52YWxpZEZpZWxkc1N0ci50b1N0cmluZygpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIaWdobGlnaHQgaW52YWxpZCBmaWVsZHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaUNudCA9IDA7IGlDbnQgPCBJbnZhbGlkRmllbGRzLmxlbmd0aDsgaUNudCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGludmFsaWRGbGFnID0gXCJpbnZhbGlkXCIgKyBJbnZhbGlkRmllbGRzW2lDbnRdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGVbaW52YWxpZEZsYWddID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdJTlRFUk5BTCBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uc2UgPT09ICdDQVBUQ0hBX0VSUk9SJyB8fCBkYXRhUmVzcG9uc2UgPT09ICdSRUNBUFRDSEFfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnSU5WQUxJRCBDQVBUQ0hBJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25zZSA9PT0gJ1NFUlZJQ0VfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnU0VSVklDRSBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uc2UgPT09ICdTVUNDRVNTJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHRrc1BhZ2VVUkwgJiYgJ251bGwnICE9PSB0a3NQYWdlVVJMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGtzUGFnZVVSTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdTVUNDRVNTISBZb3VyIGluZm9ybWFjdGlvbiBoYXMgYmVlbiBzdWJtaXR0ZWQuIFlvdSBzaG91bGQgcmVjZWl2ZSBhIHJlc3BvbnNlIGluIDEtMiBidXNpbmVzcyBkYXlzLic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29udGFjdE1ldGhvZENsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1Byb2R1Y3RDbGlja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hc2tDdXN0b21lclNlcnZpY2VGb3JtVmFsdWUgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jdXN0b21lclNlcnZpY2VEYXRhID0ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5zZWxlY3RUaW1lJykudGV4dCgnVGhlIGJlc3QgdGltZSB0byBjb250YWN0IG1lJykucmVtb3ZlQXR0cihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YS12YWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLnNlbGVjdFRvcGljJykudGV4dCgnU2VsZWN0IHRvcGljJykucmVtb3ZlQXR0cihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YS12YWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmxmZy1yYWRpby1yb2xlIGlucHV0JykuYXR0cignY2hlY2tlZCcsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmd1bGFyLmVsZW1lbnQoJy5sZmctcmFkaW8tcm9sZSBpbnB1dCcpLnZhbCgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubnVtYmVyID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFpbCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFjdE1ldGhvZCA9IG51bGwsIG1haWxPck51bSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRhY3ROYW1lID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWJtaXRDbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfYWN0aW9uJzogJ2Zvcm0nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9uYW1lJyAgOiAnUmV0aXJlbWVudCBQbGFuIFN1cHBvcnQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF90eXBlJyAgOiAnY29udGFjdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3N0YXR1cyc6ICdjb21wbGV0ZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRhZy5saW5rKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaC13cmFwcGVyJykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmNDbWROZXdDaGFsbGVuZ2UoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3YXJuaW5nTXNnID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHRhYmxlVmFsID0gYW5ndWxhci5lbGVtZW50KCcuQXJ0aWNsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7XHJcbiAgICAgICAgdmFyIGhlYWRlckhndCA9IGFuZ3VsYXIuZWxlbWVudCgnLlRvcGhlYWRlci1sb2dvYXJlYScpLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICB0YWJsZVZhbCA9ICh0YWJsZVZhbCAtIGhlYWRlckhndCkgLSAyMDtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICdzY3JvbGxUb3AnOiB0YWJsZVZhbFxyXG4gICAgICAgIH0sIDgwMCk7XHJcbiAgICB9O1xyXG59XSk7XHJcblxyXG5mdW5jdGlvbiBWYWxpZGF0ZURyb3AoY29udFR5cGUsIGN0cmxOYW1lLCBldmVudCkge1xyXG4gICAgdmFyIGN1cnJlbnREYXRhID0gJChcIiNcIitjdHJsTmFtZS5pZCkudmFsKCk7XHJcbiAgICB2YXIgcGFzdGVkRGF0YSA9IFwiXCI7XHJcbiAgICBpZiAoZXZlbnQudHlwZSA9PSBcImRyb3BcIikge1xyXG4gICAgICAgIHBhc3RlZERhdGEgPSBldmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcIlRleHRcIik7XHJcbiAgICB9IFxyXG4gICAgdmFyIGN1cnJlbnREYXRhID0gUHJvY2Vzc0RhdGFGb3JDb3JyZWN0aW9uKGNvbnRUeXBlLCBjdHJsTmFtZS5pZCwgcGFzdGVkRGF0YSk7XHJcbiAgICB2YXIgJHNjb3BlID0gZ2V0U2NvcGUoJ2Fza0N1c3RvbWVyU2VydmljZUNvbnRybCcpO1xyXG4gICAgJHNjb3BlLmFza0N1c3RvbWVyU2VydmljZUZvcm1WYWx1ZVtjdHJsTmFtZV0gPSBjdXJyZW50RGF0YTtcclxuICAgIHZhciBjaGFyTGVuZ3RoID0gJChcIiNcIitjdHJsTmFtZS5pZCkuYXR0cignbWF4TGVuZ3RoJyk7XHJcbiAgICBpZiAoY3VycmVudERhdGEubGVuZ3RoID4gY2hhckxlbmd0aCkge1xyXG4gICAgICAgIGN1cnJlbnREYXRhID0gY3VycmVudERhdGEuc2xpY2UoMCwgY2hhckxlbmd0aCk7XHJcbiAgICAgICAgJChcIiNcIitjdHJsTmFtZS5pZCkudmFsKGN1cnJlbnREYXRhKTtcclxuICAgIH1cclxuICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0U2NvcGUoY3RybE5hbWUpIHtcclxuICAgIHZhciBzZWwgPSAnYXJ0aWNsZVtuZy1jb250cm9sbGVyPVwiJyArIGN0cmxOYW1lICsgJ1wiXSc7XHJcbiAgICByZXR1cm4gYW5ndWxhci5lbGVtZW50KHNlbCkuc2NvcGUoKTtcclxufSIsIid1c2Ugc3RyaWN0JztcclxuXHJcbihmdW5jdGlvbigpIHtcclxuICAgIGxmZ2FwcC5jb250cm9sbGVyKCdsb3N0UG9saWN5RmluZGVyQ29udHJsJywgbG9zdFBvbGljeUZpbmRlckNvbnRybCk7XHJcbiAgICBsb3N0UG9saWN5RmluZGVyQ29udHJsLiRpbmplY3QgPSBbJyRzY29wZScsICckdGltZW91dCcsICdsb3N0UG9saWN5RmluZGVyU2VydmljZXMnLCAnJHdpbmRvdyddO1xyXG5cclxuICAgIGZ1bmN0aW9uIGxvc3RQb2xpY3lGaW5kZXJDb250cmwoJHNjb3BlLCAkdGltZW91dCwgbG9zdFBvbGljeUZpbmRlclNlcnZpY2VzLCAkd2luZG93KSB7XHJcbiAgICAgICAgJHNjb3BlLmlzRmlyc3RDbGljayA9IHRydWU7XHJcbiAgICAgICAgdmFyIGxvc3RQb2xpY3lEYXRhRm9ybUZhY3RvciwgY29tbW9uUmVxdWVzdCwgd2FybmluZ01zZyxcclxuICAgICAgICAgICAgbG9zdFBvbGljeUNvdW50ID0gMCxcclxuICAgICAgICAgICAgaXNDb3JyZWN0WmlwQ29kZSA9IHRydWU7XHJcblxyXG4gICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUudGVybXNDb25kaXRpb25BY2sgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuZW1haWxGb3JtYXQgPSAvXihbYS16QS1aMC05X1xcLVxcLl0rKUAoKFthLXpBLVowLTlfXFwtXStcXC4pKykoW2EtekEtWl17Miw0fXxbMC05XXsxLDN9KShcXF0/KSQvO1xyXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdyZXNwb25zaXZlOnN0YXRlY2hhbmdlZCcsIGZ1bmN0aW9uKGUsIHBhcmFtKSB7XHJcbiAgICAgICAgICAgIGxvc3RQb2xpY3lEYXRhRm9ybUZhY3RvciA9IHBhcmFtO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkc2NvcGUub25Gb2N1c0FuYWx5dGljcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmlzRmlyc3RDbGljaykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzRmlyc3RDbGljayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbicgOiAnZm9ybScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X25hbWUnICA6ICdMb3N0IFBvbGljeSBJbnF1aXJ5JyxcclxuICAgICAgICAgICAgICAgICAgICAnZXZlbnRfdHlwZScgIDogJ2xvc3Rwb2xpY3knLFxyXG4gICAgICAgICAgICAgICAgICAgICdldmVudF9zdGF0dXMnIDogJ3N0YXJ0J1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICB1dGFnLmxpbmsoZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgICQoIHdpbmRvdyApLnJlc2l6ZShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGlzIHRvIHJlYWxpZ24gc2xpZGVyXHJcbiAgICAgICAgICAgICQoXCIubGJ4c2xpZGVyXCIpLmNzcyhcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZVgoXCIgKyBuZXh0Q291bnQgKiAtJChcIi5wb2xpY3ktY29udGFpbmVyXCIpLndpZHRoKCkgKyBcInB4KVwiKTtcclxuICAgICAgICAgICAgc2hvd0hpZGVTdW1tYXJ5KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gSGlkZSBhbGwgc2VjdGlvbnMgaW5pdGlhbGx5IGlmIGl0cyBtb2JpbGVcclxuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPCA3NTEpIHtcclxuICAgICAgICAgICAgJCgnLmxvc3RQb2xpY3lGaW5kZXJGUk0xJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAkKCcubG9zdFBvbGljeUZpbmRlckZSTTInKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICQoJy5sb3N0UG9saWN5RmluZGVyRlJNMycpLmhpZGUoKTtcclxuICAgICAgICAgICAgJCgnLmxvc3RQb2xpY3lGaW5kZXJGUk00JykuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyonKS5yZW1vdmVDbGFzcygnbm9uZScpO1xyXG4gICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLmhpZGUoKTtcclxuXHJcbiAgICAgICAgdmFyIGRhdGVQaWMgPSBuZXcgQ2FsZW5kYXIoe1xyXG4gICAgICAgICAgICAnZGF0ZUlkJyAgICAgICA6ICdkYXRlJyxcclxuICAgICAgICAgICAgJ21vbnRoSWQnICAgICAgOiAnbW9udGgnLFxyXG4gICAgICAgICAgICAneWVhcklkJyAgICAgICA6ICd5ZWFyJyxcclxuICAgICAgICAgICAgJ2hpZGRlbklkJyAgICAgOiAnbm90aWZpZXJEb2InLFxyXG4gICAgICAgICAgICAnbnVtYmVyT2ZZZWFycyc6IDEzMFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBjb21tb25SZXF1ZXN0ID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgY29tbW9uUmVxdWVzdE1vZHVsZSA9IHtcclxuXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZHJvcFZhbHVlO1xyXG5cclxuICAgICAgICAgICAgY29tbW9uUmVxdWVzdE1vZHVsZS5kcm9wRG93blZhbGlkYXRpb24gPSBmdW5jdGlvbihpZCwgZmxhZ05hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBkcm9wVmFsdWUgPSBhbmd1bGFyLmVsZW1lbnQoJyMnICsgaWQpLnRleHQoKTtcclxuICAgICAgICAgICAgICAgIGlmIChkcm9wVmFsdWUudHJpbSgpICE9PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZVtmbGFnTmFtZV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlW2ZsYWdOYW1lXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaWQgPT09ICdsYXN0U3RhdGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvc3RQb2xpY3lEYXRhLm5vdGlmaWVyU3RhdGUgPSBhbmd1bGFyLmVsZW1lbnQoJyNsYXN0U3RhdGUnKS50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpZCA9PT0gJ2NvbnRhY3RTdGF0ZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9zdFBvbGljeURhdGEucmVxdWVzdG9yU3RhdGUgPSBhbmd1bGFyLmVsZW1lbnQoJyNjb250YWN0U3RhdGUnKS50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29tbW9uUmVxdWVzdE1vZHVsZTtcclxuICAgICAgICB9KSgkc2NvcGUpO1xyXG5cclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ3VsLnN0YXRlMiBsaScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBjb21tb25SZXF1ZXN0LmRyb3BEb3duVmFsaWRhdGlvbignY29udGFjdFN0YXRlJywgJ3N0YXRlRmxhZycsICdTZWxlY3Qgc3RhdGUnKTtcclxuICAgICAgICAgICAgfSwgMjAwKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCd1bC5zdGF0ZSBsaScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBjb21tb25SZXF1ZXN0LmRyb3BEb3duVmFsaWRhdGlvbignbGFzdFN0YXRlJywgJ2xhc3RTdGF0ZUZsYWcnLFxyXG4gICAgICAgICAgICAgICAgICAgICdTZWxlY3QgbGFzdCBzdGF0ZSBvZiByZXNpZGVuY2UnKTtcclxuICAgICAgICAgICAgfSwgMjAwKTsgICAgICAgICAgICBcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCd1bC5jdXN0b20tc2VsZWN0Ym94LWxpc3QtY29udCBsaScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBEbyBub3RoaW5nLCB1cGRhdGVzIG1vbnRoIGFuZCB5ZWFyIGluIERPQlxyXG4gICAgICAgICAgICB9LCAyMDApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNkYXRlJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIC8vIERvIG5vdGhpbmcsIHVwZGF0ZXMgZGF0ZSBpbiBET0JcclxuICAgICAgICAgICAgfSwgMjAwKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaXNUd29aaXBDb2RlKG5hbWUsIGJvb2xlYW5WYWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3JlcXVlc3RvclppcENvZGUnKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0ID0gYm9vbGVhblZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkc2NvcGUubnVtYmVyRm9ybWF0ID0gZnVuY3Rpb24oZXZ0LCBpbnB1dFZhbHVlLCBuYW1lLCB6aXBPclBob25lKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dFZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUubG9zdFBvbGljeURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05LV0vZywgJycpO1xyXG4gICAgICAgICAgICBpZiAoemlwT3JQaG9uZSA9PT0gJ3Bob25lJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhdHQgPSAvXihcXGR7M31cXC1cXGR7M30tXFxkezR9KSQvO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAncmVxdWVzdG9yRGF5UGhvbmUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFBob25lRm9ybWF0ID0gIShwYXR0LnRlc3QoJHNjb3BlLmxvc3RQb2xpY3lEYXRhW25hbWVdKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmxvc3RQb2xpY3lEYXRhW25hbWVdLmxlbmd0aCA9PT0gMyAmJiBldnQua2V5Q29kZSAhPT0gOCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sb3N0UG9saWN5RGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9zdFBvbGljeURhdGFbbmFtZV0gPSAkc2NvcGUubG9zdFBvbGljeURhdGFbbmFtZV0ucmVwbGFjZSgvKFxcZHszfSkvLCAnJDEtJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5sb3N0UG9saWN5RGF0YVtuYW1lXS5sZW5ndGggPT09IDcgJiYgZXZ0LmtleUNvZGUgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9zdFBvbGljeURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvc3RQb2xpY3lEYXRhW25hbWVdID0gJHNjb3BlLmxvc3RQb2xpY3lEYXRhW25hbWVdLnJlcGxhY2UoLyhcXGR7M30pKFxcZHszfSkvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnJDEtJDItJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5sb3N0UG9saWN5RGF0YVtuYW1lXS5sZW5ndGggPT09IDEyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvc3RQb2xpY3lEYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sb3N0UG9saWN5RGF0YVtuYW1lXSA9ICRzY29wZS5sb3N0UG9saWN5RGF0YVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KShcXGR7M30pKFxcZHs0fSkvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnJDEtJDItJDMnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmxvc3RQb2xpY3lEYXRhW25hbWVdLmxlbmd0aCA9PT0gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9zdFBvbGljeURhdGFbbmFtZV0gPSAkc2NvcGUubG9zdFBvbGljeURhdGFbbmFtZV0ucmVwbGFjZSgvKFxcZHszfSkoXFxkezN9KShcXGR7NH0pLyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyQxLSQyLSQzJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmlzQ29ycmVjdFBob25lRm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5sb3N0UG9saWN5RGF0YVtuYW1lXS5sZW5ndGggPj0gMTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9ICRzY29wZS5sb3N0UG9saWN5RGF0YVtuYW1lXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sb3N0UG9saWN5RGF0YVtuYW1lXSA9IHN0ci5zbGljZSgwLCAxMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RQaG9uZUZvcm1hdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh6aXBPclBob25lID09PSAnemlwJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5sb3N0UG9saWN5RGF0YVtuYW1lXS5sZW5ndGggPT09IDUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9zdFBvbGljeURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05LV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldnQua2V5Q29kZSA9PT0gMTA5IHx8IGV2dC5rZXlDb2RlID09PSAxODkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvc3RQb2xpY3lEYXRhW25hbWVdID0gJHNjb3BlLmxvc3RQb2xpY3lEYXRhW25hbWVdICsgJy0nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUubG9zdFBvbGljeURhdGFbbmFtZV0ubGVuZ3RoID4gNSAmJiAkc2NvcGUubG9zdFBvbGljeURhdGFbbmFtZV0ubGVuZ3RoIDw9IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ldyBSZWdFeHAoJy0nKS50ZXN0KCRzY29wZS5sb3N0UG9saWN5RGF0YVtuYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5sb3N0UG9saWN5RGF0YVtuYW1lXS5sZW5ndGggPT09IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF0dFppcCA9IC9eKFxcZHs1fVxcLVxcZHs0fSkkLztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3JlcXVlc3RvclppcENvZGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCA9ICEocGF0dFppcC50ZXN0KCRzY29wZS5sb3N0UG9saWN5RGF0YVtuYW1lXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUubG9zdFBvbGljeURhdGFbbmFtZV0ubGVuZ3RoID09PSA5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldnQua2V5Q29kZSA9PT0gMTA5IHx8IGV2dC5rZXlDb2RlID09PSAxODkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyMnICsgZXZ0LnRhcmdldC5pZCkuaW5zZXJ0QXRDYXJldCgnLScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGUsIHtcclxuICAgICAgICAgICAgJ2lzTG9zdFBvbGljeUZpbmRlckNsaWNrZWQnOiBmYWxzZSxcclxuICAgICAgICAgICAgJ2xvc3RQb2xpY3lEYXRhJyAgICAgICAgICAgOiB7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAnbGFzdFN0YXRlRmxhZycgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgICdzdGF0ZUZsYWcnICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgJ2lzRGF0ZVZhbGlkJyAgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgJ2lzQWdyZWUnICAgICAgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgJ3ZhbGlkYXRpb25FcnJvclNob3cnOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRDYXB0Y2hhRGF0YSgpIHtcclxuICAgICAgICAgICAgdmFyIG51Y2FwdGNoYUFuc0VudHIsIG51Y2FwdGNoYUFuc0V4dDtcclxuXHJcbiAgICAgICAgICAgIGlmICghYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1lbnRlcicpKSB7XHJcbiAgICAgICAgICAgICAgICBudWNhcHRjaGFBbnNFbnRyID0gJyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBudWNhcHRjaGFBbnNFbnRyID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1lbnRlcicpLnZhbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1leGl0JykpIHtcclxuICAgICAgICAgICAgICAgIG51Y2FwdGNoYUFuc0V4dCA9ICcnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1leGl0JykudmFsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJHNjb3BlLmxvc3RQb2xpY3lEYXRhWydnUmVjYXB0Y2hhUmVzcG9uc2UnXSA9ICQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Rm9ybURhdGEoKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5sb3N0UG9saWN5RGF0YS5pZGVudGl0eSA9ICdMT1NUX1BPTElDWSc7XHJcbiAgICAgICAgICAgICRzY29wZS5sb3N0UG9saWN5RGF0YS5mb3JtRmFjdG9yID0gbG9zdFBvbGljeURhdGFGb3JtRmFjdG9yO1xyXG4gICAgICAgICAgICAkc2NvcGUubG9zdFBvbGljeURhdGEubm90aWZpZXJTdGF0ZSA9IGFuZ3VsYXIuZWxlbWVudCgnI2xhc3RTdGF0ZScpLnRleHQoKTtcclxuICAgICAgICAgICAgJHNjb3BlLmxvc3RQb2xpY3lEYXRhLnJlcXVlc3RvclN0YXRlID0gYW5ndWxhci5lbGVtZW50KCcjY29udGFjdFN0YXRlJykudGV4dCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZGlzcGxheUVycigpIHtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuZXJyb3JNc2cnKS5yZW1vdmVDbGFzcygnbmctaGlkZScpO1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IHRydWU7XHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLmMtZXJyLWJveCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbycpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGlzRXJyVmFsID0gYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykuZXEoMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgpLm9mZnNldCgpLnRvcDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVySGd0ID0gYW5ndWxhci5lbGVtZW50KCcuc2l0ZS1uYXZpZ2F0aW9uJykub3V0ZXJIZWlnaHQodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRpc0VyclZhbCA9ICh0aXNFcnJWYWwgLSBoZWFkZXJIZ3QpIC0gNTA7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCdodG1sLCBib2R5Jykuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGlzRXJyVmFsXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgNjAwLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykuZXEoMCkuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgMjAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgLy8gQmVnaW4gYnV0dG9uXHJcbiAgICAgICAgICAgICQoXCIjbHBOZXh0MVwiKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICQoXCIjbHBOZXh0MVwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBIaWRlIGR1bW15IGNvbnRyb2xzIHdoaWNoIHdlcmUgaW50cm9kdWNlZCBmb3IgYXV0b2NvbXBsZXRlIGlzc3VlXHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI3VzZXJuYW1lX3RlbXAnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI3Bhc3N3b3JkX3RlbXAnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnY2xpY2tlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHRDb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIubGJ4c2xpZGVyXCIpLmNzcyhcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZVgoXCIgKyAxICogLSQoXCIucG9saWN5LWNvbnRhaW5lclwiKS53aWR0aCgpICsgXCJweClcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIi5kb3QxXCIpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIiwgXCIjNzc3XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBCZWxvdyBzaG91bGQgZXhlY3V0ZSBvbmx5IHdoZW4gZmlyc3QgdGltZSBjbGljayBvZiB0aGUgQmVnaW4gYnV0dG9uLlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubG9zdFBvbGljeURhdGEubm90aWZpZXJGaXJzdE5hbWUgPT0gdW5kZWZpbmVkKSBcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIucG9saWN5LXJpZ2h0LXJhaWwgLnN1bW1zZWNcIikuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiLnBvbGljeS1yaWdodC1yYWlsLWhlYWQgLnN1bUluc1wiKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIucG9saWN5LXJpZ2h0LXJhaWwgLnN1bW1jaGFuZ2VcIikuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiLnBvbGljeS1yaWdodC1yYWlsLWhlYWQgLnNlY0hlYWRpbmdcIikuY3NzKFwiYm9yZGVyLWJvdHRvbVwiLCBcIm5vbmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjc3NuXCIpLnZhbCgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjbWFpZGVuQWxpYXNOYW1lXCIpLnZhbCgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSA8IDc1MSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBtb2JpbGUgdmlldywgdGhlbiBoaWRlIHNlY3Rpb25zIG90aGVyIHRoYW4gY3VycmVudCBvbmUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5sb3N0UG9saWN5RmluZGVyRlJNMScpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmxvc3RQb2xpY3lGaW5kZXJGUk0yJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcubG9zdFBvbGljeUZpbmRlckZSTTMnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5sb3N0UG9saWN5RmluZGVyRlJNNCcpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIiNscE5leHQxXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQW5hbHl0aWNzIHVwZGF0ZS5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbic6ICdmb3JtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X25hbWUnICA6ICdMb3N0IFBvbGljeSBJbnF1aXJ5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3R5cGUnICA6ICdsb3N0cG9saWN5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3ZlcnNpb24nIDogJzInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfc3RhdHVzJzogJ3N0YXJ0J1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdXRhZy5saW5rKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSwgNjAwKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAkKFwiI2xwTmV4dDJcIikuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI2xwTmV4dDJcIikuYXR0cihcImRpc2FibGVkXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRG8gdGhlIHZhbGlkYXRpb24gZmlyc3RcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNsb3N0UG9saWN5RmluZGVyMUNsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vblJlcXVlc3QuZHJvcERvd25WYWxpZGF0aW9uKCdsYXN0U3RhdGUnLCAnbGFzdFN0YXRlRmxhZycsICdTZWxlY3QgbGFzdCBzdGF0ZSBvZiByZXNpZGVuY2UnKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9zdFBvbGljeURhdGEubm90aWZpZXJTdGF0ZSA9IGFuZ3VsYXIuZWxlbWVudCgnI2xhc3RTdGF0ZScpLnRleHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZEZvcm1fU3RlcDEoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Q291bnQrKzsgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSA8IDc1MSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgbW9iaWxlIHZpZXcsIHRoZW4gaGlkZSBzZWN0aW9ucyBvdGhlciB0aGFuIGN1cnJlbnQgb25lLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmxvc3RQb2xpY3lGaW5kZXJGUk0yJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmxvc3RQb2xpY3lGaW5kZXJGUk0zJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmxvc3RQb2xpY3lGaW5kZXJGUk00JykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIubGJ4c2xpZGVyXCIpLmNzcyhcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZVgoXCIgKyAyICogLSQoXCIucG9saWN5LWNvbnRhaW5lclwiKS53aWR0aCgpICsgXCJweClcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSA8IDc1MSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmxvc3RQb2xpY3lGaW5kZXJGUk0xJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5wb2xpY3ktcmlnaHQtcmFpbCAuc3VtbWFyeVNlYzFcIikuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcucG9saWN5LXJpZ2h0LXJhaWwgLnN0ZXBzJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiLnBvbGljeS1yaWdodC1yYWlsLWhlYWQgLnN1bUluc1wiKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIucG9saWN5LXJpZ2h0LXJhaWwgLnN1bW1jaGFuZ2VcIikuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiLnBvbGljeS1yaWdodC1yYWlsLWhlYWQgLnNlY0hlYWRpbmdcIikuY3NzKFwiYm9yZGVyLWJvdHRvbVwiLCBcIjFweCBzb2xpZCAjZGNkZWUwXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiLmRvdDFcIikuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiLCBcIiMzQzZcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIuZG90MVwiKS5jc3MoXCJib3JkZXJcIiwgXCIxcHggc29saWQgIzNDNlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5kb3QyXCIpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIiwgXCIjNzc3XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW5hbHl0aWNzIHVwZGF0ZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfYWN0aW9uJzogJ2J1dHRvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfbmFtZScgIDogJ05leHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3R5cGUnICA6ICdsb3N0cG9saWN5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9zdGF0dXMnOiAnU3RlcCAyJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRhZy5saW5rKGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGNsaWNrIGV2ZW50IGZhbHNlLCBzbyB0aGF0IHdoZW4gdXNlciBnb2VzIGJhY2sgdG8gdGhhdCBzZWN0aW9uLCB2YWxpZGF0aW9uIGFnYWluIGhhcHBlbnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2V0QWxsQ2xpY2tGYWxzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5lcnJvck1zZycpLmFkZENsYXNzKCduZy1oaWRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5RXJyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkKFwiI2xwTmV4dDJcIikuYXR0cihcImRpc2FibGVkXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0sIDYwMCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAkKFwiI2xwTmV4dDNcIikuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI2xwTmV4dDNcIikuYXR0cihcImRpc2FibGVkXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc2xvc3RQb2xpY3lGaW5kZXIyQ2xpY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkRm9ybV9TdGVwMigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRDb3VudCsrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpIDwgNzUxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBtb2JpbGUgdmlldywgdGhlbiBoaWRlIHNlY3Rpb25zIG90aGVyIHRoYW4gY3VycmVudCBvbmUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcubG9zdFBvbGljeUZpbmRlckZSTTEnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcubG9zdFBvbGljeUZpbmRlckZSTTMnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcubG9zdFBvbGljeUZpbmRlckZSTTQnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5sYnhzbGlkZXJcIikuY3NzKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlWChcIiArIDMgKiAtJChcIi5wb2xpY3ktY29udGFpbmVyXCIpLndpZHRoKCkgKyBcInB4KVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpIDwgNzUxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcubG9zdFBvbGljeUZpbmRlckZSTTInKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiLnBvbGljeS1yaWdodC1yYWlsIC5zdW1tYXJ5U2VjMlwiKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5wb2xpY3ktcmlnaHQtcmFpbCAuc3RlcHMnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIuZG90MlwiKS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiIzNDNlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5kb3QyXCIpLmNzcyhcImJvcmRlclwiLCBcIjFweCBzb2xpZCAjM0M2XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiLmRvdDNcIikuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiLCBcIiM3NzdcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBbmFseXRpY3MgdXBkYXRlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9hY3Rpb24nOiAnYnV0dG9uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9uYW1lJyAgOiAnTmV4dCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfdHlwZScgIDogJ2xvc3Rwb2xpY3knLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3N0YXR1cyc6ICdTdGVwIDMnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGFnLmxpbmsoZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgY2xpY2sgZXZlbnQgZmFsc2UsIHNvIHRoYXQgd2hlbiB1c2VyIGdvZXMgYmFjayB0byB0aGF0IHNlY3Rpb24sIHZhbGlkYXRpb24gYWdhaW4gaGFwcGVuc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZXRBbGxDbGlja0ZhbHNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmVycm9yTXNnJykuYWRkQ2xhc3MoJ25nLWhpZGUnKTtcclxuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5RXJyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkKFwiI2xwTmV4dDNcIikuYXR0cihcImRpc2FibGVkXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0sIDYwMCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJChcIiNscE5leHQ0XCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJChcIiNscE5leHQ0XCIpLmF0dHIoXCJkaXNhYmxlZFwiLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNsb3N0UG9saWN5RmluZGVyM0NsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vblJlcXVlc3QuZHJvcERvd25WYWxpZGF0aW9uKCdjb250YWN0U3RhdGUnLCAnc3RhdGVGbGFnJywgJ1NlbGVjdCBzdGF0ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sb3N0UG9saWN5RGF0YS5yZXF1ZXN0b3JTdGF0ZSA9IGFuZ3VsYXIuZWxlbWVudCgnI2NvbnRhY3RTdGF0ZScpLnRleHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRGb3JtX1N0ZXAzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dENvdW50Kys7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPCA3NTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIG1vYmlsZSB2aWV3LCB0aGVuIGhpZGUgc2VjdGlvbnMgb3RoZXIgdGhhbiBjdXJyZW50IG9uZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5sb3N0UG9saWN5RmluZGVyRlJNMScpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5sb3N0UG9saWN5RmluZGVyRlJNMicpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5sb3N0UG9saWN5RmluZGVyRlJNNCcpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiLmxieHNsaWRlclwiKS5jc3MoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGVYKFwiICsgNCAqIC0kKFwiLnBvbGljeS1jb250YWluZXJcIikud2lkdGgoKSArIFwicHgpXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPCA3NTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5sb3N0UG9saWN5RmluZGVyRlJNMycpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIucG9saWN5LXJpZ2h0LXJhaWwgLnN1bW1hcnlTZWMzXCIpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnBvbGljeS1yaWdodC1yYWlsIC5zdGVwcycpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5kb3QzXCIpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIiwgXCIjM0M2XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiLmRvdDNcIikuY3NzKFwiYm9yZGVyXCIsIFwiMXB4IHNvbGlkICMzQzZcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIuZG90NFwiKS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiIzc3N1wiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFuYWx5dGljcyB1cGRhdGUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbic6ICdidXR0b24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X25hbWUnICA6ICdOZXh0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF90eXBlJyAgOiAnbG9zdHBvbGljeScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfc3RhdHVzJzogJ1N0ZXAgNCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0YWcubGluayhkYXRhKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBjbGljayBldmVudCBmYWxzZSwgc28gdGhhdCB3aGVuIHVzZXIgZ29lcyBiYWNrIHRvIHRoYXQgc2VjdGlvbiwgdmFsaWRhdGlvbiBhZ2FpbiBoYXBwZW5zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNldEFsbENsaWNrRmFsc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuZXJyb3JNc2cnKS5hZGRDbGFzcygnbmctaGlkZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheUVycigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICQoXCIjbHBOZXh0NFwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSwgNjAwKTtcclxuICAgICAgICAgICAgfSk7XHJcbiBcclxuICAgICAgICAgICAgJChwcmV2QnV0dG9uKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICQocHJldkJ1dHRvbikuYXR0cihcImRpc2FibGVkXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudF9zdGF0dXMgPSBcIlN0ZXAgXCIgKyAobmV4dENvdW50LTEpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRDb3VudCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50X3N0YXR1cyA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFuYWx5dGljcyB1cGRhdGUuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9hY3Rpb24nOiAnbGluaycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9uYW1lJyAgOiAnUHJldmlvdXMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfdHlwZScgIDogJ2xvc3Rwb2xpY3knLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfc3RhdHVzJzogZXZlbnRfc3RhdHVzXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpIDwgNzUxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIG1vYmlsZSB2aWV3LCB0aGVuIGhpZGUgc2VjdGlvbnMgb3RoZXIgdGhhbiBjdXJyZW50IG9uZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmxvc3RQb2xpY3lGaW5kZXJGUk0xJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcubG9zdFBvbGljeUZpbmRlckZSTTInKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5sb3N0UG9saWN5RmluZGVyRlJNMycpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmxvc3RQb2xpY3lGaW5kZXJGUk00JykuaGlkZSgpOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRTZWN0aW9uID0gbmV4dENvdW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSA8IDc1MSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcubG9zdFBvbGljeUZpbmRlckZSTScgKyBuZXh0Q291bnQpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dENvdW50LS07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpIDwgNzUxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5sb3N0UG9saWN5RmluZGVyRlJNJyArIG5leHRDb3VudCkuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJChcIi5sYnhzbGlkZXJcIikuY3NzKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlWChcIiArIG5leHRDb3VudCAqIC0kKFwiLnBvbGljeS1jb250YWluZXJcIikud2lkdGgoKSArIFwicHgpXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSA8IDc1MSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5sb3N0UG9saWN5RmluZGVyRlJNJyArIG5leHRTZWN0aW9uKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDYwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICQoXCIuZG90XCIgKyBOdW1iZXIobmV4dENvdW50KzEpKS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiI0ZGRlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAkKFwiLmRvdFwiICsgbmV4dENvdW50KS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiIzc3N1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAkKFwiLmRvdFwiICsgTnVtYmVyKG5leHRDb3VudCsxKSkuY3NzKFwiYm9yZGVyXCIsIFwiMXB4IHNvbGlkICM3NzdcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIi5kb3RcIiArIG5leHRDb3VudCkuY3NzKFwiYm9yZGVyXCIsIFwiMXB4IHNvbGlkICM3NzdcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdXRhZy5saW5rKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICQocHJldkJ1dHRvbikuYXR0cihcImRpc2FibGVkXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0sIDYwMCk7XHJcbiAgICAgICAgICAgIH0pOyAgXHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBTZXRBbGxDbGlja0ZhbHNlKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzbG9zdFBvbGljeUZpbmRlcjFDbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNsb3N0UG9saWN5RmluZGVyMkNsaWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc2xvc3RQb2xpY3lGaW5kZXIzQ2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzbG9zdFBvbGljeUZpbmRlcjRDbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gU1NOIHZhbGlkYXRpb25cclxuICAgICAgICAkc2NvcGUuc2hvd1NzbiA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS52YWxpZHNzbiA9IHRydWU7XHJcbiAgICAgICAgJHNjb3BlLnNzbj0gXCJcIjtcclxuICAgICAgICAkc2NvcGUuZm9ybWF0ID0gL15cXGR7M31bLSBdP1xcZHsyfVstIF0/XFxkezR9JC87XHJcbiAgICAgICAgJHNjb3BlLnRvZ2dsZVNob3dTc24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dTc24gPSAhJHNjb3BlLnNob3dTc247XHJcbiAgICAgICAgICAgIGlmICgkKCcjc3NuJykuYXR0cigndHlwZScpID09ICdwYXNzd29yZCcpIHtcclxuICAgICAgICAgICAgICAgICQoJyNzc24nKS5hdHRyKCd0eXBlJywgJ3RleHQnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoJyNzc24nKS5hdHRyKCd0eXBlJywgJ3Bhc3N3b3JkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRzY29wZS5WYWxpZGF0ZVBhc3RlID0gZnVuY3Rpb24oY29udFR5cGUsIGUpIHtcclxuICAgICAgICAgICAgdmFyIGN0cmxOYW1lID0gZS50YXJnZXQuYXR0cmlidXRlcy5pZC52YWx1ZTtcclxuICAgICAgICAgICAgdmFyIHBhc3RlZERhdGEgPSBcIlwiO1xyXG4gICAgICAgICAgICBpZiAoZS50eXBlID09IFwiZHJvcFwiKSB7XHJcbiAgICAgICAgICAgICAgICBwYXN0ZWREYXRhID0gZS5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcIlRleHRcIik7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS50eXBlID09IFwicGFzdGVcIikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNsaXBEYXRhO1xyXG4gICAgICAgICAgICAgICAgY2xpcERhdGEgPSBlLmNsaXBib2FyZERhdGEgfHwgd2luZG93LmNsaXBib2FyZERhdGE7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xpcERhdGEgPT0gdW5kZWZpbmVkKSBjbGlwRGF0YSA9IGUub3JpZ2luYWxFdmVudC5jbGlwYm9hcmREYXRhO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsaXBEYXRhICE9IHVuZGVmaW5lZCkgcGFzdGVkRGF0YSA9IGNsaXBEYXRhLmdldERhdGEoJ1RleHQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY3VycmVudERhdGEgPSBQcm9jZXNzRGF0YUZvckNvcnJlY3Rpb24oY29udFR5cGUsIGN0cmxOYW1lLCBwYXN0ZWREYXRhKTtcclxuICAgICAgICAgICAgdmFyIGNoYXJMZW5ndGggPSAkKFwiI1wiK2N0cmxOYW1lKS5hdHRyKCdtYXhMZW5ndGgnKTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnREYXRhLmxlbmd0aCA+IGNoYXJMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRhID0gY3VycmVudERhdGEuc2xpY2UoMCwgY2hhckxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAkKFwiI1wiK2N0cmxOYW1lKS52YWwoY3VycmVudERhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICRzY29wZS5sb3N0UG9saWN5RGF0YVtjdHJsTmFtZV0gPSBjdXJyZW50RGF0YTtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJHNjb3BlLlVwZGF0ZUpTT04gPSBmdW5jdGlvbihjb250VHlwZSwgZSkge1xyXG4gICAgICAgICAgICB2YXIgY3RybE5hbWUgPSBlLnRhcmdldC5hdHRyaWJ1dGVzLmlkLnZhbHVlO1xyXG4gICAgICAgICAgICB2YXIgY2hhckxlbmd0aCA9ICQoXCIjXCIrY3RybE5hbWUpLmF0dHIoJ21heExlbmd0aCcpO1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSAkKFwiI1wiK2N0cmxOYW1lKS52YWwoKTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICQoXCIjXCIrY3RybE5hbWUpLnZhbChcIlwiKTtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gUHJvY2Vzc0RhdGFGb3JDb3JyZWN0aW9uKGNvbnRUeXBlLCBjdHJsTmFtZSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IGNoYXJMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKFwiI1wiK2N0cmxOYW1lKS52YWwodmFsdWUuc2xpY2UoMCwgY2hhckxlbmd0aCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvc3RQb2xpY3lEYXRhW2N0cmxOYW1lXSA9ICQoXCIjXCIrY3RybE5hbWUpLnZhbCgpLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICRzY29wZVtcImludmFsaWRcIiArIGN0cmxOYW1lXSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkc2NvcGUuYWRkRGFzaCA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgIT0gXCI4XCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQudmFsdWUubGVuZ3RoID09IFwiM1wiIHx8IGV2ZW50LnRhcmdldC52YWx1ZS5sZW5ndGggPT0gNil7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvc3RQb2xpY3lEYXRhLnNzbiA9IGV2ZW50LnRhcmdldC52YWx1ZSArIFwiLVwiOyBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgoZXZlbnQudGFyZ2V0LnZhbHVlLmxlbmd0aCA9PSBcIjRcIiB8fCBldmVudC50YXJnZXQudmFsdWUubGVuZ3RoID09IDcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlW2V2ZW50LnRhcmdldC52YWx1ZS5sZW5ndGggLSAxXSAhPSBcIi1cIil7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvc3RQb2xpY3lEYXRhLnNzbiA9IGV2ZW50LnRhcmdldC52YWx1ZS5zdWJzdHJpbmcoMCwgZXZlbnQudGFyZ2V0LnZhbHVlLmxlbmd0aCAtIDEpICsgXCItXCIgKyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlW2V2ZW50LnRhcmdldC52YWx1ZS5sZW5ndGggLSAxXTsgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlW2V2ZW50LnRhcmdldC52YWx1ZS5sZW5ndGggLSAxXSA9PSBcIi1cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sb3N0UG9saWN5RGF0YS5zc24gPSBldmVudC50YXJnZXQudmFsdWUuc3Vic3RyaW5nKDAsIGV2ZW50LnRhcmdldC52YWx1ZS5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlLmxlbmd0aCA9PSBcIjExXCIgfHwgZXZlbnQudGFyZ2V0LnZhbHVlLmxlbmd0aCA9PSBcIjBcIikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZhbGlkc3NuID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQudmFsdWUubGVuZ3RoID09IFwiMTFcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXR0ID0gL14oXFxkezN9XFwtXFxkezJ9LVxcZHs0fSkkLztcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmFsaWRzc24gPSBwYXR0LnRlc3QoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS52YWxpZHNzbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBOZXcgZnVuY3Rpb24gd3JpdHRlbiB0byB2YWxpZGF0ZSBzdGVwLTFcclxuICAgICAgICBmdW5jdGlvbiB2YWxpZEZvcm1fU3RlcDEoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXRWYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoISRzY29wZS5sb3N0UG9saWN5RGF0YS5ub3RpZmllckRvYikge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubG9zdFBvbGljeScpLnJlbW92ZUNsYXNzKCduZy1oaWRlJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5sb3N0UG9saWN5JykuYWRkQ2xhc3MoJ25nLWhpZGUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmxvc3RQb2xpY3lGaW5kZXIxLiR2YWxpZCAmJiAkc2NvcGUudmFsaWRzc24gJiYgISRzY29wZVtcImxhc3RTdGF0ZUZsYWdcIl0pIHtcclxuICAgICAgICAgICAgICAgIGdldEZvcm1EYXRhKCk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmV0VmFsdWUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHZhbGlkRm9ybV9TdGVwMigpIHtcclxuICAgICAgICAgICAgdmFyIHJldFZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICgoJHNjb3BlLmxvc3RQb2xpY3lGaW5kZXIyLiR2YWxpZCAmJiAhJHNjb3BlLmlzQ29ycmVjdFBob25lRm9ybWF0KSAmJiBcclxuICAgICAgICAgICAgICAgICgkc2NvcGUubG9zdFBvbGljeURhdGEucmVxdWVzdG9yRW1haWwgPT09ICRzY29wZS5sb3N0UG9saWN5RGF0YS5lbWFpbENvbmZpcm1hdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS52YWxpZGF0aW9uRXJyb3JTaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB2YWxpZEZvcm1fU3RlcDMoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXRWYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmxvc3RQb2xpY3lGaW5kZXIzLiR2YWxpZCAmJiAhJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgZ2V0Rm9ybURhdGEoKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS52YWxpZGF0aW9uRXJyb3JTaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB2YWxpZEZvcm1GaW5hbCgpIHtcclxuICAgICAgICAgICAgdmFyIGlzQ2FwdGNoYUF2YWlsID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjYXBjaGFWYWw7XHJcblxyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcuZy1yZWNhcHRjaGEnKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpc0NhcHRjaGFBdmFpbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjYXBjaGFWYWwgPSBhbmd1bGFyLmVsZW1lbnQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhcGNoYVZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCRzY29wZS5sb3N0UG9saWN5RmluZGVyMS4kdmFsaWQgJiYgJHNjb3BlLmxvc3RQb2xpY3lGaW5kZXIyLiR2YWxpZCAmJiAkc2NvcGUubG9zdFBvbGljeUZpbmRlcjMuJHZhbGlkIFxyXG4gICAgICAgICAgICAgICAgJiYgJHNjb3BlLmxvc3RQb2xpY3lGaW5kZXI0LiR2YWxpZCAmJiAoKGlzQ2FwdGNoYUF2YWlsICYmIGNhcGNoYVZhbCkgfHwgIWlzQ2FwdGNoYUF2YWlsKSAmJiAhJHNjb3BlLmlzQ29ycmVjdFBob25lRm9ybWF0XHJcbiAgICAgICAgICAgICAgICAmJiAhJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzQ2FwdGNoYUF2YWlsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0Q2FwdGNoYURhdGEoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGdldEZvcm1EYXRhKCk7XHJcbiAgICAgICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVyU2hvdygpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZhbGlkYXRpb25FcnJvclNob3cgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3dpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGtzUGFnZVVSTDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRpc3BsYXlFcnIoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdmFsaWRGb3JtKCkge1xyXG4gICAgICAgICAgICB2YXIgaXNDYXB0Y2hhQXZhaWwgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNhcGNoYVZhbDtcclxuXHJcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5nLXJlY2FwdGNoYScpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGlzQ2FwdGNoYUF2YWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNhcGNoYVZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnI2ctcmVjYXB0Y2hhLXJlc3BvbnNlJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FwY2hhVmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLnNob3coKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmxvc3RQb2xpY3lGaW5kZXIuJHZhbGlkICYmICgoaXNDYXB0Y2hhQXZhaWwgJiYgY2FwY2hhVmFsKSB8fCAhaXNDYXB0Y2hhQXZhaWwpICYmICEkc2NvcGUuaXNDb3JyZWN0UGhvbmVGb3JtYXRcclxuICAgICAgICAgICAgICAgICYmICEkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNDYXB0Y2hhQXZhaWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBnZXRDYXB0Y2hhRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZ2V0Rm9ybURhdGEoKTtcclxuICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJTaG93KCk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRpc3BsYXlFcnIoKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdEZpbmFsUmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzbG9zdFBvbGljeUZpbmRlcjRDbGlja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmICghbG9zdFBvbGljeUNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUubG9zdFBvbGljeURhdGEubm90aWZpZXJEb2IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubG9zdFBvbGljeScpLnJlbW92ZUNsYXNzKCduZy1oaWRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubG9zdFBvbGljeScpLmFkZENsYXNzKCduZy1oaWRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGxvc3RQb2xpY3lDb3VudCA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkRm9ybUZpbmFsKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5sb3N0UG9saWN5RGF0YS5ub3RpZmllckZpcnN0TmFtZSA9IFwiYXNmZDQ1c2dcIjtcclxuICAgICAgICAgICAgICAgICAgICBsb3N0UG9saWN5RmluZGVyU2VydmljZXMubG9zdFBvbGljeUZpbmRlclBvc3QoJHNjb3BlLCAkc2NvcGUubG9zdFBvbGljeURhdGEsIGZ1bmN0aW9uKGRhdGFBamF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhUmVzcG9uc2UgPSBkYXRhQWpheC5kYXRhLnJlc3BvbnNlU3RhdHVzQ29kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzU3VjY2VzcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3BvbnNlID09PSAnVElNRURfT1VUJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdUSU1FRCBPVVQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uc2UgPT09ICdJTlRFUk5BTF9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgSW52YWxpZEZpZWxkc1N0ciA9IGRhdGFBamF4LmRhdGEuc2VydmljZVJlcG9uc2VNZXNzYWdlLnJlcGxhY2UoXCJbXCIsIFwiXCIpLnJlcGxhY2UoXCJdXCIsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBJbnZhbGlkRmllbGRzID0gSW52YWxpZEZpZWxkc1N0ci50b1N0cmluZygpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGlnaGxpZ2h0IGludmFsaWQgZmllbGRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpQ250ID0gMDsgaUNudCA8IEludmFsaWRGaWVsZHMubGVuZ3RoOyBpQ250KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGludmFsaWRGbGFnID0gXCJpbnZhbGlkXCIgKyBJbnZhbGlkRmllbGRzW2lDbnRdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlW2ludmFsaWRGbGFnXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdJTlRFUk5BTCBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25zZSA9PT0gJ0NBUFRDSEFfRVJST1InIHx8IGRhdGFSZXNwb25zZSA9PT0gJ1JFQ0FQVENIQV9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnSU5WQUxJRCBDQVBUQ0hBJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbnNlID09PSAnU0VSVklDRV9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnU0VSVklDRSBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25zZSA9PT0gJ1NVQ0NFU1MnIHx8IGRhdGFSZXNwb25zZSA9PT0gJ01JU1NJTkdfQ0FQVENIQScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWdyZWVtZW50U3RhdG1lbnQnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHRrc1BhZ2VVUkwgJiYgJ251bGwnICE9PSB0a3NQYWdlVVJMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGtzUGFnZVVSTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnU1VDQ0VTUy4gVGhhbmsgeW91IGZvciBzaGFyaW5nIHlvdXIgaW5mb3JtYXRpb24uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxhc3RTdGF0ZUZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvc3RQb2xpY3lEYXRhID0ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5yZXNldERhdGVQaWNrZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNjb250YWN0U3RhdGUnKS50ZXh0KCdTZWxlY3Qgc3RhdGUnKS5yZW1vdmVBdHRyKCdkYXRhLXZhbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2xhc3RTdGF0ZScpLnRleHQoJ1NlbGVjdCBsYXN0IHN0YXRlIG9mIHJlc2lkZW5jZScpLnJlbW92ZUF0dHIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhLXZhbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0xvc3RQb2xpY3lGaW5kZXJDbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzRmlyc3RDbGljayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9hY3Rpb24nOiAnZm9ybScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9uYW1lJyAgOiAnTG9zdCBQb2xpY3kgSW5xdWlyeScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF90eXBlJyAgOiAnbG9zdHBvbGljeScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF92ZXJzaW9uJzogJzInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfc3RhdHVzJzogJ2NvbXBsZXRlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0YWcubGluayhkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaC13cmFwcGVyJykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5jQ21kTmV3Q2hhbGxlbmdlKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdhcm5pbmdNc2cgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnN1Ym1pdFJlcXVlc3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmlzTG9zdFBvbGljeUZpbmRlckNsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBzdWJtaXRDbGlja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29tbW9uUmVxdWVzdC5kcm9wRG93blZhbGlkYXRpb24oJ2xhc3RTdGF0ZScsICdsYXN0U3RhdGVGbGFnJywgJ1NlbGVjdCBsYXN0IHN0YXRlIG9mIHJlc2lkZW5jZScpO1xyXG4gICAgICAgICAgICBjb21tb25SZXF1ZXN0LmRyb3BEb3duVmFsaWRhdGlvbignY29udGFjdFN0YXRlJywgJ3N0YXRlRmxhZycsICdTZWxlY3Qgc3RhdGUnKTtcclxuICAgICAgICAgICAgaWYgKCFsb3N0UG9saWN5Q291bnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLmxvc3RQb2xpY3lEYXRhLm5vdGlmaWVyRG9iKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubG9zdFBvbGljeScpLnJlbW92ZUNsYXNzKCduZy1oaWRlJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmxvc3RQb2xpY3knKS5hZGRDbGFzcygnbmctaGlkZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbG9zdFBvbGljeUNvdW50ID0gMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHZhbGlkRm9ybSgpKSB7XHJcbiAgICAgICAgICAgICAgICBsb3N0UG9saWN5RmluZGVyU2VydmljZXMubG9zdFBvbGljeUZpbmRlclBvc3QoJHNjb3BlLCAkc2NvcGUubG9zdFBvbGljeURhdGEsIGZ1bmN0aW9uKGRhdGFBamF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFSZXNwb25zZSA9IGRhdGFBamF4LmRhdGEucmVzcG9uc2VTdGF0dXNDb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3BvbnNlID09PSAnVElNRURfT1VUJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ1RJTUVEIE9VVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uc2UgPT09ICdJTlRFUk5BTF9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdJTlRFUk5BTCBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uc2UgPT09ICdDQVBUQ0hBX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ0lOVkFMSUQgQ0FQVENIQSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uc2UgPT09ICdTRVJWSUNFX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ1NFUlZJQ0UgRVJST1InO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbnNlID09PSAnU1VDQ0VTUycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSB0a3NQYWdlVVJMICYmICdudWxsJyAhPT0gdGtzUGFnZVVSTCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2F0aW9uLmhyZWYgPSB0a3NQYWdlVVJMO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnU1VDQ0VTUy4gVGhhbmsgeW91IGZvciBzaGFyaW5nIHlvdXIgaW5mb3JtYXRpb24uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFzdFN0YXRlRmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlRmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvc3RQb2xpY3lEYXRhID0ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tb25GdW5jdGlvbnMucmVzZXREYXRlUGlja2VyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNjb250YWN0U3RhdGUnKS50ZXh0KCdTZWxlY3Qgc3RhdGUnKS5yZW1vdmVBdHRyKCdkYXRhLXZhbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjbGFzdFN0YXRlJykudGV4dCgnU2VsZWN0IGxhc3Qgc3RhdGUgb2YgcmVzaWRlbmNlJykucmVtb3ZlQXR0cihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YS12YWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0xvc3RQb2xpY3lGaW5kZXJDbGlja2VkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbic6ICdmb3JtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfbmFtZScgIDogJ0xvc3QgUG9saWN5IElucXVpcnknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF90eXBlJyAgOiAnbG9zdHBvbGljeScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3N0YXR1cyc6ICdjb21wbGV0ZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRhZy5saW5rKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaC13cmFwcGVyJykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmNDbWROZXdDaGFsbGVuZ2UoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3YXJuaW5nTXNnID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gRGlzYWJsZSBjbGljayBldmVudCBvbiBkcm9wZG93biB3aGVuIGluIHRhYmxldCBtb2RlIGFuZCBTdW1tYXJ5IHBhbmVsIHZpc2libGVcclxuICAgICAgICAkKCcuZGF0ZS13cmFwcGVyIC5kYXRlLWZpZWxkLWNvbnRhaW5lciAuY3VzdG9tLXNlbGVjdGJveC13cmFwIC5jdXN0b20tc2VsZWN0Ym94Jykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICggJCh0aGlzKS5oYXNDbGFzcygnaW5hY3RpdmUnKSApIHtcclxuICAgICAgICAgICAgICAgIC8vIGRvIHdoYXRldmVyIHdoZW4gaXQncyBhY3RpdmUuXHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdDbGlja2VkLi4uJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciB0YWJsZVZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnLkFydGljbGVDb250ZW50Jykub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgICAgICB2YXIgaGVhZGVySGd0ID0gYW5ndWxhci5lbGVtZW50KCcudG9waGVhZGVyLWxvZ28tY29udCcpLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICAgICAgdGFibGVWYWwgPSAodGFibGVWYWwgLSBoZWFkZXJIZ3QpIC0gMjA7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnaHRtbCwgYm9keScpLnN0b3AoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICdzY3JvbGxUb3AnOiB0YWJsZVZhbFxyXG4gICAgICAgICAgICB9LCA4MDApO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG52YXIgcHJldkJ1dHRvbiA9ICcubHBQcmV2JztcclxudmFyIG5leHRDb3VudCA9IDA7XHJcblxyXG5mdW5jdGlvbiBjaGFuZ2VEZXRhaWxzKHNpbGRlQ291bnQpe1xyXG4gICAgLy8gQ2hlY2sgaWYgdXNlciBpcyBpbiB0YWJsZXQgb3IgbW9iaWxlIG1vZGUsIHRoZW4gaGlkZSBTdW1tYXJ5IHNlY3Rpb24uXHJcbiAgICAvL2lmKC8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcGFkfGlyaXN8a2luZGxlfEFuZHJvaWR8U2lsa3xsZ2UgfG1hZW1vfG1pZHB8bW1wfG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIChjZXxwaG9uZSl8eGRhfHhpaW5vL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSBcclxuICAgIC8vICAgIHx8IC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXFwtKXxhaShrb3xybil8YWwoYXZ8Y2F8Y28pfGFtb2l8YW4oZXh8bnl8eXcpfGFwdHV8YXIoY2h8Z28pfGFzKHRlfHVzKXxhdHR3fGF1KGRpfFxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1xcLShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtXFwtfGNlbGx8Y2h0bXxjbGRjfGNtZFxcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1xcLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8XFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFxcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlxcLTV8Z1xcLW1vfGdvKFxcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcXC0obXxwfHQpfGhlaVxcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXFwtY3xodChjKFxcLXwgfF98YXxnfHB8c3x0KXx0cCl8aHUoYXd8dGMpfGlcXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XFwtfFxcLyl8aWJyb3xpZGVhfGlnMDF8aWtvbXxpbTFrfGlubm98aXBhcXxpcmlzfGphKHR8dilhfGpicm98amVtdXxqaWdzfGtkZGl8a2VqaXxrZ3QoIHxcXC8pfGtsb258a3B0IHxrd2NcXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFxcLyhrfGx8dSl8NTB8NTR8XFwtW2Etd10pfGxpYnd8bHlueHxtMVxcLXd8bTNnYXxtNTBcXC98bWEodGV8dWl8eG8pfG1jKDAxfDIxfGNhKXxtXFwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcXC18b258dGZ8d2Z8d2d8d3QpfG5vayg2fGkpfG56cGh8bzJpbXxvcCh0aXx3dil8b3Jhbnxvd2cxfHA4MDB8cGFuKGF8ZHx0KXxwZHhnfHBnKDEzfFxcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblxcLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFxcLWd8cWFcXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFxcLVsyLTddfGlcXC0pfHF0ZWt8cjM4MHxyNjAwfHJha3N8cmltOXxybyh2ZXx6byl8czU1XFwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXFwtfG9vfHBcXC0pfHNka1xcL3xzZShjKFxcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcXC18c2hhcnxzaWUoXFwtfG0pfHNrXFwtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXFwtfHZcXC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcXC18dGRnXFwtfHRlbChpfG0pfHRpbVxcLXx0XFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cXC18bTN8bTUpfHR4XFwtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XFwtdil8dm00MHx2b2RhfHZ1bGN8dngoNTJ8NTN8NjB8NjF8NzB8ODB8ODF8ODN8ODV8OTgpfHczYyhcXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcXC18eW91cnx6ZXRvfHp0ZVxcLS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudC5zdWJzdHIoMCw0KSkpIHsgXHJcbiAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPCAxMDAwKSB7XHJcbiAgICAgICAgaGlkZVN1bW1hcnkoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZXh0Q291bnQgPSBzaWxkZUNvdW50O1xyXG5cclxuICAgIC8vIE1ha2UgbmV4dCBhbGwgZG90cyBhcyB3aGl0ZSBhbmQgY3VycmVudCBhcyBncmF5XHJcbiAgICAkKFwiLmRvdFwiKyBzaWxkZUNvdW50KS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCIjNzc3XCIpLmNzcyhcImJvcmRlclwiLFwiMXB4IHNvbGlkICM3NzdcIilcclxuICAgICAgICAubmV4dEFsbCgpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIiwgXCIjRkZGXCIpLmNzcyhcImJvcmRlclwiLFwiMXB4IHNvbGlkICM3NzdcIik7XHJcblxyXG4gICAgLy8gTWFrZSBhbGwgZG90cyBwcmV2aW91cyB0byBjdXJyZW50IGFzIGdyZWVuXHJcbiAgICAkKFwiLmRvdFwiKyBzaWxkZUNvdW50KS5wcmV2QWxsKCkuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiLCBcIiMzQzZcIikuY3NzKFwiYm9yZGVyXCIsXCIxcHggc29saWQgIzNDNlwiKTtcclxuXHJcbiAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPCA3NTEpIHtcclxuICAgICAgICAvLyBJZiBtb2JpbGUgdmlldywgdGhlbiBoaWRlIHNlY3Rpb25zIG90aGVyIHRoYW4gY3VycmVudCBvbmUuXHJcbiAgICAgICAgJCgnLmxvc3RQb2xpY3lGaW5kZXJGUk0xJykuaGlkZSgpO1xyXG4gICAgICAgICQoJy5sb3N0UG9saWN5RmluZGVyRlJNMicpLmhpZGUoKTtcclxuICAgICAgICAkKCcubG9zdFBvbGljeUZpbmRlckZSTTMnKS5oaWRlKCk7XHJcbiAgICAgICAgJCgnLmxvc3RQb2xpY3lGaW5kZXJGUk00JykuaGlkZSgpO1xyXG4gICAgICAgICQoJy5sb3N0UG9saWN5RmluZGVyRlJNJyArIG5leHRDb3VudCkuc2hvdygpO1xyXG4gICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAkKFwiLmxieHNsaWRlclwiKS5jc3MoXHJcbiAgICAgICAgXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGVYKFwiICsgc2lsZGVDb3VudCAqIC0kKFwiLnBvbGljeS1jb250YWluZXJcIikud2lkdGgoKSArIFwicHgpXCJcclxuICAgICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dTdW1tYXJ5KCkge1xyXG4gICAgLy8gVGFibGV0IG1vZGVcclxuICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8IDEwMDApIHtcclxuICAgICAgICAkKFwiLnBvbGljeS1yaWdodC1yYWlsLWhlYWRcIikuYWRkQ2xhc3MoJ3Nob3dTdW1tYXJ5RGV0YWlscycpO1xyXG4gICAgICAgICQoXCIucG9saWN5LXJpZ2h0LXJhaWwtaGVhZFwiKS5jc3MoXCJtYXJnaW4tbGVmdFwiLCAkKFwiLkFydGljbGVDb250ZW50XCIpLndpZHRoKCkgLSAkKFwiLnBvbGljeS1yaWdodC1yYWlsLWhlYWRcIikud2lkdGgoKSArIFwicHhcIik7XHJcbiAgICAgICAgJChcIi5zaG93U3VtbWFyeUxpbmtcIikuZmFkZU91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICQoXCIucG9saWN5LXJpZ2h0LXJhaWwtaGVhZFwiKS50b2dnbGUoJ3NsaWRlJywge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogJ3JpZ2h0J1xyXG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKFwiLmZpZWxkLW1kXCIpLmF0dHIoXCJyZWFkb25seVwiLCB0cnVlKTtcclxuICAgICAgICAkKFwiLmZpZWxkLWxnXCIpLmF0dHIoXCJyZWFkb25seVwiLCB0cnVlKTtcclxuICAgICAgICAkKFwiLlVJQnV0dG9uXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCB0cnVlKTtcclxuICAgICAgICAkKFwiLmxwUHJldlwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIC8vIEFkZCBjbGFzcyBmb3IgZHJvcGRvd24gdG8gbWFrZSBpdCBub24tY2xpY2thYmxlXHJcbiAgICAgICAgJChcIi5kYXRlLXdyYXBwZXIgLmRhdGUtZmllbGQtY29udGFpbmVyIC5jdXN0b20tc2VsZWN0Ym94LXdyYXAgLmN1c3RvbS1zZWxlY3Rib3hcIikuYWRkQ2xhc3MoJ2luYWN0aXZlJyk7XHJcbiAgICB9XHJcbiAgICBpZiAod2luZG93LmlubmVyV2lkdGggPCA3NTEpIHtcclxuICAgICAgICAkKFwiLnBvbGljeS1jb250YWluZXJcIikuYWRkQ2xhc3MoJ2hpZGVQb2xpY3lGb3JtJyk7XHJcbiAgICAgICAgJChcIi5wb2xpY3ktcmlnaHQtcmFpbC1oZWFkXCIpLmNzcyhcIm1hcmdpbi1sZWZ0XCIsIFwiMHB4XCIpO1xyXG4gICAgfVxyXG4gICAgJChcIi5zaG93U3VtbWFyeUxpbmtcIikuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICAvLyBCZWxvdyBjYW4gYmUgcmVtb3ZlZCB3aGVuIFN1bW1hcnkgb3ZlcmxhcCBpcyBmaXhlZC5cclxuICAgICQoXCIubGJ4c2xpZGVyXCIpLmNzcyhcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZVgoXCIgKyBuZXh0Q291bnQgKiAtJChcIi5wb2xpY3ktY29udGFpbmVyXCIpLndpZHRoKCkgKyBcInB4KVwiKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGlkZVN1bW1hcnkoKSB7XHJcbiAgICAkKFwiLnBvbGljeS1yaWdodC1yYWlsLWhlYWRcIikucmVtb3ZlQ2xhc3MoJ3Nob3dTdW1tYXJ5RGV0YWlscycpO1xyXG4gICAgLy9pZiAoJCh3aW5kb3cpLndpZHRoKCkgPCAxMDAwKSBcclxuICAgIHtcclxuICAgICAgICAkKFwiLnBvbGljeS1yaWdodC1yYWlsLWhlYWRcIikudG9nZ2xlKCdzbGlkZScsIHtcclxuICAgICAgICAgICAgZGlyZWN0aW9uOiAncmlnaHQnXHJcbiAgICAgICAgfSwgMCwgZnVuY3Rpb24oKXsgJCgnLnNob3dTdW1tYXJ5TGluaycpLmZhZGVJbigpO30pO1xyXG4gICAgfVxyXG4gICAgJChcIi5wb2xpY3ktY29udGFpbmVyXCIpLnJlbW92ZUNsYXNzKCdoaWRlUG9saWN5Rm9ybScpO1xyXG4gICAgJChcIi5zaG93U3VtbWFyeUxpbmtcIikuY3NzKFwiZGlzcGxheVwiLCBcImJsb2NrXCIpO1xyXG4gICAgLy8gQmVsb3cgY2FuIGJlIHJlbW92ZWQgd2hlbiBTdW1tYXJ5IG92ZXJsYXAgaXMgZml4ZWQuXHJcbiAgICAkKFwiLmxieHNsaWRlclwiKS5jc3MoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGVYKFwiICsgbmV4dENvdW50ICogLSQoXCIucG9saWN5LWNvbnRhaW5lclwiKS53aWR0aCgpICsgXCJweClcIik7XHJcbiAgICAkKFwiLmZpZWxkLW1kXCIpLmF0dHIoXCJyZWFkb25seVwiLCBmYWxzZSk7XHJcbiAgICAkKFwiLmZpZWxkLWxnXCIpLmF0dHIoXCJyZWFkb25seVwiLCBmYWxzZSk7XHJcbiAgICAkKFwiLlVJQnV0dG9uXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBmYWxzZSk7XHJcbiAgICAkKFwiLmxwUHJldlwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgZmFsc2UpO1xyXG4gICAgJChcIi5kYXRlLXdyYXBwZXIgLmRhdGUtZmllbGQtY29udGFpbmVyIC5jdXN0b20tc2VsZWN0Ym94LXdyYXAgLmN1c3RvbS1zZWxlY3Rib3hcIikucmVtb3ZlQ2xhc3MoJ2luYWN0aXZlJyk7XHJcbn1cclxuXHJcbi8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbiB3aW5kb3cgaXMgcmVzaXplZC4gXHJcbi8vIE1ha2UgUG9saWN5IGZvcm0gaGlkZGVuIGlmIFN1bW1hcnkgc2VjdGlvbiBpcyB2aXNpYmxlIGluIG1vYmlsZSB2aWV3ICAgIFxyXG5mdW5jdGlvbiBzaG93SGlkZVN1bW1hcnkoKSB7XHJcbiAgICBpZiAod2luZG93LmlubmVyV2lkdGggPCA3NTEpIHtcclxuICAgICAgICAvLyBJbiBtb2JpbGUgbW9kZSwgaWYgU3VtbWFyeSBwYW5lbCBpcyBhbHJlYWR5IHZpc2libGUgdGhlbiBoaWRlIGZvcm0gc2VjdGlvbiBhbmQgcmVzZXQgbWFyZ2luIGZvciB0aGF0IHBhbmVsIHRvIDBweC5cclxuICAgICAgICBpZiAoJChcIi5wb2xpY3ktcmlnaHQtcmFpbC1oZWFkXCIpLmhhc0NsYXNzKCdzaG93U3VtbWFyeURldGFpbHMnKSkge1xyXG4gICAgICAgICAgICAkKFwiLnBvbGljeS1jb250YWluZXJcIikuYWRkQ2xhc3MoJ2hpZGVQb2xpY3lGb3JtJyk7XHJcbiAgICAgICAgICAgICQoXCIucG9saWN5LXJpZ2h0LXJhaWwtaGVhZFwiKS5jc3MoXCJtYXJnaW4tbGVmdFwiLCBcIjBweFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICQoXCIuc2hvd1N1bW1hcnlMaW5rXCIpLmNzcyhcImRpc3BsYXlcIiwgXCJibG9ja1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBJZiBtb2JpbGUgdmlldywgdGhlbiBoaWRlIHNlY3Rpb25zIG90aGVyIHRoYW4gY3VycmVudCBvbmUuXHJcbiAgICAgICAgJCgnLmxvc3RQb2xpY3lGaW5kZXJGUk0xJykuc2hvdygpO1xyXG4gICAgICAgICQoJy5sb3N0UG9saWN5RmluZGVyRlJNMicpLnNob3coKTtcclxuICAgICAgICAkKCcubG9zdFBvbGljeUZpbmRlckZSTTMnKS5zaG93KCk7XHJcbiAgICAgICAgJCgnLmxvc3RQb2xpY3lGaW5kZXJGUk00Jykuc2hvdygpO1xyXG4gICAgfVxyXG4gICAgLy8gSW4gdGFibGV0IG1vZGUsIGlmIFN1bW1hcnkgcGFuZWwgaXMgYWxyZWFkeSB2aXNpYmxlIHRoZW4gY2FsY3VsYXRlIGxlZnQtbWFyZ2luIGZvciB0aGF0IHBhbmVsLlxyXG4gICAgLy9pZiAoJCh3aW5kb3cpLndpZHRoKCkgPiA3NTAgJiYgJCh3aW5kb3cpLndpZHRoKCkgPCAxMDAwKSB7XHJcbiAgICBpZiAod2luZG93LmlubmVyV2lkdGggPiA3NTAgJiYgd2luZG93LmlubmVyV2lkdGggPCAxMDAwKSB7XHJcbiAgICAgICAgaWYgKCQoXCIucG9saWN5LXJpZ2h0LXJhaWwtaGVhZFwiKS5oYXNDbGFzcygnc2hvd1N1bW1hcnlEZXRhaWxzJykpIHtcclxuICAgICAgICAgICAgJChcIi5wb2xpY3ktY29udGFpbmVyXCIpLnJlbW92ZUNsYXNzKCdoaWRlUG9saWN5Rm9ybScpO1xyXG4gICAgICAgICAgICAkKFwiLnBvbGljeS1yaWdodC1yYWlsLWhlYWRcIikuY3NzKFwibWFyZ2luLWxlZnRcIiwgJChcIi5BcnRpY2xlQ29udGVudFwiKS53aWR0aCgpIC0gJChcIi5wb2xpY3ktcmlnaHQtcmFpbC1oZWFkXCIpLndpZHRoKCkgKyBcInB4XCIpO1xyXG4gICAgICAgICAgICAkKFwiLmZpZWxkLW1kXCIpLmF0dHIoXCJyZWFkb25seVwiLCB0cnVlKTtcclxuICAgICAgICAgICAgJChcIi5maWVsZC1sZ1wiKS5hdHRyKFwicmVhZG9ubHlcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICQoXCIuVUlCdXR0b25cIikuYXR0cihcImRpc2FibGVkXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAkKFwiLmxwUHJldlwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgY2xhc3MgZm9yIGRyb3Bkb3duIHRvIG1ha2UgaXQgbm9uLWNsaWNrYWJsZVxyXG4gICAgICAgICAgICAkKFwiLmRhdGUtd3JhcHBlciAuZGF0ZS1maWVsZC1jb250YWluZXIgLmN1c3RvbS1zZWxlY3Rib3gtd3JhcCAuY3VzdG9tLXNlbGVjdGJveFwiKS5hZGRDbGFzcygnaW5hY3RpdmUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAod2luZG93LmlubmVyV2lkdGggPj0gMTAwMCkge1xyXG4gICAgICAgICQoXCIucG9saWN5LXJpZ2h0LXJhaWwtaGVhZFwiKS5hZGRDbGFzcygnc2hvd1N1bW1hcnlEZXRhaWxzJyk7XHJcbiAgICAgICAgJChcIi5wb2xpY3ktcmlnaHQtcmFpbC1oZWFkXCIpLmNzcyhcIm1hcmdpbi1sZWZ0XCIsIFwiMHB4XCIpO1xyXG4gICAgICAgICQoXCIucG9saWN5LXJpZ2h0LXJhaWwtaGVhZFwiKS5jc3MoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XHJcbiAgICAgICAgJChcIi5zaG93U3VtbWFyeUxpbmtcIikuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICAgICAgJChcIi5maWVsZC1tZFwiKS5hdHRyKFwicmVhZG9ubHlcIiwgZmFsc2UpO1xyXG4gICAgICAgICQoXCIuZmllbGQtbGdcIikuYXR0cihcInJlYWRvbmx5XCIsIGZhbHNlKTtcclxuICAgICAgICAkKFwiLlVJQnV0dG9uXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBmYWxzZSk7XHJcbiAgICAgICAgJChcIi5scFByZXZcIikuYXR0cihcImRpc2FibGVkXCIsIGZhbHNlKTtcclxuICAgICAgICAkKFwiLmRhdGUtd3JhcHBlciAuZGF0ZS1maWVsZC1jb250YWluZXIgLmN1c3RvbS1zZWxlY3Rib3gtd3JhcCAuY3VzdG9tLXNlbGVjdGJveFwiKS5yZW1vdmVDbGFzcygnaW5hY3RpdmUnKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gVmFsaWRhdGVEcm9wKGNvbnRUeXBlLCBjdHJsTmFtZSwgZXZlbnQpIHtcclxuICAgIHZhciBjdXJyZW50RGF0YSA9ICQoXCIjXCIrY3RybE5hbWUuaWQpLnZhbCgpO1xyXG4gICAgdmFyIHBhc3RlZERhdGEgPSBcIlwiO1xyXG4gICAgaWYgKGV2ZW50LnR5cGUgPT0gXCJkcm9wXCIpIHtcclxuICAgICAgICBwYXN0ZWREYXRhID0gZXZlbnQuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJUZXh0XCIpO1xyXG4gICAgfSBcclxuICAgIHZhciBjdXJyZW50RGF0YSA9IFByb2Nlc3NEYXRhRm9yQ29ycmVjdGlvbihjb250VHlwZSwgY3RybE5hbWUuaWQsIHBhc3RlZERhdGEpO1xyXG4gICAgdmFyICRzY29wZSA9IGdldFNjb3BlKCdsb3N0UG9saWN5RmluZGVyQ29udHJsJyk7XHJcbiAgICB2YXIgY2hhckxlbmd0aCA9ICQoXCIjXCIrY3RybE5hbWUuaWQpLmF0dHIoJ21heExlbmd0aCcpO1xyXG4gICAgaWYgKGN1cnJlbnREYXRhLmxlbmd0aCA+IGNoYXJMZW5ndGgpIHtcclxuICAgICAgICBjdXJyZW50RGF0YSA9IGN1cnJlbnREYXRhLnNsaWNlKDAsIGNoYXJMZW5ndGgpO1xyXG4gICAgICAgICQoXCIjXCIrY3RybE5hbWUuaWQpLnZhbChjdXJyZW50RGF0YSk7XHJcbiAgICB9XHJcbiAgICAkc2NvcGUubG9zdFBvbGljeURhdGFbY3RybE5hbWVdID0gY3VycmVudERhdGE7XHJcbiAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRTY29wZShjdHJsTmFtZSkge1xyXG4gICAgdmFyIHNlbCA9ICdhcnRpY2xlW25nLWNvbnRyb2xsZXI9XCInICsgY3RybE5hbWUgKyAnXCJdJztcclxuICAgIHJldHVybiBhbmd1bGFyLmVsZW1lbnQoc2VsKS5zY29wZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGFuZ2VUeXBlKGV2ZW50KSB7XHJcbiAgICAvL29ua2V5cHJlc3M9XCJyZXR1cm4gY29tbW9uRnVuY3Rpb25zLmlzTnVtYmVyKGV2ZW50KVwiXHJcbiAgICAvKmlmICgkKCcjc3NuJykudmFsKCkubGVuZ3RoID09IDApIHtcclxuICAgICAgICAkKCcjc3NuJykuYXR0cigndHlwZScsICdwYXNzd29yZCcpO1xyXG4gICAgfSovXHJcbiAgICB2YXIgcmV0dXJuVmFsID0gY29tbW9uRnVuY3Rpb25zLmlzTnVtYmVyKGV2ZW50KTtcclxuICAgIHJldHVybiByZXR1cm5WYWw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoYW5nZVNTTlR5cGUoKSB7XHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgLy8kdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoJCgnI3NzbicpLnZhbCgpLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICQoJyNzc24nKS5hdHRyKCd0eXBlJywgJ3Bhc3N3b3JkJyk7XHJcbiAgICAgICAgICAgIHZhciAkc2NvcGUgPSBnZXRTY29wZSgnbG9zdFBvbGljeUZpbmRlckNvbnRybCcpO1xyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd1NzbiA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0sIDUwMCk7XHJcbn0gICAgICAgICIsIid1c2Ugc3RyaWN0JztcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG4gICdpbnNlcnRBdENhcmV0JzogZnVuY3Rpb24obXlWYWx1ZSkge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgaWYgKGRvY3VtZW50LnNlbGVjdGlvbikge1xuICAgICAgICAvLyBGb3IgYnJvd3NlcnMgbGlrZSBJbnRlcm5ldCBFeHBsb3JlclxuICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICAgIHNlbCA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgICAgICBzZWwudGV4dCA9IG15VmFsdWU7XG4gICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zZWxlY3Rpb25TdGFydCB8fCB0aGlzLnNlbGVjdGlvblN0YXJ0ID09ICcwJykge1xuICAgICAgICAvLyBGb3IgYnJvd3NlcnMgbGlrZSBGaXJlZm94IGFuZCBXZWJraXQgYmFzZWRcbiAgICAgICAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zZWxlY3Rpb25TdGFydDtcbiAgICAgICAgdmFyIGVuZFBvcyA9IHRoaXMuc2VsZWN0aW9uRW5kO1xuICAgICAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy5zY3JvbGxUb3A7XG5cbiAgICAgICAgaWYgKHN0YXJ0UG9zID09IDUgJiYgZW5kUG9zID09IDUpIHtcbiAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5zdWJzdHJpbmcoMCwgc3RhcnRQb3MpICsgbXlWYWx1ZSArIHRoaXMudmFsdWUuc3Vic3RyaW5nKGVuZFBvcywgdGhpcy52YWx1ZS5sZW5ndGgpO1xuICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0ID0gc3RhcnRQb3MgKyBteVZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB0aGlzLnNlbGVjdGlvbkVuZCA9IHN0YXJ0UG9zICsgbXlWYWx1ZS5sZW5ndGg7XG4gICAgICAgICAgdGhpcy5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudmFsdWUgKz0gbXlWYWx1ZTtcbiAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcblxudmFyIHRyYW5zZm9ybWVkSW5wdXQsIHRyYW5zZm9ybWVkWmlwSW5wdXQ7XG5cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAvLyBtYWtpbmcgcmlnaHQgcmFpbCBjb21wb25lbnRzIHN0aWNreVxuICAvKiBcdCQoXCIucGluXCIpLmN1c3RvbVBpbih7XG4gIFx0Y29udGFpbmVyU2VsZWN0b3I6IFwiLmNvbnRlbnQtd3JhcHBlclwiLFxuICBcdG1pbldpZHRoOiA5NDAsXG4gIFx0dG9wOiAxNTAsXG4gIFx0bWFyZ2luOiA1MFxuICB9KTsgKi9cbiAgJCgnI3RhYmxlUmVzcG9ucycpLmRhdGFUYWJsZSh7XG4gICAgJ3Jlc3BvbnNpdmUnICAgOiB0cnVlLFxuICAgICdiTGVuZ3RoQ2hhbmdlJzogZmFsc2UsXG4gICAgJ2JTb3J0JyAgICAgICAgOiBmYWxzZSxcbiAgICAnYkZpbHRlcicgICAgICA6IGZhbHNlLFxuICAgICdwYWdpbmcnICAgICAgIDogZmFsc2UsXG4gICAgJ2luZm8nICAgICAgICAgOiBmYWxzZVxuICB9KTtcbiAgJCgnI2NvbW1vblN0b2NrVGJsUmVzcG9uc2l2ZScpLmRhdGFUYWJsZSh7XG4gICAgJ3Jlc3BvbnNpdmUnICAgOiB0cnVlLFxuICAgICdiTGVuZ3RoQ2hhbmdlJzogZmFsc2UsXG4gICAgJ2JTb3J0JyAgICAgICAgOiBmYWxzZSxcbiAgICAnYkZpbHRlcicgICAgICA6IGZhbHNlLFxuICAgICdwYWdpbmcnICAgICAgIDogZmFsc2UsXG4gICAgJ2luZm8nICAgICAgICAgOiBmYWxzZSxcbiAgICAnYXV0b1dpZHRoJyAgICA6IGZhbHNlXG4gIH0pO1xuICAkKCcjcHJlZmVycmVkU3RvY2tUYmxSZXNwb25zaXZlJykuZGF0YVRhYmxlKHtcbiAgICAncmVzcG9uc2l2ZScgICA6IHRydWUsXG4gICAgJ2JMZW5ndGhDaGFuZ2UnOiBmYWxzZSxcbiAgICAnYlNvcnQnICAgICAgICA6IGZhbHNlLFxuICAgICdiRmlsdGVyJyAgICAgIDogZmFsc2UsXG4gICAgJ3BhZ2luZycgICAgICAgOiBmYWxzZSxcbiAgICAnaW5mbycgICAgICAgICA6IGZhbHNlLFxuICAgICdhdXRvV2lkdGgnICAgIDogZmFsc2VcbiAgfSk7XG4gICQoJy5sZmdEYXRhVGFibGVSZXNwb25zaXZlJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAkKHRoaXMpLmRhdGFUYWJsZSh7XG4gICAgICAncmVzcG9uc2l2ZScgICA6IHRydWUsXG4gICAgICAnYkxlbmd0aENoYW5nZSc6IGZhbHNlLFxuICAgICAgJ2JTb3J0JyAgICAgICAgOiBmYWxzZSxcbiAgICAgICdiRmlsdGVyJyAgICAgIDogZmFsc2UsXG4gICAgICAncGFnaW5nJyAgICAgICA6IGZhbHNlLFxuICAgICAgJ2luZm8nICAgICAgICAgOiBmYWxzZSxcbiAgICAgICdhdXRvV2lkdGgnICAgIDogZmFsc2VcbiAgICB9KTtcbiAgfSk7XG4gICQoJyN3YXJyYW50c1RibFJlc3BvbnNpdmUnKS5kYXRhVGFibGUoe1xuICAgICdyZXNwb25zaXZlJyAgIDogdHJ1ZSxcbiAgICAnYkxlbmd0aENoYW5nZSc6IGZhbHNlLFxuICAgICdiU29ydCcgICAgICAgIDogZmFsc2UsXG4gICAgJ2JGaWx0ZXInICAgICAgOiBmYWxzZSxcbiAgICAncGFnaW5nJyAgICAgICA6IGZhbHNlLFxuICAgICdpbmZvJyAgICAgICAgIDogZmFsc2UsXG4gICAgJ2F1dG9XaWR0aCcgICAgOiBmYWxzZVxuICB9KTtcbiAgJCgnI1N0YXR1U3RtdFRibFJlc3BvbnNpdmUnKS5kYXRhVGFibGUoe1xuICAgICdyZXNwb25zaXZlJyAgIDogdHJ1ZSxcbiAgICAnYkxlbmd0aENoYW5nZSc6IGZhbHNlLFxuICAgICdiU29ydCcgICAgICAgIDogZmFsc2UsXG4gICAgJ2JGaWx0ZXInICAgICAgOiBmYWxzZSxcbiAgICAncGFnaW5nJyAgICAgICA6IGZhbHNlLFxuICAgICdpbmZvJyAgICAgICAgIDogZmFsc2UsXG4gICAgJ2F1dG9XaWR0aCcgICAgOiBmYWxzZVxuICB9KTtcbiAgJCgnI2FuYWx5c3RDb3ZlcmFnZVRibFJlc3BvbnNpdmUnKS5kYXRhVGFibGUoe1xuICAgICdyZXNwb25zaXZlJyAgIDogdHJ1ZSxcbiAgICAnYkxlbmd0aENoYW5nZSc6IGZhbHNlLFxuICAgICdiU29ydCcgICAgICAgIDogZmFsc2UsXG4gICAgJ2JGaWx0ZXInICAgICAgOiBmYWxzZSxcbiAgICAncGFnaW5nJyAgICAgICA6IGZhbHNlLFxuICAgICdpbmZvJyAgICAgICAgIDogZmFsc2UsXG4gICAgJ2F1dG9XaWR0aCcgICAgOiBmYWxzZVxuICB9KTtcblxuICAvLyBHb29nbGUgYW5hbHl0aWNzIGZvciBwYWdlIEp1bXAgaW4gYmFubmVycy5cbiAgJCgnLnBhZ2UtbGFuZGluZy1yZWRpcmVjdCBsaScpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZGF0YSA9IHtcbiAgICAgICdldmVudF9hY3Rpb24nOiAnbGluaycsIC8vIEhhcmRjb2RlZFxuICAgICAgJ2V2ZW50X25hbWUnICA6ICQodGhpcykudGV4dCgpLCAvLyBEeW5hbWljIOKAkyB0aGUgdGV4dCBpbiB0aGUgZHJvcGRvd25cbiAgICAgICdldmVudF90eXBlJyAgOiAnaGVybycgLy8gSGFyZGNvZGVkXG4gICAgfTtcblxuICAgIHV0YWcubGluayhkYXRhKTsgLy8gb24gY2xpY2tcbiAgfSk7XG5cbiAgLyogJCgnI2Noem4tc2VsZWN0JykuY2hvc2VuKHtcbiAgXHR3aWR0aDogXCI5NSVcIlxuICB9KTsqL1xuICAkKCcub25seU51bWJlcnMnKS5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGV2dCkge1xuICAgIGV2dCA9IChldnQpID8gZXZ0IDogd2luZG93LmV2ZW50O1xuICAgIHZhciBjaGFyQ29kZSA9IChldnQud2hpY2gpID8gZXZ0LndoaWNoIDogZXZ0LmtleUNvZGU7XG5cbiAgICBpZiAoY2hhckNvZGUgPiAzMSAmJiAoY2hhckNvZGUgPCA0OCB8fCBjaGFyQ29kZSA+IDU3KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcblxuICAvKiBQYWdlIHJlZGlyZWN0aW9uIG9uY2hhbmdlKi9cbiAgJCgnLnBhZ2UtbGFuZGluZy1yZWRpcmVjdCBsaScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvcGVuVHlwZSA9ICgkKHRoaXMpLmF0dHIoJ3JlZGlyZWN0dHlwZScpID09PSAnTmV3V2luZG93JykgPyAnX2JsYW5rJyA6ICdfc2VsZic7XG5cbiAgICB3aW5kb3cub3BlbigkKHRoaXMpLmF0dHIoJ2F0dHItaHJlZicpLCBvcGVuVHlwZSk7XG4gIH0pO1xuXG4gICQoJ3RhYmxlJykuYXR0cigndGFiaW5kZXgnLCAnMCcpO1xuXG4gIC8vIGNvZGUgYWRkZWQgZm9yIEgxIGFuZCBoMiBoZWFkZXIgQURBIHRlc3RpbmdcbiAgaWYgKCQoJy5ieHNsaWRlcicpLmxlbmd0aCA9PT0gMCkge1xuICAgICQoJy5IZXJvLXNsb2dhbiBoMScpLmF0dHIoJ3RhYmluZGV4JywgMCk7XG4gICAgJCgnLkhlcm8tc2xvZ2FuIGgyJykuYXR0cigndGFiaW5kZXgnLCAwKTtcbiAgfVxuXG4gIC8vIGNsaWNrIGV2ZW50cyBmb3Igc29jaWFsIGljb25zXG5cbiAgLy8gZ2V0IHRoZSBwcm9wZXJ0aWVzXG5cbiAgdmFyIHNoYXJlUGFnZVVSTCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgZGVzY3JpcHRpb24gPSAkKCdtZXRhW25hbWU9XFwnRGVzY3JpcHRpb25cXCddJykuYXR0cignY29udGVudCcpO1xuICB2YXIgdGl0bGUgPSAkKGRvY3VtZW50KS5maW5kKCd0aXRsZScpLnRleHQoKTtcblxuICB0aXRsZSA9IHRpdGxlLnJlcGxhY2UoL1xcfC9nLCAnJyk7XG4gIHZhciBzb3VyY2UgPSAnbGZnLmNvbSc7XG4gIHZhciB0d2l0dGVyc291cmNlID0gJ2xpbmNvbG5maW5ncm91cCc7XG4gIHZhciBob3N0bmFtZSA9ICQoJzxhPicpLnByb3AoJ2hyZWYnLCBzaGFyZVBhZ2VVUkwpLnByb3AoJ2hvc3RuYW1lJyk7XG4gIHZhciBpbWFnZVVybDtcblxuICBpZiAobnVsbCAhPSAkKCcuSGVybyA+IGltZycpLmF0dHIoJ3NyYycpKSB7XG4gICAgaW1hZ2VVcmwgPSBob3N0bmFtZSArICQoJy5IZXJvID4gaW1nJykuYXR0cignc3JjJyk7XG4gIH0gZWxzZSBpZiAobnVsbCAhPSAkKCcuSGVybyA+IGRpdiA+IGltZycpLmF0dHIoJ3NyYycpKSB7XG4gICAgaW1hZ2VVcmwgPSBob3N0bmFtZSArICQoJy5IZXJvID4gZGl2ID4gaW1nJykuYXR0cignc3JjJyk7XG4gIH0gZWxzZSB7XG4gICAgaW1hZ2VVcmwgPSAnbGZnLmNvbS9zdGF0aWMvd2NzL2xmZy9pbWFnZXMvc2hhcmVkL2xmZy1sb2dvLnBuZyc7XG4gIH1cblxuICAvLyBlbmRzXG5cbiAgLy9cdGlmKHNoYXJlUGFnZVVSTC5pbmRleE9mKFwiU2F0ZWxsaXRlXCIpPjApe1xuICBzaGFyZVBhZ2VVUkwgPSBlbmNvZGVVUklDb21wb25lbnQoc2hhcmVQYWdlVVJMKTtcblxuICAvLyB9XG4gICQoJy5zaGFyZS0tZmFjZWJvb2snKS5jbGljayhmdW5jdGlvbihlbGUpIHtcbiAgICB3aW5kb3cub3BlbignaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci9zaGFyZXIucGhwP3U9JyArIHNoYXJlUGFnZVVSTCwgJ3BvcHVwJywgJ3dpZHRoPTYwMCxoZWlnaHQ9NjAwJyk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xuXG4gICQoJy5zaGFyZS0tdHdpdHRlcicpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgIHdpbmRvdy5vcGVuKCdodHRwOi8vdHdpdHRlci5jb20vc2hhcmU/dmlhPScgKyB0d2l0dGVyc291cmNlICsgJyZ0ZXh0PScgKyB0aXRsZSArICcmdXJsPScgKyBzaGFyZVBhZ2VVUkwsICdwb3B1cCcsICd3aWR0aD02MDAsaGVpZ2h0PTYwMCcpO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcblxuICAkKCcuc2hhcmUtLWxpbmtlZGluJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgd2luZG93Lm9wZW4oJ2h0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9zaGFyZUFydGljbGU/bWluaT10cnVlJnVybD0nICsgc2hhcmVQYWdlVVJMICsgJyZ0aXRsZT0nICsgdGl0bGUgKyAnJnN1bW1hcnk9JyArIGRlc2NyaXB0aW9uXG4gICAgICArICcmc291cmNlPXNvdXJjZScsICdwb3B1cCcsICd3aWR0aD02MDAsaGVpZ2h0PTYwMCcpO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcblxuICAvLyBhZGQgcHJvcGVydGllcyBmb3IgdGFnc1xuICAkKCcuc2hhcmUtLWVtYWlsJykuYXR0cignaHJlZicsICQoJy5zaGFyZS0tZW1haWwnKS5hdHRyKCdocmVmJykgKyBzaGFyZVBhZ2VVUkwpO1xuICAkKCdoZWFkJykuYXR0cigncHJlZml4JywgJ29nOiBodHRwOi8vb2dwLm1lL25zIyBmYjogaHR0cDovL29ncC5tZS9ucy9mYiMgYXJ0aWNsZTogaHR0cDovL29ncC5tZS9ucy9hcnRpY2xlIycpO1xuXG4gIC8vICQoXCJtZXRhW25hbWU9J3R3aXR0ZXI6aW1hZ2UnXVwiKS5hdHRyKFwiY29udGVudFwiLGltYWdlVXJsKTtcbiAgLy8gJChcIm1ldGFbcHJvcGVydHk9J29nOmltYWdlJ11cIikuYXR0cihcImNvbnRlbnRcIixpbWFnZVVybCk7XG4gIC8vICQoXCJtZXRhW3Byb3BlcnR5PSdvZzp1cmwnXVwiKS5hdHRyKFwiY29udGVudFwiLHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgLy8gZW5kc1xufSk7XG5cbnZhciBzbGlkZXI7XG5cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAvLyByb3RhdGUgYmFubmVyIGNoYW5nZXMgIHN0YXJ0cyBoZXJlLlxuICAvLyB2YXIgdGltZSA9IDEwMDA7XG4gIHZhciBzbGlkZXRpbWUgPSBudWxsO1xuXG4gIGlmICh0eXBlb2YgdGltZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzbGlkZXRpbWUgPSA1MDAwO1xuICB9IGVsc2Uge1xuICAgIHNsaWRldGltZSA9IHRpbWU7XG4gIH1cblxuICB2YXIgc2xpZGVyT2JqID0ge1xuXG4gIH07XG4gIHZhciAkYmFubmVyTGlzdDtcblxuICBzbGlkZXJPYmoubmV4dFNlbGVjdG9yID0gJy5ieC1zbGlkZXItbmV4dCc7XG4gIHNsaWRlck9iai5wYXVzZSA9IHNsaWRldGltZTtcbiAgc2xpZGVyT2JqLnByZXZTZWxlY3RvciA9ICcuYngtc2xpZGVyLXByZSc7XG4gIHNsaWRlck9iai51c2VDU1MgPSBmYWxzZTtcbiAgc2xpZGVyT2JqLm5leHRUZXh0ID0gJyc7XG4gIHNsaWRlck9iai5jb250cm9scyA9IGZhbHNlO1xuICBzbGlkZXJPYmoucHJldlRleHQgPSAnJztcbiAgc2xpZGVyT2JqLmF1dG8gPSB0cnVlO1xuICBzbGlkZXJPYmouYXV0b0hvdmVyID0gdHJ1ZTtcbiAgc2xpZGVyT2JqLnNsaWRlTWFyZ2luID0gMDtcbiAgc2xpZGVyT2JqLnJlc3BvbnNpdmUgPSB0cnVlO1xuICBzbGlkZXJPYmouaW5maW5pdGVMb29wID0gdHJ1ZTtcblxuICBzbGlkZXJPYmoub25TbGlkZXJMb2FkID0gZnVuY3Rpb24oY3VycmVudEluZGV4KSB7XG4gICAgJGJhbm5lckxpc3QgPSAkKCcuYnhzbGlkZXIgbGknKS5ub3QoJy5ieC1jbG9uZScpLmZpbmQoJy5IZXJvLXNsb2dhbiBoMi5jb3B5JykuYXR0cigndGFiaW5kZXgnLCAwKTtcbiAgICBjb25zb2xlLmxvZygnJGJhbm5lckxpc3QnLCAkYmFubmVyTGlzdCk7XG4gICAgJCgnLmJ4c2xpZGVyIGxpLmJ4LWNsb25lIC5IZXJvLS1sYW5kaW5nJykuY2hpbGRyZW4oJ3NwYW4nKS5yZW1vdmUoKTtcbiAgICAkKCcuYnhzbGlkZXIgbGkuYngtY2xvbmUgLkhlcm8tc2xvZ2FuJykuYXR0cigndGFiaW5kZXgnLCAtMSk7XG4gICAgJCgnLmJ4c2xpZGVyIGxpLmJ4LWNsb25lIC5IZXJvLXNsb2dhbicpLmZpbmQoJ2EnKS5hdHRyKCd0YWJpbmRleCcsIC0xKTtcbiAgICAkKCcuYngtY29udHJvbHMgYScpLmF0dHIoJ3RhYmluZGV4JywgLTEpO1xuXG4gICAgJCgnLm1haW4tc2xpZGVyJykuaGlkZSgpO1xuICAgICQoJ2Rpdi5ieC13cmFwcGVyJykuYWRkQ2xhc3MoJ1JpZ2h0Jyk7XG4gICAgJGJhbm5lckxpc3QgPSAkKCcuYnhzbGlkZXIgbGknKTtcbiAgICAkKCcuYnhzbGlkZXInKS5zaG93KCk7XG4gIH07XG5cbiAgc2xpZGVyT2JqLmJ1aWxkUGFnZXIgPSBmdW5jdGlvbihzbGlkZUluZGV4KSB7XG4gICAgcmV0dXJuICcnO1xuICB9O1xuICBzbGlkZXIgPSAkKCcuYnhzbGlkZXInKS5zaG93KCkuYnhTbGlkZXIoc2xpZGVyT2JqKTtcblxuICAkKCcubGVmdEFycm93Jykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgc2xpZGVyLmdvVG9QcmV2U2xpZGUoKTtcbiAgICBzbGlkZXIuc3RvcEF1dG8oKTtcbiAgfSk7XG5cbiAgJCgnLnJpZ2h0QXJyb3cnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICBzbGlkZXIuZ29Ub05leHRTbGlkZSgpO1xuICAgIHNsaWRlci5zdG9wQXV0bygpO1xuICB9KTtcblxuICAkKCcuYWRhZm9jdXMwJykuZm9jdXMoZnVuY3Rpb24oZSkge1xuICAgIHNsaWRlci5zdG9wQXV0bygpO1xuICAgIHNsaWRlci5nb1RvU2xpZGUoMCk7XG4gIH0pO1xuXG4gICQoJy5hZGFmb2N1czEnKS5mb2N1cyhmdW5jdGlvbihlKSB7XG4gICAgc2xpZGVyLmdvVG9TbGlkZSgxKTtcbiAgfSk7XG5cbiAgJCgnLmFkYWZvY3VzMicpLmZvY3VzKGZ1bmN0aW9uKGUpIHtcbiAgICBzbGlkZXIuZ29Ub1NsaWRlKDIpO1xuICB9KTtcblxuICAkKCcuYWRhZm9jdXMzJykuZm9jdXMoZnVuY3Rpb24oZSkge1xuICAgIHNsaWRlci5nb1RvU2xpZGUoMyk7XG4gIH0pO1xuXG4gICQoJy5hZGFmb2N1czQnKS5mb2N1cyhmdW5jdGlvbihlKSB7XG4gICAgc2xpZGVyLmdvVG9TbGlkZSg0KTtcbiAgfSk7XG5cbiAgLy8gZW5kc1xuXG4gIC8vdGVtcG9yYXJ5IGFuYWx5dGljcyBjYWxsIGZvciB2ZXJ0aWNhbCB0YWJcbiAgJCgnLlRhYi12ZXJ0aWNhbCB1bC5VSVRhYnNldC1uYXYgbGknKS5vbignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdXBkYXRlQW5hbHl0aWNzKCQodGhpcykpO1xuICB9KTtcbiAgXG4gIC8vYW5hbHl0aWNzIGNhbGwgZm9yIHdoYXRzIG5ldyBvdmVybGF5XG4gICQoJy53aGF0cy1uZXctb3ZlcmxheS13cmFwcGVyIGJ1dHRvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB1cGRhdGVBbmFseXRpY3MoJCh0aGlzKSk7XG4gIH0pO1xuXG4gIC8vYW5hbHl0aWNzIGNhbGwgZm9yIGxpbmNvbG4gbG9nb1xuICAkKCcudG9waGVhZGVyLWxvZ28nKS5vbignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBkYXRhID0ge1xuICAgICAgJ2V2ZW50X2FjdGlvbic6ICdsaW5rJyxcbiAgICAgICdldmVudF9uYW1lJzogJ0xpbmNvbG4gRmluYW5jaWFsIEdyb3VwJyxcbiAgICAgICdldmVudF90eXBlJzogJ21haW5jb250ZW50JyxcbiAgICAgICdldmVudF92ZXJzaW9uJzogJ2xvZ28nXG4gICAgfTtcbiAgICB1dGFnLmxpbmsoZGF0YSk7XG4gIH0pO1xufSk7XG4kKHdpbmRvdykubG9hZChmdW5jdGlvbigpIHtcbiAgaWYgKCgkKCcjd2hhdHNOZXdPdmVybGF5JykubGVuZ3RoID4gMCAmJiAkKCcjd2hhdHNOZXdPdmVybGF5JykuY3NzKCdkaXNwbGF5JykgPT09ICdibG9jaycpKSB7XG4gICAgICAkKCdib2R5JykuaGVpZ2h0KCQod2luZG93KS5oZWlnaHQoKSk7XG4gICAgICAvKi5jc3Moe1xuICAgICAgJ292ZXJmbG93JzogJ2hpZGRlbicsXG4gICAgICAncG9zaXRpb24nOiAnZml4ZWQnXG4gICAgfSk7ICovXG4gICAgJCgnYm9keScpLmFkZENsYXNzKCcud2hhdHMtbmV3LW92ZXJsYXktb3BlbicpO1xuICB9IGVsc2Uge1xuICAgICQoJ2JvZHknKS5jc3Moe1xuICAgICAgJ2hlaWdodCcgIDogJ2F1dG8nXG4gICAgICAvLydvdmVyZmxvdyc6ICdhdXRvJyxcbiAgICAgIC8vJ3Bvc2l0aW9uJzogJ3N0YXRpYydcbiAgICB9KTtcbiAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJy53aGF0cy1uZXctb3ZlcmxheS1vcGVuJyk7XG4gIH1cblxuICAvLyBhZGQgY2FsZW5kYXIgZXZlbnQgYWRkZWRcbiAgJCgnLmFkZHRvY2FsZW5kYXInKS5vbignY2xpY2sgdG91Y2hzdGFydCcsICdhLGltZycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBjb25zb2xlLmxvZygnZXZlbnQnLCBldmVudC50eXBlKTtcbiAgICBpZiAoISQoJy5hZGR0b2NhbGVuZGFyJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XG4gICAgICAkKCcuYXRjYi1saXN0JykuY3NzKHtcbiAgICAgICAgJ3Zpc2liaWxpdHknOiAndmlzaWJsZSdcbiAgICAgIH0pO1xuICAgICAgJCgnLmFkZHRvY2FsZW5kYXInKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQoJy5hdGNiLWxpc3QnKS5jc3Moe1xuICAgICAgICAndmlzaWJpbGl0eSc6ICdoaWRkZW4nXG4gICAgICB9KTtcbiAgICAgICQoJy5hZGR0b2NhbGVuZGFyJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgIH1cbiAgfSk7XG5cbiAgJCgndWwuYXRjYi1saXN0IGxpJykub24oJ2NsaWNrIHRvdWNoZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHByb2R1Y3RMaW5rID0gJCh0aGlzKS5maW5kKCdhJyk7XG5cbiAgICBwcm9kdWN0TGluay5hdHRyKCd0YXJnZXQnLCAnX2JsYW5rJyk7XG4gICAgd2luZG93Lm9wZW4ocHJvZHVjdExpbmsuYXR0cignaHJlZicpKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG5cbiAgJCgndWwuYXRjYi1saXN0IGE6bGFzdCcpLmJsdXIoZnVuY3Rpb24oKSB7XG4gICAgJCgnLmF0Y2ItbGlzdCcpLmNzcyh7XG4gICAgICAndmlzaWJpbGl0eSc6ICdoaWRkZW4nXG4gICAgfSk7XG4gICAgJCgnLmFkZHRvY2FsZW5kYXInKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gIH0pO1xuXG4gICQoJ2JvZHknKS5jbGljayhmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBjYWxlbmRhckNvbnRhaW5lciA9ICQoJy5hZGR0b2NhbGVuZGFyJyk7XG5cbiAgICBpZiAoY2FsZW5kYXJDb250YWluZXIuaGFzKGV2ZW50LnRhcmdldCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAkKCcuYXRjYi1saXN0JykuY3NzKHtcbiAgICAgICAgJ3Zpc2liaWxpdHknOiAnaGlkZGVuJ1xuICAgICAgfSk7XG4gICAgICAkKCcuYWRkdG9jYWxlbmRhcicpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIGVuZHNcblxuICAvLyBmbGV4aWJsZSBncmlkIGJsb2NrIEFEQVxuXG4gICQoJ2Rpdi50aXRsZScpLm9uKCdmb2N1cycsIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIga2V5VmFsdWUgPSBlLndoaWNoIHx8IGUua2V5Q29kZTtcblxuICAgICQodGhpcykubmV4dCgnLm92ZXJsYXlfY29udGFpbmVyJykuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XG4gIH0pO1xuICAkKCdkaXYub3ZlcmxheWNvbnRlbnQnKS5vbignYmx1cicsICdhJywgZnVuY3Rpb24oZSkge1xuICAgIHZhciBrZXlWYWx1ZSA9IGUud2hpY2ggfHwgZS5rZXlDb2RlO1xuXG4gICAgJCh0aGlzKS5wYXJlbnQoKS5wYXJlbnQoKS5yZW1vdmVBdHRyKCdzdHlsZScsICcnKTtcbiAgfSk7XG5cbiAgLy8gZW5kc1xuXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgaWYgKCQoJy5SZWdBY2NvcmRpb24nKS5maW5kKCdzZWN0aW9uJykuaGFzQ2xhc3MoJ2lzLWV4cGFuZGVkJykpIHtcbiAgICAgIHZhciBvcGVuQWNjdG9wID0gJCgnLlJlZ0FjY29yZGlvbicpLmZpbmQoJ3NlY3Rpb24uaXMtZXhwYW5kZWQnKS5vZmZzZXQoKS50b3AgLSAxMDtcblxuICAgICAgb3BlbkFjY3RvcCA9IG9wZW5BY2N0b3AgLSAkKCdoZWFkZXInKS5oZWlnaHQoKTtcbiAgICAgICQoJ2h0bWwsIGJvZHknKS5zY3JvbGxUb3Aob3BlbkFjY3RvcCk7XG4gICAgfVxuICB9LCAzMDApO1xuICAkKCcuZXJyb3JNc2dOb25lJykuY3NzKHtcbiAgICAnZGlzcGxheSc6ICdibG9jaydcbiAgfSk7XG5cbiAgJCgnLkF1ZGllbmNlU2VsZWN0b3IgPiAuQXVkaWVuY2VTZWxlY3Rvci0tZGVmYXVsdCcpLmNzcygnbGVmdCcsIHBhcnNlSW50KCQoJyNhcmlhLWxpc3QtMScpLmNzcygnd2lkdGgnKSkgKyA3NSArICdweCcpO1xufSk7XG5cbnZhciBjb21tb25GdW5jdGlvbnMgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBjb21tb25Nb2R1bGUgPSB7XG5cbiAgfTtcblxuICBjb21tb25Nb2R1bGUuaXNOdW1iZXIgPSBmdW5jdGlvbihldnQpIHtcbiAgICBldnQgPSAoZXZ0KSA/IGV2dCA6IHdpbmRvdy5ldmVudDtcbiAgICB2YXIgY2hhckNvZGUgPSAoZXZ0LndoaWNoKSA/IGV2dC53aGljaCA6IGV2dC5rZXlDb2RlO1xuXG4gICAgaWYgKGNoYXJDb2RlID4gMzEgJiYgKGNoYXJDb2RlIDwgNDggfHwgY2hhckNvZGUgPiA1NykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBjb21tb25Nb2R1bGUuZXJyb3JTY3JvbGxQb3MgPSBmdW5jdGlvbihwYXJlbnRTZWN0aW9uKSB7XG4gICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLmVyci1ib3JkZXInKS5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgdGlzRXJyVmFsID0gYW5ndWxhci5lbGVtZW50KCcuZXJyLWJvcmRlcicpLmVxKDApLnBhcmVudChwYXJlbnRTZWN0aW9uKS5vZmZzZXQoKS50b3A7XG4gICAgICB2YXIgaGVhZGVySGd0ID0gYW5ndWxhci5lbGVtZW50KCcuVG9waGVhZGVyLWxvZ29hcmVhJykub3V0ZXJIZWlnaHQodHJ1ZSk7XG5cbiAgICAgIHRpc0VyclZhbCA9ICh0aXNFcnJWYWwgLSBoZWFkZXJIZ3QpIC0gMjA7XG4gICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XG4gICAgICAgICdzY3JvbGxUb3AnOiB0aXNFcnJWYWxcbiAgICAgIH0sIDYwMCwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmVyci1ib3JkZXInKS5lcSgwKS5mb2N1cygpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICBjb21tb25Nb2R1bGUubG9hZGVyU2hvdyA9IGZ1bmN0aW9uKCkge1xuICAgIGFuZ3VsYXIuZWxlbWVudCgnI2ZhZGUnKS5oZWlnaHQoYW5ndWxhci5lbGVtZW50KHdpbmRvdykuaGVpZ2h0KCkpO1xuICAgIGFuZ3VsYXIuZWxlbWVudCgnaHRtbCwgYm9keScpLnNjcm9sbFRvcCgwKTtcbiAgICBhbmd1bGFyLmVsZW1lbnQoJ2JvZHknKS5oZWlnaHQoYW5ndWxhci5lbGVtZW50KHdpbmRvdykuaGVpZ2h0KCkpLmNzcyh7XG4gICAgICAnb3ZlcmZsb3cnOiAnaGlkZGVuJ1xuICAgIH0pO1xuICAgIGFuZ3VsYXIuZWxlbWVudCgnI3N0YXR1cycpLmZhZGVJbigpO1xuICAgIGFuZ3VsYXIuZWxlbWVudCgnI2ZhZGUnKS5mYWRlSW4oKTtcbiAgfTtcbiAgY29tbW9uTW9kdWxlLmxvYWRlckhpZGUgPSBmdW5jdGlvbigpIHtcbiAgICBhbmd1bGFyLmVsZW1lbnQoJyNzdGF0dXMnKS5mYWRlT3V0KCk7XG4gICAgYW5ndWxhci5lbGVtZW50KCcjZmFkZScpLmZhZGVPdXQoKTtcbiAgICBhbmd1bGFyLmVsZW1lbnQoJ2JvZHknKS5jc3Moe1xuICAgICAgJ2hlaWdodCcgIDogJ2F1dG8nLFxuICAgICAgJ292ZXJmbG93JzogJ2F1dG8nXG4gICAgfSk7XG4gIH07XG4gIGNvbW1vbk1vZHVsZS5pc0lFID0gZnVuY3Rpb24odmVyc2lvbiwgY29tcGFyaXNvbikge1xuICAgIHZhciAkZGl2ID0gJCgnPGRpdiBzdHlsZT1cImRpc3BsYXk6bm9uZTtcIi8+JykuYXBwZW5kVG8oJCgnYm9keScpKTtcblxuICAgICRkaXYuaHRtbCgnPCEtLVtpZiAnICsgKGNvbXBhcmlzb24gfHwgJycpICsgJyBJRSAnICsgKHZlcnNpb24gfHwgJycpICsgJ10+PGE+wqA8L2E+PCFbZW5kaWZdLS0+Jyk7XG4gICAgdmFyIGllVGVzdCA9ICRkaXYuZmluZCgnYScpLmxlbmd0aDtcblxuICAgICRkaXYucmVtb3ZlKCk7XG5cbiAgICByZXR1cm4gaWVUZXN0O1xuICB9O1xuICBjb21tb25Nb2R1bGUuY2FsbEFjY29yZGlvbiA9IGZ1bmN0aW9uKGNhdGVOYW1lKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhdHRyID0gJCgnLicgKyBjYXRlTmFtZSkuZmluZCgnc2VjdGlvbicpLmF0dHIoJ2RhdGEtYWNjb3JkaW9uLWlkeCcpO1xuXG4gICAgICBpZiAodHlwZW9mIGF0dHIgPT09IHR5cGVvZiB1bmRlZmluZWQgJiYgYXR0ciAhPT0gZmFsc2UpIHtcbiAgICAgICAgJCgnLicgKyBjYXRlTmFtZSkudUlBY2NvcmRpb24oKTtcbiAgICAgIH1cbiAgICB9LCAxMDAwKTtcbiAgfTtcbiAgY29tbW9uTW9kdWxlLnJlc2V0RGF0ZVBpY2tlciA9IGZ1bmN0aW9uKCkge1xuICAgICQoJy5jdXN0b20tZGl2LXllYXItZHJvcGRvd24nKS50ZXh0KCdZZWFyJykuYXR0cignZGF0YS12YWwnLCAnWWVhcicpO1xuICAgICQoJy5jdXN0b20tZGl2LWRhdGUtZHJvcGRvd24nKS50ZXh0KCdEYXknKS5hdHRyKCdkYXRhLXZhbCcsICdEYXknKTtcbiAgICAkKCcuY3VzdG9tLWRpdi1tb250aC1kcm9wZG93bicpLnRleHQoJ01vbnRoJykucmVtb3ZlQXR0cignZGF0YS12YWwnKTtcbiAgfTtcblxuICBjb21tb25Nb2R1bGUucmVzZXRGaWVsZCA9IGZ1bmN0aW9uKGV2dCwgZmllbGQpIHtcbiAgICBpZiAoZmllbGQgPT09ICd6aXAnKSB7XG4gICAgICBldnQgPSAoZXZ0KSA/IGV2dCA6IHdpbmRvdy5ldmVudDtcbiAgICAgIHZhciBjaGFyQ29kZSA9IChldnQud2hpY2gpID8gZXZ0LndoaWNoIDogZXZ0LmtleUNvZGU7XG5cbiAgICAgIGlmIChjaGFyQ29kZSA+IDMxICYmIChjaGFyQ29kZSA8IDQ4IHx8IGNoYXJDb2RlID4gNTcpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgJCgnLnNlYXJjaGJ5JyArIGZpZWxkKS5yZW1vdmVDbGFzcygnYy1lcnItYm94Jyk7XG4gICAgJCgnLnNlYXJjaGJ5JyArIGZpZWxkKS5wYXJlbnQoKS5uZXh0KCcuYy1lcnItdHh0JykuaGlkZSgpO1xuICAgICQoJy5zZWFyY2hieScgKyBmaWVsZCkubmV4dCgnLlVJQnV0dG9uJykuc2hvdygpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgY29tbW9uTW9kdWxlLnJlc2V0Rm9ybUZpZWxkID0gZnVuY3Rpb24oZXZ0LCBmaWVsZCkge1xuICAgIGlmIChmaWVsZCA9PT0gJ3ppcCcpIHtcbiAgICAgIGV2dCA9IChldnQpID8gZXZ0IDogd2luZG93LmV2ZW50O1xuICAgICAgdmFyIGNoYXJDb2RlID0gKGV2dC53aGljaCkgPyBldnQud2hpY2ggOiBldnQua2V5Q29kZTtcblxuICAgICAgaWYgKGNoYXJDb2RlID4gMzEgJiYgKGNoYXJDb2RlIDwgNDggfHwgY2hhckNvZGUgPiA1NykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICAkKCcuc2VhcmNoYnknICsgZmllbGQpLnJlbW92ZUNsYXNzKCdjLWVyci1ib3gnKTtcbiAgICAkKCcuc2VhcmNoYnknICsgZmllbGQpLnNpYmxpbmdzKCcuYy1lcnItdHh0JykuaGlkZSgpO1xuICAgICQoJy5zZWFyY2hieScgKyBmaWVsZCkubmV4dCgnLlVJQnV0dG9uJykuc2hvdygpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgcmV0dXJuIGNvbW1vbk1vZHVsZTtcbn0pKCk7XG5cbmNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XG5cbi8qIGdldHRpbmcgZGV2aWNlIHN0YXRlKi9cbnZhciBkZXZpY2VTdGF0ZTtcblxuJChkb2N1bWVudCkub24oJ3Jlc3BvbnNpdmU6c3RhdGVjaGFuZ2VkJywgZnVuY3Rpb24oZSwgcGFyYW0pIHtcbiAgZGV2aWNlU3RhdGUgPSBwYXJhbTtcbn0pO1xuXG4kKCdhLmZhbmN5Ym94LWlmcmFtZScpLmZhbmN5Ym94KHtcbiAgJ3R5cGUnICAgOiAnaWZyYW1lJyxcbiAgJ2hlbHBlcnMnOiB7XG4gICAgJ292ZXJsYXknOiB7XG4gICAgICAnY2xvc2VDbGljayc6IGZhbHNlXG4gICAgfVxuICB9XG59KTtcblxuJCgnYS5sZWF2aW5nTEZHT3ZlcmxheScpLmZhbmN5Ym94KHtcbiAgJ2Fycm93cycgOiBmYWxzZSxcbiAgJ2Nsb3NlQ2xpY2snOiBmYWxzZSwgLy8gcHJldmVudHMgY2xvc2luZyB3aGVuIGNsaWNraW5nIElOU0lERSBmYW5jeWJveFxuICAnaGVscGVycycgICA6IHtcbiAgICAnb3ZlcmxheSc6IHtcbiAgICAgICdjbG9zZUNsaWNrJzogZmFsc2VcbiAgICB9XG4gIH0sIC8vIHByZXZlbnRzIGNsb3Npbmcgd2hlbiBjbGlja2luZyBPVVRTSURFIGZhbmN5Ym94XG4gICdiZWZvcmVTaG93JzogZnVuY3Rpb24oKSB7XG4gICAgJCgnI2xlYXZpbmdMRkdPdmVybGF5IC5VSWJ0bkNvbnRpbnVlJykuYXR0cignaHJlZicsICQodGhpcy5lbGVtZW50KS5kYXRhKCd1cmwnKSk7XG4gIH0sXG4gICd0cGwnOiB7XG4gICAgJ2Nsb3NlQnRuJzogJzxhIGhyZWY9XCJqYXZhc2NyaXB0OjtcIj48L2E+J1xuICB9XG59KTtcblxuJCgnI2xlYXZpbmdMRkdPdmVybGF5IC5VSWJ0bkNvbnRpbnVlLCAjbGVhdmluZ0xGR092ZXJsYXkgLlVJYnRuQ2FuY2VsJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICQuZmFuY3lib3guY2xvc2UoKTtcbn0pO1xuXG4vKipcbiAqIERldGVybWluZSB0aGUgbW9iaWxlIG9wZXJhdGluZyBzeXN0ZW0uXG4gKiBUaGlzIGZ1bmN0aW9uIGVpdGhlciByZXR1cm5zICdpT1MnLCAnQW5kcm9pZCcgb3IgJ3Vua25vd24nXG4gKlxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuXG52YXIgZmFuY3lXaWR0aDtcbnZhciBmYW5jeUhlaWdodDtcbnZhciBpc0xsYXZhRmFuY3k7XG5cbmZ1bmN0aW9uIGdldE1vYmlsZU9wZXJhdGluZ1N5c3RlbSgpIHtcbiAgdmFyIHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQgfHwgbmF2aWdhdG9yLnZlbmRvciB8fCB3aW5kb3cub3BlcmE7XG5cbiAgaWYgKHVzZXJBZ2VudC5tYXRjaCgvaVBhZC9pKSB8fCB1c2VyQWdlbnQubWF0Y2goL2lQaG9uZS9pKSB8fCB1c2VyQWdlbnQubWF0Y2goL2lQb2QvaSkpIHtcbiAgICAkKCcuZmFuY3lib3gnKS5mYW5jeWJveCh7XG4gICAgICAnYXV0b1NpemUnICA6IGZhbHNlLFxuICAgICAgJ2JlZm9yZUxvYWQnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5taW5IZWlnaHQgPSAoZGV2aWNlU3RhdGUgPT0gJ21vYmlsZScpID8gJCh3aW5kb3cpLmhlaWdodCgpIDogJyc7XG5cbiAgICAgICAgLyogdGhpcy53aWR0aCAgPSBwYXJzZUludCh0aGlzLmVsZW1lbnQuZGF0YSgnZmFuY3lib3gtd2lkdGgnKSk7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gcGFyc2VJbnQodGhpcy5lbGVtZW50LmRhdGEoJ2ZhbmN5Ym94LWhlaWdodCcpKTsgKi9cbiAgICAgICAgaWYgKHRoaXMud2lkdGggPT09IHVuZGVmaW5lZCB8fCB0aGlzLndpZHRoID09PSAnJykge1xuICAgICAgICAgIHRoaXMud2lkdGggPSBwYXJzZUludCh0aGlzLmVsZW1lbnQuZGF0YSgnZmFuY3lib3gtd2lkdGgnKSk7XG4gICAgICAgICAgdGhpcy5oZWlnaHQgPSBwYXJzZUludCh0aGlzLmVsZW1lbnQuZGF0YSgnZmFuY3lib3gtaGVpZ2h0JykpO1xuICAgICAgICB9XG4gICAgICAgICQoJ2h0bWwsIGJvZHknKS5zY3JvbGxUb3AoMCk7XG4gICAgICB9LFxuICAgICAgJ2hlbHBlcnMnOiB7XG4gICAgICAgICdvdmVybGF5Jzoge1xuICAgICAgICAgICdjbG9zZUNsaWNrJzogZmFsc2VcbiAgICAgICAgfSwgLy8gcHJldmVudHMgY2xvc2luZyB3aGVuIGNsaWNraW5nIE9VVFNJREUgZmFuY3lib3hcbiAgICAgICAgJ3RpdGxlJzoge1xuICAgICAgICAgICd0eXBlJzogJ2luc2lkZSdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICdiZWZvcmVDbG9zZSc6IGZ1bmN0aW9uKCl7XG4gICAgICAgIGNhbGxDbG9zZUFuYWx5dGljcygpO1xuICAgICAgfSxcbiAgICAgICdhZnRlckxvYWQnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudC5oYXNDbGFzcygnY3VydmVkLS1mYW5jeWJveCcpKSB7XG4gICAgICAgICAgY3VydmVkRmFuY3lNb2RhbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHVzZXJBZ2VudC5tYXRjaCgvQW5kcm9pZC9pKSkge1xuICAgICQoJy5mYW5jeWJveCcpLmZhbmN5Ym94KHtcbiAgICAgICdhdXRvU2l6ZScgIDogZmFsc2UsXG4gICAgICAnd2lkdGgnICAgICA6ICc4MCUnLFxuICAgICAgJ3BhZGRpbmcnICAgOiA1LFxuICAgICAgJ21hcmdpbicgICAgOiAwLFxuICAgICAgJ2JlZm9yZUxvYWQnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgJCgnaHRtbCwgYm9keScpLnNjcm9sbFRvcCgyMCk7XG4gICAgICB9LFxuICAgICAgJ2hlbHBlcnMnOiB7XG4gICAgICAgICdvdmVybGF5Jzoge1xuICAgICAgICAgICdjbG9zZUNsaWNrJzogZmFsc2VcbiAgICAgICAgfSwgLy8gcHJldmVudHMgY2xvc2luZyB3aGVuIGNsaWNraW5nIE9VVFNJREUgZmFuY3lib3hcbiAgICAgICAgJ3RpdGxlJzoge1xuICAgICAgICAgICd0eXBlJzogJ2luc2lkZSdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICdiZWZvcmVDbG9zZSc6IGZ1bmN0aW9uKCl7XG4gICAgICAgIGNhbGxDbG9zZUFuYWx5dGljcygpO1xuICAgICAgfSxcbiAgICAgICdhZnRlckxvYWQnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudC5oYXNDbGFzcygnY3VydmVkLS1mYW5jeWJveCcpKSB7XG4gICAgICAgICAgY3VydmVkRmFuY3lNb2RhbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgICQoJy5mYW5jeWJveCcpLmZhbmN5Ym94KHtcbiAgICAgICdhdXRvU2l6ZScgIDogZmFsc2UsXG4gICAgICAnYmVmb3JlTG9hZCc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAkKCdodG1sLCBib2R5Jykuc2Nyb2xsVG9wKDApO1xuICAgICAgfSxcbiAgICAgICdoZWxwZXJzJzoge1xuICAgICAgICAnb3ZlcmxheSc6IHtcbiAgICAgICAgICAnY2xvc2VDbGljayc6IGZhbHNlXG4gICAgICAgIH0sIC8vIHByZXZlbnRzIGNsb3Npbmcgd2hlbiBjbGlja2luZyBPVVRTSURFIGZhbmN5Ym94XG4gICAgICAgICd0aXRsZSc6IHtcbiAgICAgICAgICAndHlwZSc6ICdpbnNpZGUnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnYmVmb3JlQ2xvc2UnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgY2FsbENsb3NlQW5hbHl0aWNzKCk7XG4gICAgICB9LFxuICAgICAgJ2FmdGVyTG9hZCc6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50Lmhhc0NsYXNzKCdjdXJ2ZWQtLWZhbmN5Ym94JykpIHtcbiAgICAgICAgICBjdXJ2ZWRGYW5jeU1vZGFsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbmdldE1vYmlsZU9wZXJhdGluZ1N5c3RlbSgpO1xuXG5mdW5jdGlvbiBjYWxsQ2xvc2VBbmFseXRpY3MoKSB7XG4gIGlmIChpc0xsYXZhRmFuY3kpIHtcbiAgICAvL2FuYWx5dGljcyBjYWxsIGZvciBjbG9zZSBsbGF2YSBjb250YWN0d2hvbGVzYWxlciBtb2RhbFxuICAgIHZhciBkYXRhID0ge1xuICAgICAgJ2V2ZW50X2FjdGlvbic6ICdsaW5rJyxcbiAgICAgICdldmVudF9uYW1lJzogJ2Nsb3NlJyxcbiAgICAgICdldmVudF90eXBlJzogJ2xldmVsYWR2YW50YWdlJyxcbiAgICAgICdldmVudF92ZXJzaW9uJzogYW5ndWxhci5lbGVtZW50KCQoXCIuY29udGFjdC13aG9sZXNhbGVyLWxsYXZhLWNvbnRhaW5lclwiKSkuc2NvcGUoKS5kaXNwbGF5U3VjY2Vzc01zZyA/ICdjb250YWN0IHdob2xlc2FsZXIgY29uZmlybWF0aW9uJyA6ICdjb250YWN0IHdob2xlc2FsZXInXG4gICAgfTtcbiAgICB1dGFnLmxpbmsoZGF0YSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbW9kYWxTY3JvbGwoKSB7XG4gIHZhciBmYW5jeSA9ICQoJy5mYW5jeWJveC1vcGVuZWQnKTtcbiAgdmFyIG1vZGFsQ2hlY2tJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgIGlmICgoZmFuY3kuZmluZCgnZm9ybVtuYW1lPWNvbnRhY3Rfd2hvbGVzYWxlcl9mb3JtXScpWzBdIHx8IHdpbmRvdy5pbm5lcldpZHRoIDw9IDc1MCkgJiZcbiAgICAgIGZhbmN5LmZpbmQoJy5mYW5jeWJveC1pbm5lcicpLmNzcygnaGVpZ2h0JykgIT09ICdhdXRvJykge1xuICAgICAgZmFuY3kuZmluZCgnLmZhbmN5Ym94LWlubmVyJykuY3NzKCdvdmVyZmxvdycsICdoaWRkZW4nKTtcbiAgICAgICQoJy5mYW5jeWJveC1pbm5lcicpLmNzcygnaGVpZ2h0JywgJ2F1dG8nKTtcbiAgICAgIGZhbmN5LmZpbmQoJy5mYW5jeWJveC1za2luJykuY3NzKCdtYXJnaW4tYm90dG9tJywgMzApO1xuICAgICAgLy9jbGVhckludGVydmFsKG1vZGFsQ2hlY2tJbnRlcnZhbCk7XG4gICAgfVxuICB9LCAxMDApO1xuXG4gIGlmIChjaGVja0lFKCkpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgbW9kYWxTY3JvbGwoKTtcbiAgICB9LCA1MDApO1xuICB9XG5cbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBjbGVhckludGVydmFsKG1vZGFsQ2hlY2tJbnRlcnZhbCk7XG4gIH0sIDIwMDApO1xuXG4gIC8vIGZvciAodmFyIGk9MDsgaSA8IDQwOyBpKyspIHsgLy8gSUUgYnJvd3NlciBuZWVkcyBleHRyYSBsb29wIGhlcmUgdG8gb3ZlcnJpZGUgY3NzXG4gIC8vICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgLy8gICAgIGlmICgkKCcuZmFuY3lib3gtb3BlbmVkJykuZmluZCgnZm9ybVtuYW1lPWNvbnRhY3Rfd2hvbGVzYWxlcl9mb3JtXScpWzBdIHx8IHdpbmRvdy5pbm5lcldpZHRoIDw9IDc1MCkge1xuICAvLyAgICAgICAkKCcuZmFuY3lib3gtb3BlbmVkIC5mYW5jeWJveC1pbm5lcicpLmNzcygnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7XG4gIC8vICAgICAgICQoJy5mYW5jeWJveC1vcGVuZWQgLmZhbmN5Ym94LWlubmVyJykuY3NzKCdoZWlnaHQnLCAnYXV0bycpO1xuICAvLyAgICAgICAkKCcuZmFuY3lib3gtb3BlbmVkIC5mYW5jeWJveC1za2luJykuY3NzKCdtYXJnaW4tYm90dG9tJywgMzApO1xuICAvLyAgICAgfVxuICAvLyAgIH0sIGkqMTAwKTtcbiAgLy8gfVxufVxuXG5mdW5jdGlvbiBjdXJ2ZWRGYW5jeU1vZGFsKGVsZSkge1xuICBlbGUubWluSGVpZ2h0ID0gKGRldmljZVN0YXRlID09ICdtb2JpbGUnKSA/ICQod2luZG93KS5oZWlnaHQoKSA6ICcnO1xuICBmYW5jeVdpZHRoID0gZWxlLmVsZW1lbnQuZGF0YSgnZmFuY3lib3gtd2lkdGgnKTtcbiAgZmFuY3lIZWlnaHQgPSBlbGUuZWxlbWVudC5kYXRhKCdmYW5jeWJveC1oZWlnaHQnKTtcblxuICBpZiAoZWxlLmVsZW1lbnQuaGFzQ2xhc3MoJ2N1cnZlZC0tZmFuY3lib3gnKSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAkKCcuY3VydmVkLS1ib3JkZXInKS5wYXJlbnRzKCcuZmFuY3lib3gtd3JhcCcpLmFkZENsYXNzKCdjdXJ2ZWQtLWJvcmRlci0tbW9kYWwnKTtcbiAgICB9LCAxMDApO1xuICAgIGlmIChmYW5jeVdpZHRoICE9ICcnIHx8IGZhbmN5V2lkdGggIT0gdW5kZWZpbmVkKSB7XG4gICAgICBlbGUud2lkdGggPSBwYXJzZUludChmYW5jeVdpZHRoKTtcbiAgICB9XG4gICAgaWYgKGZhbmN5SGVpZ2h0ID09PSAnYXV0bycgfHwgZmFuY3lIZWlnaHQgPT09ICcnKSB7XG4gICAgICBtb2RhbFNjcm9sbCgpO1xuICAgIH0gZWxzZSBpZiAoZmFuY3lIZWlnaHQgIT0gJycpIHtcbiAgICAgIGVsZS5oZWlnaHQgPSBwYXJzZUludChmYW5jeUhlaWdodCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGVsZS53aWR0aCA9PT0gdW5kZWZpbmVkIHx8IGVsZS53aWR0aCA9PT0gJycpIHtcbiAgICBlbGUud2lkdGggPSBwYXJzZUludChmYW5jeVdpZHRoKTtcbiAgICBlbGUuaGVpZ2h0ID0gcGFyc2VJbnQoZmFuY3lIZWlnaHQpO1xuICB9XG5cbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBpZiAoJCgnLmZhbmN5Ym94LW9wZW5lZCcpLmZpbmQoJy5jb250YWN0LXdob2xlc2FsZXItbGxhdmEtY29udGFpbmVyJylbMF0pIHtcbiAgICAgIGlzTGxhdmFGYW5jeSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlzTGxhdmFGYW5jeSA9IGZhbHNlO1xuICAgIH1cbiAgfSwgNTAwKTtcbn1cblxuJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpIHtcbiAgaWYgKGZhbmN5SGVpZ2h0ID09PSAnYXV0bycgfHwgZmFuY3lIZWlnaHQgPT09ICcnKSB7XG4gICAgaWYgKCQoJy5mYW5jeWJveC1vcGVuZWQnKS5oYXNDbGFzcygnY3VydmVkLS1ib3JkZXItLW1vZGFsJykpIHtcbiAgICAgIG1vZGFsU2Nyb2xsKCk7XG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gaXNJRSh2ZXJzaW9uLCBjb21wYXJpc29uKSB7XG4gIHZhciAkZGl2ID0gJCgnPGRpdiBzdHlsZT1cImRpc3BsYXk6bm9uZTtcIi8+JykuYXBwZW5kVG8oJCgnYm9keScpKTtcblxuICAkZGl2Lmh0bWwoJzwhLS1baWYgJyArIChjb21wYXJpc29uIHx8ICcnKSArICcgSUUgJyArICh2ZXJzaW9uIHx8ICcnKSArICddPjxhPiZuYnNwOzwvYT48IVtlbmRpZl0tLT4nKTtcbiAgdmFyIGllVGVzdCA9ICRkaXYuZmluZCgnYScpLmxlbmd0aDtcblxuICAkZGl2LnJlbW92ZSgpO1xuXG4gIHJldHVybiBpZVRlc3Q7XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUUoKSB7XG4gIHZhciBjaGVja0lFID0gZmFsc2U7XG5cbiAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTVNJRScpICE9PSAtMSB8fCBuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKCdUcmlkZW50LycpID4gMCkge1xuICAgIGNoZWNrSUUgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGNoZWNrSUU7XG59XG5cbi8qZnVuY3Rpb24gcmVzdHJpY3RTbWlsZXkoZXZ0KSB7XG4gIC8vYWxlcnQoJ2NhbGxlZCBzbWlsZXknKTtcbiAgLy92YXIgc21pbGV5UmFuZ2UgPSAvW1xcdXsxZjMwMH0tXFx1ezFmNWZmfVxcdXsxZjkwMH0tXFx1ezFmOWZmfVxcdXsxZjYwMH0tXFx1ezFmNjRmfVxcdXsxZjY4MH0tXFx1ezFmNmZmfVxcdXsyNjAwfS1cXHV7MjZmZn1cXHV7MjcwMH0tXFx1ezI3YmZ9XFx1ezFmMWU2fS1cXHV7MWYxZmZ9XFx1ezFmMTkxfS1cXHV7MWYyNTF9XFx1ezFmMDA0fVxcdXsxZjBjZn1cXHV7MWYxNzB9LVxcdXsxZjE3MX1cXHV7MWYxN2V9LVxcdXsxZjE3Zn1cXHV7MWYxOGV9XFx1ezMwMzB9XFx1ezJiNTB9XFx1ezJiNTV9XFx1ezI5MzR9LVxcdXsyOTM1fVxcdXsyYjA1fS1cXHV7MmIwN31cXHV7MmIxYn0tXFx1ezJiMWN9XFx1ezMyOTd9XFx1ezMyOTl9XFx1ezMwM2R9XFx1ezAwYTl9XFx1ezAwYWV9XFx1ezIxMjJ9XFx1ezIzZjN9XFx1ezI0YzJ9XFx1ezIzZTl9LVxcdXsyM2VmfVxcdXsyNWI2fVxcdXsyM2Y4fS1cXHV7MjNmYX1dL3VnO1xuICB2YXIgc21pbGV5UmFuZ2UgPSAvW1xceHswMGEwfS1cXHh7MWY5ZWZ9XS91ZztcbiAgdmFyIHN0ciA9IGV2dC50YXJnZXQudmFsdWU7XG4gIHN0ciA9IHN0ci5yZXBsYWNlKHNtaWxleVJhbmdlLCAnJyk7IFxuICBldnQudGFyZ2V0LnZhbHVlID0gc3RyO1xuICAvL2FsZXJ0KHN0cik7XG4gIHJldHVybiBzdHI7XG59Ki9cblxuLy8gVE9ETzogVGhpcyBjYW4gYmUgc2ltcGxpZmllZCB0byBjaGVjayB3aG9sZSBzdHJpbmcgdXNpbmcgcmVnZXggYW5kIHJlcGxhY2UgaW52YWxpZCBjaGFyIHdpdGggbm90aGluZywgcmF0aGVyIHRoYW4gZm9yIHNpbmdsZSBjaGFyLlxuLyogQmVsb3cgYXJlIHRoZSBzZXQgb2YgY29tbW9uIGZ1bmN0aW9ucyB3aGljaCBhcmUgdXNlZCB0byB2YWxpZGF0ZSBmb3IgdHlwZSBvZiBjaGFyYWN0ZXJzIGFsbG93ZWQgZm9yIHNwZWNpZmljIGZpZWxkcyAqL1xuZnVuY3Rpb24gVmFsaWRhdGVDaGFyKGNvbnRUeXBlLCBlKSB7XG4gIC8vdmFyIGN1cnJlbnREYXRhID0gcmVzdHJpY3RTbWlsZXkoZSk7XG4gIHZhciBjdXJyZW50RGF0YSA9IGUudGFyZ2V0LnZhbHVlO1xuICB2YXIgbGFzdENoYXIgPSAgZS50YXJnZXQudmFsdWVbZS50YXJnZXQudmFsdWUubGVuZ3RoIC0xXTtcbiAgaWYgKCB0eXBlb2YgbGFzdENoYXIgPT09IFwidW5kZWZpbmVkXCIgKSByZXR1cm47XG5cdCAgdmFyIG5ld0RhdGEgPSBcIlwiO1xuICAgIC8vdmFyIGN1cnJlbnREYXRhID0gZXZ0LnRhcmdldC52YWx1ZTtcbiAgICAvL3ZhciBjdXJyZW50RGF0YSA9ICQoXCIjXCIrZS50YXJnZXQuYXR0cmlidXRlcy5pZC52YWx1ZSkudmFsKCk7XG4gICAgdmFyIHRvdGFsTGVuID0gY3VycmVudERhdGEubGVuZ3RoO1xuXHQgIGZvciAodmFyIGlDbnQgPSAwOyBpQ250IDwgdG90YWxMZW47IGlDbnQrKykge1xuXHQgICAgLy8gY2hlY2sgY29uZGl0aW9ucyBpZiBsZXR0ZXJzIG9yIGFscGhhbnVtIG9yIGNvbnRyYWN0IG9yIGFkZG5sIGluZm9cblx0ICAgIGlmIChjb250VHlwZSA9PSBcImFscGhhXCIpXG5cdCAgICB7XG5cdCAgICAgICAgaWYgKHZhbGlkYXRlX2FscGhhKGN1cnJlbnREYXRhLmNoYXJBdChpQ250KSkpIHtcblx0ICAgICAgICBcdG5ld0RhdGEgKz0gY3VycmVudERhdGEuY2hhckF0KGlDbnQpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIGlmIChjb250VHlwZSA9PSBcImFscGhhbnVtXCIpXG5cdCAgICB7XG5cdCAgICAgICAgaWYgKHZhbGlkYXRlX2FscGhhTnVtKGN1cnJlbnREYXRhLmNoYXJBdChpQ250KSkpIHtcblx0ICAgICAgICBcdG5ld0RhdGEgKz0gY3VycmVudERhdGEuY2hhckF0KGlDbnQpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIGlmIChjb250VHlwZSA9PSBcImluaXRpYWxcIilcblx0ICAgIHtcblx0ICAgICAgICBpZiAodmFsaWRhdGVfaW5pdGlhbChjdXJyZW50RGF0YS5jaGFyQXQoaUNudCkpKSB7XG5cdCAgICAgICAgXHRuZXdEYXRhICs9IGN1cnJlbnREYXRhLmNoYXJBdChpQ250KTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAoY29udFR5cGUgPT0gXCJhZGRubFwiKVxuXHQgICAge1xuXHQgICAgICAgIGlmICh2YWxpZGF0ZV9hZGRubChjdXJyZW50RGF0YS5jaGFyQXQoaUNudCkpKSB7XG5cdCAgICAgICAgXHRuZXdEYXRhICs9IGN1cnJlbnREYXRhLmNoYXJBdChpQ250KTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAoY29udFR5cGUgPT0gXCJjb250cmFjdFwiKVxuXHQgICAge1xuXHQgICAgICAgIGlmICh2YWxpZGF0ZV9jb250cmFjdChjdXJyZW50RGF0YS5jaGFyQXQoaUNudCkpKSB7XG5cdCAgICAgICAgXHRuZXdEYXRhICs9IGN1cnJlbnREYXRhLmNoYXJBdChpQ250KTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuICAgIGlmIChjb250VHlwZSA9PSBcInNzblwiKVxuICAgIHtcbiAgICAgICAgaWYgKCF2YWxpZGF0ZV9zc24oY3VycmVudERhdGEuY2hhckF0KGlDbnQpKSkge1xuICAgICAgICBcdG5ld0RhdGEgKz0gY3VycmVudERhdGEuY2hhckF0KGlDbnQpO1xuICAgICAgICB9XG4gICAgfVxuXHQgIGUudGFyZ2V0LnZhbHVlID0gbmV3RGF0YTtcbn1cblxuZnVuY3Rpb24gbGV0dGVyc19EYXNoX0Fwb3N0cm9waGVfQWNjZW50c19Pbmx5IChldnQpIHtcbiAgICBldnQgPSAoZXZ0KSA/IGV2dCA6IHdpbmRvdy5ldmVudDtcbiAgICB2YXIgY2hhckNvZGUgPSAoZXZ0LndoaWNoKSA/IGV2dC53aGljaCA6IGV2dC5rZXlDb2RlO1xuICAgIC8vYWxlcnQoJ2V2dC5rZXlDb2RlOiAnICsgZXZ0LmtleUNvZGUgKyAnOyBldnQud2hpY2g6ICcgKyBldnQud2hpY2ggKyAnOyBldnQua2V5OiAnICsgZXZ0LmtleSArICc7IFZhbGlkYXRlQWxwaGE6ICcgKyB2YWxpZGF0ZV9hbHBoYShldnQua2V5KSk7XG4gICAgcmV0dXJuIHZhbGlkYXRlX2FscGhhKGV2dC5rZXkpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZV9hbHBoYShjaGFyVG9WYWxpZGF0ZSkgeyAgICBcbiAgICB2YXIgY2hhckNvZGUgPSBjaGFyVG9WYWxpZGF0ZS5jaGFyQ29kZUF0KDApO1xuICAgIC8vaWYgKC9bXlxceDIwLVxceDdFXS9nLnRlc3QoY2hhclRvVmFsaWRhdGUpKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoL1vDh8O8w6nDosOkw6DDpcOnw6rDq8Oow6/DrsOsw4TDhcOJw6bDhsO0w7bDssO7w7nDv8OWw5zDocOtw7PDusOxw5FdL2cudGVzdChjaGFyVG9WYWxpZGF0ZSkpIHJldHVybiB0cnVlO1xuICAgIGlmICgoKGNoYXJDb2RlIDwgNjUgfHwgY2hhckNvZGUgPiA5MCkgJiYgKGNoYXJDb2RlIDwgOTcgfHwgY2hhckNvZGUgPiAxMjIpIFxuICAgICAgICAmJiAoY2hhckNvZGUgIT0gNDUpICYmIChjaGFyQ29kZSAhPSAzOSkgJiYgKGNoYXJDb2RlICE9IDMyKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7ICAgIFxufVxuXG5mdW5jdGlvbiBsZXR0ZXJzX0FjY2VudHNfT25seSAoZXZ0KSB7XG4gICAgZXZ0ID0gKGV2dCkgPyBldnQgOiB3aW5kb3cuZXZlbnQ7XG4gICAgdmFyIGNoYXJDb2RlID0gKGV2dC53aGljaCkgPyBldnQud2hpY2ggOiBldnQua2V5Q29kZTtcbiAgICByZXR1cm4gdmFsaWRhdGVfaW5pdGlhbChldnQua2V5KTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVfaW5pdGlhbChjaGFyVG9WYWxpZGF0ZSkgeyAgICBcbiAgICB2YXIgY2hhckNvZGUgPSBjaGFyVG9WYWxpZGF0ZS5jaGFyQ29kZUF0KDApO1xuICAgIGlmICgvW8OHw7zDqcOiw6TDoMOlw6fDqsOrw6jDr8Ouw6zDhMOFw4nDpsOGw7TDtsOyw7vDucO/w5bDnMOhw63Ds8O6w7HDkV0vZy50ZXN0KGNoYXJUb1ZhbGlkYXRlKSkgcmV0dXJuIHRydWU7XG4gICAgaWYgKCgoY2hhckNvZGUgPCA2NSB8fCBjaGFyQ29kZSA+IDkwKSAmJiAoY2hhckNvZGUgPCA5NyB8fCBjaGFyQ29kZSA+IDEyMikgJiYgKGNoYXJDb2RlICE9IDMyKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7ICAgIFxufVxuXG5mdW5jdGlvbiBhbHBoYW51bV9EYXNoX0Fwb3N0cm9waGVfQWNjZW50c19Pbmx5IChldnQpIHtcbiAgICBldnQgPSAoZXZ0KSA/IGV2dCA6IHdpbmRvdy5ldmVudDtcbiAgICB2YXIgY2hhckNvZGUgPSAoZXZ0LndoaWNoKSA/IGV2dC53aGljaCA6IGV2dC5rZXlDb2RlO1xuICAgIHJldHVybiB2YWxpZGF0ZV9hbHBoYU51bShldnQua2V5KTtcbn07XG5cbmZ1bmN0aW9uIHZhbGlkYXRlX2FscGhhTnVtKGNoYXJUb1ZhbGlkYXRlKSB7XG4gICAgdmFyIGNoYXJDb2RlID0gY2hhclRvVmFsaWRhdGUuY2hhckNvZGVBdCgwKTtcbiAgICAvLyBDaGVjayBpZiBleHRlbmRlZCBhc2NpaSBjaGFyYWN0ZXIgZW50ZXJlZC5cbiAgICAvL2lmICgvW15cXHgyMC1cXHg3RV0vZy50ZXN0KGNoYXJUb1ZhbGlkYXRlKSkgcmV0dXJuIHRydWU7XG4gICAgaWYgKC9bw4fDvMOpw6LDpMOgw6XDp8Oqw6vDqMOvw67DrMOEw4XDicOmw4bDtMO2w7LDu8O5w7/DlsOcw6HDrcOzw7rDscORXS9nLnRlc3QoY2hhclRvVmFsaWRhdGUpKSByZXR1cm4gdHJ1ZTtcblxuICAgIC8vIDQ4IC0gNTcgYXJlIG51bWJlcnNcbiAgICBpZiAoY2hhckNvZGUgPiAzMSAmJiAoY2hhckNvZGUgPCA2NSB8fCBjaGFyQ29kZSA+IDkwKSAmJiAoY2hhckNvZGUgPCA5NyB8fCBjaGFyQ29kZSA+IDEyMikgXG4gICAgICAgICYmIChjaGFyQ29kZSAhPSA0NSkgJiYgKGNoYXJDb2RlICE9IDM5KSAmJiAoY2hhckNvZGUgIT0gMzIpICYmIChjaGFyQ29kZSA8IDQ4IHx8IGNoYXJDb2RlID4gNTcpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4gXG5mdW5jdGlvbiBhZGRubF9JbmZvX09ubHkgKGV2dCkge1xuICAgIGV2dCA9IChldnQpID8gZXZ0IDogd2luZG93LmV2ZW50O1xuICAgIHZhciBjaGFyQ29kZSA9IChldnQud2hpY2gpID8gZXZ0LndoaWNoIDogZXZ0LmtleUNvZGU7XG4gICAgcmV0dXJuIHZhbGlkYXRlX2FkZG5sKGV2dC5rZXkpO1xufTtcblxuZnVuY3Rpb24gdmFsaWRhdGVfYWRkbmwoY2hhclRvVmFsaWRhdGUpIHtcbiAgICB2YXIgY2hhckNvZGUgPSBjaGFyVG9WYWxpZGF0ZS5jaGFyQ29kZUF0KDApO1xuICAgIC8vIENoZWNrIGlmIGV4dGVuZGVkIGFzY2lpIGNoYXJhY3RlciBlbnRlcmVkLlxuICAgIC8vaWYgKC9bXlxceDIwLVxceDdFXS9nLnRlc3QoY2hhclRvVmFsaWRhdGUpKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoL1vDh8O8w6nDosOkw6DDpcOnw6rDq8Oow6/DrsOsw4TDhcOJw6bDhsO0w7bDssO7w7nDv8OWw5zDocOtw7PDusOxw5FdL2cudGVzdChjaGFyVG9WYWxpZGF0ZSkpIHJldHVybiB0cnVlO1xuXG4gICAgLy8gNDggLSA1NyBhcmUgbnVtYmVycywgMzIgLSA1OSBzcGVjaWFsIGNoYXJhY3RlcnNcbiAgICBpZiAoY2hhckNvZGUgPiAzMSAmJiAoY2hhckNvZGUgPCA2MyB8fCBjaGFyQ29kZSA+IDkwKSAmJiAoY2hhckNvZGUgPCA5NyB8fCBjaGFyQ29kZSA+IDEyMikgXG4gICAgICAgICYmIChjaGFyQ29kZSAhPSAyMjIpICYmIChjaGFyQ29kZSA8IDMyIHx8IGNoYXJDb2RlID4gNTcpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb250cmFjdF9OdW1iZXJfT25seSAoZXZ0KSB7XG4gICAgZXZ0ID0gKGV2dCkgPyBldnQgOiB3aW5kb3cuZXZlbnQ7XG4gICAgdmFyIGNoYXJDb2RlID0gKGV2dC53aGljaCkgPyBldnQud2hpY2ggOiBldnQua2V5Q29kZTtcbiAgICByZXR1cm4gdmFsaWRhdGVfY29udHJhY3QoZXZ0LmtleSk7XG59O1xuXG5mdW5jdGlvbiB2YWxpZGF0ZV9jb250cmFjdChjaGFyVG9WYWxpZGF0ZSkge1xuICAgIHZhciBjaGFyQ29kZSA9IGNoYXJUb1ZhbGlkYXRlLmNoYXJDb2RlQXQoMCk7XG4gICAgaWYgKGNoYXJDb2RlID4gMzEgJiYgKGNoYXJDb2RlIDwgNjUgfHwgY2hhckNvZGUgPiA5MCkgJiYgKGNoYXJDb2RlIDwgOTcgfHwgY2hhckNvZGUgPiAxMjIpIFxuICAgICAgICAmJiAoY2hhckNvZGUgPCA0OCB8fCBjaGFyQ29kZSA+IDU3KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZV9zc24oY2hhclRvVmFsaWRhdGUpIHtcbiAgICB2YXIgY2hhckNvZGUgPSBjaGFyVG9WYWxpZGF0ZS5jaGFyQ29kZUF0KDApO1xuICAgIGlmICgoY2hhckNvZGUgIT0gNDUpICYmIChjaGFyQ29kZSA8IDQ4IHx8IGNoYXJDb2RlID4gNTcpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIFByb2Nlc3NEYXRhRm9yQ29ycmVjdGlvbihjb250VHlwZSwgY3RybE5hbWUsIHBhc3RlZERhdGEpIHtcbiAgICB2YXIgY3VycmVudERhdGEgPSAkKFwiI1wiK2N0cmxOYW1lKS52YWwoKTtcbiAgICAvLyBWYWxpZGF0ZSBwYXN0ZWQgZGF0YVxuICAgIGZvciAodmFyIGlDbnQgPSAwOyBpQ250IDwgcGFzdGVkRGF0YS5sZW5ndGg7IGlDbnQrKykge1xuICAgICAgICAvLyBjaGVjayBjb25kaXRpb25zIGlmIGxldHRlcnMgb3IgYWxwaGFudW0gb3IgY29udHJhY3Qgb3IgYWRkbmwgaW5mb1xuICAgICAgICBpZiAoY29udFR5cGUgPT0gXCJhbHBoYVwiKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAodmFsaWRhdGVfYWxwaGEocGFzdGVkRGF0YS5jaGFyQXQoaUNudCkpKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudERhdGEgKz0gcGFzdGVkRGF0YS5jaGFyQXQoaUNudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRUeXBlID09IFwiYWxwaGFudW1cIilcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHZhbGlkYXRlX2FscGhhTnVtKHBhc3RlZERhdGEuY2hhckF0KGlDbnQpKSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRhICs9IHBhc3RlZERhdGEuY2hhckF0KGlDbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb250VHlwZSA9PSBcImluaXRpYWxcIilcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHZhbGlkYXRlX2luaXRpYWwocGFzdGVkRGF0YS5jaGFyQXQoaUNudCkpKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudERhdGEgKz0gcGFzdGVkRGF0YS5jaGFyQXQoaUNudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRUeXBlID09IFwiYWRkbmxcIilcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHZhbGlkYXRlX2FkZG5sKHBhc3RlZERhdGEuY2hhckF0KGlDbnQpKSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRhICs9IHBhc3RlZERhdGEuY2hhckF0KGlDbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb250VHlwZSA9PSBcImNvbnRyYWN0XCIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICh2YWxpZGF0ZV9jb250cmFjdChwYXN0ZWREYXRhLmNoYXJBdChpQ250KSkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0YSArPSBwYXN0ZWREYXRhLmNoYXJBdChpQ250KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udFR5cGUgPT0gXCJzc25cIilcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHZhbGlkYXRlX3NzbihwYXN0ZWREYXRhLmNoYXJBdChpQ250KSkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0YSArPSBwYXN0ZWREYXRhLmNoYXJBdChpQ250KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAkKFwiI1wiK2N0cmxOYW1lKS52YWwoY3VycmVudERhdGEudHJpbSgpKTtcbiAgICByZXR1cm4gY3VycmVudERhdGEudHJpbSgpO1xufVxuLyogRW5kIG9mIHZhbGlkYXRpb24gZm9yIHR5cGUgb2YgY2hhcmFjdGVycyBhbGxvd2VkIGZvciBzcGVjaWZpYyBmaWVsZHMgKi8iLCIvKiBnbG9iYWxzIGh1YkRvbWFpbiAqL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuZnVuY3Rpb24gc2V0SHViMkNvb2tpZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcclxuICBkb2N1bWVudC5jb29raWUgPSBuYW1lICsgJz0nICsgZXNjYXBlKHZhbHVlKVxyXG4gICAgKyAoKGV4cGlyZXMpID8gJztleHBpcmVzPScgKyBleHBpcmVzLnRvR01UU3RyaW5nKCkgOiAnJylcclxuICAgICsgKChwYXRoKSA/ICc7cGF0aD0nICsgcGF0aCA6ICcnKVxyXG4gICAgKyAoKGRvbWFpbikgPyAnO2RvbWFpbj0nICsgZG9tYWluIDogJycpXHJcbiAgICArICgoc2VjdXJlKSA/ICc7c2VjdXJlJyA6ICcnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0Q29va2llKGNuYW1lLCBjdmFsdWUsIGV4ZGF5cykge1xyXG4gIHZhciBkID0gbmV3IERhdGUoKTtcclxuXHJcbiAgZC5zZXRUaW1lKGQuZ2V0VGltZSgpICsgKGV4ZGF5cyAqIDI0ICogNjAgKiA2MCAqIDEwMDApKTtcclxuICB2YXIgZXhwaXJlcyA9ICdleHBpcmVzPScgKyBkLnRvVVRDU3RyaW5nKCk7XHJcblxyXG4gIGRvY3VtZW50LmNvb2tpZSA9IGNuYW1lICsgJz0nICsgY3ZhbHVlICsgJzsgJyArIGV4cGlyZXMgKyAnOycgKyAnIHBhdGg9Lyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFNlc3Npb25Db29raWUoY25hbWUsIGN2YWx1ZSkge1xyXG4gIGRvY3VtZW50LmNvb2tpZSA9IGNuYW1lICsgJz0nICsgY3ZhbHVlICsgJzsgcGF0aD0vJztcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlQ29va2llKGNuYW1lLCBjdmFsdWUsIGV4ZGF5cykge1xyXG4gIHZhciBkID0gbmV3IERhdGUoKTtcclxuXHJcbiAgZC5zZXRUaW1lKGQuZ2V0VGltZSgpICsgKGV4ZGF5cyAqIDI0ICogNjAgKiA2MCAqIDEwMDApKTtcclxuICB2YXIgZXhwaXJlcyA9ICdleHBpcmVzPScgKyBkLnRvVVRDU3RyaW5nKCk7XHJcblxyXG4gIGRvY3VtZW50LmNvb2tpZSA9IGNuYW1lICsgJz0nICsgY3ZhbHVlICsgJzsgJyArIGV4cGlyZXMgKyAnOycgKyAnIHBhdGg9Lyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENvb2tpZShjbmFtZSkge1xyXG4gIHZhciBuYW1lID0gY25hbWUgKyAnPSc7XHJcbiAgdmFyIGNhID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XHJcblxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2EubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBjID0gY2FbaV07XHJcblxyXG4gICAgd2hpbGUgKGMuY2hhckF0KDApID09ICcgJykge1xyXG4gICAgICBjID0gYy5zdWJzdHJpbmcoMSk7XHJcbiAgICB9XHJcbiAgICBpZiAoYy5pbmRleE9mKG5hbWUpID09IDApIHtcclxuICAgICAgcmV0dXJuIGMuc3Vic3RyaW5nKG5hbWUubGVuZ3RoLCBjLmxlbmd0aCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gJyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFVzZXJDb29raWUodXNlck5hbWUpIHtcclxuICBkb2N1bWVudC5jb29raWUgPSAnU2l0ZVVzZXJJRCA9ICcgKyB1c2VyTmFtZSArICc7cGF0aD0vO3NlY3VyZTtkb21haW4gPSBsZmcuY29tJztcclxuICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGh1YkRvbWFpbjtcclxufSIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gdXBkYXRlQW5hbHl0aWNzKGVsZSkge1xuICAgIGlmICghJChlbGUpLmhhc0NsYXNzKCdsZmdBbmFseXRpY3MnKSAmJiAhJChlbGUpLmhhc0NsYXNzKCdjdXN0b21BbmFseXRpY3MnKSkge1xuICAgICAgICB2YXIgZGF0YUluZm8gPSB7XG5cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGV2dFR5cGVGbGFnID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIGV2ZW50TmFtZSA9ICQoZWxlKS5kYXRhKCdldmVudG5hbWUnKTtcblxuICAgICAgICBpZiAoZXZlbnROYW1lICE9PSB1bmRlZmluZWQgJiYgZXZlbnROYW1lICE9PSBudWxsICYmIGV2ZW50TmFtZSAhPT0gJycpIHtcbiAgICAgICAgICAgIGRhdGFJbmZvLmV2ZW50X25hbWUgPSBldmVudE5hbWUudHJpbSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGxpbmtUZXh0ID0gJChlbGUpLnRleHQoKTtcblxuICAgICAgICAgICAgaWYgKGxpbmtUZXh0ICE9PSB1bmRlZmluZWQgJiYgbGlua1RleHQgIT09IG51bGwgJiYgbGlua1RleHQudHJpbSgpICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGRhdGFJbmZvLmV2ZW50X25hbWUgPSBsaW5rVGV4dC50cmltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYXNzZXRJZCA9ICQoZWxlKS5kYXRhKCdhc3NldGlkJyk7XG5cbiAgICAgICAgaWYgKGFzc2V0SWQgIT09IHVuZGVmaW5lZCAmJiBhc3NldElkICE9PSBudWxsICYmIGFzc2V0SWQgIT09ICcnKSB7XG4gICAgICAgICAgICBkYXRhSW5mby5ldmVudF9hc3NldGlkID0gJycgKyBhc3NldElkO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGV2ZW50QWN0aW9uID0gJChlbGUpLmRhdGEoJ2V2ZW50YWN0aW9uJyk7XG5cbiAgICAgICAgaWYgKGV2ZW50QWN0aW9uICE9PSBudWxsICYmIGV2ZW50QWN0aW9uICE9PSB1bmRlZmluZWQgJiYgZXZlbnRBY3Rpb24gIT09ICcnKSB7XG4gICAgICAgICAgICBkYXRhSW5mby5ldmVudF9hY3Rpb24gPSBldmVudEFjdGlvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGFJbmZvLmV2ZW50X2FjdGlvbiA9ICdsaW5rJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBldmVudFR5cGUgPSAkKGVsZSkuZGF0YSgnZXZlbnR0eXBlJyk7XG5cbiAgICAgICAgaWYgKGV2ZW50VHlwZSAhPT0gdW5kZWZpbmVkICYmIGV2ZW50VHlwZSAhPT0gbnVsbCAmJiBldmVudFR5cGUgIT09ICcnKSB7XG4gICAgICAgICAgICBkYXRhSW5mby5ldmVudF90eXBlID0gZXZlbnRUeXBlO1xuICAgICAgICAgICAgZXZ0VHlwZUZsYWcgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgJChlbGUpLnBhcmVudHMoKS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBwYXJlbnQpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnRJZCA9ICQocGFyZW50KS5kYXRhKCdwYXJlbnRpZCcpO1xuXG4gICAgICAgICAgICBpZiAocGFyZW50SWQgIT09IHVuZGVmaW5lZCAmJiBwYXJlbnRJZCAhPT0gbnVsbCAmJiBwYXJlbnRJZCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBkYXRhSW5mby5ldmVudF9wYXJlbnRpZCA9IHBhcmVudElkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZXZlbnRWZXJzaW9uID0gJChwYXJlbnQpLmRhdGEoJ2V2ZW50dmVyc2lvbicpO1xuXG4gICAgICAgICAgICBpZiAoZXZlbnRWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgZXZlbnRWZXJzaW9uICE9PSBudWxsICYmIGV2ZW50VmVyc2lvbiAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBkYXRhSW5mby5ldmVudF92ZXJzaW9uID0gZXZlbnRWZXJzaW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFldnRUeXBlRmxhZykge1xuICAgICAgICAgICAgICAgIHZhciBldmVudFR5cGUgPSAkKHBhcmVudCkuZGF0YSgnZXZlbnR0eXBlJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRUeXBlICE9PSB1bmRlZmluZWQgJiYgZXZlbnRUeXBlICE9PSBudWxsICYmIGV2ZW50VHlwZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YUluZm8uZXZlbnRfdHlwZSA9IGV2ZW50VHlwZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB1dGFnICE9PSAndW5kZWZpbmVkJyAmJiB1dGFnICE9PSB1bmRlZmluZWQgJiYgdXRhZyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXRhZy5saW5rKGRhdGFJbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdXRhZyAhPT0gJ3VuZGVmaW5lZCcgJiYgdXRhZyAhPT0gdW5kZWZpbmVkICYmIHV0YWcgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdXRhZy5saW5rKGRhdGFJbmZvKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbGlua0FuYWx5dGljcyhsaW5rcykge1xuICAgICQobGlua3MpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICB1cGRhdGVBbmFseXRpY3ModGhpcyk7XG4gICAgfSk7XG59XG5cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgIGxpbmtBbmFseXRpY3MoJCgnYScpKTtcbn0pOyIsIi8qKiBRdWVzdGlvbm5haXJlIFJlc3VsdCBFeHBhbmQvQ29sbGFwc2UgQ29tcG9uZW50ICoqL1xyXG5cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcblx0JCgnc2VjdGlvbi5xdWVzdGlvbm5haXJlLWV4cGFuZC1jb2xsYXBzZScpLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRhcHBseUV4cGFuZENvbGxhcHNlQnV0dG9uKCQodGhpcykpO1xyXG5cdH0pO1xyXG59KTtcclxuJChkb2N1bWVudCkub24oJ0RPTU5vZGVJbnNlcnRlZCcsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0aWYgKCQoZXZlbnQudGFyZ2V0KS5oYXNDbGFzcyhcInF1ZXN0aW9ubmFpcmUtZXhwYW5kLWNvbGxhcHNlXCIpKSB7XHJcblx0XHRhcHBseUV4cGFuZENvbGxhcHNlQnV0dG9uKGV2ZW50LnRhcmdldCk7XHJcblx0fVxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGFwcGx5RXhwYW5kQ29sbGFwc2VCdXR0b24oZWwpIHtcclxuXHQvL2NvbnNvbGUubG9nKFwibWFpbiBlbGVtZW50OlwiLGVsKTtcclxuXHQkKGVsKS5maW5kKCdhLnF1ZXN0aW9ubmFpcmUtcmVzdWx0LWV4cGFuZC1jb2xsYXBzZS1idXR0b246bm90KC5yZWFkeSknKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0JCh0aGlzKS5vbignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xyXG5cdFx0XHQvL2NvbnNvbGUubG9nKFwicXVlc3Rpb25uYWlyZS1yZXN1bHQtZXhwYW5kLWNvbGxhcHNlLWJ1dHRvbiBjbGlja2VkXCIpOyAvL2RlYnVnXHJcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdGlmICgkKHRoaXMpLnBhcmVudHMoJ3NlY3Rpb24ucXVlc3Rpb25uYWlyZS1leHBhbmQtY29sbGFwc2UnKS5oYXNDbGFzcyhcInF1ZXN0aW9ubmFpcmUtcmVzdWx0LWV4cGFuZC1jb2xsYXBzZS0tY29sbGFwc2VkXCIpIHx8ICEkKHRoaXMpLnNpYmxpbmdzKCcuY29sdW1uLW9uZScpLmlzKFwiOnZpc2libGVcIikpIHtcclxuXHRcdFx0XHQkKHRoaXMpLnBhcmVudHMoJ3NlY3Rpb24ucXVlc3Rpb25uYWlyZS1leHBhbmQtY29sbGFwc2UnKS5hZGRDbGFzcyggXCJxdWVzdGlvbm5haXJlLXJlc3VsdC1leHBhbmQtY29sbGFwc2UtLWV4cGFuZGVkXCIpLnJlbW92ZUNsYXNzKFwicXVlc3Rpb25uYWlyZS1yZXN1bHQtZXhwYW5kLWNvbGxhcHNlLS1jb2xsYXBzZWRcIik7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0JCh0aGlzKS5wYXJlbnRzKCdzZWN0aW9uLnF1ZXN0aW9ubmFpcmUtZXhwYW5kLWNvbGxhcHNlJykucmVtb3ZlQ2xhc3MoIFwicXVlc3Rpb25uYWlyZS1yZXN1bHQtZXhwYW5kLWNvbGxhcHNlLS1leHBhbmRlZFwiKS5hZGRDbGFzcyhcInF1ZXN0aW9ubmFpcmUtcmVzdWx0LWV4cGFuZC1jb2xsYXBzZS0tY29sbGFwc2VkXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdCQodGhpcykuYWRkQ2xhc3MoXCJyZWFkeVwiKTtcclxuXHR9KTtcclxufSIsIid1c2Ugc3RyaWN0JztcclxudmFyIHRpbWVyO1xyXG52YXIgYzJjQ2xpY2tDb3VudCA9IGdldENvb2tpZShcImMyY0NsaWNrQ291bnRcIik7XHJcbiAgICBpZiAoYzJjQ2xpY2tDb3VudCA9PT0gbnVsbCB8fCBjMmNDbGlja0NvdW50ID09IHVuZGVmaW5lZCB8fCBjMmNDbGlja0NvdW50ID09ICcnKXtcclxuICAgICAgICBjMmNDbGlja0NvdW50ID0gMDtcclxuICAgICAgICBzZXRDb29raWUoXCJjMmNDbGlja0NvdW50XCIsIDAsIDEpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjMmNDbGlja0NvdW50ID0gcGFyc2VJbnQoYzJjQ2xpY2tDb3VudCk7XHJcbiAgICAgICAgYzJjQ2xpY2tDb3VudCArPSAxO1xyXG4gICAgICAgIHVwZGF0ZUNvb2tpZShcImMyY0NsaWNrQ291bnRcIiwgYzJjQ2xpY2tDb3VudCwgMSk7XHJcbiAgICB9XHJcbiAgICB2YXIgYzJjT3BlblZhbHVlID0gZ2V0Q29va2llKFwiYzJjT3BlblZhbHVlXCIpO1xyXG4gICAgaWYgKGMyY09wZW5WYWx1ZSA9PT0gbnVsbCB8fGMyY09wZW5WYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IGMyY09wZW5WYWx1ZSA9PT0gJycpe1xyXG4gICAgICAgc2V0Q29va2llKFwiYzJjT3BlblZhbHVlXCIsIG51bGwsIDEpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB1cGRhdGVDb29raWUoXCJjMmNPcGVuVmFsdWVcIiwgYzJjT3BlblZhbHVlLCAxKTtcclxuICAgIH1cclxuICAgIHZhciBjVGFiVmFsdWUgPSBnZXRDb29raWUoXCJjVGFiVmFsdWVcIitjMmNDbGlja0NvdW50KTtcclxuICAgIGlmIChjVGFiVmFsdWUgPT09IG51bGwgfHxjVGFiVmFsdWUgPT09IHVuZGVmaW5lZCB8fCBjVGFiVmFsdWUgPT09ICcnKXtcclxuICAgICAgIHNldENvb2tpZShcImNUYWJWYWx1ZVwiLCBudWxsLCAxKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdXBkYXRlQ29va2llKFwiYzJjT3BlblZhbHVlXCIsIGNUYWJWYWx1ZSwgMSk7XHJcbiAgICB9XHJcbiAgdmFyIEFjMmNDbGlja0NvdW50ID0gZ2V0Q29va2llKFwiQWMyY0NsaWNrQ291bnRcIik7XHJcbiAgICBpZiAoQWMyY0NsaWNrQ291bnQgPT09IG51bGwgfHwgQWMyY0NsaWNrQ291bnQgPT0gdW5kZWZpbmVkIHx8IEFjMmNDbGlja0NvdW50ID09ICcnKXtcclxuICAgICAgICBBYzJjQ2xpY2tDb3VudCA9IDA7XHJcbiAgICAgICAgc2V0Q29va2llKFwiQWMyY0NsaWNrQ291bnRcIiwgMCwgMSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIEFjMmNDbGlja0NvdW50ID0gcGFyc2VJbnQoQWMyY0NsaWNrQ291bnQpO1xyXG4gICAgICAgIEFjMmNDbGlja0NvdW50ICs9IDE7XHJcbiAgICAgICAgdXBkYXRlQ29va2llKFwiQWMyY0NsaWNrQ291bnRcIiwgQWMyY0NsaWNrQ291bnQsIDEpO1xyXG4gICAgfVxyXG4gICAgdmFyIEFjMmNPcGVuVmFsdWUgPSBnZXRDb29raWUoXCJBYzJjT3BlblZhbHVlXCIpO1xyXG4gICAgaWYgKEFjMmNPcGVuVmFsdWUgPT09IG51bGwgfHwgQWMyY09wZW5WYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IEFjMmNPcGVuVmFsdWUgPT09ICcnKXtcclxuICAgICAgIHNldENvb2tpZShcIkFjMmNPcGVuVmFsdWVcIiwgbnVsbCwgMSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHVwZGF0ZUNvb2tpZShcIkFjMmNPcGVuVmFsdWVcIiwgQWMyY09wZW5WYWx1ZSwgMSk7XHJcbiAgICB9XHJcbiAgICB2YXIgQWNUYWJWYWx1ZSA9IGdldENvb2tpZShcIkFjVGFiVmFsdWVcIitBYzJjQ2xpY2tDb3VudCk7XHJcbiAgICBpZiAoQWNUYWJWYWx1ZSA9PT0gbnVsbCB8fCBBY1RhYlZhbHVlID09PSB1bmRlZmluZWQgfHwgQWNUYWJWYWx1ZSA9PT0gJycpe1xyXG4gICAgICAgc2V0Q29va2llKFwiQWNUYWJWYWx1ZVwiLCBudWxsLCAxKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdXBkYXRlQ29va2llKFwiQWMyY09wZW5WYWx1ZVwiLCBBY1RhYlZhbHVlLCAxKTtcclxuICAgIH0gIFxyXG52YXIgb3BlbkNoYXRXaW5kb3cgPSBmdW5jdGlvbigpIHtcclxuICAgIFxyXG4gICAgaWYgKGNoZWNrZXIoKSl7XHJcblxyXG4gICAgICAgIHZhciBjaGF0Rm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcclxuXHJcbiAgICAgICAgY2hhdEZvcm0udGFyZ2V0ID0gJ0xpdmUgQ2hhdCc7XHJcbiAgICAgICAgY2hhdEZvcm0ubWV0aG9kID0gJ1BPU1QnO1xyXG4gICAgICAgIGNoYXRGb3JtLmFjdGlvbiA9ICcvcGJsLWdhdGV3YXktc2VydmljZS1hcHAvc2VydmxldC9wYmwtZ2F0ZXdheS9nYXRld2F5U2VydmxldCc7XHJcblxyXG4gICAgICAgIHZhciBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICdyb2xlJyAgICAgICAgIDogJycsXHJcbiAgICAgICAgICAgICdTRVJWSUNFX0lEJyAgIDogJ1BVQkxJQ19DSEFUX0JPVF9TRVJWSUNFJyxcclxuICAgICAgICAgICAgJ2FwcElkJyAgICAgICAgOiAnMTAwJyxcclxuICAgICAgICAgICAgJ3BhZ2VJZCcgICAgICAgOiAnMTAwJyxcclxuICAgICAgICAgICAgJ2FjdHZ0eVNyY05hbWUnOiAnTEZHUFVCQ1RDJyxcclxuICAgICAgICAgICAgJ2xvYicgICAgICAgICAgOiAnTGlmZSdcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmb3IgKHZhciBwcm9wIGluIHBhcmFtcykge1xyXG4gICAgICAgICAgICBpZiAocGFyYW1zLmhhc093blByb3BlcnR5KHByb3ApKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGlkZGVuSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGhpZGRlbklucHV0LnR5cGUgPSAnaGlkZGVuJztcclxuICAgICAgICAgICAgICAgIGhpZGRlbklucHV0Lm5hbWUgPSBwcm9wO1xyXG4gICAgICAgICAgICAgICAgaGlkZGVuSW5wdXQudmFsdWUgPSBwYXJhbXNbcHJvcF07XHJcbiAgICAgICAgICAgICAgICBjaGF0Rm9ybS5hcHBlbmRDaGlsZChoaWRkZW5JbnB1dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2hhdEZvcm0pO1xyXG5cclxuICAgICAgICB3aW5kb3cucG9wdXBSZWZlcmVuY2UgPSB3aW5kb3cub3BlbignJywgJ0xpdmUgQ2hhdCcsICdzY3JvbGxiYXJzPTEsIHRvb2xiYXI9MCwgbWVudWJhcj0wLCBzdGF0dXM9MCwgcmVzaXphYmxlPTEsIGxlZnQ9NDAwLCB3aWR0aD02MjAsIGhlaWdodD01NTAnKTsgICAgICAgIFxyXG4gICAgICAgIHRpbWVyID0gc2V0SW50ZXJ2YWwodXBkYXRlU3RhdHVzLCAxMDAwKTtcclxuXHJcbiAgICAgICAgaWYgKHdpbmRvdy5wb3B1cFJlZmVyZW5jZSkgeyAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNoYXRGb3JtLnN1Ym1pdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGNoYXRGb3JtKTsgXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFsZXJ0KCdMaWZlIC0gY2hhdCB3aW5kb3cgaXMgYWxyZWFkeSBvcGVuJyk7XHJcbiAgICB9XHJcbn07XHJcblxyXG52YXIgb3BlbkNoYXRXaW5kb3dBbm51aXRpZXMgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmIChjaGVja2VyQW5udWl0eSgpKXtcclxuICAgIHZhciBjaGF0Rm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcclxuXHJcbiAgICBjaGF0Rm9ybS50YXJnZXQgPSAnTGl2ZSBDaGF0JztcclxuICAgIGNoYXRGb3JtLm1ldGhvZCA9ICdQT1NUJztcclxuICAgIGNoYXRGb3JtLmFjdGlvbiA9ICcvcGJsLWdhdGV3YXktc2VydmljZS1hcHAvc2VydmxldC9wYmwtZ2F0ZXdheS9nYXRld2F5U2VydmxldCc7XHJcblxyXG4gICAgdmFyIHBhcmFtcyA9IHtcclxuICAgICAgICAncm9sZScgICAgICAgICA6ICcnLFxyXG4gICAgICAgICdTRVJWSUNFX0lEJyAgIDogJ1BVQkxJQ19DSEFUX0JPVF9TRVJWSUNFJyxcclxuICAgICAgICAnYXBwSWQnICAgICAgICA6ICcxMDAwJyxcclxuICAgICAgICAncGFnZUlkJyAgICAgICA6ICcxMDAwJyxcclxuICAgICAgICAnYWN0dnR5U3JjTmFtZSc6ICdJQU9DSEFUQk9UJyxcclxuICAgICAgICAnbG9iJyAgICAgICAgICA6ICdBTk5VSVRZJ1xyXG4gICAgfTtcclxuXHJcbiAgICBmb3IgKHZhciBwcm9wIGluIHBhcmFtcykge1xyXG4gICAgICAgIGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcclxuICAgICAgICAgICAgdmFyIGhpZGRlbklucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuXHJcbiAgICAgICAgICAgIGhpZGRlbklucHV0LnR5cGUgPSAnaGlkZGVuJztcclxuICAgICAgICAgICAgaGlkZGVuSW5wdXQubmFtZSA9IHByb3A7XHJcbiAgICAgICAgICAgIGhpZGRlbklucHV0LnZhbHVlID0gcGFyYW1zW3Byb3BdO1xyXG4gICAgICAgICAgICBjaGF0Rm9ybS5hcHBlbmRDaGlsZChoaWRkZW5JbnB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2hhdEZvcm0pO1xyXG5cclxuICAgIHdpbmRvdy5hbm51aXR5Q2hhdFdpbmRvdyA9IHdpbmRvdy5vcGVuKCcnLCAnTGl2ZSBDaGF0JywgJ3Njcm9sbGJhcnM9MSx0b29sYmFyPTAsbWVudWJhcj0wLHN0YXR1cz0wLHJlc2l6YWJsZT0xLGxlZnQ9NDAwLHdpZHRoPTYyMCxoZWlnaHQ9NTUwJyk7XHJcbiAgICB0aW1lciA9IHNldEludGVydmFsKGFubnVpdHlXaW5kb3dTdGF0dXMsIDEwMDApO1xyXG5cclxuICAgIGlmICh3aW5kb3cuYW5udWl0eUNoYXRXaW5kb3cpIHtcclxuICAgICAgICBjaGF0Rm9ybS5zdWJtaXQoKTtcclxuICAgIH1cclxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY2hhdEZvcm0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBhbGVydCgnQW5udWl0eSAtIGNoYXQgd2luZG93IGlzIGFscmVhZHkgb3BlbicpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gdXBkYXRlU3RhdHVzKCl7XHJcbiAgICBpZih3aW5kb3cucG9wdXBSZWZlcmVuY2UgJiYgd2luZG93LnBvcHVwUmVmZXJlbmNlLmNsb3NlZCl7XHJcbiAgICAgICAgdmFyIGNuYW1lID0gJ2MyY1RhYlZhbHVlJytjMmNDbGlja0NvdW50O1xyXG4gICAgICB2YXIgYzJjSXRlbSA9IGdldENvb2tpZShjbmFtZSk7XHJcbiAgICAgICAgaWYgKGMyY0l0ZW0gPT09ICdjMmNUcnVlJyl7XHJcbiAgICAgICAgICAgIHNldENvb2tpZShjbmFtZSwnYzJjRmFsc2UnLCAxKTtcclxuICAgICAgICAgICAgc2V0Q29va2llKCdjMmNPcGVuVmFsdWUnLCBudWxsLCAxKTtcclxuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGFubnVpdHlXaW5kb3dTdGF0dXMoKXtcclxuICAgIGlmKHdpbmRvdy5hbm51aXR5Q2hhdFdpbmRvdyAmJiB3aW5kb3cuYW5udWl0eUNoYXRXaW5kb3cuY2xvc2VkKXtcclxuICAgICAgICB2YXIgY25hbWUgPSAnQWMyY1RhYlZhbHVlJytBYzJjQ2xpY2tDb3VudDtcclxuICAgICAgdmFyIGMyY0l0ZW0gPSBnZXRDb29raWUoY25hbWUpO1xyXG4gICAgICAgIGlmIChjMmNJdGVtID09PSAnYzJjVHJ1ZScpe1xyXG4gICAgICAgICAgICBzZXRDb29raWUoY25hbWUsJ2MyY0ZhbHNlJywgMSk7XHJcbiAgICAgICAgICAgIHNldENvb2tpZSgnQWMyY09wZW5WYWx1ZScsIG51bGwsIDEpO1xyXG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrZXIoKSB7XHJcbiAgICB2YXIgY2hlY2tlclZhbHVlID0gZmFsc2U7XHJcbiAgICB2YXIgY2xpY2tDb3VudENoZWNrZXIgPSBTdHJpbmcoYzJjQ2xpY2tDb3VudCk7XHJcbiAgICBmb3IgKHZhciBpPTA7IGk8ZG9jdW1lbnQuY29va2llLnNwbGl0KCc7JykubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgaWYgKGdldENvb2tpZShcImMyY1RhYlZhbHVlXCIrYzJjQ2xpY2tDb3VudCkgPT09J2MyY1RydWUnKXtcclxuICAgICAgICAgICAgaWYgKGdldENvb2tpZSgnYzJjT3BlblZhbHVlJykgPT09IGNsaWNrQ291bnRDaGVja2VyKXtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cdFx0XHRcdFx0c2V0Q29va2llKFwiYzJjVGFiVmFsdWVcIitjMmNDbGlja0NvdW50LCBcImMyY0ZhbHNlXCIsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZXJWYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdFx0XHR9XHJcbiAgICAgICAgfSBcclxuICAgICAgICBlbHNlIGlmIChnZXRDb29raWUoJ2MyY09wZW5WYWx1ZScpID09PSAnbnVsbCcpIHtcclxuICAgICAgICAgICAgdXBkYXRlQ29va2llKFwiYzJjVGFiVmFsdWVcIitjMmNDbGlja0NvdW50LFwiYzJjVHJ1ZVwiLCAxKTtcclxuICAgICAgICAgICAgc2V0Q29va2llKFwiYzJjT3BlblZhbHVlXCIsYzJjQ2xpY2tDb3VudCwgMSk7XHJcbiAgICAgICAgICAgIGNoZWNrZXJWYWx1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2hlY2tlclZhbHVlO1xyXG59XHJcbmZ1bmN0aW9uIGNoZWNrZXJBbm51aXR5KCkge1xyXG4gICAgdmFyIGNoZWNrZXJWYWx1ZSA9IGZhbHNlO1xyXG4gICAgdmFyIGNsaWNrQ291bnRDaGVja2VyID0gU3RyaW5nKEFjMmNDbGlja0NvdW50KTtcclxuICAgIGZvciAodmFyIGk9MDsgaTxkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKS5sZW5ndGg7aSsrKXtcclxuICAgICAgICBpZiAoZ2V0Q29va2llKFwiQWMyY1RhYlZhbHVlXCIrQWMyY0NsaWNrQ291bnQpID09PSdjMmNUcnVlJyl7XHJcbiAgICAgICAgICAgIGlmIChnZXRDb29raWUoJ0FjMmNPcGVuVmFsdWUnKSA9PT0gY2xpY2tDb3VudENoZWNrZXIpe1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0XHRcdFx0XHRzZXRDb29raWUoXCJBYzJjVGFiVmFsdWVcIitBYzJjQ2xpY2tDb3VudCwgXCJjMmNGYWxzZVwiLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VyVmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHRcdFx0fVxyXG4gICAgICAgIH0gXHJcbiAgICAgICAgZWxzZSBpZiAoZ2V0Q29va2llKCdBYzJjT3BlblZhbHVlJykgPT09ICdudWxsJykge1xyXG4gICAgICAgICAgICB1cGRhdGVDb29raWUoXCJBYzJjVGFiVmFsdWVcIitBYzJjQ2xpY2tDb3VudCxcImMyY1RydWVcIiwgMSk7XHJcbiAgICAgICAgICAgIHNldENvb2tpZShcIkFjMmNPcGVuVmFsdWVcIiwgQWMyY0NsaWNrQ291bnQsIDEpO1xyXG4gICAgICAgICAgICBjaGVja2VyVmFsdWUgPSB0cnVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNoZWNrZXJWYWx1ZTtcclxufVxyXG4kKHdpbmRvdykub24oJ2JlZm9yZXVubG9hZCcsZnVuY3Rpb24oKXsgXHJcbiAgICB2YXIgYzJjVW5sb2FkSXRlbSA9IGdldENvb2tpZShcImMyY1RhYlZhbHVlXCIrYzJjQ2xpY2tDb3VudCk7XHJcbiAgICBpZiAoYzJjVW5sb2FkSXRlbSA9PT0gJ2MyY1RydWUnKXtcclxuICAgICAgICB1cGRhdGVDb29raWUoJ2MyY09wZW5WYWx1ZScsIG51bGwsIDEpO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlQ29va2llKFwiYzJjVGFiVmFsdWVcIitjMmNDbGlja0NvdW50LCAnJywgLTEpO1xyXG4gICAgd2luZG93LnBvcHVwUmVmZXJlbmNlLmNsb3NlKCk7XHJcbiAgICB2YXIgQWMyY1VubG9hZEl0ZW0gPSBnZXRDb29raWUoXCJBYzJjVGFiVmFsdWVcIitBYzJjQ2xpY2tDb3VudCk7XHJcbiAgICBpZiAoYzJjVW5sb2FkSXRlbSA9PT0gJ2MyY1RydWUnKXtcclxuICAgICAgICB1cGRhdGVDb29raWUoJ0FjMmNPcGVuVmFsdWUnLCBudWxsLCAxKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZUNvb2tpZShcIkFjMmNUYWJWYWx1ZVwiK0FjMmNDbGlja0NvdW50LCAnJywgLTEpO1xyXG4gICAgd2luZG93LmFubnVpdHlDaGF0V2luZG93LmNsb3NlKCk7XHJcbiBcclxuICAgIFxyXG59KTtcclxuJCgnLmxmZy1jMmMtbGluaycpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgb3BlbkNoYXRXaW5kb3coKTtcclxufSk7XHJcblxyXG4kKCcubGZnLWMyYy1saW5rLWFubnVpdGllcycpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgb3BlbkNoYXRXaW5kb3dBbm51aXRpZXMoKTtcclxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3VibWl0Q2xpY2tlZCA9IGZhbHNlO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHRoaXMuQ2FsZW5kYXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmRhdGVEcm9wRG93biA9IG51bGw7XG4gICAgdGhpcy5tb250aERyb3BEb3duID0gbnVsbDtcbiAgICB0aGlzLnllYXJEcm9wRG93biA9IG51bGw7XG4gICAgdGhpcy5oaWRkZW5JZCA9IG51bGw7XG5cbiAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAnZGF0ZUlkJyAgICAgICA6ICcnLFxuICAgICAgJ21vbnRoSWQnICAgICAgOiAnJyxcbiAgICAgICd5ZWFySWQnICAgICAgIDogJycsXG4gICAgICAnaGlkZGVuSWQnICAgICA6ICcnLFxuICAgICAgJ251bWJlck9mWWVhcnMnOiAzMCxcbiAgICAgICdhdXRvU2VsZWN0JyAgIDogZmFsc2VcbiAgICB9O1xuXG4gICAgaWYgKGFyZ3VtZW50c1swXSAmJiB0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnb2JqZWN0Jykge1xuICAgICAgdGhpcy5vcHRpb25zID0gZXh0ZW5kRGVmYXVsdHMoZGVmYXVsdHMsIGFyZ3VtZW50c1swXSk7XG4gICAgfVxuICAgIGJpbmREYXRlKHRoaXMpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGV4dGVuZERlZmF1bHRzKHNvdXJjZSwgcHJvcGVydGllcykge1xuICAgIHZhciBwcm9wZXJ0eTtcblxuICAgIGZvciAocHJvcGVydHkgaW4gcHJvcGVydGllcykge1xuICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgIHNvdXJjZVtwcm9wZXJ0eV0gPSBwcm9wZXJ0aWVzW3Byb3BlcnR5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gYmluZERhdGUoXykge1xuICAgIHZhciBkdCwgbW50aCwgeXIsXG4gICAgICBkb2MgPSBkb2N1bWVudCxcbiAgICAgIHRoZU1vbnRocyA9IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLFxuICAgICAgICAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlcidcbiAgICAgIF0sXG4gICAgICBudyA9IG5ldyBEYXRlKCksXG4gICAgICBjdXJEYXRlID0gbncuZ2V0RGF0ZSgpLFxuICAgICAgY3VyTW9udGggPSBudy5nZXRNb250aCgpICsgMSxcbiAgICAgIGN1clllYXIgPSBudy5nZXRGdWxsWWVhcigpLFxuICAgICAgbGFzdERheU9mTW9udGggPSBuZXcgRGF0ZShjdXJZZWFyLCBjdXJNb250aCwgMCkuZ2V0RGF0ZSgpO1xuXG4gICAgaWYgKHR5cGVvZiBfLm9wdGlvbnMuZGF0ZUlkID09PSAnc3RyaW5nJykge1xuICAgICAgZHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChfLm9wdGlvbnMuZGF0ZUlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZHQgPSBfLm9wdGlvbnMuZGF0ZUlkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIF8ub3B0aW9ucy5tb250aElkID09PSAnc3RyaW5nJykge1xuICAgICAgbW50aCA9IGRvYy5nZXRFbGVtZW50QnlJZChfLm9wdGlvbnMubW9udGhJZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1udGggPSBfLm9wdGlvbnMubW9udGhJZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBfLm9wdGlvbnMueWVhcklkID09PSAnc3RyaW5nJykge1xuICAgICAgeXIgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoXy5vcHRpb25zLnllYXJJZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHlyID0gXy5vcHRpb25zLnllYXJJZDtcbiAgICB9XG5cbiAgICBfLmRhdGVEcm9wRG93biA9IGR0O1xuICAgIF8ubW9udGhEcm9wRG93biA9IG1udGg7XG4gICAgXy55ZWFyRHJvcERvd24gPSB5cjtcbiAgICBfLmhpZGRlbklkID0gZG9jLmdldEVsZW1lbnRCeUlkKF8ub3B0aW9ucy5oaWRkZW5JZCk7XG5cbiAgICB2YXIgbGkgPSAnPGxpIHRhYmluZGV4PVxcJzBcXCc+RGF5PC9saT4nO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0RGF5T2ZNb250aDsgaSsrKSB7XG4gICAgICB2YXIgZGF0ID0gfn5pICsgMTtcblxuICAgICAgbGkgKz0gJzxsaSB0YWJpbmRleD1cXCcwXFwnIGRhdGEtdmFsPScgKyBkYXQgKyAnIGRhdGEtZmxhZz1cXCdkYXRlXFwnPicgKyBkYXQgKyAnPC9saT4nO1xuICAgIH1cbiAgICBfLmRhdGVEcm9wRG93bi5pbm5lckhUTUwgPSBsaTtcbiAgICBsaSA9ICc8bGkgdGFiaW5kZXg9XFwnMFxcJz5Nb250aDwvbGk+JztcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhlTW9udGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbW50ID0gaSArIDE7XG5cbiAgICAgIGxpICs9ICc8bGkgdGFiaW5kZXg9XFwnMFxcJyBkYXRhLXZhbD0nICsgbW50ICsgJyBkYXRhLWZsYWc9XFwnbW9udGhcXCc+JyArIHRoZU1vbnRoc1tpXSArICc8L2xpPic7XG4gICAgfVxuICAgIF8ubW9udGhEcm9wRG93bi5pbm5lckhUTUwgPSBsaTtcbiAgICBsaSA9ICc8bGkgdGFiaW5kZXg9XFwnMFxcJz5ZZWFyPC9saT4nO1xuICAgIGZvciAoaSA9IDA7IGkgPCBfLm9wdGlvbnMubnVtYmVyT2ZZZWFyczsgaSsrKSB7XG4gICAgICB2YXIgeWFyID0gfn5jdXJZZWFyIC0gaTtcblxuICAgICAgbGkgKz0gJzxsaSB0YWJpbmRleD1cXCcwXFwnIGRhdGEtdmFsPScgKyB5YXIgKyAnIGRhdGEtZmxhZz1cXCd5ZWFyXFwnPicgKyB5YXIgKyAnPC9saT4nO1xuICAgIH1cbiAgICBfLnllYXJEcm9wRG93bi5pbm5lckhUTUwgPSBsaTtcbiAgICBpZiAoXy5vcHRpb25zLmF1dG9TZWxlY3QpIHtcbiAgICAgIF8uZGF0ZURyb3BEb3duLnZhbHVlID0gY3VyRGF0ZTtcbiAgICAgIF8ubW9udGhEcm9wRG93bi52YWx1ZSA9IGN1ck1vbnRoO1xuICAgICAgXy55ZWFyRHJvcERvd24udmFsdWUgPSBjdXJZZWFyO1xuICAgIH1cbiAgfVxufSgpKTtcblxuZnVuY3Rpb24gY2FsY0RhdGUoY3VzdERhdGUsIGN1c3RNb250aCwgY3VzdFllYXIsIGN1c3RIaWRkbiwgZGl2RGF0ZSwgZGl2TW9udGgsIGRpdlllYXIsIGVycikge1xuICB2YXIgc2VsZWN0ZWREYXlWYWx1ZSxcbiAgICBkaXZNb250aHMgPSAoZGl2TW9udGggPT09IHVuZGVmaW5lZCkgPyAnJyA6IGRpdk1vbnRoLFxuICAgIG53ID0gbmV3IERhdGUoKSxcbiAgICBpc1ZhbGlkRGF0ZSxcblxuICAgIC8vIGN1ck1vbnRoID0gbncuZ2V0TW9udGgoKSArIDEsXG4gICAgY3VyWWVhciA9IG53LmdldEZ1bGxZZWFyKCksXG4gICAgbGFzdERheU9mTW9udGgsXG4gICAgbGkgPSAnPGxpPkRheTwvbGk+JztcblxuICAvLyBtb250aHNXaXRoMzEgPSBbJzEnLCAnMycsICc1JywgJzcnLCAnOCcsICcxMCcsICcxMiddO1xuXG4gIC8vIGhhc01vbnRoID0gdHJ1ZTtcblxuICAvLyBjb25zb2xlLmxvZyhjdXN0RGF0ZSwgY3VzdE1vbnRoLCBjdXN0WWVhciwgY3VzdEhpZGRuLCBkaXZEYXRlLCBkaXZNb250aCwgZGl2WWVhciwgZXJyLCBjdXJyRWxlbSk7XG5cbiAgaWYgKGRpdk1vbnRocyAhPT0gJycgJiYgZGl2RGF0ZSA9PT0gJ0RheScgJiYgZGl2WWVhciA9PT0gJ1llYXInKSB7XG4gICAgbGFzdERheU9mTW9udGggPSAoZGl2WWVhciAhPT0gJ1llYXInKSA/IG5ldyBEYXRlKGRpdlllYXIsIGRpdk1vbnRocywgMCkuZ2V0RGF0ZSgpIDogbmV3IERhdGUoY3VyWWVhciwgZGl2TW9udGhzLFxuICAgICAgMCkuZ2V0RGF0ZSgpO1xuICB9IGVsc2UgaWYgKGRpdk1vbnRocyA9PT0gJycgJiYgZGl2RGF0ZSA9PT0gJ0RheScgJiYgZGl2WWVhciAhPT0gJ1llYXInKSB7XG4gICAgbGFzdERheU9mTW9udGggPSBuZXcgRGF0ZShkaXZZZWFyLCAxLCAwKS5nZXREYXRlKCk7XG4gIH0gZWxzZSBpZiAoZGl2TW9udGhzID09PSAnJyAmJiBkaXZEYXRlICE9PSAnRGF5JyAmJiBkaXZZZWFyID09PSAnWWVhcicpIHtcbiAgICBsYXN0RGF5T2ZNb250aCA9IG5ldyBEYXRlKGN1clllYXIsIDEsIDApLmdldERhdGUoKTtcbiAgfSBlbHNlIGlmIChkaXZNb250aHMgIT09ICcnICYmIGRpdkRhdGUgIT09ICdEYXknICYmIGRpdlllYXIgPT09ICdZZWFyJykge1xuICAgIGxhc3REYXlPZk1vbnRoID0gbmV3IERhdGUoY3VyWWVhciwgZGl2TW9udGhzLCAwKS5nZXREYXRlKCk7XG4gIH0gZWxzZSBpZiAoZGl2TW9udGhzICE9PSAnJyAmJiBkaXZEYXRlICE9PSAnRGF5JyAmJiBkaXZZZWFyICE9PSAnWWVhcicpIHtcbiAgICBsYXN0RGF5T2ZNb250aCA9IG5ldyBEYXRlKGRpdlllYXIsIGRpdk1vbnRocywgMCkuZ2V0RGF0ZSgpO1xuICB9IGVsc2UgaWYgKGRpdk1vbnRocyAhPT0gJycgJiYgZGl2RGF0ZSA9PT0gJ0RheScgJiYgZGl2WWVhciAhPT0gJ1llYXInKSB7XG4gICAgbGFzdERheU9mTW9udGggPSBuZXcgRGF0ZShkaXZZZWFyLCBkaXZNb250aHMsIDApLmdldERhdGUoKTtcbiAgfSBlbHNlIGlmIChkaXZNb250aHMgPT09ICcnICYmIGRpdkRhdGUgIT09ICdEYXknICYmIGRpdlllYXIgIT09ICdZZWFyJykge1xuICAgIGxhc3REYXlPZk1vbnRoID0gbmV3IERhdGUoZGl2WWVhciwgMSwgMCkuZ2V0RGF0ZSgpO1xuICB9IGVsc2UgaWYgKGRpdk1vbnRocyA9PT0gJycgJiYgZGl2RGF0ZSA9PT0gJ0RheScgJiYgZGl2WWVhciA9PT0gJ1llYXInKSB7XG4gICAgbGFzdERheU9mTW9udGggPSBuZXcgRGF0ZShjdXJZZWFyLCAxLCAwKS5nZXREYXRlKCk7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gbGFzdERheU9mTW9udGg7IGkrKykge1xuICAgIC8vIHZhciBkYXQgPSB+fmkgKyAxO1xuXG4gICAgbGkgKz0gJzxsaSB0YWJpbmRleD1cXCcwXFwnIGRhdGEtdmFsPScgKyBpICsgJyBkYXRhLWZsYWc9XFwnZGF0ZVxcJz4nICsgaSArICc8L2xpPic7XG4gIH1cbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjdXN0RGF0ZSkuaW5uZXJIVE1MID0gbGk7XG4gIH0sIDUwKTtcbiAgc2VsZWN0ZWREYXlWYWx1ZSA9ICQoJyMnICsgY3VzdERhdGUpWzBdLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuaW5uZXJIVE1MO1xuICBpZiAoc3VibWl0Q2xpY2tlZCAmJiAhZXJyLmhhc0NsYXNzKCdjbHMtb3B0aW9uYWwtZGF0ZScpKSB7XG4gICAgaXNWYWxpZERhdGUgPSAhISgoKGxhc3REYXlPZk1vbnRoIDwgc2VsZWN0ZWREYXlWYWx1ZSkgJiYgKHNlbGVjdGVkRGF5VmFsdWUgIT09ICdEYXknKSkpO1xuICAgIGlmICgobGFzdERheU9mTW9udGggPCBzZWxlY3RlZERheVZhbHVlKSAmJiAoc2VsZWN0ZWREYXlWYWx1ZSAhPT0gJ0RheScpKSB7XG4gICAgICBhbmd1bGFyLmVsZW1lbnQoJy5sb3N0UG9saWN5JykuYWRkQ2xhc3MoJ25nLWhpZGUnKTtcbiAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLlZhbGlkRGF0ZScpLnJlbW92ZUNsYXNzKCduZy1oaWRlJyk7XG4gICAgICBlcnIuYWRkQ2xhc3MoJ2MtZXJyLWJveC1ub2ltZycpO1xuICAgIH1cbiAgfVxuICB2YXIgZWxlbVNjb3AgPSBhbmd1bGFyLmVsZW1lbnQoJCgnIycgKyBjdXN0SGlkZG4pKS5zY29wZSgpO1xuXG4gIGlmICgoZGl2TW9udGhzICE9PSAnJyAmJiBkaXZEYXRlICE9PSAnRGF5JyAmJiBkaXZZZWFyICE9PSAnWWVhcicpICYmICFpc1ZhbGlkRGF0ZSkge1xuICAgIHZhciBkdCA9IGRpdk1vbnRocyArICcvJyArIGRpdkRhdGUgKyAnLycgKyBkaXZZZWFyO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY3VzdEhpZGRuKS52YWx1ZSA9IGR0O1xuICAgIGlmIChjdXN0SGlkZG4gPT09ICdub3RpZmllckRvYicpIHtcbiAgICAgIGVsZW1TY29wLmxvc3RQb2xpY3lEYXRhLm5vdGlmaWVyRG9iID0gZHQ7XG4gICAgfSBlbHNlIGlmIChjdXN0SGlkZG4gPT09ICdDbGFpbURvYicgfHwgY3VzdEhpZGRuID09PSAnZGVjZWFzZWRQZXJET0InKSB7XG4gICAgICBlbGVtU2NvcC5jbGFpbUluZm9Gb3JtRGF0YS5kZWNlYXNlZFBlckRPQiA9IGR0O1xuICAgIH0gZWxzZSBpZiAoY3VzdEhpZGRuID09PSAnQ2xhaW1Eb2QnIHx8IGN1c3RIaWRkbiA9PT0gJ2luc3VyZWREZWF0aERhdGUnKSB7XG4gICAgICBlbGVtU2NvcC5jbGFpbUluZm9Gb3JtRGF0YS5pbnN1cmVkRGVhdGhEYXRlID0gZHQ7XG4gICAgfSBlbHNlIGlmIChjdXN0SGlkZG4gPT09ICdEaXNhYmlsaXR5RE9CJykge1xuICAgICAgZWxlbVNjb3AuZGlzYWJpbGl0eVdhaXZlckRhdGEuaW5zdXJlZERhdGVPZkJpcnRoID0gZHQ7XG4gICAgfSBlbHNlIGlmIChjdXN0SGlkZG4gPT09ICdpbnN1cmVkX2Rpc2FiaWxpdHlfZGF0ZScpIHtcbiAgICAgIGVsZW1TY29wLmRpc2FiaWxpdHlXYWl2ZXJEYXRhLmluc3VyZWREaXNhYmlsaXR5RGF0ZSA9IGR0O1xuICAgIH0gZWxzZSBpZiAoY3VzdEhpZGRuID09PSAnbGlmZURPQm9wdGlvbmFsJykge1xuICAgICAgZWxlbVNjb3AubGlmZUluc3VyYW5jZURlYXRoRGF0YS5pbnN1cmVkRG9iID0gZHQ7XG4gICAgfSBlbHNlIGlmIChjdXN0SGlkZG4gPT09ICdpbnN1cmVkX2xpZmVfZGF0ZScpIHtcbiAgICAgIGVsZW1TY29wLmxpZmVJbnN1cmFuY2VEZWF0aERhdGEuaW5zdXJlZERlYXRoRGF0ZSA9IGR0O1xuICAgIH0gZWxzZSBpZiAoY3VzdEhpZGRuID09PSAnTG9uZ0RPQm9wdGlvbmFsJykge1xuICAgICAgZWxlbVNjb3AubG9uZ1Rlcm1DYXJlRGF0YS5pbnN1cmVkRG9iID0gZHQ7XG4gICAgfSBlbHNlIGlmIChjdXN0SGlkZG4gPT09ICdpbnN1cmVkQ2FyZU9uc2V0Jykge1xuICAgICAgZWxlbVNjb3AubG9uZ1Rlcm1DYXJlRGF0YS5pbnN1cmVkQ2FyZU9uc2V0ID0gZHQ7XG4gICAgfVxuXG4gICAgaWYgKCFlcnIuaGFzQ2xhc3MoJ2Nscy1vcHRpb25hbC1kYXRlJykpIHtcbiAgICAgIGVyci5yZW1vdmVDbGFzcygnYy1lcnItYm94LW5vaW1nJyk7XG4gICAgICBhbmd1bGFyLmVsZW1lbnQoJy5sb3N0UG9saWN5JykuYWRkQ2xhc3MoJ25nLWhpZGUnKTtcbiAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLlZhbGlkRGF0ZScpLmFkZENsYXNzKCduZy1oaWRlJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChjdXN0SGlkZG4gPT09ICdub3RpZmllckRvYicpIHtcbiAgICAgIGVsZW1TY29wLmxvc3RQb2xpY3lEYXRhLm5vdGlmaWVyRG9iID0gJyc7XG4gICAgfSBlbHNlIGlmIChjdXN0SGlkZG4gPT09ICdDbGFpbURvYicgfHwgY3VzdEhpZGRuID09PSAnZGVjZWFzZWRQZXJET0InKSB7XG4gICAgICBlbGVtU2NvcC5jbGFpbUluZm9Gb3JtRGF0YS5kZWNlYXNlZFBlckRPQiA9ICcnO1xuICAgIH0gZWxzZSBpZiAoY3VzdEhpZGRuID09PSAnRGlzYWJpbGl0eURPQicpIHtcbiAgICAgIGVsZW1TY29wLmRpc2FiaWxpdHlXYWl2ZXJEYXRhLmluc3VyZWREYXRlT2ZCaXJ0aCA9ICcnO1xuICAgIH0gZWxzZSBpZiAoY3VzdEhpZGRuID09PSAnaW5zdXJlZF9kaXNhYmlsaXR5X2RhdGUnKSB7XG4gICAgICBlbGVtU2NvcC5kaXNhYmlsaXR5V2FpdmVyRGF0YS5pbnN1cmVkRGlzYWJpbGl0eURhdGUgPSAnJztcbiAgICB9IGVsc2UgaWYgKGN1c3RIaWRkbiA9PT0gJ2xpZmVET0JvcHRpb25hbCcpIHtcbiAgICAgIGVsZW1TY29wLmxpZmVJbnN1cmFuY2VEZWF0aERhdGEuaW5zdXJlZERvYiA9ICcnO1xuICAgIH0gZWxzZSBpZiAoY3VzdEhpZGRuID09PSAnaW5zdXJlZF9saWZlX2RhdGUnKSB7XG4gICAgICBlbGVtU2NvcC5saWZlSW5zdXJhbmNlRGVhdGhEYXRhLmluc3VyZWREZWF0aERhdGUgPSAnJztcbiAgICB9IGVsc2UgaWYgKGN1c3RIaWRkbiA9PT0gJ0xvbmdET0JvcHRpb25hbCcpIHtcbiAgICAgIGVsZW1TY29wLmxvbmdUZXJtQ2FyZURhdGEuaW5zdXJlZERvYiA9ICcnO1xuICAgIH0gZWxzZSBpZiAoY3VzdEhpZGRuID09PSAnaW5zdXJlZENhcmVPbnNldCcpIHtcbiAgICAgIGVsZW1TY29wLmxvbmdUZXJtQ2FyZURhdGEuaW5zdXJlZENhcmVPbnNldCA9ICcnO1xuICAgIH1cbiAgICBpZiAoc3VibWl0Q2xpY2tlZCAmJiAhZXJyLmhhc0NsYXNzKCdjbHMtb3B0aW9uYWwtZGF0ZScpKSB7XG4gICAgICBlcnIuYWRkQ2xhc3MoJ2MtZXJyLWJveC1ub2ltZycpO1xuICAgICAgaWYgKCFpc1ZhbGlkRGF0ZSkge1xuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5sb3N0UG9saWN5JykucmVtb3ZlQ2xhc3MoJ25nLWhpZGUnKTtcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuVmFsaWREYXRlJykuYWRkQ2xhc3MoJ25nLWhpZGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiBpZihkaXZEYXRlIT0nRGF5JyAmJiAoZGl2TW9udGghPXVuZGVmaW5lZCAmJiBkaXZNb250aCE9JycpICYmIGRpdlllYXIhPSdZZWFyJyl7XG4gIFx0bGFzdERheU9mTW9udGggPSBuZXcgRGF0ZShkaXZZZWFyLCBkaXZNb250aCwgMCkuZ2V0RGF0ZSgpO1xuICBcdGVyci5yZW1vdmVDbGFzcygnYy1lcnItYm94LW5vaW1nJyk7XG4gIFx0YW5ndWxhci5lbGVtZW50KCcubG9zdFBvbGljeScpLmFkZENsYXNzKCduZy1oaWRlJyk7XG4gIH1cbiAgZWxzZSBpZihkaXZEYXRlPT0nRGF5JyAmJiBkaXZNb250aCE9JycgJiYgZGl2WWVhcj09J1llYXInKXtcbiAgXHRsYXN0RGF5T2ZNb250aCA9IG5ldyBEYXRlKGN1clllYXIsIDEsIDApLmdldERhdGUoKTtcbiAgXHRlcnIuYWRkQ2xhc3MoJ2MtZXJyLWJveC1ub2ltZycpO1xuICB9XG4gIGVsc2UgaWYoZGl2RGF0ZT09J0RheScgJiYgZGl2TW9udGghPScnICYmIGRpdlllYXIhPSdZZWFyJyl7XG4gIFx0aWYgKGRpdk1vbnRoID09IHVuZGVmaW5lZCkge1xuICBcdFx0ZGl2TW9udGggPSAxO1xuICBcdH1cbiAgXHRsYXN0RGF5T2ZNb250aCA9IG5ldyBEYXRlKGRpdlllYXIsIGRpdk1vbnRoLCAwKS5nZXREYXRlKCk7XG4gIFx0ZXJyLmFkZENsYXNzKCdjLWVyci1ib3gtbm9pbWcnKTtcbiAgfSBlbHNlIGlmIChkaXZEYXRlPT0nRGF5JyAmJiBkaXZNb250aD09JycgJiYgZGl2WWVhcj09J1llYXInKXtcbiAgXHRsYXN0RGF5T2ZNb250aCA9IG5ldyBEYXRlKGN1clllYXIsIDEsIDApLmdldERhdGUoKTtcbiAgXHRlcnIuYWRkQ2xhc3MoJ2MtZXJyLWJveC1ub2ltZycpO1xuICB9IGVsc2UgaWYgKGRpdkRhdGUhPSdEYXknICYmIGRpdk1vbnRoIT0nJyAmJiBkaXZZZWFyPT0nWWVhcicpe1xuICBcdGxhc3REYXlPZk1vbnRoID0gbmV3IERhdGUoY3VyWWVhciwgMSwgMCkuZ2V0RGF0ZSgpO1xuICBcdGVyci5hZGRDbGFzcygnYy1lcnItYm94LW5vaW1nJyk7XG4gIFx0Y29uc29sZS5sb2coMyk7XG4gIH0gZWxzZSBpZiAoZGl2RGF0ZSE9J0RheScgJiYgZGl2TW9udGg9PScnICYmIGRpdlllYXI9PSdZZWFyJyl7XG4gIFx0bGFzdERheU9mTW9udGggPSBuZXcgRGF0ZShjdXJZZWFyLCAxLCAwKS5nZXREYXRlKCk7XG4gIFx0ZXJyLmFkZENsYXNzKCdjLWVyci1ib3gtbm9pbWcnKTtcbiAgfSBlbHNlIGlmIChkaXZEYXRlIT0nRGF5JyAmJiAoZGl2TW9udGg9PScnIHx8IGRpdk1vbnRoPT11bmRlZmluZWQpICYmIGRpdlllYXIhPSdZZWFyJyl7XG4gIFx0bGFzdERheU9mTW9udGggPSBuZXcgRGF0ZShjdXJZZWFyLCAxLCAwKS5nZXREYXRlKCk7XG4gIFx0ZXJyLmFkZENsYXNzKCdjLWVyci1ib3gtbm9pbWcnKTtcbiAgfSBlbHNlIGlmIChkaXZEYXRlPT0nRGF5JyAmJiBkaXZNb250aD09JycgJiYgZGl2WWVhciE9J1llYXInKXtcbiAgXHRsYXN0RGF5T2ZNb250aCA9IG5ldyBEYXRlKGN1clllYXIsIDEsIDApLmdldERhdGUoKTtcbiAgXHRlcnIuYWRkQ2xhc3MoJ2MtZXJyLWJveC1ub2ltZycpO1xuICB9IGVsc2V7XG4gIFx0ZXJyLmFkZENsYXNzKCdjLWVyci1ib3gtbm9pbWcnKTtcbiAgXHRpZihlcnIuaGFzQ2xhc3MoJ2Nscy1vcHRpb25hbC1kYXRlJykpe1xuICBcdFx0ZXJyLnJlbW92ZUNsYXNzKCdjLWVyci1ib3gtbm9pbWcnKTtcbiAgXHR9XG4gIFx0bW9udGhzV2l0aDMxLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpbmRleCl7XG4gIFx0XHRpZih2YWx1ZSA9PSBkaXZNb250aCl7XG4gIFx0XHRcdGhhc01vbnRoID0gIGZhbHNlO1xuICBcdFx0fVxuICBcdH0pO1xuICBcdGlmIChsYXN0RGF5T2ZNb250aCA9PSAnMjknKSB7XG4gIFx0XHRTZWxlY3RlZG1vbnRoID0gKGRpdk1vbnRoID09ICcyJykgPyAyOSA6IDI5O1xuICBcdH0gZWxzZXtcbiAgXHRcdFNlbGVjdGVkbW9udGggPSAoZGl2TW9udGggPT0gJzInKSA/IDI5IDogMzA7XG4gIFx0fVxuXG4gIFx0aWYgKGRpdkRhdGUgPiBTZWxlY3RlZG1vbnRoICYmIGhhc01vbnRoKSB7XG4gIFx0XHRlcnIuYWRkQ2xhc3MoJ2MtZXJyLWJveC1ub2ltZycpO1xuICBcdFx0YW5ndWxhci5lbGVtZW50KCcuVmFsaWREYXRlJykucmVtb3ZlQ2xhc3MoJ25nLWhpZGUnKTtcbiAgXHRcdC8vcmV0dXJuIGZhbHNlO1xuICBcdH0gZWxzZSB7XG4gIFx0XHRhbmd1bGFyLmVsZW1lbnQoJy5WYWxpZERhdGUnKS5hZGRDbGFzcygnbmctaGlkZScpO1xuICBcdH1cbiAgXHQvL3JldHVybiBmYWxzZTtcbiAgfVxuICBtb250aHNXaXRoMzEuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGluZGV4KXtcbiAgXHRpZih2YWx1ZSA9PSBkaXZNb250aCl7XG4gIFx0ICAgIGhhc01vbnRoID0gIGZhbHNlO1xuICBcdH1cbiAgfSk7XG4gIGlmIChsYXN0RGF5T2ZNb250aCA9PSAnMjknKSB7XG4gIFx0U2VsZWN0ZWRtb250aCA9IChkaXZNb250aCA9PSAnMicpID8gMjkgOiAyOTtcbiAgfSBlbHNle1xuICBcdFNlbGVjdGVkbW9udGggPSAoZGl2TW9udGggPT0gJzInKSA/IDI4IDogMzA7XG4gIH1cbiAgaWYgKGRpdkRhdGUgPiBTZWxlY3RlZG1vbnRoICYmIGhhc01vbnRoICYmIChkaXZZZWFyIT0nWWVhcicgJiYgZGl2RGF0ZSE9J0RheScpKSB7XG4gIFx0ZXJyLmFkZENsYXNzKCdjLWVyci1ib3gtbm9pbWcnKTtcbiAgXHRhbmd1bGFyLmVsZW1lbnQoJy5WYWxpZERhdGUnKS5yZW1vdmVDbGFzcygnbmctaGlkZScpO1xuICBcdGNvbnNvbGUubG9nKDEpO1xuICBcdC8vcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICBcdGNvbnNvbGUubG9nKDIpO1xuICBcdGFuZ3VsYXIuZWxlbWVudCgnLlZhbGlkRGF0ZScpLmFkZENsYXNzKCduZy1oaWRlJyk7XG4gIH1cbiAgaWYoZXJyLmhhc0NsYXNzKCdjbHMtb3B0aW9uYWwtZGF0ZScpKXtcbiAgXHRlcnIucmVtb3ZlQ2xhc3MoJ2MtZXJyLWJveC1ub2ltZycpO1xuICB9XG4gIGZvciAodmFyIGkgPSAxOyBpIDw9IGxhc3REYXlPZk1vbnRoOyBpKyspIHtcbiAgXHR2YXIgZGF0ID0gfn5pKzE7XG4gIFx0bGkgKz0gXCI8bGkgZGF0YS12YWw9XCIraStcIiBkYXRhLWZsYWc9J2RhdGUnPlwiKyBpICtcIjwvbGk+XCI7XG4gIH1cbiAgLy9kaXZEYXRlRWxlLnRleHQoJ0RheScpO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjdXN0RGF0ZSkuaW5uZXJIVE1MID0gbGk7XG4gIHZhciBlbGVtU2NvcCA9IGFuZ3VsYXIuZWxlbWVudCgkKFwiI1wiK2N1c3RIaWRkbikpLnNjb3BlKCk7XG4gIGlmKGRpdkRhdGUhPSdEYXknICYmIGRpdk1vbnRoIT0nJyAmJiBkaXZZZWFyIT0nWWVhcicpe1xuICBcdHZhciBkdCA9IGRpdk1vbnRoK1wiL1wiK2RpdkRhdGUrXCIvXCIrZGl2WWVhcjtcbiAgXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjdXN0SGlkZG4pLnZhbHVlID0gZHQ7XG4gIFx0aWYgKGN1c3RIaWRkbiA9PSBcIm5vdGlmaWVyRG9iXCIpIHtcbiAgXHRcdGVsZW1TY29wLmxvc3RQb2xpY3lEYXRhLm5vdGlmaWVyRG9iID0gZHQ7XG4gIFx0fSBlbHNlIGlmIChjdXN0SGlkZG4gPT0gXCJDbGFpbURvYlwiIHx8IGN1c3RIaWRkbiA9PSBcImRlY2Vhc2VkUGVyRE9CXCIpIHtcbiAgXHRcdGVsZW1TY29wLmNsYWltSW5mb0Zvcm1EYXRhLmRlY2Vhc2VkUGVyRE9CID0gZHQ7XG4gIFx0fSBlbHNlIGlmIChjdXN0SGlkZG4gPT0gXCJEaXNhYmlsaXR5RE9CXCIpIHtcbiAgXHRcdGVsZW1TY29wLmRpc2FiaWxpdHlXYWl2ZXJEYXRhLmluc3VyZWREYXRlT2ZCaXJ0aCA9IGR0O1xuICBcdH0gZWxzZSBpZiAoY3VzdEhpZGRuID09IFwiaW5zdXJlZF9kaXNhYmlsaXR5X2RhdGVcIikge1xuICBcdFx0ZWxlbVNjb3AuZGlzYWJpbGl0eVdhaXZlckRhdGEuaW5zdXJlZERpc2FiaWxpdHlEYXRlID0gZHQ7XG4gIFx0fSBlbHNlIGlmIChjdXN0SGlkZG4gPT0gXCJsaWZlRE9Cb3B0aW9uYWxcIikge1xuICBcdFx0ZWxlbVNjb3AubGlmZUluc3VyYW5jZURlYXRoRGF0YS5pbnN1cmVkRG9iID0gZHQ7XG4gIFx0fSBlbHNlIGlmIChjdXN0SGlkZG4gPT0gXCJpbnN1cmVkX2xpZmVfZGF0ZVwiKSB7XG4gIFx0XHRlbGVtU2NvcC5saWZlSW5zdXJhbmNlRGVhdGhEYXRhLmluc3VyZWREZWF0aERhdGUgPSBkdDtcbiAgXHR9IGVsc2UgaWYgKGN1c3RIaWRkbiA9PSBcIkxvbmdET0JvcHRpb25hbFwiKSB7XG4gIFx0XHRlbGVtU2NvcC5sb25nVGVybUNhcmVEYXRhLmluc3VyZWREb2IgPSBkdDtcbiAgXHR9IGVsc2UgaWYgKGN1c3RIaWRkbiA9PSBcImluc3VyZWRDYXJlT25zZXRcIikge1xuICBcdFx0ZWxlbVNjb3AubG9uZ1Rlcm1DYXJlRGF0YS5pbnN1cmVkQ2FyZU9uc2V0ID0gZHQ7XG4gIFx0fVxuICB9IGVsc2Uge1xuICBcdGlmIChjdXN0SGlkZG4gPT0gXCJub3RpZmllckRvYlwiKSB7XG4gIFx0XHRlbGVtU2NvcC5sb3N0UG9saWN5RGF0YS5ub3RpZmllckRvYiA9ICcnO1xuICBcdH0gZWxzZSBpZiAoY3VzdEhpZGRuID09IFwiQ2xhaW1Eb2JcIiB8fCBjdXN0SGlkZG4gPT0gXCJkZWNlYXNlZFBlckRPQlwiKSB7XG4gIFx0XHRlbGVtU2NvcC5jbGFpbUluZm9Gb3JtRGF0YS5kZWNlYXNlZFBlckRPQiA9ICcnO1xuICBcdH0gZWxzZSBpZiAoY3VzdEhpZGRuID09IFwiRGlzYWJpbGl0eURPQlwiKSB7XG4gIFx0XHRlbGVtU2NvcC5kaXNhYmlsaXR5V2FpdmVyRGF0YS5pbnN1cmVkRGF0ZU9mQmlydGggPSAnJztcbiAgXHR9IGVsc2UgaWYgKGN1c3RIaWRkbiA9PSBcImluc3VyZWRfZGlzYWJpbGl0eV9kYXRlXCIpIHtcbiAgXHRcdGVsZW1TY29wLmRpc2FiaWxpdHlXYWl2ZXJEYXRhLmluc3VyZWREaXNhYmlsaXR5RGF0ZSA9ICcnO1xuICBcdH0gZWxzZSBpZiAoY3VzdEhpZGRuID09IFwibGlmZURPQm9wdGlvbmFsXCIpIHtcbiAgXHRcdGVsZW1TY29wLmxpZmVJbnN1cmFuY2VEZWF0aERhdGEuaW5zdXJlZERvYiA9ICcnO1xuICBcdH0gZWxzZSBpZiAoY3VzdEhpZGRuID09IFwiaW5zdXJlZF9saWZlX2RhdGVcIikge1xuICBcdFx0ZWxlbVNjb3AubGlmZUluc3VyYW5jZURlYXRoRGF0YS5pbnN1cmVkRGVhdGhEYXRlID0gJyc7XG4gIFx0fSBlbHNlIGlmIChjdXN0SGlkZG4gPT0gXCJMb25nRE9Cb3B0aW9uYWxcIikge1xuICBcdFx0ZWxlbVNjb3AubG9uZ1Rlcm1DYXJlRGF0YS5pbnN1cmVkRG9iID0gJyc7XG4gIFx0fSBlbHNlIGlmIChjdXN0SGlkZG4gPT0gXCJpbnN1cmVkQ2FyZU9uc2V0XCIpIHtcbiAgXHRcdGVsZW1TY29wLmxvbmdUZXJtQ2FyZURhdGEuaW5zdXJlZENhcmVPbnNldCA9ICcnO1xuICBcdH1cbiAgfSAqL1xufVxuXG4vKiBcdGZ1bmN0aW9uIG15RnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PSAxMykge1xuICAgICAgICAgICAvL2NvbnNvbGUubG9nKGUudGFyZ2V0LmlubmVyVGV4dCk7XG4gICAgICAgICAgIC8vY29uc29sZS5sb2coZS50YXJnZXQucGFyZW50RWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKTtcbiAgICAgICAgfVxuXHR9O1xuICovIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJGNhcm91c2VsQ29udFdpZCA9ICQoJy5jYXJvdXNlbC1zaWRlbmF2LWNvbnQnKS5wYXJlbnQoKSxcbiAgICBjb3VudCA9IDAsXG4gICAgbW9iaWxlV2lkID0gNzY3LFxuICAgIHRhYmxldFdpZCA9IDEwMjMsXG4gICAgc2hvd0xpc3QsIHVwZGF0ZWRXaWQsIHNob3dNYXJnLCBhcnJQYXJlbnRXaWQsXG4gICAgJGNhcm91c2VsQ29udFdpZExpc3QgPSAkKCcuY2Fyb3VzZWwtc2lkZW5hdi1jb250IGxpJykuZXEoMCksXG4gICAgY2Fyb3VzZWxGaXJzdEltZ0hndCxcbiAgICBjYXJvdXNlbEZpcnN0SW1nTXRvcCA9ICQoJy5jYXJvdXNlbC1zaWRlbmF2LWNvbnQnKS5jc3MoJ21hcmdpbi10b3AnKSxcbiAgICBjYXJvdXNlbENvbnRXaWRMaXN0TGVuZ3RoID0gJCgnLmNhcm91c2VsLXNpZGVuYXYtY29udCBsaScpLmxlbmd0aCxcbiAgICBjYXJvdXNlbENvbnRVTFdpZDtcblxuYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICBjYXJvdXNlbHJlc2l6ZSgpO1xuICAgICQoJy5jYXJvdXNlbC1zaWRlbmF2LWNvdW50JykudmFsKDApO1xuXG4gICAgJCgnLmNhcm91c2VsLXNpZGVuYXYtcmlnaHQtYXJyb3cnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyICR0b3RhbENhcm91c2VsTGlzdCA9ICQodGhpcykuY2xvc2VzdCgnLmJpb1NsaWRlcicpLmZpbmQoJy5jYXJvdXNlbC1zaWRlbmF2LWNvbnQgbGknKTtcblxuICAgICAgICBjb3VudCA9IHBhcnNlSW50KCQodGhpcykuY2xvc2VzdCgnc3BhbicpLmZpbmQoJ2lucHV0JykudmFsKCkpO1xuICAgICAgICBpZiAoKGNvdW50ID49IDApICYmIGNvdW50IDwgKCgkdG90YWxDYXJvdXNlbExpc3QubGVuZ3RoIC0gc2hvd0xpc3QpKSkge1xuICAgICAgICAgICAgY291bnQgPSBwYXJzZUludCgkKHRoaXMpLmNsb3Nlc3QoJ3NwYW4nKS5maW5kKCdpbnB1dCcpLnZhbCgpKSArIDE7XG4gICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJ3NwYW4nKS5maW5kKCdpbnB1dCcpLnZhbChjb3VudCk7XG4gICAgICAgICAgICB2YXIgbGVmdFZhbCA9IChjb3VudCAqIHVwZGF0ZWRXaWQpICsgKGNvdW50ICogcGFyc2VJbnQoJGNhcm91c2VsQ29udFdpZExpc3QuY3NzKFxuICAgICAgICAgICAgICAgICdtYXJnaW4tcmlnaHQnKSkpICsgKGNvdW50ICogcGFyc2VJbnQoJGNhcm91c2VsQ29udFdpZExpc3QuY3NzKCdtYXJnaW4tbGVmdCcpKSk7XG5cbiAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnLmJpb1NsaWRlcicpLmZpbmQoJy5jYXJvdXNlbC1zaWRlbmF2LWNvbnQnKS5zdG9wKGZhbHNlLCB0cnVlKS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAnbGVmdCc6IC1sZWZ0VmFsICsgJ3B4J1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkKHRoaXMpLnByZXYoKS5hZGRDbGFzcygnY2Fyb3VzZWwtc2lkZW5hdi1sZWZ0LWFycm93Jyk7XG4gICAgICAgICAgICBpZiAoY291bnQgPj0gKCgkdG90YWxDYXJvdXNlbExpc3QubGVuZ3RoIC0gc2hvd0xpc3QpKSkge1xuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2Nhcm91c2VsLXNpZGVuYXYtcmlnaHQtYXJyb3cnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgICQoJy5jYXJvdXNlbC1zaWRlbmF2LWxlZnQtYXJyb3cnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY291bnQgPSBwYXJzZUludCgkKHRoaXMpLmNsb3Nlc3QoJ3NwYW4nKS5maW5kKCdpbnB1dCcpLnZhbCgpKTtcbiAgICAgICAgdmFyICR0b3RhbENhcm91c2VsTGlzdCA9ICQodGhpcykuY2xvc2VzdCgnLmJpb1NsaWRlcicpLmZpbmQoJy5jYXJvdXNlbC1zaWRlbmF2LWNvbnQgbGknKTtcblxuICAgICAgICBpZiAoKGNvdW50ID4gMCkgJiYgY291bnQgPD0gKCR0b3RhbENhcm91c2VsTGlzdC5sZW5ndGggLSBzaG93TGlzdCkpIHtcbiAgICAgICAgICAgIGNvdW50ID0gcGFyc2VJbnQoJCh0aGlzKS5jbG9zZXN0KCdzcGFuJykuZmluZCgnaW5wdXQnKS52YWwoKSkgLSAxO1xuICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCdzcGFuJykuZmluZCgnaW5wdXQnKS52YWwoY291bnQpO1xuICAgICAgICAgICAgdmFyIGxlZnRWYWwgPSAoY291bnQgKiB1cGRhdGVkV2lkKSArIChjb3VudCAqIHBhcnNlSW50KCRjYXJvdXNlbENvbnRXaWRMaXN0LmNzcyhcbiAgICAgICAgICAgICAgICAnbWFyZ2luLXJpZ2h0JykpKSArIChjb3VudCAqIHBhcnNlSW50KCRjYXJvdXNlbENvbnRXaWRMaXN0LmNzcygnbWFyZ2luLWxlZnQnKSkpO1xuXG4gICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5iaW9TbGlkZXInKS5maW5kKCcuY2Fyb3VzZWwtc2lkZW5hdi1jb250Jykuc3RvcChmYWxzZSwgdHJ1ZSkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgJ2xlZnQnOiAtbGVmdFZhbCArICdweCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJCh0aGlzKS5uZXh0KCkuYWRkQ2xhc3MoJ2Nhcm91c2VsLXNpZGVuYXYtcmlnaHQtYXJyb3cnKTtcbiAgICAgICAgICAgIGlmIChjb3VudCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnY2Fyb3VzZWwtc2lkZW5hdi1sZWZ0LWFycm93Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuXG5hbmd1bGFyLmVsZW1lbnQod2luZG93KS5sb2FkKGZ1bmN0aW9uKCkge1xuICAgIGNhcm91c2VscmVzaXplKCk7XG59KTtcblxuJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpIHtcbiAgICBjYXJvdXNlbHJlc2l6ZSgpO1xufSk7XG5cbmZ1bmN0aW9uIGNhcm91c2VscmVzaXplKCkge1xuICAgIGFyclBhcmVudFdpZCA9ICQoJy5jYXJvdXNlbC1zaWRlbmF2LXJpZ2h0LWFycm93JykucGFyZW50KCkub3V0ZXJXaWR0aCgpO1xuICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VJbnQoJGNhcm91c2VsQ29udFdpZExpc3QuY3NzKCdtYXJnaW4tcmlnaHQnKSksXG4gICAgICAgIGFyclBhcmVudFdpZGhhbGYgPSBhcnJQYXJlbnRXaWQgLyAyLFxuICAgICAgICBjYXJvdXNlbEFyclRvcDtcblxuICAgICQoJy5sZWZ0LmNhcm91c2VsLXNpZGVuYXYtY29udHJvbCcpLnJlbW92ZUNsYXNzKCdjYXJvdXNlbC1zaWRlbmF2LWxlZnQtYXJyb3cnKTtcbiAgICAkKCcuY2Fyb3VzZWwtc2lkZW5hdi1jb250JykuY3NzKHtcbiAgICAgICAgJ2xlZnQnICAgICAgIDogJzAnLFxuICAgICAgICAnbWFyZ2luLWxlZnQnOiBhcnJQYXJlbnRXaWRoYWxmICsgJ3B4J1xuICAgIH0pO1xuICAgICQoJy5jYXJvdXNlbC1zaWRlbmF2LWNvdW50JykudmFsKDApO1xuICAgIGNvdW50ID0gMDtcbiAgICB2YXIgd2luZFdpZCA9ICQod2luZG93KS53aWR0aCgpO1xuXG4gICAgJCgnLmxlZnQuY2Fyb3VzZWwtc2lkZW5hdi1jb250cm9sJykucmVtb3ZlQ2xhc3MoJ2Nhcm91c2VsLXNpZGVuYXYtbGVmdC1hcnJvdycpO1xuICAgICQoJy5yaWdodC5jYXJvdXNlbC1zaWRlbmF2LWNvbnRyb2wnKS5hZGRDbGFzcygnY2Fyb3VzZWwtc2lkZW5hdi1yaWdodC1hcnJvdycpO1xuICAgIGlmICh3aW5kV2lkIDw9IG1vYmlsZVdpZCkge1xuICAgICAgICBzaG93TGlzdCA9IDI7XG4gICAgfSBlbHNlIGlmICh3aW5kV2lkIDw9IHRhYmxldFdpZCkge1xuICAgICAgICBpZiAoJCgnLkFydGljbGVDb250ZW50JykuaGFzQ2xhc3MoJ25vUmlnaHRSYWlsJykpIHtcbiAgICAgICAgICAgIHNob3dMaXN0ID0gNDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNob3dMaXN0ID0gMztcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoJCgnLkFydGljbGVDb250ZW50JykuaGFzQ2xhc3MoJ25vUmlnaHRSYWlsJykpIHtcbiAgICAgICAgc2hvd0xpc3QgPSA1O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNob3dMaXN0ID0gNDtcbiAgICB9XG4gICAgc2hvd01hcmcgPSBhcnJQYXJlbnRXaWQgLyBzaG93TGlzdDtcbiAgICBtYXJnaW5MZWZ0ID0gcGFyc2VJbnQobWFyZ2luTGVmdCAqIChzaG93TGlzdCAtIDEpKTtcbiAgICB1cGRhdGVkV2lkID0gKCRjYXJvdXNlbENvbnRXaWQud2lkdGgoKSAtIG1hcmdpbkxlZnQpIC8gc2hvd0xpc3Q7XG4gICAgdXBkYXRlZFdpZCA9IHVwZGF0ZWRXaWQgLSBzaG93TWFyZztcbiAgICBjYXJvdXNlbENvbnRVTFdpZCA9ICh1cGRhdGVkV2lkICogY2Fyb3VzZWxDb250V2lkTGlzdExlbmd0aCkgKyAobWFyZ2luTGVmdCAqIGNhcm91c2VsQ29udFdpZExpc3RMZW5ndGgpO1xuICAgICQoJy5jYXJvdXNlbC1zaWRlbmF2LWNvbnQnKVxuICAgICAgICAuY3NzKCd3aWR0aCcsIGNhcm91c2VsQ29udFVMV2lkICsgJ3B4JylcbiAgICAgICAgLmZpbmQoJ2xpJylcbiAgICAgICAgLmNzcygnd2lkdGgnLCB1cGRhdGVkV2lkICsgJ3B4JylcbiAgICAgICAgLnByb21pc2UoKVxuICAgICAgICAuZG9uZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNhcm91c2VsRmlyc3RJbWdIZ3QgPSAkY2Fyb3VzZWxDb250V2lkTGlzdC5maW5kKCdpbWcnKS5oZWlnaHQoKTtcbiAgICAgICAgICAgIGNhcm91c2VsQXJyVG9wID0gKChjYXJvdXNlbEZpcnN0SW1nSGd0IC8gMikgKyAocGFyc2VJbnQoY2Fyb3VzZWxGaXJzdEltZ010b3ApKSkgKyAoJChcbiAgICAgICAgICAgICAgICAnLmNhcm91c2VsLXNpZGVuYXYtcmlnaHQtYXJyb3cnKS5vdXRlckhlaWdodCgpIC8gMik7XG4gICAgICAgICAgICBpZiAoY2Fyb3VzZWxDb250V2lkTGlzdExlbmd0aCA8PSBzaG93TGlzdCkge1xuICAgICAgICAgICAgICAgICQoJy5jYXJvdXNlbC1zaWRlbmF2LWFyci1jb250JykuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKCcuY2Fyb3VzZWwtc2lkZW5hdi1hcnItY29udCcpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICd2aXNpYmlsaXR5JzogJ3Zpc2libGUnXG4gICAgICAgICAgICAgICAgfSkuZmluZCgnYScpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICd0b3AnOiBjYXJvdXNlbEFyclRvcCArICdweCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBmb3IgaW5pdGlhbCBET00gY2hlY2tpbmdcclxuICAgIGNoZWNrRmxvYXRpbmdMYWJlbHModGhpcyk7XHJcbn0pO1xyXG5cclxuJChkb2N1bWVudCkub24oJ0RPTU5vZGVJbnNlcnRlZCcsIGZ1bmN0aW9uKGUpIHtcclxuICAgIC8vIGNoZWNrIHdoZW5ldmVyIG5ldyBET00gaW5zZXJ0ZWRcclxuICAgIHZhciBlbGVtZW50ID0gZS50YXJnZXQ7XHJcblxyXG4gICAgY2hlY2tGbG9hdGluZ0xhYmVscyhlbGVtZW50KTtcclxufSk7XHJcblxyXG5mdW5jdGlvbiBjaGVja0Zsb2F0aW5nTGFiZWxzKGVsZW1lbnQpIHtcclxuICAgIGlmICgkKGVsZW1lbnQpLmZpbmQoJ3NwYW4uZmxvYXRpbmctbGFiZWwnKS5sZW5ndGggIT09IDApIHtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBhcHBseUZsb2F0aW5nTGFiZWxzKGVsZW1lbnQpO1xyXG4gICAgICAgIH0sIDEwMDApO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBhcHBseUZsb2F0aW5nTGFiZWxzKGVsZW1lbnQpIHtcclxuICAgICQoZWxlbWVudCkuZmluZCgnc3Bhbi5mbG9hdGluZy1sYWJlbCcpLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJCh0aGlzKS5wcmV2QWxsKCdpbnB1dCcpLmFkZENsYXNzKCdoYXMtZmxvYXRpbmctbGFiZWwnKTtcclxuICAgICAgICBpZiAoJCh0aGlzKS5wcmV2QWxsKCdpbnB1dCcpLnZhbCgpKSB7XHJcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ3B1bGwtdXAnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJCh0aGlzKS5wcmV2QWxsKCdzZWxlY3QnKS5hZGRDbGFzcygnaGFzLWZsb2F0aW5nLWxhYmVsJyk7XHJcbiAgICB9KTtcclxuICAgICQoJ2lucHV0Lmhhcy1mbG9hdGluZy1sYWJlbCcpLm9uKCdmb2N1cycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQodGhpcykubmV4dEFsbCgnLmZsb2F0aW5nLWxhYmVsJykuYWRkQ2xhc3MoJ3B1bGwtdXAnKTtcclxuICAgIH0pO1xyXG5cclxuICAgICQoJ2lucHV0Lmhhcy1mbG9hdGluZy1sYWJlbCcpLm9uKCdibHVyJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCEkKHRoaXMpLnZhbCgpKSB7XHJcbiAgICAgICAgICAgICQodGhpcykubmV4dEFsbCgnLmZsb2F0aW5nLWxhYmVsJykucmVtb3ZlQ2xhc3MoJ3B1bGwtdXAnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKHRoaXMpLm5leHRBbGwoJy5mbG9hdGluZy1sYWJlbCcpLmFkZENsYXNzKCdwdWxsLXVwJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnc2VsZWN0Lmhhcy1mbG9hdGluZy1sYWJlbCcpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoJCh0aGlzKVswXS5zZWxlY3RlZEluZGV4ICE9PSAwKSB7XHJcbiAgICAgICAgICAgICQodGhpcykubmV4dEFsbCgnLmZsb2F0aW5nLWxhYmVsJykuYWRkQ2xhc3MoJ3B1bGwtdXAnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKHRoaXMpLm5leHRBbGwoJy5mbG9hdGluZy1sYWJlbCcpLnJlbW92ZUNsYXNzKCdwdWxsLXVwJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0iLCIvKiogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuLSBTY3JpcHRzIGZvciBPcmFjbGUgRWxvcXVhIGludGVncmF0aW9uXHJcbi0gTGVhZCBHZW4gUHJvamVjdCAmIGVuaGFuY2VtZW50cywgMjAxNi0xN1xyXG4tIENocmlzIEplbmtpbnMsIERldmVsb3BlclxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qIGdsb2JhbCBjYW1wYWlnblJlZGlyZWN0aW9uUGFnZVVSTCwgUmVDYXB0Y2hhVXRpbHMsIEdldEVscUNvbnRlbnRQZXJzb25hbGl6YXRpb25WYWx1ZSwgX2VscVEgKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8vIEludGVncmF0aW9uIG9mIHJvdXRlciBwYWdlIGZvciBTYWZhcmkgZGF0YSBsb29rdXAgZml4XHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIGZpeEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdmb3JtLmVscS1mb3JtW25hbWUqPVwic2FmYXJpX2ZpeFwiXScpO1xyXG5cclxuICBpZiAoZml4Rm9ybSkge1xyXG4gICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignU2FmYXJpJykgPiAtMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPCAwICYmIG5hdmlnYXRvci52ZW5kb3IuaW5kZXhPZignQXBwbGUnKSA+IC0xKSB7XHJcbiAgICAgIGZpeEZvcm0uc3VibWl0KCk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjYW1wYWlnblJlZGlyZWN0aW9uUGFnZVVSTCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgaWYgKGNhbXBhaWduUmVkaXJlY3Rpb25QYWdlVVJMICE9PSBudWxsICYmIGNhbXBhaWduUmVkaXJlY3Rpb25QYWdlVVJMICE9PSAnJykge1xyXG5cdFx0dmFyIGluZGV4ID0gKGxvY2F0aW9uLnNlYXJjaC5pbmRleE9mKFwiP1wiKSA+PSAwKSA/IGxvY2F0aW9uLnNlYXJjaC5pbmRleE9mKFwiP1wiKSA6IDA7XHJcbiAgICAgICAgbG9jYXRpb24uaHJlZiA9IGNhbXBhaWduUmVkaXJlY3Rpb25QYWdlVVJMICsgKGxvY2F0aW9uLnNlYXJjaCAhPSBcIlwiID8gXCI/XCIgOiBcIlwiKSArIGVuY29kZVVSSUNvbXBvbmVudChsb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKGluZGV4KzEsIGxvY2F0aW9uLnNlYXJjaC5sZW5ndGgpKTtcclxuICAgICAgfVx0XHJcbiAgICB9XHJcbiAgfVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICBmdW5jdGlvbiBhc3luY19sb2FkKCkge1xyXG4gICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG5cclxuICAgIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XHJcbiAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xyXG4gICAgc2NyaXB0LnNyYyA9ICcvL2ltZy5lbjI1LmNvbS9pL2VscUNmZy5taW4uanMnO1xyXG4gICAgdmFyIHNjcmlwdEVsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcclxuXHJcbiAgICBzY3JpcHRFbGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2NyaXB0LCBzY3JpcHRFbGUpO1xyXG4gIH1cclxuICBpZiAod2luZG93LmF0dGFjaEV2ZW50KSB7XHJcbiAgICB3aW5kb3cuYXR0YWNoRXZlbnQoJ29ubG9hZCcsIGFzeW5jX2xvYWQpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGFzeW5jX2xvYWQsIGZhbHNlKTtcclxuICB9XHJcbn0pKCk7XHJcblxyXG53aW5kb3cubG9ja1N1Ym1pdCA9IGZhbHNlO1xyXG53aW5kb3cuZWxxUmVjYXB0Y2hhRW5hYmxlZCA9IHRydWU7XHJcbndpbmRvdy5jdXJyRWxxRm9ybSA9ICQoJ2Zvcm0uZWxxLWZvcm0nKTtcclxuXHJcbi8vIHRlbXBvcmFyeSBSZUNhcHRjaGEgc2h1dC1vZmYgZm9yIHByZXByb2RcclxuaWYgKGxvY2F0aW9uLmhvc3QuaW5kZXhPZigncHJlcHJvZCcpID4gLTEpIHtcclxuICB3aW5kb3cuZWxxUmVjYXB0Y2hhRW5hYmxlZCA9IGZhbHNlO1xyXG4gIGlmICgkKCdmb3JtIC5lbHEtZm9ybScpWzBdKSB7XHJcbiAgICAkKCcuZy1yZWNhcHRjaGEnKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gbGZnRWxxSW5pdCgpIHtcclxuICB3aW5kb3cuaXNMb2dpbkZvcm0gPSBmYWxzZTtcclxuICB3aW5kb3cuY3VzdG9tVmFsID0gZmFsc2U7XHJcbiAgd2luZG93LmVscUdVSUQgPSAnJztcclxuXHJcbiAgaWYgKHdpbmRvdy5sb2NhdGlvbi5ob3N0LmluZGV4T2YoJ2NhLWRldicpID4gLTEgfHwgd2luZG93LmxvY2F0aW9uLmhvc3QuaW5kZXhPZignd2NzLWRldicpID4gLTEgfHwgd2luZG93LmxvY2F0aW9uLmhvc3QuaW5kZXhPZignd2NzLXJzcy1kZXYnKVxyXG4gICAgPiAtMSB8fCB3aW5kb3cubG9jYXRpb24uaG9zdC5pbmRleE9mKCd3Y3MtcHJlcHJvZCcpID4gLTEgfHwgd2luZG93LmxvY2F0aW9uLmhvc3QuaW5kZXhPZignd2NzLXJzcy1wcmVwcm9kJykgPiAtMSkge1xyXG4gICAgd2luZG93LmVscUxvb2t1cEtleSA9ICc4Zjk5YjczNjIwMzA0Y2FjOTUxOTZjYWY4ZWQyZTJlMyc7XHJcbiAgfVxyXG4gIGlmICh3aW5kb3cubG9jYXRpb24uaG9zdC5pbmRleE9mKCdjYS5sZmcuY29tJykgPiAtMSB8fCB3aW5kb3cubG9jYXRpb24uaG9zdC5pbmRleE9mKCd3Y3MtY2EubGZnLmNvbScpID4gLTEgfHwgd2luZG93LmxvY2F0aW9uLmhvc3QuaW5kZXhPZihcclxuICAgICd3Y3MtcnNzLTEyYycpID4gLTEgfHwgd2luZG93LmxvY2F0aW9uLmhvc3QuaW5kZXhPZignd3d3JykgPiAtMSkge1xyXG4gICAgd2luZG93LmVscUxvb2t1cEtleSA9ICcxMDlhYmYwZS00YTNhLTQ5Y2YtYjUyMC1iNWZhYmU2ZGM4ZmInO1xyXG4gIH1cclxuICB2YXIgX2VscVEgPSBfZWxxUSB8fCBbXTtcclxuXHJcbiAgaWYgKGxvY2FsU3RvcmFnZS5lbHFVc2VyRGF0YSkge1xyXG4gICAgd2luZG93LmVscVVzZXJEYXRhID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZWxxVXNlckRhdGEpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB3aW5kb3cuZWxxVXNlckRhdGEgPSB7XHJcblxyXG4gICAgfTtcclxuICB9XHJcbiAgd2luZG93LmFsdEVscVVzZXJEYXRhID0ge1xyXG5cclxuICB9O1xyXG5cclxuICAvLyBkZXRlcm1pbmUgaWYgbGlnaHQtbG9naW4gZm9ybVxyXG4gIGlmICgkKCdzZWN0aW9uI3NlY3VyZWQtY29udGVudC1sb2dpbiBmb3JtLmVscS1mb3JtJylbMF0pIHtcclxuICAgIHdpbmRvdy5pc0xvZ2luRm9ybSA9IHRydWU7XHJcbiAgICB3aW5kb3cuZm9ybU5hbWUgPSAkKCdmb3JtLmVscS1mb3JtJykuYXR0cignbmFtZScpO1xyXG4gICAgJCgnZm9ybS5lbHEtZm9ybScpLmFkZENsYXNzKCdpc0xvZ2luRm9ybScpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gcmUtZm9ybWF0IEVsb3F1YSBmb3JtcyBmb3IgcHJvcGVyIHN0eWxpbmcgYW5kIGN1c3RvbSBiZWhhdmlvclxyXG5mdW5jdGlvbiBlbHFGb3JtRm9ybWF0KCkge1xyXG4gICQoJ2Zvcm0uZWxxLWZvcm0gbGFiZWwnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBmaWVsZFR4dCA9ICQodGhpcykudGV4dCgpO1xyXG5cclxuICAgIGlmIChmaWVsZFR4dC5pbmRleE9mKCcqJykgIT09IC0xKSB7XHJcbiAgICAgIGZpZWxkVHh0ID0gZmllbGRUeHQucmVwbGFjZSgnKicsICcnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZpZWxkVHh0ID0gZmllbGRUeHQgKyAnIChvcHRpb25hbCknO1xyXG4gICAgfVxyXG5cclxuICAgICQodGhpcykubmV4dCgnaW5wdXQnKS5hZnRlcignPHNwYW4gY2xhc3M9XCJmbG9hdGluZy1sYWJlbFwiPicgKyBmaWVsZFR4dCArICc8L3NwYW4+Jyk7XHJcbiAgICB2YXIgbGljUHJvZlNlbGVjdElEID0gJCgnc2VsZWN0W25hbWU9XCJsaWNlbnNlZFwiXScpLmF0dHIoJ2lkJyk7XHJcbiAgICB2YXIgcmlhU2VsZWN0SUQgPSAkKCdzZWxlY3RbbmFtZSo9XCJyZWdpc3RlcmVkSW52ZXN0bWVudEFkdmlzb3JcIl0nKS5hdHRyKCdpZCcpO1xyXG5cclxuICAgIGlmICgkKHRoaXMpLmF0dHIoJ2ZvcicpICE9PSBsaWNQcm9mU2VsZWN0SUQgJiYgJCh0aGlzKS5hdHRyKCdmb3InKSAhPT0gcmlhU2VsZWN0SUQgJiYgISQodGhpcykuaGFzQ2xhc3MoJ2luc3RydWN0aW9ucycpKSB7XHJcbiAgICAgICQodGhpcykuY3NzKCdwb3NpdGlvbicsICdhYnNvbHV0ZScpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAkKCdmb3JtLmVscS1mb3JtIHNlbGVjdCcpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGZpcnN0T3B0aW9uVHh0ID0gJCh0aGlzKVswXS5vcHRpb25zWzBdLnRleHQ7XHJcblxyXG4gICAgJCh0aGlzKS5hZnRlcignPHNwYW4gY2xhc3M9XCJmbG9hdGluZy1sYWJlbCBmbG9hdGluZy1sYWJlbC0tc2VsZWN0LW9wdGlvblwiPicgKyBmaXJzdE9wdGlvblR4dCArICc8L3NwYW4+Jyk7XHJcbiAgfSk7XHJcblxyXG4gIC8qKiBzZXQgdXAgUmVDYXB0Y2hhICoqL1xyXG4gIGlmICh3aW5kb3cuZWxxUmVjYXB0Y2hhRW5hYmxlZCkge1xyXG4gICAgdmFyIHN1Ym1pdEJ0biA9ICQoJ2Zvcm0uZWxxLWZvcm0gLnN1Ym1pdC1idXR0b24nKTtcclxuXHJcbiAgICBzdWJtaXRCdG4ucGFyZW50cygnZGl2LmZpZWxkLXdyYXBwZXInKS5iZWZvcmUoXHJcbiAgICAgICc8ZGl2IGlkPVwiZWxvcXVhUmVjYXB0Y2hhXCIgY2xhc3M9XCJnLXJlY2FwdGNoYVwiIGRhdGEtc2l0ZWtleT1cIjZMZUxtQndVQUFBQUFBMXc1cXpJNGlkcFhCSFBfRWZyVVhodFlFYy1cIj48L2Rpdj4nKTtcclxuICAgICQoJ2Zvcm0uZWxxLWZvcm0gLmctcmVjYXB0Y2hhJykuYWZ0ZXIoJzxkaXYgY2xhc3M9XCJnci1lcnJvciBlcnItY29udFwiIHN0eWxlPVwiZGlzcGxheTpub25lXCI+UGxlYXNlIGFzc3VyZSB1cyB5b3UgYXJlIGEgaHVtYW4uPC9kaXY+Jyk7XHJcbiAgfVxyXG4gIHZhciByd2RSZUNhcHRjaGFEYXRhID0ge1xyXG4gICAgJ21xJzogd2luZG93Lm1hdGNoTWVkaWEoJyhtYXgtd2lkdGg6IDEwMjRweCkgYW5kIChvcmllbnRhdGlvbjogcG9ydHJhaXQpJyksXHJcblxyXG4gICAgLy8gaG9zdGluZyBmb3JtXHJcbiAgICAnZm9ybSc6ICQoJ2Zvcm0uZWxxLWZvcm0nKSxcclxuXHJcbiAgICAvLyBjb250YWluZXIgdGhhdCByZXByZXNlbnRzIHRoZSB2aXN1YWwgY29uc3RyYWluaW5nIHdpZHRoXHJcbiAgICAnd2lkdGhDb250YWluZXInOiAkKCdmb3JtLmVscS1mb3JtIC5nLXJlY2FwdGNoYScpLnBhcmVudCgpLFxyXG5cclxuICAgIC8vIG1heGltdW0gc2NhbGUgZmFjdG9yIChvcHRpb25hbClcclxuICAgICdtYXhTY2FsZSc6IDEuMlxyXG4gIH07XHJcblxyXG4gIHZhciBjaGVja0ZvclJlQ2FwdGNoYVJlbmRlciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICgkKCcuZy1yZWNhcHRjaGEnKS5jaGlsZHJlbigpLmxlbmd0aCA+IDApIHtcclxuICAgICAgUmVDYXB0Y2hhVXRpbHMucndkUmVDYXB0Y2hhKHJ3ZFJlQ2FwdGNoYURhdGEpO1xyXG4gICAgICBjbGVhckludGVydmFsKGNoZWNrRm9yUmVDYXB0Y2hhUmVuZGVyKTtcclxuICAgIH1cclxuICB9LCAxMDApO1xyXG5cclxuICAkKCdmb3JtLmVscS1mb3JtIGlucHV0LnN1Ym1pdC1idXR0b24nKS5hdHRyKCdzdHlsZScsICcnKTtcclxuICAkKCdmb3JtLmVscS1mb3JtJykucGFyZW50KCdkaXYnKS5jc3MoJ21hcmdpbi10b3AnLCAnMHB4Jyk7XHJcbiAgJCgnZm9ybS5lbHEtZm9ybScpLnBhcmVudHMoJ2JvZHknKS5hcHBlbmQoJzxzZWN0aW9uIGlkPVwibWluaS1wcmVsb2FkZXJcIiBzdHlsZT1cImRpc3BsYXk6bm9uZVwiPjxkaXYgaWQ9XCJtaW5pLXN0YXR1c1wiPjwvZGl2Pjwvc2VjdGlvbj4nKTtcclxuXHJcbiAgLy8gYWRkIHZhbGlkYXRpb24sIGV2ZW50LWJpbmRpbmdcclxuICAvKiQoJ2Zvcm0uZWxxLWZvcm0nKS5vbigna2V5cHJlc3MnLCAnaW5wdXRbbmFtZT1cImZpcnN0TmFtZVwiXSwgaW5wdXRbbmFtZT1cImxhc3ROYW1lXCJdLCBpbnB1dFtuYW1lPVwiY29tcGFueVwiXScsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgdmFyIGxldHRlcnMgPSAvXltBLVphLXpdKyQvO1xyXG5cclxuICAgIGlmICghbGV0dGVycy50ZXN0KGV2ZW50LmtleSkpIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICB9KTtcclxuICAkKCdmb3JtLmVscS1mb3JtJykub24oJ2JsdXInLCAnaW5wdXRbbmFtZT1cImVtYWlsQWRkcmVzc1wiXScsIGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBlbHFMT0IgPSAkKCdpbnB1dFtuYW1lPVwiZWxxTE9CXCJdJykudmFsKCk7XHJcblxyXG4gICAgaWYgKGVscUxPQiA9PT0gdW5kZWZpbmVkIHx8IGVscUxPQiA9PT0gbnVsbCB8fCBlbHFMT0IgPT09ICcnIHx8IGVscUxPQiA9PT0gJ0xGRCcpIHtcclxuICAgICAgZWxxY2hlY2tTaGFyZWRFbWFpbHMoJCh0aGlzKSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgJCgnZm9ybS5lbHEtZm9ybScpLm9uKCdtb3VzZWRvd24ga2V5ZG93bicsICdpbnB1dC5zdWJtaXQtYnV0dG9uJywgZnVuY3Rpb24gKCkge1xyXG4gICAgZWxxQWxsb3dTdWJtaXQoKTtcclxuICB9KTtcclxuXHJcbiAgJCgnZm9ybS5lbHEtZm9ybScpLm9uKCdmb2N1cycsICdpbnB1dFtuYW1lPVwiZmlyc3ROYW1lXCJdLCBpbnB1dFtuYW1lPVwibGFzdE5hbWVcIl0sIGlucHV0W25hbWU9XCJlbWFpbEFkZHJlc3NcIl0nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgY2hlY2tGb3JEaXNhYmxlZFN1Ym1pdCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKHdpbmRvdy5sb2NrU3VibWl0KSB7XHJcbiAgICAgICAgJCgnZm9ybS5lbHEtZm9ybSBpbnB1dC5zdWJtaXQtYnV0dG9uJykuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAkKCdmb3JtLmVscS1mb3JtIGlucHV0LnN1Ym1pdC1idXR0b24nKS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xyXG4gICAgICB9XHJcbiAgICB9LCA1MDApO1xyXG4gIH0pOyovXHJcbiAgZWxxRm9ybUJpbmRpbmcoJCgnZm9ybS5lbHEtZm9ybScpKTtcclxuXHJcbiAgJCh3aW5kb3cpLm9uKCdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBSZUNhcHRjaGFVdGlscy5yd2RSZUNhcHRjaGEocndkUmVDYXB0Y2hhRGF0YSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVscUZvcm1CaW5kaW5nKGZvcm0pIHtcclxuICAvLyBhZGQgdmFsaWRhdGlvbiwgZXZlbnQtYmluZGluZ1xyXG4gIGZvcm0ub24oJ2tleXByZXNzJywgJ2lucHV0W25hbWU9XCJmaXJzdE5hbWVcIl0sIGlucHV0W25hbWU9XCJsYXN0TmFtZVwiXScsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgdmFyIGxldHRlcnMgPSAvXltBLVphLXpdKyQvO1xyXG5cclxuICAgIGlmICghbGV0dGVycy50ZXN0KGV2ZW50LmtleSkpIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICB9KTtcclxuICBmb3JtLm9uKCdrZXlwcmVzcycsICdpbnB1dFtuYW1lPVwiY29tcGFueVwiXScsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgdmFyIGxldHRlcnMgPSAvXlthLXpBLVowLTktJyYgw4fDvMOpw6LDpMOgw6XDp8Oqw6vDqMOvw67DrMOEw4XDicOmw4bDtMO2w7LDu8O5w7/DlsOcw6HDrcOzw7rDscORXSskLztcclxuXHJcbiAgICBpZiAoIWxldHRlcnMudGVzdChldmVudC5rZXkpKSB7XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgZm9ybS5vbignYmx1cicsICdpbnB1dFtuYW1lPVwiZW1haWxBZGRyZXNzXCJdJywgZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGVscUxPQiA9ICQoJ2lucHV0W25hbWU9XCJlbHFMT0JcIl0nKS52YWwoKTtcclxuXHJcbiAgICBpZiAoZWxxTE9CID09PSB1bmRlZmluZWQgfHwgZWxxTE9CID09PSBudWxsIHx8IGVscUxPQiA9PT0gJycgfHwgZWxxTE9CID09PSAnTEZEJykge1xyXG4gICAgICBlbHFjaGVja1NoYXJlZEVtYWlscygkKHRoaXMpKTtcclxuICAgIH1cclxuICB9KTtcclxuICBmb3JtLm9uKCdtb3VzZWRvd24ga2V5ZG93bicsICdpbnB1dC5zdWJtaXQtYnV0dG9uJywgZnVuY3Rpb24gKCkge1xyXG4gICAgZWxxQWxsb3dTdWJtaXQoJCh0aGlzKS5wYXJlbnRzKCdmb3JtJykpO1xyXG4gIH0pO1xyXG5cclxuICBmb3JtLm9uKCdmb2N1cycsICdpbnB1dFtuYW1lPVwiZmlyc3ROYW1lXCJdLCBpbnB1dFtuYW1lPVwibGFzdE5hbWVcIl0sIGlucHV0W25hbWU9XCJlbWFpbEFkZHJlc3NcIl0nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgY2hlY2tGb3JEaXNhYmxlZFN1Ym1pdCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKHdpbmRvdy5sb2NrU3VibWl0KSB7XHJcbiAgICAgICAgZm9ybS5maW5kKCdpbnB1dC5zdWJtaXQtYnV0dG9uJykuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBmb3JtLmZpbmQoJ2lucHV0LnN1Ym1pdC1idXR0b24nKS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xyXG4gICAgICB9XHJcbiAgICB9LCA1MDApO1xyXG4gIH0pO1xyXG5cclxuICAvLyBmaXJtIG5hbWUgbWF4IGxpbWl0XHJcbiAgJCggJ2lucHV0W25hbWU9XCJjb21wYW55XCJdJykuYXR0cihcIm1heGxlbmd0aFwiLCA0MCk7XHJcbiAgXHJcbiAgLy8gcGhvbmUgdmFsaWRhdGlvblxyXG4gIGZvcm0ub24oJ2tleXByZXNzJywgJ2lucHV0W25hbWU9XCJidXNQaG9uZVwiXScsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgIHZhciBjaGFyQ29kZSA9IChldnQud2hpY2gpID8gZXZ0LndoaWNoIDogZXZlbnQua2V5Q29kZTtcclxuICAgIGlmICgoY2hhckNvZGUgPCA0OCB8fCBjaGFyQ29kZSA+IDU3IHx8IGV2dC5jdXJyZW50VGFyZ2V0LnZhbHVlLmxlbmd0aCA+IDEwKSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfSk7XHJcbiAgXHJcbiAgZm9ybS5vbignaW5wdXQnLCAnaW5wdXRbbmFtZT1cImJ1c1Bob25lXCJdJywgZnVuY3Rpb24gKGUpIHtcclxuICAgIHZhciBwaEZsZCA9ICQodGhpcyk7XHJcbiAgICB2YXIgdmFsID0gcGhGbGQudmFsKCk7ICBcclxuICAgIHBoRmxkLnZhbChwaFZhbGlkYXRpb24gKHZhbCkpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGZ1bmN0aW9uIHBoVmFsaWRhdGlvbiAocGgpIHtcclxuXHR2YXIgbnVtYmVyID0gcGgucmVwbGFjZSgvW15cXGRdL2csICcnKVxyXG5cdGlmIChudW1iZXIubGVuZ3RoID09IDEwICkgeyAgICAgXHJcblx0ICBudW1iZXIgPSBudW1iZXIucmVwbGFjZSgvKFxcZHszfSkoXFxkezN9KShcXGR7NH0pLywgXCIkMS0kMi0kM1wiKTtcclxuXHR9ICAgICAgIFxyXG5cdHJldHVybiBudW1iZXI7XHJcbiAgfVxyXG4gIFxyXG4gIC8vZW5kIHBob25lIHZhbGlkYXRpb25cclxuICBcclxuICAkKGRvY3VtZW50KS5vbignbG9va3VwU3RhcnQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB3aW5kb3cubG9ja1N1Ym1pdCA9IHRydWU7XHJcbiAgICB3aW5kb3cuY3VyckVscUZvcm0gPSBmb3JtO1xyXG4gICAgZm9ybS5maW5kKCdpbnB1dC5zdWJtaXQtYnV0dG9uJykuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcclxuICB9KTtcclxuICAkKGRvY3VtZW50KS5vbignbG9va3VwQ29tcGxldGUgbG9va3VwRW1wdHknLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB3aW5kb3cubG9ja1N1Ym1pdCA9IGZhbHNlO1xyXG4gICAgZm9ybS5maW5kKCdpbnB1dC5zdWJtaXQtYnV0dG9uJykucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcclxuXHJcbiAgICB2YXIgc3RvcERpc2FibGVkQ2hlY2sgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgY2xlYXJJbnRlcnZhbChjaGVja0ZvckRpc2FibGVkU3VibWl0KTtcclxuICAgIH0sIDEyMDAwMCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbnZhciB1c2VFeGlzdGluZyA9IGZhbHNlO1xyXG5cclxuZnVuY3Rpb24gZWxxY2hlY2tTaGFyZWRFbWFpbHMoZmllbGQpIHtcclxuICB2YXIgdGhpc0Zvcm0gPSBmaWVsZC5wYXJlbnRzKCdmb3JtJyk7XHJcbiAgY29uc29sZS5sb2codGhpc0Zvcm0pO1xyXG5cclxuICBpZiAoIWZpZWxkLmhhc0NsYXNzKCdMVl9pbnZhbGlkX2ZpZWxkJykgJiYgZmllbGQudmFsKCkudHJpbSgpICE9PSAnJykge1xyXG4gICAgdmFyIGRhdGFTdG9yZTtcclxuXHJcbiAgICBpZiAoZmllbGQuYXR0cignbmFtZScpID09PSAnYWx0RW1haWxBZGRyZXNzJykge1xyXG4gICAgICAvLyB3aW5kb3cuYWx0RWxxVXNlckRhdGEgPSB7fTtcclxuICAgICAgd2luZG93LmFsdEVscVVzZXJEYXRhID0gd2luZG93LmVscVVzZXJEYXRhO1xyXG4gICAgICBkYXRhU3RvcmUgPSB3aW5kb3cuYWx0RWxxVXNlckRhdGE7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkYXRhU3RvcmUgPSB3aW5kb3cuZWxxVXNlckRhdGE7XHJcbiAgICB9XHJcbiAgICBkYXRhU3RvcmUuZW1haWwgPSBmaWVsZC52YWwoKS50cmltKCk7XHJcbiAgICBmaWVsZC5hZGRDbGFzcygnc2VhcmNoaW5nIGRpc2FibGVkJyk7XHJcbiAgICBmaWVsZC5hdHRyKCdkaXNhYmxlZCcsICd0cnVlJyk7XHJcbiAgICBkb0Vsb3F1YUxvb2t1cCh0aGlzRm9ybSk7XHJcbiAgICBzaG93TWluaUxvYWRlcihmaWVsZCk7XHJcblxyXG4gICAgLy8gaWYgZW1haWwgaXMgZm91bmQgaW4gRWxvcXVhIGxvb2t1cFxyXG4gICAgJChkb2N1bWVudCkub24oJ2xvb2t1cENvbXBsZXRlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBjbGVhclRpbWVvdXQobm9Vc2VyRm91bmRUaW1lb3V0KTtcclxuICAgICAgaGlkZU1pbmlMb2FkZXIoKTtcclxuICAgICAgZmllbGQucmVtb3ZlQ2xhc3MoJ3NlYXJjaGluZyBkaXNhYmxlZCcpO1xyXG4gICAgICBmaWVsZC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xyXG4gICAgICB2YXIgZW1haWxFeGlzdHM7XHJcblxyXG4gICAgICBpZiAoZGF0YVN0b3JlLmNvbnRhY3RJRCAhPT0gdW5kZWZpbmVkICYmIGRhdGFTdG9yZS5jb250YWN0SUQgIT09IG51bGwgJiYgZGF0YVN0b3JlLmNvbnRhY3RJRC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgZW1haWxFeGlzdHMgPSB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVtYWlsRXhpc3RzID0gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChlbWFpbEV4aXN0cykge1xyXG4gICAgICAgIHZhciBpbnB1dEZpcnN0TmFtZSA9IHRoaXNGb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJmaXJzdE5hbWVcIl0nKS52YWwoKS50cmltKCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB2YXIgaW5wdXRMYXN0TmFtZSA9IHRoaXNGb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJsYXN0TmFtZVwiXScpLnZhbCgpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgICAgICAvLyB1c2VyIGVtYWlsIGV4aXN0cyBidXQgZGF0YSBkb2VzIG5vdCBtYXRjaFxyXG4gICAgICAgIGlmIChpbnB1dEZpcnN0TmFtZSAhPT0gZGF0YVN0b3JlLmZpcnN0TmFtZS50b0xvd2VyQ2FzZSgpIHx8IGlucHV0TGFzdE5hbWUgIT09IGRhdGFTdG9yZS5sYXN0TmFtZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAvLyBJZiB0aGlzIGlzIGZpcnN0IGxvb2t1cCBvciBcInVzZSBleGlzdGluZ1wiIGNoZWNrYm94IGlzIG5vdCBhbHJlYWR5IGNoZWNrZWQsIGRpc2FibGUgZW1haWwgZmllbGQgYW5kIGJsb2NrIGN1c3RvbSB2YWxpZGF0aW9uXHJcbiAgICAgICAgICBpZiAoIXVzZUV4aXN0aW5nKSB7XHJcbiAgICAgICAgICAgIHNob3dMRkdFcnJvck1zZyhmaWVsZCwgJycpO1xyXG4gICAgICAgICAgICB2YXIgaW5wdXRFbWFpbCA9IHRoaXNGb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJlbWFpbEFkZHJlc3NcIl0nKTtcclxuICAgICAgICAgICAgaW5wdXRFbWFpbC5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgaW5wdXRFbWFpbC5hdHRyKCdkaXNhYmxlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdGhpc0Zvcm0uZmluZCgnaW5wdXRbbmFtZT1cInNoYXJlZF9mbGFnXCJdJykudmFsKCcxJyk7XHJcbiAgICAgICAgICBpZiAodGhpc0Zvcm0uZmluZCgnaW5wdXRbbmFtZT1cInNoYXJlZF9lbWFpbFwiXScpLnZhbCgpLnRyaW0oKSA9PT0gJycpIHtcclxuICAgICAgICAgICAgdGhpc0Zvcm0uZmluZCgnaW5wdXRbbmFtZT1cInNoYXJlZF9lbWFpbFwiXScpLnZhbChkYXRhU3RvcmUuZW1haWwpO1xyXG4gICAgICAgICAgICB0aGlzRm9ybS5maW5kKCdpbnB1dFtuYW1lPVwic2hhcmVkX2ZpcnN0X25hbWVcIl0nKS52YWwoZGF0YVN0b3JlLmZpcnN0TmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXNGb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJzaGFyZWRfbGFzdF9uYW1lXCJdJykudmFsKGRhdGFTdG9yZS5sYXN0TmFtZSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKHRoaXNGb3JtLmZpbmQoJ2RpdiNzaGFyZWRFbWFpbE92ZXJsYXknKVswXSkge1xyXG4gICAgICAgICAgICB0aGlzRm9ybS5maW5kKCcjc2hhcmVkRW1haWxPdmVybGF5Jykuc2hvdygpO1xyXG4gICAgICAgICAgICB0aGlzRm9ybS5maW5kKCcjc2hhcmVkRW1haWxPdmVybGF5IGgzJykuc2hvdygpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaW5wdXRFbWFpbC5jc3MoJ21hcmdpbi1ib3R0b20nLCAnMHB4Jyk7XHJcbiAgICAgICAgICAgIHBvcFNoYXJlZEVtYWlsT3ZlcmxheSh0aGlzRm9ybSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzRm9ybS5maW5kKCcuY3VycmVudEVtYWlsJykuaHRtbChmaWVsZC52YWwoKSk7XHJcbiAgICAgICAgICBpZiAoZmllbGQuYXR0cignbmFtZScpID09PSAnYWx0RW1haWxBZGRyZXNzJykge1xyXG4gICAgICAgICAgICB0aGlzRm9ybS5maW5kKCdkaXYjc2hhcmVkRW1haWxPdmVybGF5IGgzIHNwYW4ud2FybmluZy1tc2cnKS50ZXh0KCdBTFRFUk5BVEUgZW1haWwgYWxzbyBleGlzdHMuJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIHVzZXIgZGF0YSBtYXRjaGVzXHJcbiAgICAgICAgICBoaWRlTEZHRXJyb3JNc2coZmllbGQpO1xyXG4gICAgICAgICAgaWYgKHRoaXNGb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJzaGFyZWRfZmxhZ1wiXScpLnZhbCgpID09PSAnJykge1xyXG4gICAgICAgICAgICB0aGlzRm9ybS5maW5kKCdpbnB1dFtuYW1lPVwic2hhcmVkX2ZsYWdcIl0nKS52YWwoJzAnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXNGb3JtLmZpbmQoJyNzaGFyZWRFbWFpbE92ZXJsYXkgaDMnKS5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBpZiBlbWFpbCBpcyBub3QgZm91bmRcclxuICAgIHZhciBub1VzZXJGb3VuZFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgJChkb2N1bWVudCkudHJpZ2dlcignbG9va3VwRW1wdHknKTtcclxuICAgICAgaGlkZU1pbmlMb2FkZXIoKTtcclxuICAgICAgaGlkZUxGR0Vycm9yTXNnKGZpZWxkKTtcclxuXHJcbiAgICAgIGlmICh0aGlzRm9ybS5maW5kKCdpbnB1dFtuYW1lPVwic2hhcmVkX2ZsYWdcIl0nKS52YWwoKSA9PT0gJycpIHtcclxuICAgICAgICB0aGlzRm9ybS5maW5kKCdpbnB1dFtuYW1lPVwic2hhcmVkX2ZsYWdcIl0nKS52YWwoJzAnKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZmllbGQuYXR0cignbmFtZScpID09PSAnYWx0RW1haWxBZGRyZXNzJykge1xyXG4gICAgICAgIGlmICghdXNlRXhpc3RpbmcpIHtcclxuICAgICAgICAgIHRoaXNGb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJlbWFpbEFkZHJlc3NcIl0nKS52YWwodGhpc0Zvcm0uZmluZCgnaW5wdXRbbmFtZT1cImFsdEVtYWlsQWRkcmVzc1wiXScpLnZhbCgpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gaGFuZGxlIGlmIHVzZXIgc3dpdGNoZWQgYmFjayB0byBcInVzZSBleGlzdGluZ1wiXHJcbiAgICAgICAgICBlbHFjaGVja1NoYXJlZEVtYWlscyh0aGlzRm9ybS5maW5kKCdpbnB1dFtuYW1lPVwiZW1haWxBZGRyZXNzXCJdJykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gd2luZG93LmVscVVzZXJEYXRhLmVtYWlsID0gJCgnaW5wdXRbbmFtZT1cImFsdEVtYWlsQWRkcmVzc1wiXScpLnZhbCgpO1xyXG4gICAgICAgIC8vIG1vdmUgb3V0IG9mIGNvbmRpdGlvbmFsPz9cclxuICAgICAgICBoaWRlTEZHRXJyb3JNc2codGhpc0Zvcm0uZmluZCgnaW5wdXRbbmFtZT1cImVtYWlsQWRkcmVzc1wiXScpKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzRm9ybS5maW5kKCdpbnB1dFtuYW1lPVwiZW1haWxBZGRyZXNzXCJdJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgIHRoaXNGb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJlbWFpbEFkZHJlc3NcIl0nKS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xyXG4gICAgICBmaWVsZC5yZW1vdmVDbGFzcygnc2VhcmNoaW5nJyk7XHJcbiAgICAgIHRoaXNGb3JtLmZpbmQoJyNzaGFyZWRFbWFpbE92ZXJsYXkgaDMnKS5oaWRlKCk7XHJcbiAgICB9LCA3MDAwKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBvcFNoYXJlZEVtYWlsT3ZlcmxheShmb3JtKSB7XHJcbiAgdmFyIGFsdEVtYWlsSW5wdXRIVE1MID0gJzxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJhbHRFbWFpbEFkZHJlc3NcIiB2YWx1ZT1cIlwiIHBsYWNlaG9sZGVyPVwiQWx0ZXJuYXRlIEVtYWlsIEFkZHJlc3MqXCI+JztcclxuICB2YXIgYWx0RW1haWxIZWFkZXJIVE1MID0gJzxoMz48c3BhbiBjbGFzcz1cIndhcm5pbmctbXNnXCI+VGhpcyBlbWFpbCBhbHJlYWR5IGV4aXN0cy48L3NwYW4+IFNlbGVjdCBhbiBvcHRpb24gdG8gcHJvY2VlZDo8L2gzPic7XHJcbiAgdmFyIGFsdEVtYWlsUmFkaW9IVE1MID0gJzxzZWN0aW9uIGNsYXNzPVwibGZnLXJhZGlvLWJveCB5ZXNub2Jsb2NrXCI+JztcclxuXHJcbiAgYWx0RW1haWxSYWRpb0hUTUwgKz0gJzxzZWN0aW9uPic7XHJcbiAgYWx0RW1haWxSYWRpb0hUTUwgKz0gJzxpbnB1dCB0eXBlPVwicmFkaW9cIiBjbGFzcz1cImNzcy1jaGVja2JveFwiIGlkPVwicmFkaW8xXCIgdmFsdWU9XCJZZXNcIiBuYW1lPVwiQWx0RW1haWxDaG9pY2VcIj4nO1xyXG4gIGFsdEVtYWlsUmFkaW9IVE1MXHJcbiAgICArPSAnPGxhYmVsIGNsYXNzPVwiY3NzLWxhYmVsIHJhZEdyb3VwMVwiIGZvcj1cInJhZGlvMVwiPjxkaXY+WWVzLCB0aGF0JmFwb3M7cyBtZSEgUGxlYXNlIGNvbnRpbnVlIHVzaW5nIDxzcGFuIGNsYXNzPVwiY3VycmVudEVtYWlsXCI+PC9zcGFuPjwvZGl2PjwvbGFiZWw+JztcclxuICBhbHRFbWFpbFJhZGlvSFRNTCArPSAnPC9zZWN0aW9uPic7XHJcbiAgYWx0RW1haWxSYWRpb0hUTUwgKz0gJzxzZWN0aW9uPic7XHJcbiAgYWx0RW1haWxSYWRpb0hUTUwgKz0gJzxpbnB1dCB0eXBlPVwicmFkaW9cIiBjbGFzcz1cImNzcy1jaGVja2JveFwiIGlkPVwicmFkaW8yXCIgdmFsdWU9XCJOb1wiIG5hbWU9XCJBbHRFbWFpbENob2ljZVwiPic7XHJcbiAgYWx0RW1haWxSYWRpb0hUTUwgKz0gJzxsYWJlbCBjbGFzcz1cImNzcy1sYWJlbCByYWRHcm91cDFcIiBmb3I9XCJyYWRpbzJcIj48ZGl2PlVzZSB0aGlzIGFsdGVybmF0ZSBlbWFpbCBhZGRyZXNzIC4uLjwvZGl2PjwvbGFiZWw+JztcclxuICBhbHRFbWFpbFJhZGlvSFRNTCArPSAnPC9zZWN0aW9uPic7XHJcbiAgYWx0RW1haWxSYWRpb0hUTUwgKz0gJzwvc2VjdGlvbj4nO1xyXG4gIHZhciBzaGFyZWRFbWFpbERpdkhUTUwgPSAnPGRpdiBpZD1cInNoYXJlZEVtYWlsT3ZlcmxheVwiIGNsYXNzPVwiZnJtLWIzXCI+PC9kaXY+JztcclxuXHJcbiAgZm9ybS5maW5kKCdpbnB1dFtuYW1lPVwiZW1haWxBZGRyZXNzXCJdJykucGFyZW50KCkuYXBwZW5kKGFsdEVtYWlsSW5wdXRIVE1MKTtcclxuICBmb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJhbHRFbWFpbEFkZHJlc3NcIl0nKS53cmFwKHNoYXJlZEVtYWlsRGl2SFRNTCk7XHJcbiAgZm9ybS5maW5kKCcjc2hhcmVkRW1haWxPdmVybGF5JykucHJlcGVuZChhbHRFbWFpbFJhZGlvSFRNTCk7XHJcbiAgZm9ybS5maW5kKCcjc2hhcmVkRW1haWxPdmVybGF5JykucHJlcGVuZChhbHRFbWFpbEhlYWRlckhUTUwpO1xyXG4gIGZvcm0ub24oJ2JsdXInLCAnaW5wdXRbbmFtZT1cImFsdEVtYWlsQWRkcmVzc1wiXScsIGZ1bmN0aW9uICgpIHtcclxuICAgIGVscWNoZWNrU2hhcmVkRW1haWxzKCQodGhpcykpO1xyXG4gIH0pO1xyXG5cclxuICAvLyB1c2UgZXhpc3RpbmcgZW1haWwgYWRkcmVzc1xyXG4gIGZvcm0uZmluZCgnI3NoYXJlZEVtYWlsT3ZlcmxheSBpbnB1dCNyYWRpbzEnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAkKHRoaXMpLm5leHQoJ2xhYmVsJykuY3NzKCdmb250LXdlaWdodCcsICc1MDAnKTtcclxuICAgIGZvcm0uZmluZCgnbGFiZWxbZm9yPVwicmFkaW8yXCJdJykuY3NzKCdmb250LXdlaWdodCcsICdub3JtYWwnKTtcclxuXHJcbiAgICBmb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJhbHRFbWFpbEFkZHJlc3NcIl0nKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgIGZvcm0uZmluZCgnaW5wdXRbbmFtZT1cImFsdEVtYWlsQWRkcmVzc1wiXScpLmF0dHIoJ2Rpc2FibGVkJywgJ3RydWUnKTtcclxuXHJcbiAgICBmb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJlbWFpbEFkZHJlc3NcIl0nKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgIGZvcm0uZmluZCgnaW5wdXRbbmFtZT1cImVtYWlsQWRkcmVzc1wiXScpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XHJcblxyXG4gICAgLy8gc3RvcmUgb25seSBmaXJzdCBjaGFsbGVuZ2FibGUgdXNlci1lbnRlcmVkIGVtYWlsXHJcbiAgICBpZiAoZm9ybS5maW5kKCdpbnB1dFtuYW1lPVwic2hhcmVkX2VtYWlsXCJdJykudmFsKCkgPT09ICcnKSB7XHJcbiAgICAgIGZvcm0uZmluZCgnaW5wdXRbbmFtZT1cInNoYXJlZF9lbWFpbFwiXScpLnZhbChmb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJlbWFpbEFkZHJlc3NcIl0nKS52YWwoKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoZm9ybS5maW5kKCdzcGFuLmN1cnJlbnRFbWFpbCcpLnRleHQoKSAhPT0gJycpIHtcclxuICAgICAgZm9ybS5maW5kKCdpbnB1dFtuYW1lPVwiZW1haWxBZGRyZXNzXCJdJykudmFsKGZvcm0uZmluZCgnc3Bhbi5jdXJyZW50RW1haWwnKS50ZXh0KCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHVzZUV4aXN0aW5nID0gdHJ1ZTtcclxuICAgIGhpZGVMRkdFcnJvck1zZyhmb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJlbWFpbEFkZHJlc3NcIl0nKSk7XHJcbiAgICBoaWRlTEZHRXJyb3JNc2coZm9ybS5maW5kKCdpbnB1dFtuYW1lPVwiYWx0RW1haWxBZGRyZXNzXCJdJykpO1xyXG4gICAgZm9ybS5maW5kKCdpbnB1dC5zdWJtaXQtYnV0dG9uJykucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcclxuICB9KTtcclxuXHJcbiAgLy8gdXNlIGFsdGVybmF0ZSBlbWFpbCBhZGRyZXNzXHJcbiAgZm9ybS5maW5kKCcjc2hhcmVkRW1haWxPdmVybGF5IGlucHV0I3JhZGlvMicpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICQodGhpcykubmV4dCgnbGFiZWwnKS5jc3MoJ2ZvbnQtd2VpZ2h0JywgJzUwMCcpO1xyXG4gICAgZm9ybS5maW5kKCdsYWJlbFtmb3I9XCJyYWRpbzFcIl0nKS5jc3MoJ2ZvbnQtd2VpZ2h0JywgJ25vcm1hbCcpO1xyXG5cclxuICAgIGZvcm0uZmluZCgnaW5wdXRbbmFtZT1cImFsdEVtYWlsQWRkcmVzc1wiXScpLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgZm9ybS5maW5kKCdpbnB1dFtuYW1lPVwiYWx0RW1haWxBZGRyZXNzXCJdJykucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcclxuXHJcbiAgICBmb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJlbWFpbEFkZHJlc3NcIl0nKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgIGZvcm0uZmluZCgnaW5wdXRbbmFtZT1cImVtYWlsQWRkcmVzc1wiXScpLmF0dHIoJ2Rpc2FibGVkJywgJ3RydWUnKTtcclxuXHJcbiAgICB1c2VFeGlzdGluZyA9IGZhbHNlO1xyXG4gICAgc2hvd0xGR0Vycm9yTXNnKGZvcm0uZmluZCgnaW5wdXRbbmFtZT1cImVtYWlsQWRkcmVzc1wiXScpLCAnJyk7XHJcbiAgICBlbHFjaGVja1NoYXJlZEVtYWlscyhmb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJhbHRFbWFpbEFkZHJlc3NcIl0nKSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrUmVjYXB0Y2hhKGZvcm0pIHtcclxuICBpZiAod2luZG93LmVscVJlY2FwdGNoYUVuYWJsZWQpIHtcclxuICAgIC8vIGNoZWNrIGNsaWVudC1zaWRlXHJcbiAgICB2YXIgZWxxUmVjYXB0Y2hhVmFsID0gJyc7XHJcbiAgICB2YXIgbGFzdFJlY2FwdGNoYVZhbCA9ICcnO1xyXG5cclxuICAgIGZvcm0uZmluZCgnLmctcmVjYXB0Y2hhLXJlc3BvbnNlJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmICgkKHRoaXMpLnZhbCgpICE9PSB1bmRlZmluZWQgJiYgJCh0aGlzKS52YWwoKSAhPT0gbnVsbCAmJiAkKHRoaXMpLnZhbCgpICE9PSAnJykge1xyXG4gICAgICAgIGVscVJlY2FwdGNoYVZhbCA9ICQodGhpcykudmFsKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChzZXNzaW9uU3RvcmFnZS5lbHFSZWNhcHRjaGEgIT09IHVuZGVmaW5lZCAmJiBzZXNzaW9uU3RvcmFnZS5lbHFSZWNhcHRjaGEgIT09IG51bGwpIHtcclxuICAgICAgbGFzdFJlY2FwdGNoYVZhbCA9IHNlc3Npb25TdG9yYWdlLmVscVJlY2FwdGNoYTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZWxxUmVjYXB0Y2hhVmFsLmxlbmd0aCA+IDEwMCkge1xyXG4gICAgICBpZiAoZWxxUmVjYXB0Y2hhVmFsICE9PSBsYXN0UmVjYXB0Y2hhVmFsKSB7XHJcbiAgICAgICAgLyoga2ljayBvZmYgc2VydmVyLXNpZGUgdmFsaWRhdGlvbiAqL1xyXG4gICAgICAgIHZhciByZUNhcHRjaGFEYXRhID0ge1xyXG4gICAgICAgICAgJ1NFUlZJQ0VfSUQnOiAnSU5UX0NBUFRDSEFfVkVSSUZZX1JFQ0FQVENIQScsXHJcbiAgICAgICAgICAnQ0FQVENIQSc6IGVscVJlY2FwdGNoYVZhbFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vKiogdGhpcyB3aWxsIGJlIGNvbnRpbmdlbnQgdXBvbiBmb3JtIG1vZGUgKiovXHJcbiAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlclNob3coKTtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgJ3VybCc6ICcvcGJsLWdhdGV3YXktc2VydmljZS1hcHAvcmVzdC9wYmwtZ2F0ZXdheS9nYXRld2F5RGF0YScsXHJcbiAgICAgICAgICAndHlwZSc6ICdQT1NUJyxcclxuICAgICAgICAgICdkYXRhJzogSlNPTi5zdHJpbmdpZnkocmVDYXB0Y2hhRGF0YSksXHJcbiAgICAgICAgICAnZGF0YVR5cGUnOiAnanNvbicsXHJcbiAgICAgICAgICAnY29udGVudFR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAnYXN5bmMnOiBmYWxzZVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAuZG9uZShmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5zdGF0dXMgPT09ICdTVUNDRVNTJykge1xyXG4gICAgICAgICAgICAgIGlmIChkYXRhLmNhcHRjaGFTdGF0dXMgPT09ICdWQUxJRCcpIHtcclxuICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XHJcbiAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdlbHFSZWNhcHRjaGEnLCBlbHFSZWNhcHRjaGFWYWwpO1xyXG4gICAgICAgICAgICAgICAgc2V0RWxxQ29tcGxldGlvbihmb3JtKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gZGlkIG5vdCBwYXNzIHNlcnZlci1zaWRlIHZhbGlkYXRpb25cclxuICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XHJcbiAgICAgICAgICAgICAgICBmb3JtLmZpbmQoJy5nLXJlY2FwdGNoYScpLmNzcygnbWFyZ2luLWJvdHRvbScsICcwJyk7XHJcbiAgICAgICAgICAgICAgICBmb3JtLmZpbmQoJ2Rpdi5nci1lcnJvcicpLnNob3coKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgLy8gZmFpbGVkIG9uIHNlcnZlci1zaWRlIHZhbGlkYXRpb25cclxuICAgICAgICAgICAgICBmb3JtLmZpbmQoJ2Rpdi5nci1lcnJvcicpLmh0bWwoZGF0YS5lcnJvckRlc2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICBmb3JtLmZpbmQoJy5nLXJlY2FwdGNoYScpLmNzcygnbWFyZ2luLWJvdHRvbScsICcwJyk7XHJcbiAgICAgICAgICAgICAgZm9ybS5maW5kKCdkaXYuZ3ItZXJyb3InKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2V0RWxxQ29tcGxldGlvbihmb3JtKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gZGlkIG5vdCBwYXNzIGNsaWVudC1zaWRlIHZhbGlkYXRpb25cclxuICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICAgZm9ybS5maW5kKCcuZy1yZWNhcHRjaGEnKS5jc3MoJ21hcmdpbi1ib3R0b20nLCAnMCcpO1xyXG4gICAgICBmb3JtLmZpbmQoJ2Rpdi5nci1lcnJvcicpLnNob3coKTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgc2V0RWxxQ29tcGxldGlvbihmb3JtKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRpc2FibGVIVE1MU3VibWl0KGZvcm0pIHtcclxuICBpZiAoZm9ybS5hdHRyKCdvbnN1Ym1pdCcpLmluZGV4T2YoJ3JldHVybiBoYW5kbGVGb3JtU3VibWl0KHRoaXMpJykgPiAtMSkge1xyXG4gICAgZm9ybS5hdHRyKCdvbnN1Ym1pdCcsIGZvcm0uYXR0cignb25zdWJtaXQnKS5yZXBsYWNlKCdyZXR1cm4gaGFuZGxlRm9ybVN1Ym1pdCh0aGlzKScsICdyZXR1cm4gZmFsc2UnKSk7XHJcbiAgfVxyXG4gIGlmIChmb3JtLmF0dHIoJ29uc3VibWl0JykuaW5kZXhPZigncmV0dXJuIHRydWUnKSA+IC0xKSB7XHJcbiAgICBmb3JtLmF0dHIoJ29uc3VibWl0JywgZm9ybS5hdHRyKCdvbnN1Ym1pdCcpLnJlcGxhY2UoJ3JldHVybiB0cnVlJywgJ3JldHVybiBmYWxzZScpKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVscUFsbG93U3VibWl0KGZvcm0pIHtcclxuICBkaXNhYmxlSFRNTFN1Ym1pdChmb3JtKTtcclxuICAkKCdmb3JtLmVscS1mb3JtIGlucHV0W3R5cGU9dGV4dF0sIGZvcm0uZWxxLWZvcm0gdGV4dGFyZWEnKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKCQodGhpcykudmFsKCkudHJpbSgpID09PSAnJykge1xyXG4gICAgICAkKHRoaXMpLmJsdXIoKTtcclxuICAgICAgY29uc29sZS5sb2coJCh0aGlzKS52YWwoKSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgJCgnZm9ybS5lbHEtZm9ybSBzZWxlY3QnKS5jaGFuZ2UoKTtcclxuXHJcbiAgaWYgKHdpbmRvdy5jdXN0b21WYWwpIHtcclxuICAgIGNvbnNvbGUubG9nKCdjdXN0b21WYWwgdHJpZ2dlcmVkJyk7XHJcblxyXG4gICAgaWYgKGZvcm0uZmluZCgnc3Bhbi5MVl9pbnZhbGlkJylbMF0pIHtcclxuICAgICAgLy9kaXNhYmxlSFRNTFN1Ym1pdChmb3JtKTtcclxuICAgICAgY29uc29sZS5sb2coJ3ZhbGlkYXRpb24gZXJyb3IgZm91bmQ6IHN1Ym1pdCBkaXNhYmxlZCcpO1xyXG5cclxuICAgIH0gZWxzZSBpZiAod2luZG93LmVscVJlY2FwdGNoYUVuYWJsZWQpIHtcclxuICAgICAgLy9kaXNhYmxlSFRNTFN1Ym1pdChmb3JtKTtcclxuICAgICAgY2hlY2tSZWNhcHRjaGEoZm9ybSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdubyB2YWxpZGF0aW9uIGVycm9ycy9yZWNhcHRjaGEgZW5hYmxlZDogc3VibWl0IGRpc2FibGVkLCByZWNhcHRjaGEgY2hlY2tlZCcpO1xyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vZm9ybS5hdHRyKCdvbnN1Ym1pdCcsIGZvcm0uYXR0cignb25zdWJtaXQnKS5yZXBsYWNlKCdyZXR1cm4gZmFsc2UnLCAncmV0dXJuIHRydWUnKSk7XHJcbiAgICAgIHdpbmRvdy5lbHFVc2VyRGF0YS5lbWFpbCA9IGZvcm0uZmluZCgnaW5wdXRbbmFtZT1cXCdlbWFpbEFkZHJlc3NcXCddJykudmFsKCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdubyB2YWxpZGF0aW9uIGVycm9ycy9yZWNhcHRjaGEgZGlzYWJsZWQ6IHN1Ym1pdCBkaXNhYmxlZCwgcmVjYXB0Y2hhIGNoZWNrZWQnKTtcclxuXHJcbiAgICAgIHNldEVscUNvbXBsZXRpb24oZm9ybSk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmICghZm9ybS5maW5kKCdzcGFuLkxWX2ludmFsaWQnKVswXSkge1xyXG4gICAgY29uc29sZS5sb2coJ25vIGN1c3RvbVZhbCB0cmlnZ2VyZWQvbm8gdmFsaWRhdGlvbiBlcnJvcnM6IHN1Ym1pdCBkaXNhYmxlZCwgcmVjYXB0Y2hhIGNoZWNrZWQnKTtcclxuXHJcbiAgICAvLyB0cmlnZ2VyIGZpZWxkIHZhbGlkYXRpb25zXHJcbiAgICAvKnZhciBmaXJzdE5hbWVJbnB1dCA9IGZvcm0uZmluZCgnaW5wdXRbbmFtZT1cImZpcnN0TmFtZVwiXScpO1xyXG4gICAgdmFyIGxhc3ROYW1lSW5wdXQgPSBmb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJsYXN0TmFtZVwiXScpO1xyXG4gICAgdmFyIGVtYWlsSW5wdXQgPSBmb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJlbWFpbEFkZHJlc3NcIl0nKTtcclxuICAgIHZhciBjb21wYW55SW5wdXQgPSBmb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJjb21wYW55XCJdJyk7Ki9cclxuXHJcbiAgICAvKmlmIChmaXJzdE5hbWVJbnB1dC52YWwoKSAhPSBudWxsKSB7XHJcbiAgICAgIGlmIChmaXJzdE5hbWVJbnB1dC52YWwoKS50cmltKCkgPT09ICcnKSB7XHJcbiAgICAgICAgZmlyc3ROYW1lSW5wdXQuYmx1cigpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAobGFzdE5hbWVJbnB1dC52YWwoKSAhPSBudWxsKSB7XHJcbiAgICAgIGlmIChsYXN0TmFtZUlucHV0LnZhbCgpLnRyaW0oKSA9PT0gJycpIHtcclxuICAgICAgICBsYXN0TmFtZUlucHV0LmJsdXIoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGVtYWlsSW5wdXQudmFsKCkgIT0gbnVsbCkge1xyXG4gICAgICBpZiAoZW1haWxJbnB1dC52YWwoKS50cmltKCkgPT09ICcnKSB7XHJcbiAgICAgICAgZW1haWxJbnB1dC5ibHVyKCk7XHJcbiAgICAgIH1cclxuICAgIH0qL1xyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNoZWNrUmVjYXB0Y2hhKGZvcm0pO1xyXG4gICAgfSwgMzAwKTtcclxuICB9XHJcblxyXG4gIHZhciBjaGVja0ZvckNhcHRjaGFFcnJvciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBjYXB0Y2hhUmVzID0gZm9ybS5maW5kKCcuZy1yZWNhcHRjaGEtcmVzcG9uc2UnKS52YWwoKTtcclxuXHJcbiAgICBpZiAoY2FwdGNoYVJlcyAhPT0gdW5kZWZpbmVkICYmIGNhcHRjaGFSZXMgIT09IG51bGwgJiYgY2FwdGNoYVJlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGZvcm0uZmluZCgnLmctcmVjYXB0Y2hhJykuY3NzKCdtYXJnaW4tYm90dG9tJywgJzIwcHgnKTtcclxuICAgICAgZm9ybS5maW5kKCcuZ3ItZXJyb3InKS5oaWRlKCk7XHJcbiAgICAgIGNsZWFySW50ZXJ2YWwoY2hlY2tGb3JDYXB0Y2hhRXJyb3IpO1xyXG4gICAgfVxyXG4gIH0sIDEwMDApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRFbHFDb21wbGV0aW9uKGZvcm0pIHtcclxuICBjb25zb2xlLmxvZygnc2V0RWxxQ29tcGxldGlvbiB0cmlnZ2VyZWQnKTtcclxuXHJcbiAgdmFyIGVtYWlsID0gZm9ybS5maW5kKCdpbnB1dFtuYW1lPVwiYWx0RW1haWxBZGRyZXNzXCJdJykudmFsKCk7XHJcblxyXG4gIGlmICghdXNlRXhpc3RpbmcgJiYgZW1haWwgIT09IHVuZGVmaW5lZCAmJiBlbWFpbCAhPT0gbnVsbCAmJiBlbWFpbCAhPT0gJycpIHtcclxuICAgIHdpbmRvdy5lbHFVc2VyRGF0YSA9IHdpbmRvdy5hbHRFbHFVc2VyRGF0YTtcclxuICB9XHJcblxyXG4gIGlmICghZm9ybS5maW5kKCdzcGFuLkxWX2ludmFsaWQnKVswXSkge1xyXG4gICAgdmFyIGlzTGljZW5zZWQgPSBmYWxzZTtcclxuXHJcbiAgICBpZiAoZm9ybS5maW5kKCdzZWxlY3RbbmFtZT1cImxpY2Vuc2VkXCJdJylbMF0pIHtcclxuICAgICAgaWYgKGZvcm0uZmluZCgnc2VsZWN0W25hbWU9XCJsaWNlbnNlZFwiXScpLnZhbCgpLnRvTG93ZXJDYXNlKCkgPT09ICd5ZXMnKSB7XHJcbiAgICAgICAgaXNMaWNlbnNlZCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChmb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJsaWNlbnNlZFwiXScpWzBdKSB7XHJcbiAgICAgIHZhciBsaWNlbnNlQ2hrID0gZm9ybS5maW5kKCdpbnB1dFtuYW1lPVwibGljZW5zZWRcIl06Y2hlY2tlZCcpLnZhbCgpO1xyXG5cclxuICAgICAgaWYgKGxpY2Vuc2VDaGsgIT09IHVuZGVmaW5lZCAmJiBsaWNlbnNlQ2hrICE9PSBudWxsICYmIGxpY2Vuc2VDaGsudG9Mb3dlckNhc2UoKSA9PT0gJ29uJykge1xyXG4gICAgICAgIGlzTGljZW5zZWQgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzTGljZW5zZWQpIHtcclxuICAgICAgaWYgKHdpbmRvdy5pc0xvZ2luRm9ybSkge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdlbHFfJyArIGZvcm0uYXR0cignbmFtZScpICsgJ19yZWRpcmVjdCcsICcxJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2VscV9jb21wbGV0ZScsICcxJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHdpbmRvdy5lbHFVc2VyRGF0YS5lbWFpbCA9IGZvcm0uZmluZCgnaW5wdXRbbmFtZT1cXCdlbWFpbEFkZHJlc3NcXCddJykudmFsKCk7XHJcbiAgICAgIHdpbmRvdy5lbHFVc2VyRGF0YS5lbnRlcmVkRmlyc3ROYW1lID0gZm9ybS5maW5kKCdpbnB1dFtuYW1lPVwiZmlyc3ROYW1lXCJdJykudmFsKCk7XHJcbiAgICAgIHdpbmRvdy5lbHFVc2VyRGF0YS5lbnRlcmVkTGFzdE5hbWUgPSBmb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJsYXN0TmFtZVwiXScpLnZhbCgpO1xyXG5cclxuICAgICAgLy8gcmVjb25jaWxlIHNoYXJlZCB1c2VyIGRhdGFcclxuICAgICAgaWYgKHVzZUV4aXN0aW5nKSB7XHJcbiAgICAgICAgaWYgKGZvcm0uZmluZCgnaW5wdXRbbmFtZT1cImZpcnN0TmFtZVwiXScpLnZhbCgpLnRyaW0oKS50b0xvd2VyQ2FzZSgpICE9PSB3aW5kb3cuZWxxVXNlckRhdGEuZmlyc3ROYW1lLnRvTG93ZXJDYXNlKCkgfHwgZm9ybS5maW5kKFxyXG4gICAgICAgICAgJ2lucHV0W25hbWU9XCJsYXN0TmFtZVwiXScpLnZhbCgpLnRyaW0oKS50b0xvd2VyQ2FzZSgpICE9PSB3aW5kb3cuZWxxVXNlckRhdGEubGFzdE5hbWUudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgZm9ybS5maW5kKCdpbnB1dFtuYW1lPVwiZmlyc3ROYW1lXCJdJykudmFsKHdpbmRvdy5lbHFVc2VyRGF0YS5maXJzdE5hbWUpO1xyXG4gICAgICAgICAgZm9ybS5maW5kKCdpbnB1dFtuYW1lPVwibGFzdE5hbWVcIl0nKS52YWwod2luZG93LmVscVVzZXJEYXRhLmxhc3ROYW1lKTtcclxuICAgICAgICAgIGZvcm0uZmluZCgnaW5wdXRbbmFtZT1cImNvbXBhbnlcIl0nKS52YWwod2luZG93LmVscVVzZXJEYXRhLmNvbXBhbnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJzaGFyZWRfZmxhZ1wiXScpLnZhbCgnMCcpO1xyXG4gICAgICAgIGZvcm0uZmluZCgnaW5wdXRbbmFtZT1cInNoYXJlZF9lbWFpbFwiXScpLnZhbCgnJyk7XHJcbiAgICAgICAgZm9ybS5maW5kKCdpbnB1dFtuYW1lPVwic2hhcmVkX2ZpcnN0X25hbWVcIl0nKS52YWwoJycpO1xyXG4gICAgICAgIGZvcm0uZmluZCgnaW5wdXRbbmFtZT1cInNoYXJlZF9sYXN0X25hbWVcIl0nKS52YWwoJycpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAod2luZG93LmVscVVzZXJEYXRhLmNvbnRhY3RJRCA9PT0gbnVsbCB8fCB3aW5kb3cuZWxxVXNlckRhdGEuY29udGFjdElEID09PSAnJykge1xyXG4gICAgICAgIHdpbmRvdy5lbHFVc2VyRGF0YS5maXJzdE5hbWUgPSBmb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJmaXJzdE5hbWVcIl0nKS52YWwoKTtcclxuICAgICAgICB3aW5kb3cuZWxxVXNlckRhdGEubGFzdE5hbWUgPSBmb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJsYXN0TmFtZVwiXScpLnZhbCgpO1xyXG4gICAgICAgIHdpbmRvdy5lbHFVc2VyRGF0YS5jb21wYW55ID0gZm9ybS5maW5kKCdpbnB1dFtuYW1lPVwiY29tcGFueVwiXScpLnZhbCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdlbHFVc2VyRGF0YScsIEpTT04uc3RyaW5naWZ5KHdpbmRvdy5lbHFVc2VyRGF0YSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vICQoJ2lucHV0LnN1Ym1pdC1idXR0b24nKS50cmlnZ2VyKFwiYW5hbHl0aWNzLmNsaWNrXCIpO1xyXG4gICAgLyogdmFyIHN1Ym1pdEVsZSA9ICQoJ2lucHV0LnN1Ym1pdC1idXR0b24nKTtcclxuXHJcbiAgICAgc3VibWl0RWxlLmF0dHIoJ2RhdGEtZXZlbnRhY3Rpb24nLCAnZm9ybScpO1xyXG4gICAgc3VibWl0RWxlLmF0dHIoJ2RhdGEtZXZlbnRuYW1lJywgJCgnZm9ybS5lbHEtZm9ybScpLmF0dHIoJ25hbWUnKSk7XHJcbiAgICBzdWJtaXRFbGUuYXR0cignZGF0YS1ldmVudHR5cGUnLCAnZWxvcXVhJyk7XHJcbiAgICB1cGRhdGVBbmFseXRpY3Moc3VibWl0RWxlKTsqL1xyXG4gICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICdldmVudF9hY3Rpb24nOiAnZm9ybScsXHJcbiAgICAgICdldmVudF9uYW1lJzogZm9ybS5hdHRyKCduYW1lJyksXHJcbiAgICAgICdldmVudF90eXBlJzogJ2Vsb3F1YScsXHJcbiAgICAgICdldmVudF9zdGF0dXMnOiAnc3VibWl0J1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAodHlwZW9mIHV0YWcgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHV0YWcubGluayhkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZygnbG9ja1N1Ym1pdDonLHdpbmRvdy5sb2NrU3VibWl0KTtcclxuXHJcbiAgICBpZiAoIXdpbmRvdy5sb2NrU3VibWl0KSB7XHJcbiAgICAgICAgZm9ybVswXS5zdWJtaXQoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8qKiBPcmFjbGUgRGF0YSBMb29rdXAgKiovXHJcbmZ1bmN0aW9uIGRvRWxvcXVhTG9va3VwKGZvcm0pIHtcclxuICB2YXIgZGF0YVN0b3JlO1xyXG4gIHZhciBhbHRFbWFpbCA9ICQoZm9ybSkuZmluZCgnaW5wdXRbbmFtZT1cImFsdEVtYWlsQWRkcmVzc1wiXScpLnZhbCgpO1xyXG5cclxuICBpZiAoIXVzZUV4aXN0aW5nICYmIGFsdEVtYWlsICE9PSB1bmRlZmluZWQgJiYgYWx0RW1haWwgIT09IG51bGwgJiYgYWx0RW1haWwgIT09ICcnKSB7XHJcbiAgICBkYXRhU3RvcmUgPSB3aW5kb3cuYWx0RWxxVXNlckRhdGE7XHJcbiAgfSBlbHNlIHtcclxuICAgIGRhdGFTdG9yZSA9IHdpbmRvdy5lbHFVc2VyRGF0YTtcclxuICB9XHJcbiAgZGF0YVN0b3JlLmNvbnRhY3RJRCA9ICcnO1xyXG4gIGRhdGFTdG9yZS5maXJzdE5hbWUgPSAnJztcclxuICBkYXRhU3RvcmUubGFzdE5hbWUgPSAnJztcclxuICBkYXRhU3RvcmUuY29tcGFueSA9ICcnO1xyXG4gIGRhdGFTdG9yZS5sYXN0Q2FtcGFpZ24gPSAnJztcclxuXHJcbiAgd2luZG93Ll9lbHFRLnB1c2goWydlbHFEYXRhTG9va3VwJywgZXNjYXBlKHdpbmRvdy5lbHFMb29rdXBLZXkpLCAnPENfRW1haWxBZGRyZXNzPicgKyBkYXRhU3RvcmUuZW1haWwgKyAnPC9DX0VtYWlsQWRkcmVzcz4nXSk7XHJcbiAgJChkb2N1bWVudCkudHJpZ2dlcignbG9va3VwU3RhcnQnKTtcclxufVxyXG5cclxuLy8gVGhpcyBpcyBjYWxsZWQgYnkgRWxvcXVhIERhdGFMb29rdXAgQVBJXHJcbmZ1bmN0aW9uIFNldEVscUNvbnRlbnQoKSB7XHJcbiAgdmFyIGRhdGFTdG9yZTtcclxuICB2YXIgYWx0RW1haWwgPSB3aW5kb3cuY3VyckVscUZvcm0uZmluZCgnaW5wdXRbbmFtZT1cImFsdEVtYWlsQWRkcmVzc1wiXScpLnZhbCgpO1xyXG5cclxuICBpZiAoIXVzZUV4aXN0aW5nICYmIGFsdEVtYWlsICE9PSB1bmRlZmluZWQgJiYgYWx0RW1haWwgIT09IG51bGwgJiYgYWx0RW1haWwgIT09ICcnKSB7XHJcbiAgICBkYXRhU3RvcmUgPSB3aW5kb3cuYWx0RWxxVXNlckRhdGE7XHJcbiAgfSBlbHNlIHtcclxuICAgIGRhdGFTdG9yZSA9IHdpbmRvdy5lbHFVc2VyRGF0YTtcclxuICB9XHJcbiAgZGF0YVN0b3JlLmNvbnRhY3RJRCA9IEdldEVscUNvbnRlbnRQZXJzb25hbGl6YXRpb25WYWx1ZSgnQ29udGFjdElERXh0Jyk7XHJcblxyXG4gIC8vIGZvciBTaGFyZWQgRW1haWwgZmVhdHVyZVxyXG4gIGRhdGFTdG9yZS5maXJzdE5hbWUgPSBHZXRFbHFDb250ZW50UGVyc29uYWxpemF0aW9uVmFsdWUoJ0NfRmlyc3ROYW1lJyk7XHJcblxyXG4gIC8vIGZvciBTaGFyZWQgRW1haWwgZmVhdHVyZVxyXG4gIGRhdGFTdG9yZS5sYXN0TmFtZSA9IEdldEVscUNvbnRlbnRQZXJzb25hbGl6YXRpb25WYWx1ZSgnQ19MYXN0TmFtZScpO1xyXG5cclxuICAvLyBmb3IgU2hhcmVkIEVtYWlsIGZlYXR1cmVcclxuICBkYXRhU3RvcmUuY29tcGFueSA9IEdldEVscUNvbnRlbnRQZXJzb25hbGl6YXRpb25WYWx1ZSgnQ19Db21wYW55Jyk7XHJcblxyXG4gIC8vIGxhc3QgcmVjb3JkZWQgY2FtcGFpZ25cclxuICBkYXRhU3RvcmUubGFzdENhbXBhaWduID0gR2V0RWxxQ29udGVudFBlcnNvbmFsaXphdGlvblZhbHVlKCdDX3V0bV9jYW1wYWlnbjEnKTtcclxuXHJcbiAgJChkb2N1bWVudCkudHJpZ2dlcignbG9va3VwQ29tcGxldGUnKTtcclxuICBwYXNzRGF0YShkYXRhU3RvcmUpO1xyXG59XHJcblxyXG4vKiogRW5kOiBPcmFjbGUgRGF0YSBMb29rdXAgKiovXHJcblxyXG5mdW5jdGlvbiBwYXNzRGF0YSh1c2VyRGF0YSkge1xyXG4gIGlmICh1c2VyRGF0YS5jb250YWN0SUQgfHwgdXNlckRhdGEuY2FtcGFpZ24pIHtcclxuICAgIHZhciBwYXJhbVN0ciA9ICd1dG1fY2FtcGFpZ249JyArIHVzZXJEYXRhLmNhbXBhaWduICsgJyZlbHFpZD0nICsgdXNlckRhdGEuY29udGFjdElEO1xyXG5cclxuICAgIC8vIGlmIGxpbmtzIHRvIGJvdW5jZSBwYWdlIGFyZSBwcmVzZW50LCBhcHBlbmQgcXVlcnkgc3RyaW5nIHRvIGhyZWYgVVJMc1xyXG4gICAgdmFyIGJvdW5jZUxpbmtGb3VuZCA9IGZhbHNlO1xyXG5cclxuICAgICQoJ2EsIGJ1dHRvbicpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgbGlua1VybCA9IG51bGw7XHJcblxyXG4gICAgICBpZiAoJCh0aGlzKS5hdHRyKCdocmVmJykpIHtcclxuICAgICAgICBsaW5rVXJsID0gJCh0aGlzKS5hdHRyKCdocmVmJykudHJpbSgpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChsaW5rVXJsICYmIGxpbmtVcmwuaW5kZXhPZigncHVibGljL2JvdW5jZScpID4gLTEpIHtcclxuICAgICAgICB2YXIgcXVlcnlTdHI7XHJcblxyXG4gICAgICAgIGJvdW5jZUxpbmtGb3VuZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKGxpbmtVcmwuaW5kZXhPZignPycpID4gLTEpIHtcclxuICAgICAgICAgIHF1ZXJ5U3RyID0gJyYnICsgcGFyYW1TdHI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHF1ZXJ5U3RyID0gJz8nICsgcGFyYW1TdHI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICQodGhpcykuYXR0cignaHJlZicsICQodGhpcykuYXR0cignaHJlZicpICsgcXVlcnlTdHIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAocGFyc2VJbnQobG9jYWxTdG9yYWdlLmVscV9jb21wbGV0ZSkgPT09IDIgfHwgcGFyc2VJbnQobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2VscV8nICsgd2luZG93LmZvcm1OYW1lICsgJ19yZWRpcmVjdCcpKSA+IDApIHtcclxuICAgICAgaWYgKCFib3VuY2VMaW5rRm91bmQgJiYgbG9jYXRpb24uaHJlZi5pbmRleE9mKCdwdWJsaWMvYm91bmNlJykgPCAwKSB7XHJcbiAgICAgICAgdmFyIGVscURhdGFJbmZvID0ge1xyXG4gICAgICAgICAgJ3V0bV9jYW1wYWlnbl91ZG8nOiB1c2VyRGF0YS5jYW1wYWlnbixcclxuICAgICAgICAgICdlbHFpZF91ZG8nOiB1c2VyRGF0YS5jb250YWN0SURcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB1dGFnLmxpbmsoZWxxRGF0YUluZm8pO1xyXG4gICAgICAgICQoZG9jdW1lbnQpLnRyaWdnZXIoJ2V4dGVybmFsUmVkaXJlY3QnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd0xGR0Vycm9yTXNnKGZpZWxkLCBtc2cpIHtcclxuICB3aW5kb3cuY3VzdG9tVmFsID0gdHJ1ZTtcclxuICBmaWVsZC5hZGRDbGFzcygnTFZfaW52YWxpZF9maWVsZCcpO1xyXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgZmllbGQucmVtb3ZlQ2xhc3MoJ0xWX3ZhbGlkX2ZpZWxkJyk7XHJcblxyXG4gICAgaWYgKCFmaWVsZC5zaWJsaW5ncygnLkxGR192YWxpZGF0aW9uX21lc3NhZ2UnKVswXSAmJiAhZmllbGQuc2libGluZ3MoJy5MVl92YWxpZGF0aW9uX21lc3NhZ2UuTFZfaW52YWxpZCcpWzBdKSB7XHJcbiAgICAgIGZpZWxkLnBhcmVudCgpLmFwcGVuZCgnPHNwYW4gY2xhc3M9XCJMRkdfdmFsaWRhdGlvbl9tZXNzYWdlIExWX2ludmFsaWRcIj4nICsgbXNnICsgJzwvc3Bhbj4nKTtcclxuICAgICAgaWYgKG1zZyA9PT0gJycgfHwgbXNnID09PSBudWxsKSB7XHJcbiAgICAgICAgZmllbGQuc2libGluZ3MoJ3NwYW4uTEZHX3ZhbGlkYXRpb25fbWVzc2FnZScpLmFkZENsYXNzKCdlbXB0eScpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSwgMzAwKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGlkZUxGR0Vycm9yTXNnKGZpZWxkKSB7XHJcbiAgZmllbGQucmVtb3ZlQXR0cignc3R5bGUnKTtcclxuICBmaWVsZC5zaWJsaW5ncygnc3Bhbi5MRkdfdmFsaWRhdGlvbl9tZXNzYWdlJykucmVtb3ZlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dNaW5pTG9hZGVyKGZpZWxkKSB7XHJcbiAgJCgnI21pbmktcHJlbG9hZGVyJykuc2hvdygpO1xyXG4gIHZhciB0b3BQb3MgPSAkKGZpZWxkKS5vZmZzZXQoKS50b3AgKyAncHgnO1xyXG5cclxuICAkKCcjbWluaS1wcmVsb2FkZXInKS5jc3MoJ3RvcCcsIHRvcFBvcyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhpZGVNaW5pTG9hZGVyKCkge1xyXG4gICQoJyNtaW5pLXByZWxvYWRlcicpLmhpZGUoKTtcclxufVxyXG5cclxuLy8gYm91bmNlIHBhZ2UgZnVuY3Rpb25hbGl0eVxyXG5mdW5jdGlvbiBkb0JvdW5jZSgpIHtcclxuICBpZiAobG9jYXRpb24uc2VhcmNoLmluZGV4T2YoJ2Rlc3RfdXJsPScpID4gLTEpIHtcclxuICAgIC8vIHdhaXQgZm9yIHV0YWcgdG8gYmUgcG9wdWxhdGVkICh3LyB1cmwgcGFyYW1zKSwgdGhlbiByZWRpcmVjdFxyXG4gICAgdmFyIGNoZWNrRm9yVXRhZyA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKHV0YWcuZGF0YVsncXAuZGVzdF91cmwnXS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbChjaGVja0ZvclV0YWcpO1xyXG4gICAgICAgIGxvY2F0aW9uLmhyZWYgPSB1dGFnLmRhdGFbJ3FwLmRlc3RfdXJsJ107XHJcbiAgICAgIH1cclxuICAgIH0sIDUwMCk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gIC8vIHNldHVwIEVsb3F1YSB0cmFja2luZyBhbmQgbG9jYWwgZGF0YSBvYmplY3RzXHJcbiAgbGZnRWxxSW5pdCgpO1xyXG5cclxuICAvKipcclxuICAgKiogcGVyZm9ybSBFbG9xdWEgRGF0YUxvb2t1cCBmb3IgY29udGFjdCBpbmZvXHJcbiAgICoqIE9yYWNsZSBFbG9xdWEgRG9jdW1lbnRhdGlvbjpcclxuICAgKiogaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vY2xvdWQvbGF0ZXN0L21hcmtldGluZ2NzX2dzL09NQ0FBL2luZGV4Lmh0bWwjSGVscC9FbG9xdWFBc3luY2hyb25vdXNUcmFja2luZ1NjcmlwdHMvVGFza3MvRGF0YUxvb2t1cHMuaHRtP0hpZ2hsaWdodD1kYXRhJTIwbG9va3VwXHJcbiAgICoqL1xyXG4gIHZhciBfZWxxUVJlYWR5Q2hlY2sxID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHR5cGVvZiBfZWxxUS5wdXNoID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIHdpbmRvdy5fZWxxUSA9IF9lbHFRIHx8IFtdO1xyXG5cclxuICAgICAgLy8gc2V0IHRvIGNvbmZpZyBmb3Igbm9uLWZvcm0gY2FtcGFpZ25zPz9cclxuICAgICAgd2luZG93Ll9lbHFRLnB1c2goWydlbHFTZXRTaXRlSWQnLCB3aW5kb3cuZWxxVXNlckRhdGEuZWxxU2l0ZUlEXSk7XHJcbiAgICAgIHdpbmRvdy5fZWxxUS5wdXNoKFsnZWxxVXNlRmlyc3RQYXJ0eUNvb2tpZScsICdlbG9xdWEuY29tJ10pO1xyXG4gICAgICB3aW5kb3cuX2VscVEucHVzaChbJ2VscVRyYWNrUGFnZVZpZXcnXSk7XHJcbiAgICAgIGNsZWFySW50ZXJ2YWwoX2VscVFSZWFkeUNoZWNrMSk7XHJcbiAgICB9XHJcbiAgfSwgNTAwKTtcclxuXHJcbiAgLyogaGFuZGxlIGJvdW5jZSBwYWdlICovXHJcbiAgaWYgKGxvY2F0aW9uLmhyZWYuaW5kZXhPZignL3B1YmxpYy9ib3VuY2UnKSA+IC0xKSB7XHJcbiAgICBkb0JvdW5jZSgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvKiBoYW5kbGUgZm9ybS9yZWdpc3RyYXRpb24gcGFnZSAqL1xyXG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2Zvcm0uZWxxLWZvcm06bm90KFtuYW1lKj1cInNhZmFyaV9maXhcIl0pJylbMF0pIHtcclxuICAgICAgLy8gc3RvcmUgc2l0ZS9jYW1wYWlnbiBkYXRhIGZvciBEYXRhIExvb2t1cFxyXG4gICAgICB3aW5kb3cuZWxxVXNlckRhdGEuY2FtcGFpZ24gPSAkKCdpbnB1dFtuYW1lPVxcJ3V0bV9jYW1wYWlnblxcJ10nKS52YWwoKTtcclxuICAgICAgd2luZG93LmVscVVzZXJEYXRhLmVscVNpdGVJRCA9ICQoJ2lucHV0W25hbWU9XFwnZWxxU2l0ZUlkXFwnXScpLnZhbCgpO1xyXG4gICAgICBpZiAodHlwZW9mIGNhbXBhaWduUmVkaXJlY3Rpb25QYWdlVVJMICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGlmIChjYW1wYWlnblJlZGlyZWN0aW9uUGFnZVVSTCAhPT0gbnVsbCAmJiBjYW1wYWlnblJlZGlyZWN0aW9uUGFnZVVSTCAhPT0gJycpIHtcclxuICAgICAgICAgIHdpbmRvdy5lbHFVc2VyRGF0YS5jb25maXJtYXRpb25QYWdlID0gY2FtcGFpZ25SZWRpcmVjdGlvblBhZ2VVUkw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAod2luZG93LmlzTG9naW5Gb3JtKSB7XHJcbiAgICAgICAgaWYgKHBhcnNlSW50KGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdlbHFfJyArIHdpbmRvdy5mb3JtTmFtZSArICdfcmVkaXJlY3QnKSkgPCAxKSB7XHJcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZWxxVXNlckRhdGEnLCBKU09OLnN0cmluZ2lmeSh3aW5kb3cuZWxxVXNlckRhdGEpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2VscVVzZXJEYXRhJywgSlNPTi5zdHJpbmdpZnkod2luZG93LmVscVVzZXJEYXRhKSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHJlZGlyZWN0IGZvciBjb21wbGV0ZWQgdXNlcnNcclxuICAgICAgaWYgKCF3aW5kb3cuaXNMb2dpbkZvcm0pIHtcclxuICAgICAgICBpZiAobG9jYWxTdG9yYWdlLmVscV9jb21wbGV0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2FsU3RvcmFnZS5lbHFfY29tcGxldGUgIT09IG51bGwgJiYgbG9jYWxTdG9yYWdlLmVscV9jb21wbGV0ZSAhPT0gJycgJiYgcGFyc2VJbnQoXHJcbiAgICAgICAgICBsb2NhbFN0b3JhZ2UuZWxxX2NvbXBsZXRlKSA+IDEpIHtcclxuICAgICAgICAgIGlmICh0eXBlb2YgY2FtcGFpZ25SZWRpcmVjdGlvblBhZ2VVUkwgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSBjYW1wYWlnblJlZGlyZWN0aW9uUGFnZVVSTDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGlmIG5vdCByZWRpcmVjdGVkLCByZS1mb3JtYXQgdGhlIEVsb3F1YSBmb3JtXHJcbiAgICAgIGVscUZvcm1Gb3JtYXQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiBIYW5kbGUgY29uZmlybWF0aW9uIHBhZ2U6IHNldCBmbGFnIGFuZCBwZXJmb3JtIGRhdGEgbG9va3VwICovXHJcbiAgICBpZiAoIXdpbmRvdy5pc0xvZ2luRm9ybSkge1xyXG4gICAgICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2Zvcm0uZWxxLWZvcm0nKVswXSAmJiBsb2NhdGlvbi5ocmVmLmluZGV4T2Yod2luZG93LmVscVVzZXJEYXRhLmNvbmZpcm1hdGlvblBhZ2UpID4gLTEpIHtcclxuICAgICAgICBpZiAocGFyc2VJbnQobG9jYWxTdG9yYWdlLmVscV9jb21wbGV0ZSkgPT09IDEpIHtcclxuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdlbHFfY29tcGxldGUnLCAnMicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIGNvbmZpcm1hdGlvbiBvciBhbHRlcm5hdGUgdmlldy9wYWdlLCBnZXQgRWxvcXVhIHVzZXIgZGF0YVxyXG4gICAgaWYgKHBhcnNlSW50KGxvY2FsU3RvcmFnZS5lbHFfY29tcGxldGUpID09PSAyIHx8IHBhcnNlSW50KGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdlbHFfJyArIHdpbmRvdy5mb3JtTmFtZSArICdfcmVkaXJlY3QnKSkgPiAwKSB7XHJcbiAgICAgIGlmICh3aW5kb3cuZWxxVXNlckRhdGEuZWxxU2l0ZUlEICYmIHdpbmRvdy5lbHFVc2VyRGF0YS5lbWFpbCkge1xyXG4gICAgICAgIHZhciBfZWxxUVJlYWR5Q2hlY2syID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgaWYgKHR5cGVvZiBfZWxxUS5wdXNoID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGRvRWxvcXVhTG9va3VwKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0uZWxxLWZvcm0nKSk7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoX2VscVFSZWFkeUNoZWNrMik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSwgNTAwKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufSk7IiwiXG4oZnVuY3Rpb24oKSB7XG4gICAgYW5ndWxhci5tb2R1bGUoJ2N1c3RvbS1zbGlkZXInLCBbXSkuZGlyZWN0aXZlKCdjdXN0b21TbGlkZXInLCBbJyR3aW5kb3cnLCBmdW5jdGlvbigkd2luZG93KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAncmVzdHJpY3QnOiAnRScsXG4gICAgICAgICAgICAnc2NvcGUnICAgOiB7XG4gICAgICAgICAgICAgICAgJ2N1c3RvbVNsaWRlcic6ICc9Y3NNb2RlbCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnbGluayc6IGZ1bmN0aW9uIHBvc3RMaW5rKCRzY29wZSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5jdXN0b21TbGlkZXIudGlja3MgPSB7XG5cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICRzY29wZS5jdXN0b21TbGlkZXIubGVnZW5kcyA9IHtcblxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIG1pblZhbHVlLCBtYXhWYWx1ZSwgdmFsdWVEaWZmLCBtaW5SYW5nZSwgbWF4UmFuZ2UsIHZhbHVlLCByYW5nZURpZmY7XG5cblx0XHRcdFx0Ly8gU3RvcmluZyBhbGwgdGhlIGVsZW1lbnRzIHdoaWNoIHdlIHdpbGwgYmUgdXNpbmcgdG8gY2FsY3VsYXRlIHBvc2l0aW9ucyBkdXJpbmcgd2luZG93IHJlc2l6ZSBldmVudFxuICAgICAgICAgICAgICAgIHZhciBjdXN0b21TbGlkZXJCYXJFbGUgPSBhbmd1bGFyLmVsZW1lbnQoJy5jdXN0b20tc2xpZGVyJylbMF07XG4gICAgICAgICAgICAgICAgdmFyIHZhbEJveEVsZSA9IGFuZ3VsYXIuZWxlbWVudChjdXN0b21TbGlkZXJCYXJFbGUpLmZpbmQoJy52YWx1ZS1ib3gnKVswXTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsVGV4dEVsZSA9IGFuZ3VsYXIuZWxlbWVudChjdXN0b21TbGlkZXJCYXJFbGUpLmZpbmQoJy52YWx1ZS10ZXh0JylbMF07XG4gICAgICAgICAgICAgICAgdmFyIHZhbFRleHRJY29uRWxlID0gYW5ndWxhci5lbGVtZW50KHZhbEJveEVsZSkuZmluZCgnLnZhbHVlLXRleHQtaWNvbicpWzBdO1xuICAgICAgICAgICAgICAgIHZhciB0aWNrRWxlID0gYW5ndWxhci5lbGVtZW50KGN1c3RvbVNsaWRlckJhckVsZSkuZmluZCgnLnRpY2tzIGxpJylbMF07XG4gICAgICAgICAgICAgICAgdmFyIGxlZ2VuZEVsZSA9IGFuZ3VsYXIuZWxlbWVudChjdXN0b21TbGlkZXJCYXJFbGUpLmZpbmQoJy5sZWdlbmRzIGxpJylbMF07XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlVGV4dEVsZSA9IGFuZ3VsYXIuZWxlbWVudChjdXN0b21TbGlkZXJCYXJFbGUpLmZpbmQoJy5yYW5nZS10ZXh0JylbMF07XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXRNYXhMZWdlbmRWYWx1ZSgpIHtcblx0XHRcdFx0XHQvLyBTZXQgbWF4IGxlZ2VuZCB0ZXh0XG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY3VzdG9tU2xpZGVyLm9wdGlvbnMubWF4VmFsdWUgPj0gMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZ3JlYXRlciB0aGFuIDEwMCcsICRzY29wZS5jdXN0b21TbGlkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLmN1c3RvbVNsaWRlci5vcHRpb25zLm1heFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jdXN0b21TbGlkZXIubWF4TGVnZW5kVmFsdWUgPSAnMTAwKyc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbGVzcyB0aGFuIDEwMCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmN1c3RvbVNsaWRlci5tYXhMZWdlbmRWYWx1ZSA9ICRzY29wZS5jdXN0b21TbGlkZXIub3B0aW9ucy5tYXhWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldExvY2FsVmFsdWVzKCkge1xuXHRcdFx0XHRcdC8vIFNldHRpbmcgdGhlIGxvY2FsIHZhcmlhYmxlc1xuICAgICAgICAgICAgICAgICAgICBtaW5WYWx1ZSA9ICRzY29wZS5jdXN0b21TbGlkZXIub3B0aW9ucy5taW5WYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgbWF4VmFsdWUgPSAkc2NvcGUuY3VzdG9tU2xpZGVyLm9wdGlvbnMubWF4VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlRGlmZiA9IG1heFZhbHVlIC0gbWluVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIG1pblJhbmdlID0gJHNjb3BlLmN1c3RvbVNsaWRlci5vcHRpb25zLm1pblJhbmdlO1xuICAgICAgICAgICAgICAgICAgICBtYXhSYW5nZSA9ICRzY29wZS5jdXN0b21TbGlkZXIub3B0aW9ucy5tYXhSYW5nZTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAkc2NvcGUuY3VzdG9tU2xpZGVyLm9wdGlvbnMudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlRGlmZiA9IG1heFJhbmdlIC0gbWluUmFuZ2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FsQmFyR3JhZGllbnQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aWNrV2lkdGggPSB0aWNrRWxlLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWluVmFsdWVSYW5nZSA9ICdsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsI2VkZjZmOCAwLCNlZGY2ZjggJyArIChwYXJzZUludCgkc2NvcGUuY3VzdG9tU2xpZGVyLnRpY2tzLm1pblZhbHVlVGlja1xuXHRcdFx0XHRcdFx0LmxlZnQpICsgMiAqIHRpY2tXaWR0aCkgKyAncHgsIzA0ODBiNiAnICsgKHBhcnNlSW50KCRzY29wZS5jdXN0b21TbGlkZXIudGlja3MubWluVmFsdWVUaWNrLmxlZnQpICsgMlxuXHRcdFx0XHRcdFx0KiB0aWNrV2lkdGgpICsgJ3B4LCc7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXhWYWx1ZVJhbmdlID0gJyMwNDgwYjYgJyArIChwYXJzZUludCgkc2NvcGUuY3VzdG9tU2xpZGVyLnRpY2tzLm1heFZhbHVlVGljay5sZWZ0KSArIDMgKiB0aWNrV2lkdGgpXG5cdFx0XHRcdFx0XHQrICdweCwjZWRmNmY4ICcgKyAocGFyc2VJbnQoJHNjb3BlLmN1c3RvbVNsaWRlci50aWNrcy5tYXhWYWx1ZVRpY2subGVmdCkgKyAzICogdGlja1dpZHRoKSArICdweCwjZWRmNmY4ICcgKyAoXG5cdFx0XHRcdFx0XHRcdHBhcnNlSW50KCRzY29wZS5jdXN0b21TbGlkZXIudGlja3MubWF4UmFuZ2VUaWNrLmxlZnQpKSArICdweCknO1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jdXN0b21TbGlkZXIuYmFyR3JhZGllbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnYmFja2dyb3VuZCc6IG1pblZhbHVlUmFuZ2UgKyBtYXhWYWx1ZVJhbmdlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FsVGlja3NQb3NpdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJhcldpZHRoID0gY3VzdG9tU2xpZGVyQmFyRWxlLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGlja1dpZHRoID0gdGlja0VsZS5vZmZzZXRXaWR0aDtcblxuXHRcdFx0XHRcdC8vIENhbGN1bGF0aW5nIHRoZSB0aWNrIHBvc2l0aW9uXG5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmN1c3RvbVNsaWRlci50aWNrcy5taW5WYWx1ZVRpY2sgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCc6IE1hdGgucm91bmQoKGJhcldpZHRoICogKChtaW5WYWx1ZSAtIG1pblJhbmdlKSAvIHJhbmdlRGlmZikgLSAoMSAqIHRpY2tXaWR0aCkpKSArICdweCdcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmN1c3RvbVNsaWRlci50aWNrcy52YWx1ZVRpY2sgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCc6IChiYXJXaWR0aCAqICgodmFsdWUgLSBtaW5SYW5nZSkgLyByYW5nZURpZmYpIC0gKDIgKiB0aWNrV2lkdGgpKSArICdweCdcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1heFZhbHVlID49IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmN1c3RvbVNsaWRlci50aWNrcy5tYXhWYWx1ZVRpY2sgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xlZnQnOiAoYmFyV2lkdGggKiAoKG1heFJhbmdlIC0gbWluUmFuZ2UpIC8gcmFuZ2VEaWZmKSAtICg0ICogdGlja1dpZHRoKSkgKyAncHgnXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmN1c3RvbVNsaWRlci50aWNrcy5tYXhWYWx1ZVRpY2sgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xlZnQnOiBNYXRoLnJvdW5kKChiYXJXaWR0aCAqICgobWF4VmFsdWUgLSBtaW5SYW5nZSkgLyByYW5nZURpZmYpIC0gKDMgKiB0aWNrV2lkdGgpKSkgKyAncHgnXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmN1c3RvbVNsaWRlci50aWNrcy5tYXhSYW5nZVRpY2sgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCc6IChiYXJXaWR0aCAqICgobWF4UmFuZ2UgLSBtaW5SYW5nZSkgLyByYW5nZURpZmYpIC0gKDQgKiB0aWNrV2lkdGgpKSArICdweCdcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxMZWdlbmRzUG9zKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmFyV2lkdGggPSBjdXN0b21TbGlkZXJCYXJFbGUub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsZWdlbmRXaWR0aCA9IGxlZ2VuZEVsZS5vZmZzZXRXaWR0aDtcblxuXHRcdFx0XHRcdC8vIENhbGN1bGF0aW5nIHRoZSBsZWdlbmRzIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jdXN0b21TbGlkZXIubGVnZW5kcy5taW5SYW5nZUxlZ2VuZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdsZWZ0JzogLShsZWdlbmRXaWR0aCAvIDIpICsgJ3B4J1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZURpZmYgPD0gNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmN1c3RvbVNsaWRlci5sZWdlbmRzLm1pblZhbHVlTGVnZW5kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LWFsaWduJzogJ3JpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCcgICAgICA6IChiYXJXaWR0aCAqICgobWluVmFsdWUgLSBtaW5SYW5nZSkgLyByYW5nZURpZmYpKSAtICgxICogbGVnZW5kV2lkdGgpIC0gKGxlZ2VuZFdpZHRoKSArICdweCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY3VzdG9tU2xpZGVyLmxlZ2VuZHMubWF4VmFsdWVMZWdlbmQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQtYWxpZ24nOiAnbGVmdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xlZnQnICAgICAgOiAoYmFyV2lkdGggKiAoKG1heFZhbHVlIC0gbWluUmFuZ2UpIC8gcmFuZ2VEaWZmKSAtICgyICogbGVnZW5kV2lkdGgpKSArICdweCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY3VzdG9tU2xpZGVyLmxlZ2VuZHMubWluVmFsdWVMZWdlbmQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xlZnQnOiAoYmFyV2lkdGggKiAoKG1pblZhbHVlIC0gbWluUmFuZ2UpIC8gcmFuZ2VEaWZmKSkgLSAoMSAqIGxlZ2VuZFdpZHRoKSAtIChsZWdlbmRXaWR0aCAvIDIpICsgJ3B4J1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jdXN0b21TbGlkZXIubGVnZW5kcy5tYXhWYWx1ZUxlZ2VuZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCc6IChiYXJXaWR0aCAqICgobWF4VmFsdWUgLSBtaW5SYW5nZSkgLyByYW5nZURpZmYpIC0gKDIgKiBsZWdlbmRXaWR0aCkgLSAobGVnZW5kV2lkdGggLyAyKSkgKyAncHgnXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1heFZhbHVlIDwgOTcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jdXN0b21TbGlkZXIubGVnZW5kcy5tYXhSYW5nZUxlZ2VuZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCc6IChiYXJXaWR0aCAqICgobWF4UmFuZ2UgLSBtaW5SYW5nZSkgLyByYW5nZURpZmYpIC0gKDMgKiBsZWdlbmRXaWR0aCkgLSAobGVnZW5kV2lkdGggLyAxLjUpKSArICdweCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF4VmFsdWUgPj0gMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY3VzdG9tU2xpZGVyLmxlZ2VuZHMubWF4VmFsdWVMZWdlbmQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xlZnQnOiAoYmFyV2lkdGggKiAoKG1heFZhbHVlIC0gbWluUmFuZ2UpIC8gcmFuZ2VEaWZmKSAtICgyICogbGVnZW5kV2lkdGgpIC0gKDIgKiAobGVnZW5kV2lkdGggLyAyKSkpXG5cdFx0XHRcdFx0XHRcdFx0KyAncHgnXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmN1c3RvbVNsaWRlci5sZWdlbmRzLm1heFJhbmdlTGVnZW5kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5JzogJ25vbmUnXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmN1c3RvbVNsaWRlci5sZWdlbmRzLm1heFJhbmdlTGVnZW5kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5JzogJ25vbmUnXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FsVmFsQm94UG9zKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmFyV2lkdGggPSBjdXN0b21TbGlkZXJCYXJFbGUub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWxCb3hXaWR0aCA9IHZhbEJveEVsZS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbFRleHRXaWR0aCA9IHZhbFRleHRFbGUub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpY29uV2lkdGggPSB2YWxUZXh0SWNvbkVsZS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpY2tXaWR0aCA9IHRpY2tFbGUub2Zmc2V0V2lkdGg7XG5cblx0XHRcdFx0XHQvLyBDYWxjdWxhdGluZyB0aGUgcmFuZ2UgdGV4dCBwb3NpdGlvblxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUludCgkc2NvcGUuY3VzdG9tU2xpZGVyLnRpY2tzLnZhbHVlVGljay5sZWZ0KSA+IChiYXJXaWR0aCAvIDIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVCb3hXaWR0aCA9IHBhcnNlSW50KCRzY29wZS5jdXN0b21TbGlkZXIudGlja3MudmFsdWVUaWNrLmxlZnQpICsgKGljb25XaWR0aCAvIDIpICsgKDMgKiB0aWNrV2lkdGgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY3VzdG9tU2xpZGVyLnZhbHVlVGV4dFN0eWxlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LWFsaWduJyAgIDogJ3JpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGFkZGluZy1yaWdodCc6ICcxMHB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd2lkdGgnICAgICAgICA6ICh2YWx1ZUJveFdpZHRoIC0gaWNvbldpZHRoKSArICdweCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY3VzdG9tU2xpZGVyLnZhbHVlQm94U3R5bGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogdmFsdWVCb3hXaWR0aCArICdweCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVCb3hXaWR0aCA9IGJhcldpZHRoIC0gcGFyc2VJbnQoJHNjb3BlLmN1c3RvbVNsaWRlci50aWNrcy52YWx1ZVRpY2subGVmdCkgKyAoaWNvbldpZHRoIC8gMik7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVCb3hQb3MgPSBwYXJzZUludCgkc2NvcGUuY3VzdG9tU2xpZGVyLnRpY2tzLnZhbHVlVGljay5sZWZ0KSAtIChpY29uV2lkdGggLyAyKSArICgzICogdGlja1dpZHRoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmN1c3RvbVNsaWRlci52YWx1ZUJveFN0eWxlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsZWZ0JyA6IHZhbHVlQm94UG9zICsgJ3B4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOiB2YWx1ZUJveFdpZHRoICsgJ3B4J1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jdXN0b21TbGlkZXIudmFsdWVUZXh0U3R5bGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Zsb2F0JyAgICAgICA6ICdyaWdodCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BhZGRpbmctbGVmdCc6ICcxMHB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGV4dC1hbGlnbicgIDogJ2xlZnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCcgICAgICAgOiAodmFsdWVCb3hXaWR0aCAtIGljb25XaWR0aCkgKyAncHgnXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmN1c3RvbVNsaWRlci52YWx1ZVRleHRJY29uU3R5bGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Zsb2F0JzogJ2xlZnQnXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FsUmFuZ2VUZXh0UG9zKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFuZ2VUZXh0V2lkdGggPSByYW5nZVRleHRFbGUub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiYXJXaWR0aCA9IGN1c3RvbVNsaWRlckJhckVsZS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pblZhbFBvcyA9IGJhcldpZHRoICogKChtaW5WYWx1ZSAtIG1pblJhbmdlKSAvIHJhbmdlRGlmZik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXhWYWxQb3MgPSBiYXJXaWR0aCAqICgobWF4VmFsdWUgLSBtaW5SYW5nZSkgLyByYW5nZURpZmYpO1xuXG5cdFx0XHRcdFx0Ly8gQ2FsY3VsYXRpbmcgdGhlIHJhbmdlIHRleHQgcG9zaXRpb25cblx0XHRcdFx0XHQvLyAkc2NvcGUuY3VzdG9tU2xpZGVyLnJhbmdlVGV4dFBvcyA9IG1pblZhbFBvcyAtIChyYW5nZVRleHRXaWR0aCAtIChtYXhWYWxQb3MgLSBtaW5WYWxQb3MpLzIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFuZ2VUZXh0TGVmdFBvcyA9IG1pblZhbFBvcyArICgobWF4VmFsUG9zIC0gbWluVmFsUG9zKSAvIDIpIC0gKHJhbmdlVGV4dFdpZHRoIC8gMik7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlVGV4dExlZnRQb3MgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHJhbmdlVGV4dExlZnRQb3MgKyByYW5nZVRleHRXaWR0aCkgPj0gYmFyV2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY3VzdG9tU2xpZGVyLnJhbmdlVGV4dFN0eWxlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCc6IChiYXJXaWR0aCAtIHJhbmdlVGV4dFdpZHRoKSArICdweCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY3VzdG9tU2xpZGVyLnJhbmdlVGV4dFN0eWxlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCc6IHJhbmdlVGV4dExlZnRQb3MgKyAncHgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jdXN0b21TbGlkZXIucmFuZ2VUZXh0U3R5bGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xlZnQnOiAnMHB4J1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuXHRcdFx0XHQvLyBTZXR0aW5nIHVwIHdhdGNoXG4gICAgICAgICAgICAgICAgJHNjb3BlLiR3YXRjaCgnY3VzdG9tU2xpZGVyLm9wdGlvbnMnLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TWF4TGVnZW5kVmFsdWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExvY2FsVmFsdWVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxUaWNrc1Bvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxCYXJHcmFkaWVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsTGVnZW5kc1BvcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsUmFuZ2VUZXh0UG9zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxWYWxCb3hQb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG5cdFx0XHRcdC8vIFJlZ2lzdGVyaW5nIHdpbmRvdyByZXNpemUgZXZlbnRcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykub24oJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRMb2NhbFZhbHVlcygpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KGNhbFRpY2tzUG9zaXRpb24oKSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoY2FsQmFyR3JhZGllbnQoKSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoY2FsTGVnZW5kc1BvcygpKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseShjYWxWYWxCb3hQb3MoKSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoY2FsUmFuZ2VUZXh0UG9zKCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICd0ZW1wbGF0ZSc6ICc8c2VjdGlvbiBpZD1cImN1c3RvbS1zbGlkZXJcIiBjbGFzcz1cImN1c3RvbS1zbGlkZXJcIiBuZy1jbG9haz4nXG5cdFx0XHRcdCsgJzxkaXYgY2xhc3M9XCJzbGlkZXItYmFyXCI+J1xuXHRcdFx0XHQrICc8ZGl2IG5nLXN0eWxlPWN1c3RvbVNsaWRlci52YWx1ZUJveFN0eWxlIGlkPVwidmFsdWUtYm94XCIgY2xhc3M9XCJ2YWx1ZS1ib3hcIj4nXG5cdFx0XHRcdCsgJzxkaXYgbmctc3R5bGU9Y3VzdG9tU2xpZGVyLnZhbHVlVGV4dFN0eWxlIGNsYXNzPVwidmFsdWUtdGV4dFwiPnt7Y3VzdG9tU2xpZGVyLm9wdGlvbnMudmFsdWVUZXh0fX08L2Rpdj4nXG5cdFx0XHRcdCsgJzxkaXYgbmctc3R5bGU9Y3VzdG9tU2xpZGVyLnZhbHVlVGV4dEljb25TdHlsZSBjbGFzcz1cInZhbHVlLXRleHQtaWNvblwiPnt7Y3VzdG9tU2xpZGVyLm9wdGlvbnMudmFsdWV9fTwvZGl2PjwvZGl2Pidcblx0XHRcdFx0KyAnPHNwYW4gY2xhc3M9XCJiYXJcIiBuZy1zdHlsZT1jdXN0b21TbGlkZXIuYmFyR3JhZGllbnQ+PC9zcGFuPidcblx0XHRcdFx0KyAnPHVsIGNsYXNzPVwidGlja3NcIj4nXG5cdFx0XHRcdCsgJzxsaSBzdHlsZT1cImxlZnQ6IDBweFwiPidcblx0XHRcdFx0KyAnPC9saT4nXG5cdFx0XHRcdCsgJzxsaSBuZy1zdHlsZT1jdXN0b21TbGlkZXIudGlja3MubWluVmFsdWVUaWNrIGNsYXNzPVwibWluLXZhbHVlXCI+J1xuXHRcdFx0XHQrICc8L2xpPidcblx0XHRcdFx0KyAnPGxpIG5nLXN0eWxlPWN1c3RvbVNsaWRlci50aWNrcy52YWx1ZVRpY2sgY2xhc3M9XCJhY3R1YWwtdmFsdWVcIj4nXG5cdFx0XHRcdCsgJzwvbGk+J1xuXHRcdFx0XHQrICc8bGkgbmctc3R5bGU9Y3VzdG9tU2xpZGVyLnRpY2tzLm1heFZhbHVlVGljayBjbGFzcz1cIm1heC12YWx1ZVwiPidcblx0XHRcdFx0KyAnPC9saT4nXG5cdFx0XHRcdCsgJzxsaSBuZy1zdHlsZT1jdXN0b21TbGlkZXIudGlja3MubWF4UmFuZ2VUaWNrPidcblx0XHRcdFx0KyAnPC9saT4nXG5cdFx0XHRcdCsgJzwvdWw+J1xuXHRcdFx0XHQrICc8ZGl2IGNsYXNzPVwicmFuZ2UtdGV4dFwiIG5nLXN0eWxlPWN1c3RvbVNsaWRlci5yYW5nZVRleHRTdHlsZT57e2N1c3RvbVNsaWRlci5vcHRpb25zLnJhbmdlVGV4dH19PC9kaXY+J1xuXHRcdFx0XHQrICc8dWwgY2xhc3M9XCJsZWdlbmRzXCI+J1xuXHRcdFx0XHQrICc8bGkgYXJpYS1oaWRkZW49XCJ0cnVlXCIgbmctc3R5bGU9Y3VzdG9tU2xpZGVyLmxlZ2VuZHMubWluUmFuZ2VMZWdlbmQ+J1xuXHRcdFx0XHQrICd7e2N1c3RvbVNsaWRlci5vcHRpb25zLm1pblJhbmdlfX0nXG5cdFx0XHRcdCsgJzwvbGk+J1xuXHRcdFx0XHQrICc8bGkgbmctc3R5bGU9Y3VzdG9tU2xpZGVyLmxlZ2VuZHMubWluVmFsdWVMZWdlbmQgY2xhc3M9XCJtaW4tdmFsdWVcIj4nXG5cdFx0XHRcdCsgJ3t7Y3VzdG9tU2xpZGVyLm9wdGlvbnMubWluVmFsdWV9fSdcblx0XHRcdFx0KyAnPC9saT4nXG5cdFx0XHRcdCsgJzxsaSBuZy1zdHlsZT1jdXN0b21TbGlkZXIubGVnZW5kcy5tYXhWYWx1ZUxlZ2VuZCBjbGFzcz1cIm1heC12YWx1ZVwiPidcblx0XHRcdFx0KyAne3tjdXN0b21TbGlkZXIubWF4TGVnZW5kVmFsdWV9fSdcblx0XHRcdFx0KyAnPC9saT4nXG5cdFx0XHRcdCsgJzxsaSBhcmlhLWhpZGRlbj1cInRydWVcIiBuZy1zdHlsZT1jdXN0b21TbGlkZXIubGVnZW5kcy5tYXhSYW5nZUxlZ2VuZD4nXG5cdFx0XHRcdCsgJ3t7Y3VzdG9tU2xpZGVyLm9wdGlvbnMubWF4UmFuZ2V9fSsnXG5cdFx0XHRcdCsgJzwvbGk+J1xuXHRcdFx0XHQrICc8L3VsPidcblx0XHRcdFx0KyAnPC9kaXY+J1xuXHRcdFx0XHQrICc8L3NlY3Rpb24+J1xuICAgICAgICB9O1xuICAgIH1dKTtcbn0pKCk7IiwiLyogZ2xvYmFscyBhdWRpZW5jZV90b3BfbmF2X2lkICovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcbiAgYW5ndWxhci5tb2R1bGUoJ0xGR0hlYWRlcicsIFtdKS5jb250cm9sbGVyKCdMRkdIZWFkZXJDb250cm9sbGVyJywgW2Z1bmN0aW9uKCkge1xyXG4gICAgdmFyIGxmZ0hlYWRlclZNID0gdGhpcztcclxuXHJcbiAgICBsZmdIZWFkZXJWTS5zaG93U2VhcmNoID0gZmFsc2U7XHJcbiAgICBsZmdIZWFkZXJWTS5zaG93TWVnYW1lbnUgPSBmYWxzZTtcclxuICAgIGxmZ0hlYWRlclZNLnNob3dDb250YWN0U3VwcG9ydCA9IGZhbHNlO1xyXG4gICAgbGZnSGVhZGVyVk0ubm9UcmFuc2l0aW9uID0gbnVsbDtcclxuXHJcbiAgICAkKGRvY3VtZW50KS5tb3VzZXVwKGZ1bmN0aW9uKGV2ZW50KXtcclxuICAgICBpZigkKFwiLnRvcGhlYWRlci1tZW51X19pdGVtLS1zaG93XCIpLmhhcyhldmVudC50YXJnZXQpLmxlbmd0aD09PTApe1xyXG4gICAgICAgICQoXCIudG9waGVhZGVyLW1lbnVfX2l0ZW0tLXNob3dcIikucmVtb3ZlQ2xhc3MoXCJ0b3BoZWFkZXItbWVudV9faXRlbS0tc2hvd1wiKTtcclxuICAgICAgfVxyXG4gICAgICBpZigkKFwidG9waGVhZGVyLW1lbnVfX2l0ZW0tLWxvZ2luLXJlZ2lzdGVyLXNlbGVjdGVkLWJnXCIpLmhhcyhldmVudC50YXJnZXQpLmxlbmd0aD09PTAgJiZcclxuICAgICAgICQoXCIudG9waGVhZGVyLW1lbnVfX2l0ZW0tLXNob3dcIikuaGFzKGV2ZW50LnRhcmdldCkubGVuZ3RoPT09MCAmJiBcclxuICAgICAgICQoXCIudG9waGVhZGVyLW1lbnVfX2l0ZW0tLWxvZ2luLXJlZ2lzdGVyLW5ld1wiKS5oYXMoZXZlbnQudGFyZ2V0KS5sZW5ndGg9PT0wKXtcclxuICAgICAgICAkKCcudG9waGVhZGVyLW1lbnVfX2l0ZW0tLWxvZ2luLXJlZ2lzdGVyLXNlbGVjdGVkLWJnJykuYWRkQ2xhc3MoXCJ0b3BoZWFkZXItbWVudV9faXRlbS0tbG9naW4tcmVnaXN0ZXItYmdcIik7XHJcbiAgICAgICAgJCgnLnRvcGhlYWRlci1tZW51X19pdGVtLS1sb2dpbi1yZWdpc3Rlci1zZWxlY3RlZC1iZycpLnJlbW92ZUNsYXNzKFwidG9waGVhZGVyLW1lbnVfX2l0ZW0tLWxvZ2luLXJlZ2lzdGVyLXNlbGVjdGVkLWJnXCIpOyAgICAgICAgXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGxmZ0hlYWRlclZNLmluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKGdldENvb2tpZSgnRGVmYXVsdEF1ZGllbmNlJykgPT09IG51bGwgfHwgZ2V0Q29va2llKCdEZWZhdWx0QXVkaWVuY2UnKSA9PT0gdW5kZWZpbmVkIHx8IGdldENvb2tpZSgnRGVmYXVsdEF1ZGllbmNlJykgPT09ICcnKSB7XHJcbiAgICAgICAgc2V0Q29va2llKCdEZWZhdWx0QXVkaWVuY2UnLCBhdWRpZW5jZV90b3BfbmF2X2lkLCAzNjUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHVwZGF0ZUNvb2tpZSgnRGVmYXVsdEF1ZGllbmNlJywgYXVkaWVuY2VfdG9wX25hdl9pZCwgMzY1KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBibGFja092ZXJsYXkoKSB7XHJcbiAgICAgIHZhciBvdmVybGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYmxhY2stb3ZlcmxheScpWzBdO1xyXG5cclxuICAgICAgaWYgKGxmZ0hlYWRlclZNLnNob3dDb250YWN0U3VwcG9ydCB8fCBsZmdIZWFkZXJWTS5zaG93U2VhcmNoIHx8IGxmZ0hlYWRlclZNLnNob3dNZWdhbWVudSkge1xyXG4gICAgICAgIG92ZXJsYXkuY2xhc3NMaXN0LmFkZCgnYmxhY2stb3ZlcmxheS0tc2hvdycpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBvdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ2JsYWNrLW92ZXJsYXktLXNob3cnKTtcclxuICAgICAgICB9LCA1MDApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdG9nZ2xlTWVudShtZW51VHlwZSkge1xyXG4gICAgICBsZmdIZWFkZXJWTS5ub1RyYW5zaXRpb24gPSBudWxsO1xyXG4gICAgICBzd2l0Y2ggKG1lbnVUeXBlKSB7XHJcbiAgICAgICAgY2FzZSAnY29udGFjdFN1cHBvcnQnOlxyXG4gICAgICAgICAgaWYgKGxmZ0hlYWRlclZNLnNob3dTZWFyY2gpIHtcclxuICAgICAgICAgICAgbGZnSGVhZGVyVk0ubm9UcmFuc2l0aW9uID0gJ3NlYXJjaCc7XHJcbiAgICAgICAgICAgIGxmZ0hlYWRlclZNLnNob3dTZWFyY2ggPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChsZmdIZWFkZXJWTS5zaG93TWVnYW1lbnUpIHtcclxuICAgICAgICAgICAgbGZnSGVhZGVyVk0ubm9UcmFuc2l0aW9uID0gJ21lZ2FNZW51JztcclxuICAgICAgICAgICAgbGZnSGVhZGVyVk0uc2hvd01lZ2FtZW51ID0gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBsZmdIZWFkZXJWTS5zaG93Q29udGFjdFN1cHBvcnQgPyBsZmdIZWFkZXJWTS5zaG93Q29udGFjdFN1cHBvcnQgPSBmYWxzZSA6IGxmZ0hlYWRlclZNLnNob3dDb250YWN0U3VwcG9ydCA9IHRydWU7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdzZWFyY2gnOlxyXG4gICAgICAgICAgaWYgKGxmZ0hlYWRlclZNLnNob3dDb250YWN0U3VwcG9ydCkge1xyXG4gICAgICAgICAgICBsZmdIZWFkZXJWTS5ub1RyYW5zaXRpb24gPSAnY29udGFjdFN1cHBvcnQnO1xyXG4gICAgICAgICAgICBsZmdIZWFkZXJWTS5zaG93Q29udGFjdFN1cHBvcnQgPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGxmZ0hlYWRlclZNLnNob3dDb250YWN0U3VwcG9ydCA9IGZhbHNlO1xyXG4gICAgICAgICAgaWYgKGxmZ0hlYWRlclZNLnNob3dNZWdhbWVudSkge1xyXG4gICAgICAgICAgICBsZmdIZWFkZXJWTS5ub1RyYW5zaXRpb24gPSAnbWVnYU1lbnUnO1xyXG4gICAgICAgICAgICBsZmdIZWFkZXJWTS5zaG93TWVnYW1lbnUgPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGxmZ0hlYWRlclZNLnNob3dTZWFyY2ggPyBsZmdIZWFkZXJWTS5zaG93U2VhcmNoID0gZmFsc2UgOiBsZmdIZWFkZXJWTS5zaG93U2VhcmNoID0gdHJ1ZTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ21lZ2FNZW51JzpcclxuICAgICAgICAgIGlmIChsZmdIZWFkZXJWTS5zaG93U2VhcmNoKSB7XHJcbiAgICAgICAgICAgIGxmZ0hlYWRlclZNLm5vVHJhbnNpdGlvbiA9ICdzZWFyY2gnO1xyXG4gICAgICAgICAgICBsZmdIZWFkZXJWTS5zaG93U2VhcmNoID0gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAobGZnSGVhZGVyVk0uc2hvd0NvbnRhY3RTdXBwb3J0KSB7XHJcbiAgICAgICAgICAgIGxmZ0hlYWRlclZNLm5vVHJhbnNpdGlvbiA9ICdjb250YWN0U3VwcG9ydCc7XHJcbiAgICAgICAgICAgIGxmZ0hlYWRlclZNLnNob3dDb250YWN0U3VwcG9ydCA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgbGZnSGVhZGVyVk0uc2hvd01lZ2FtZW51ID8gbGZnSGVhZGVyVk0uc2hvd01lZ2FtZW51ID0gZmFsc2UgOiBsZmdIZWFkZXJWTS5zaG93TWVnYW1lbnUgPSB0cnVlO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIGxmZ0hlYWRlclZNLnNob3dTZWFyY2ggPSBmYWxzZTtcclxuICAgICAgICAgIGxmZ0hlYWRlclZNLnNob3dDb250YWN0U3VwcG9ydCA9IGZhbHNlO1xyXG4gICAgICAgICAgbGZnSGVhZGVyVk0uc2hvd01lZ2FtZW51ID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBNb2JpbGUgY29udGFjdCAmIHN1cHBvcnQgZXhwYW5kIGNvbGxhcHNlIGV2ZW50XHJcbiAgICBsZmdIZWFkZXJWTS5jb250YWN0U3VwcG9ydEV4cENvbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0b2dnbGVNZW51KCdjb250YWN0U3VwcG9ydCcpO1xyXG4gICAgICBibGFja092ZXJsYXkoKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gTW9iaWxlIHNlYXJjaCBleHBhbmQgY29sbGFwc2UgZXZlbnRcclxuICAgIGxmZ0hlYWRlclZNLnNlYXJjaEV4cENvbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0b2dnbGVNZW51KCdzZWFyY2gnKTtcclxuICAgICAgYmxhY2tPdmVybGF5KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIE1vYmlsZSBtZWdhbWVudSBleHBhbmQgY29sbGFwc2UgZXZlbnRcclxuICAgIGxmZ0hlYWRlclZNLm1lZ2FNZW51RXhwQ29sID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRvZ2dsZU1lbnUoJ21lZ2FNZW51Jyk7XHJcbiAgICAgIGJsYWNrT3ZlcmxheSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBsZmdIZWFkZXJWTS5zZWFyY2ggPSBmdW5jdGlvbihzZWFyY2hQYWdlVVJMKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwidmFsdWU6XCIrbGZnSGVhZGVyVk0uc2VhcmNoUGFyYW0pO1xyXG4gICAgICBpZiAoc2VhcmNoUGFnZVVSTCAmJiBsZmdIZWFkZXJWTS5zZWFyY2hQYXJhbSAhPT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgbGZnSGVhZGVyVk0uc2VhcmNoUGFyYW0gIT09IFwiXCIpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiaW5zaWRlXCIpO1xyXG4gICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgJ2V2ZW50X25hbWUnICA6ICdzZWFyY2gnLFxyXG4gICAgICAgICAgJ2V2ZW50X2FjdGlvbic6ICdzZWFyY2gnLFxyXG4gICAgICAgICAgJ2V2ZW50X3R5cGUnICA6ICdnbG9iYWwnXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdXRhZy5saW5rKGRhdGEpO1xyXG4gICAgICAgIHNlYXJjaFBhZ2VVUkwgPSBzZWFyY2hQYWdlVVJMICsgJyZxPScgKyBsZmdIZWFkZXJWTS5zZWFyY2hQYXJhbTtcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHNlYXJjaFBhZ2VVUkw7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgbGZnSGVhZGVyVk0uaW5wU2VhcmNoID0gZnVuY3Rpb24oJGV2ZW50LCBzZWFyY2hQYWdlVVJMKSB7XHJcbiAgICAgIGlmICgkZXZlbnQua2V5Q29kZSA9PT0gMTMpIHtcclxuICAgICAgICBsZmdIZWFkZXJWTS5zZWFyY2goc2VhcmNoUGFnZVVSTCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgbGZnSGVhZGVyVk0uYXVkaWVuY2VNZW51RXhwQ29sID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGxmZ0hlYWRlclZNLnNob3dBdWRpZW5jZU1lbnUgPyBsZmdIZWFkZXJWTS5zaG93QXVkaWVuY2VNZW51ID0gZmFsc2UgOiBsZmdIZWFkZXJWTS5zaG93QXVkaWVuY2VNZW51ID0gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgbGZnSGVhZGVyVk0uYXVkaWVuY2VBZ2VTZWxlY3RvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBsZmdIZWFkZXJWTS5zaG93QXVkaWVuY2VBZ2VTZWxlY3RvciA/IGxmZ0hlYWRlclZNLnNob3dBdWRpZW5jZUFnZVNlbGVjdG9yID0gZmFsc2UgOiBsZmdIZWFkZXJWTS5zaG93QXVkaWVuY2VBZ2VTZWxlY3RvciA9IHRydWU7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIENsaWNrIGV2ZW50IHRvIGV4cGFuZCBjb2xsYXBzZSB0aGUgc3VibWVudXMgaW4gdG9waGVhZGVyIHN1cHBvcnQgbWVudVxyXG4gICAgbGZnSGVhZGVyVk0uc3VwcG9ydE1lbnVFeHBDb2wgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICB2YXIgc3VwcG9ydG1lbnUgPSBldmVudC5jdXJyZW50VGFyZ2V0LnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgIHN1cHBvcnRtZW51LmNsYXNzTGlzdC5jb250YWlucygndG9waGVhZGVyLW1lbnVfX2l0ZW0tLXNob3cnKSA/IHN1cHBvcnRtZW51LmNsYXNzTGlzdC5yZW1vdmUoXHJcbiAgICAgICAgJ3RvcGhlYWRlci1tZW51X19pdGVtLS1zaG93JykgOiBzdXBwb3J0bWVudS5jbGFzc0xpc3QuYWRkKCd0b3BoZWFkZXItbWVudV9faXRlbS0tc2hvdycpO1xyXG4gICAgfTtcclxuXHJcbiAgICBsZmdIZWFkZXJWTS5zdXBwb3J0TWVudUV4cENvbF9uZXcgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICB2YXIgc3VwcG9ydG1lbnUgPSBldmVudC5jdXJyZW50VGFyZ2V0LnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgIHN1cHBvcnRtZW51LmNsYXNzTGlzdC5jb250YWlucygndG9waGVhZGVyLW1lbnVfX2l0ZW0tLXNob3cnKSA/IHN1cHBvcnRtZW51LmNsYXNzTGlzdC5yZW1vdmUoXHJcbiAgICAgICAgJ3RvcGhlYWRlci1tZW51X19pdGVtLS1zaG93JykgOiBzdXBwb3J0bWVudS5jbGFzc0xpc3QuYWRkKCd0b3BoZWFkZXItbWVudV9faXRlbS0tc2hvdycpO1xyXG4gICAgICBpZihzdXBwb3J0bWVudS5jbGFzc0xpc3QuY29udGFpbnMoJ3RvcGhlYWRlci1tZW51X19pdGVtLS1zaG93Jykpe1xyXG4gICAgICAgIHN1cHBvcnRtZW51LmNsYXNzTGlzdC5yZW1vdmUoJ3RvcGhlYWRlci1tZW51X19pdGVtLS1sb2dpbi1yZWdpc3Rlci1iZycpXHJcbiAgICAgICAgc3VwcG9ydG1lbnUuY2xhc3NMaXN0LmFkZCgndG9waGVhZGVyLW1lbnVfX2l0ZW0tLWxvZ2luLXJlZ2lzdGVyLXNlbGVjdGVkLWJnJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc3VwcG9ydG1lbnUuY2xhc3NMaXN0LnJlbW92ZSgndG9waGVhZGVyLW1lbnVfX2l0ZW0tLWxvZ2luLXJlZ2lzdGVyLXNlbGVjdGVkLWJnJylcclxuICAgICAgICBzdXBwb3J0bWVudS5jbGFzc0xpc3QuYWRkKCd0b3BoZWFkZXItbWVudV9faXRlbS0tbG9naW4tcmVnaXN0ZXItYmcnKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBsZmdIZWFkZXJWTS5tZW51Q2xpY2sgPSBmdW5jdGlvbihpbmRleCkge1xyXG4gICAgICBsZmdIZWFkZXJWTS5jdXJyTWVudSA9PT0gaW5kZXggPyBsZmdIZWFkZXJWTS5jdXJyTWVudSA9IG51bGwgOiBsZmdIZWFkZXJWTS5jdXJyTWVudSA9IGluZGV4O1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBNZW51IGV4cGFuZCBjb2xsYXBzZSBldmVudFxyXG4gICAgbGZnSGVhZGVyVk0ubWVudUV4cENvbCA9IGZ1bmN0aW9uKGN1cnJNZW51LCBtZW51TGlzdCkge1xyXG4gICAgICBpZiAoY3Vyck1lbnUuZGlzcGxheSkge1xyXG4gICAgICAgIGN1cnJNZW51LmRpc3BsYXkgPyBjdXJyTWVudS5kaXNwbGF5ID0gZmFsc2UgOiBjdXJyTWVudS5kaXNwbGF5ID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKHZhciBtZW51IGluIG1lbnVMaXN0KSB7XHJcbiAgICAgICAgICBtZW51LmRpc3BsYXkgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY3Vyck1lbnUuZGlzcGxheSA/IGN1cnJNZW51LmRpc3BsYXkgPSBmYWxzZSA6IGN1cnJNZW51LmRpc3BsYXkgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1dKTtcclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgbGZnYXBwLmNvbnRyb2xsZXIoJ2NvbnRhY3RXaG9sZXNhbGVyQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyR0aW1lb3V0JywgJ2NvbnRhY3RXaG9sZXNhbGVyU2VydmljZScsICckd2luZG93JywgY29udGFjdFdob2xlc2FsZXJDb250cm9sbGVyXSk7XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIGNvbnRhY3RXaG9sZXNhbGVyQ29udHJvbGxlcigkc2NvcGUsICR0aW1lb3V0LCBjb250YWN0V2hvbGVzYWxlclNlcnZpY2UsICR3aW5kb3cpIHtcclxuXHJcbiAgICAgICAgdmFyIGNudGN0V2hsc2xyVk0gPSB0aGlzO1xyXG4gICAgICAgIC8vdXNlZCBmb3IgdGVzdGluZ1xyXG4vKiAgICAgICAgIHZhciBlbHFVc2VyRGF0YSA9IHtcclxuICAgICAgICAgICAgJ2ZpcnN0TmFtZScgOiAnZm5hbWUnLFxyXG4gICAgICAgICAgICAnbGFzdE5hbWUnIDogJ2xuYW1lJyxcclxuICAgICAgICAgICAgJ2VtYWlsSUQnIDogJ2FAbGZnLmNvbScsXHJcbiAgICAgICAgICAgICdmaXJtTmFtZScgOiAnTEZEJ1xyXG4gICAgICAgIH1cclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImVscVVzZXJEYXRhXCIsIEpTT04uc3RyaW5naWZ5KGVscVVzZXJEYXRhKSk7ICovXHJcblx0XHQkc2NvcGUuaXNQcmVwcm9kID0gZmFsc2U7XHJcblxyXG5cdFx0Ly90ZW1wXHJcblx0XHQkc2NvcGUuaXNQcmVwcm9kRW52ID0gZnVuY3Rpb24oKSB7XHJcbiBcdFx0XHRpZiAod2luZG93LmxvY2F0aW9uLmhvc3QuaW5kZXhPZignd2NzLXJzcy1wcmVwcm9kJykgPiAtMSkge1xyXG5cdFx0XHRcdCRzY29wZS5pc1ByZXByb2QgPSB0cnVlO1xyXG5cdFx0XHR9IFxyXG5cdFx0XHRjb25zb2xlLmxvZyhcImlzUHJlcHJvZDogXCIgKyAkc2NvcGUuaXNQcmVwcm9kKTtcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdHZhciByZXF1ZXN0Qm9keSA9IHt9LCB3YXJuaW5nTXNnLCBmb3JtRmFjdG9yO1xyXG5cdFx0JHNjb3BlLnJlY2FwdGNoYVNpdGVLZXkgPSBnbG9iYWxDb25zdGFudC5yZWNhcHRjaGFTaXRlS2V5O1xyXG5cclxuICAgICAgICAkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQkc2NvcGUuaXNQcmVwcm9kRW52KCk7XHJcblx0XHRcdC8vc2V0dGluZyBkZWZhdWx0IG9wdGlvbnNcclxuICAgICAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5lbHFVc2VyRGF0YSAhPT0gbnVsbCB8fCBsb2NhbFN0b3JhZ2UuZWxxVXNlckRhdGEgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdGlmIChsb2NhbFN0b3JhZ2UuZWxxVXNlckRhdGEpIHtcclxuXHRcdFx0XHRcdCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5lbHFVc2VyRGF0YSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEgPSB7fTtcclxuXHRcdFx0XHR9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2lucHV0W3R5cGU9dGV4dF0nKS5lYWNoKGZ1bmN0aW9uKCl7JCh0aGlzKS5mb2N1cygpLmJsdXIoKTt9KTtcclxuICAgICAgICAgICAgICAgIH0sMTAwKTtcclxuXHRcdFx0fVxyXG5cclxuICAgICAgICAgICAgaWYgKHNlc3Npb25TdG9yYWdlLkxJU0RhdGEgIT09IG51bGwgfHwgc2Vzc2lvblN0b3JhZ2UuTElTRGF0YSAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0aWYgKHNlc3Npb25TdG9yYWdlLkxJU0RhdGEpIHtcclxuXHRcdFx0XHRcdHZhciBzZXNzaW9uTElTRGF0YSA9IEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuTElTRGF0YSk7XHJcblx0XHRcdFx0XHQkc2NvcGUucmVxdWVzdEluZm9EYXRhLnByaW1hcnlCZW5lZml0ID0gc2Vzc2lvbkxJU0RhdGEucHJpbWFyeUJlbmVmaXQ7XHJcblx0XHRcdFx0XHQkc2NvcGUucmVxdWVzdEluZm9EYXRhLnNlY29uZGFyeUJlbmVmaXQgPSBzZXNzaW9uTElTRGF0YS5zZWNvbmRhcnlCZW5lZml0O1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyRzY29wZS5yZXF1ZXN0SW5mb0RhdGEgPSB7fTtcclxuXHRcdFx0XHR9XHJcbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnaW5wdXRbdHlwZT10ZXh0XScpLmVhY2goZnVuY3Rpb24oKXskKHRoaXMpLmZvY3VzKCkuYmx1cigpO30pO1xyXG5cdFx0XHRcdH0sMTAwKTtcclxuXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Y29uc29sZS5sb2coXCJyZXF1ZXN0SW5mb0RhdGE6XCIgKyBKU09OLnN0cmluZ2lmeSgkc2NvcGUucmVxdWVzdEluZm9EYXRhKSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly92YWx1ZXMgZnJvbSBzZXNzaW9uU3RvcmFnZSAtIHByb2R1Y3RzIGFuZCBhbnN3ZXJzIHRvIHF1ZXN0aW9uc1xyXG5cdFx0XHRcdHZhciBMSVNEYXRhID0ge1xyXG5cdFx0XHRcdFx0J3ByaW1hcnlCZW5lZml0JyA6ICdwcmltYXJ5JyxcclxuXHRcdFx0XHRcdCdzZWNvbmRhcnlCZW5lZml0JyA6ICdzZWNvbmRhcnknLFxyXG5cdFx0XHRcdFx0J2Fuc3dlcjEnIDogJ0Fuc3dlcjEnLFxyXG5cdFx0XHRcdFx0J2Fuc3dlcjInIDogJ0Fuc3dlcjInLFxyXG5cdFx0XHRcdFx0J2Fuc3dlcjMnIDogJ0Fuc3dlcjMnLFxyXG5cdFx0XHRcdFx0J2Fuc3dlcjQnIDogJ0Fuc3dlcjQnXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdC8vcmVxdWVzdEJvZHkgPSAkc2NvcGUucmVxdWVzdEluZm9EYXRhO1xyXG5cdFx0XHRcdC8vcmVxdWVzdEJvZHkgPSAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmNvbmNhdChxRGF0YSk7XHJcblx0XHRcdFx0T2JqZWN0LmFzc2lnbihyZXF1ZXN0Qm9keSwgTElTRGF0YSk7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coXCIqKioqKlwiICsgcmVxdWVzdEJvZHkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJHNjb3BlLmlzRm9ybVN1Ym1pdHRlZCA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3JNc2cgPSBmYWxzZTtcclxuXHRcdCRzY29wZS5yZUNhcHRjaGFFcnJvciA9IGZhbHNlO1xyXG5cdFx0JHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcblx0XHQkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuXHRcdCRzY29wZS5pc0VtYWlsVmFsaWQgPSBmYWxzZTtcclxuXHJcblx0XHQkKGRvY3VtZW50KS5vbigncmVzcG9uc2l2ZTpzdGF0ZWNoYW5nZWQnLCBmdW5jdGlvbihlLCBwYXJhbSkge1xyXG5cdFx0XHRmb3JtRmFjdG9yID0gcGFyYW07XHJcblx0XHR9KTtcclxuXHRcdFxyXG5cclxuICAgICAgICAkc2NvcGUudmFsaWRhdGVFbWFpbCA9IGZ1bmN0aW9uKGVtYWlsVmFsdWUpIHtcclxuICAgICAgICAgIFx0dmFyIEVNQUlMX1JFR0VYUCA9IC9eW19hLXowLTkhIyQlJicqPT9eXystYHt8fX5dKlteOj48OygpXCIsXFxbXFxdXSsoXFwuW19hLXowLTldKykqQFthLXowLTktXSsoXFwuW2EtejAtOS1dKykqKFxcLlthLXpdezIsNH0pJC9pO1xyXG4gXHRcdFx0aWYoZW1haWxWYWx1ZSA9PT0gJ25vbmUnIHx8IEVNQUlMX1JFR0VYUC50ZXN0KGVtYWlsVmFsdWUpKXtcclxuXHRcdFx0XHQkc2NvcGUuaXNFbWFpbFZhbGlkID0gdHJ1ZTtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQkc2NvcGUuaXNFbWFpbFZhbGlkID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0ICByZXR1cm4gZmFsc2U7XHJcblx0XHRcdFxyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0JHNjb3BlLm51bWJlckZvcm1hdCA9IGZ1bmN0aW9uIChldnQsIGlucHV0VmFsdWUsIG5hbWUsIHppcE9yUGhvbmUpIHtcclxuXHRcdFx0aWYgKGlucHV0VmFsdWUgPT0gdW5kZWZpbmVkKSByZXR1cm4gJydcclxuXHRcdFx0JHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTktXS9nLCAnJyk7XHJcblx0XHRcdFx0aWYgKHppcE9yUGhvbmUgPT0gJ3Bob25lJykgeyAgICAgIFxyXG5cdFx0XHRcdFx0dmFyIHBhdHQgPSAvXihcXGR7M31cXC1cXGR7M30tXFxkezR9KSQvO1xyXG5cdFx0XHRcdFx0JHNjb3BlLmlzQ29ycmVjdEZvcm1hdCA9IChwYXR0LnRlc3QoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSkpID8gZmFsc2UgOiB0cnVlO1xyXG5cdFx0XHRcdFx0aWYgKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID09IDMgJiYgZXZ0LmtleUNvZGUgIT0gOCkge1xyXG5cdFx0XHRcdFx0XHQkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG5cdFx0XHRcdFx0XHQkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KS8sIFwiJDEtXCIpO1xyXG5cdFx0XHRcdFx0fSAgZWxzZSBpZiAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPT0gNyAmJiBldnQua2V5Q29kZSAhPSA4KSB7XHJcblx0XHRcdFx0XHRcdCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcblx0XHRcdFx0XHRcdCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0gPSAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLnJlcGxhY2UoLyhcXGR7M30pKFxcZHszfSkvLCBcIiQxLSQyLVwiKTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPT0gMTIpIHtcclxuXHRcdFx0XHRcdFx0JHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuXHRcdFx0XHRcdFx0JHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ucmVwbGFjZSgvKFxcZHszfSkoXFxkezN9KShcXGR7NH0pLywgXCIkMS0kMi0kM1wiKTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPT0gMTApIHtcclxuXHRcdFx0XHRcdFx0JHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ucmVwbGFjZSgvKFxcZHszfSkoXFxkezN9KShcXGR7NH0pLywgXCIkMS0kMi0kM1wiKTtcclxuXHRcdFx0XHRcdH1cdFx0XHRcclxuXHRcdFx0XHRcdGlmICgkc2NvcGUuaXNDb3JyZWN0Rm9ybWF0KSB7XHJcblx0XHRcdFx0XHRcdGlmICgkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLmxlbmd0aCA+PSAxMikge1xyXG5cdFx0XHRcdFx0XHR2YXIgc3RyID0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXTtcclxuXHRcdFx0XHRcdFx0JHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9IHN0ci5zbGljZSgwLCAxMik7XHJcblx0XHRcdFx0XHRcdCRzY29wZS5pc0NvcnJlY3RGb3JtYXQgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoemlwT3JQaG9uZSA9PSAnemlwJykge1xyXG5cdFx0XHRcdFx0aWYgKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID09IDUpIHtcclxuXHRcdFx0XHRcdFx0JHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTktXS9nLCAnJyk7XHJcblx0XHRcdFx0XHRcdGlmIChldnQua2V5Q29kZSA9PSAxMDkgfHwgZXZ0LmtleUNvZGUgPT0gMTg5KSB7XHJcblx0XHRcdFx0XHRcdFx0JHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0rJy0nO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGlzVHdvWmlwQ29kZShuYW1lLCBmYWxzZSk7XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID4gNSAmJiAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLmxlbmd0aCA8PSAxMCkge1xyXG5cdFx0XHRcdFx0XHRpZihuZXcgUmVnRXhwKFwiLVwiKS50ZXN0KCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0pKXtcclxuXHRcdFx0XHRcdFx0XHRpZiAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPT0gMTApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciBwYXR0WmlwID0gL14oXFxkezV9XFwtXFxkezR9KSQvO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKG5hbWUgPT0gJ3ppcENvZGUnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdCRzY29wZS5pc0NvcnJlY3RaaXBGb3JtYXQgPSAocGF0dFppcC50ZXN0KCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0pKSA/IGZhbHNlIDogdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0aXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPT0gOSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKGV2dC5rZXlDb2RlID09IDEwOSB8fCBldnQua2V5Q29kZSA9PSAxODkpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0JChcIiNcIitldnQudGFyZ2V0LmlkKS5pbnNlcnRBdENhcmV0KCctJyk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRpc1R3b1ppcENvZGUobmFtZSwgZmFsc2UpO1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gaXNUd29aaXBDb2RlKG5hbWUsIGJvb2xlYW5WYWx1ZSkge1xyXG5cdFx0XHRpZiAobmFtZSA9PSAnemlwQ29kZScpIHtcclxuXHRcdFx0XHQkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0ID0gYm9vbGVhblZhbHVlO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdCRzY29wZS5nZXRGb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXF1ZXN0Qm9keS5pZGVudGl0eSA9IFwiQ09OVEFDVF9XSE9MRV9TQUxFUlwiO1xyXG5cdFx0XHRyZXF1ZXN0Qm9keS5mb3JtRmFjdG9yPSBmb3JtRmFjdG9yO1xyXG5cdFx0XHRyZXF1ZXN0Qm9keS5maXJzdE5hbWU9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZmlyc3ROYW1lO1xyXG5cdFx0XHRyZXF1ZXN0Qm9keS5sYXN0TmFtZT0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5sYXN0TmFtZTtcclxuXHRcdFx0cmVxdWVzdEJvZHkuZW1haWxJRD0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5lbWFpbDtcclxuXHRcdFx0cmVxdWVzdEJvZHkuZmlybU5hbWU9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuY29tcGFueTtcclxuXHRcdFx0cmVxdWVzdEJvZHkucGhvbmU9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEucGhvbmVOdW1iZXI7XHJcblx0XHRcdHJlcXVlc3RCb2R5LnppcENvZGU9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuemlwQ29kZTtcclxuXHRcdFx0cmVxdWVzdEJvZHkucHJpbWFyeUJlbmVmaXQgPSAkc2NvcGUucmVxdWVzdEluZm9EYXRhLnByaW1hcnlCZW5lZml0O1xyXG5cdFx0XHRyZXF1ZXN0Qm9keS5zZWNvbmRhcnlCZW5lZml0ID0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5zZWNvbmRhcnlCZW5lZml0O1xyXG5cdFx0fTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgLy8kc2NvcGUuZGlzcGxheUVycm9yTXNnID0gISgkc2NvcGUucmVxdWVzdEluZm9EYXRhLmZpcnN0TmFtZSAmJiAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmxhc3ROYW1lICYmICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZW1haWwpIHx8ICEkc2NvcGUuaXNFbWFpbFZhbGlkIHx8ICEkc2NvcGUuaXNDb3JyZWN0Rm9ybWF0IHx8ICEkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0O1xyXG5cdFx0XHQkc2NvcGUuZGlzcGxheUVycm9yTXNnID0gdHJ1ZTtcclxuXHRcdFx0JHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcblx0XHRcdCRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG5cdFx0fTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnZhbGlkYXRlUmVDYXB0Y2hhID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgXHR2YXIgZ1JlY2FwdGNoYVZhbCA9IFwiXCI7XHJcblx0IFx0XHQkKCdmb3JtIC5nLXJlY2FwdGNoYS1yZXNwb25zZScpLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coXCIuZy1yZWNhcHRjaGEtcmVzcG9uc2U6XCIsICQodGhpcykudmFsKCkpO1xyXG5cdFx0XHRcdGlmICgkKHRoaXMpLnZhbCgpICE9PSBcIlwiKSB7XHJcblx0XHRcdFx0XHRnUmVjYXB0Y2hhVmFsID0gJCh0aGlzKS52YWwoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdCBcdC8vdmFyIGdSZWNhcHRjaGFWYWwgPSBnUmVjYXB0Y2hhRWxlLmZpbmQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpO1xyXG4gICAgICAgICAgXHQvL3ZhciBnUmVjYXB0Y2hhVmFsID0gYW5ndWxhci5lbGVtZW50KFwiI2ctcmVjYXB0Y2hhLXJlc3BvbnNlXCIpLnZhbCgpO1xyXG4gICAgICAgICAgXHRpZiAoZ1JlY2FwdGNoYVZhbCAhPT0gbnVsbCAmJiBnUmVjYXB0Y2hhVmFsICE9PSBcIlwiICYmIGdSZWNhcHRjaGFWYWwubGVuZ3RoID4gMTAwKSB7XHJcbiAgICAgICAgICAgXHQgXHQkc2NvcGUucmVDYXB0Y2hhRXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgXHRyZXF1ZXN0Qm9keS5nUmVjYXB0Y2hhUmVzcG9uc2UgPSBnUmVjYXB0Y2hhVmFsO1xyXG4gICAgICAgICAgXHR9IGVsc2Uge1xyXG4gICAgICAgICAgICBcdCRzY29wZS5yZUNhcHRjaGFFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICBcdH1cclxuICAgICAgICB9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIHZhbGlkRm9ybSgpIHtcclxuXHRcdFx0aWYgKCEkc2NvcGUuaXNQcmVwcm9kKSB7XHJcblx0XHRcdFx0JHNjb3BlLnZhbGlkYXRlUmVDYXB0Y2hhKCk7XHJcblx0XHRcdH1cdFxyXG5cdFx0XHRjb25zb2xlLmxvZyhcInZhbGlkRm9ybSAtIFN0YXJ0XCIpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcImlzRW1haWxWYWxpZDogXCIrICRzY29wZS5pc0VtYWlsVmFsaWQpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcInJlQ2FwdGNoYUVycm9yOiBcIisgJHNjb3BlLnJlQ2FwdGNoYUVycm9yKTtcclxuXHJcblx0XHRcdGlmICgkc2NvcGUuY29udGFjdF93aG9sZXNhbGVyX2Zvcm0uJHZhbGlkICYmICghJHNjb3BlLnJlQ2FwdGNoYUVycm9yICYmICRzY29wZS5pc0VtYWlsVmFsaWQpKSB7XHJcblx0XHRcdFx0JHNjb3BlLmdldEZvcm1EYXRhKCk7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coXCJmcm9tIGZvcm1cIiArIEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5KSk7XHJcblx0XHRcdFx0Y29tbW9uRnVuY3Rpb25zLmxvYWRlclNob3coKTtcclxuXHRcdFx0XHQkc2NvcGUuZGlzcGxheUVycm9yTXNnID0gZmFsc2U7XHJcblxyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHQkc2NvcGUuZGlzcGxheUVycm9yKCk7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG4gICAgICAgIFxyXG4gICAgICAgICRzY29wZS5zdWJtaXRDb250YWN0V2hvbGVzYWxlckZvcm0gPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdCRzY29wZS5pc0Zvcm1TdWJtaXR0ZWQgPSB0cnVlO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcInN1Ym1pdEZvcm0gLSBTdGFydFwiKVxyXG5cdFx0XHRjb25zb2xlLmxvZyhcIiRzY29wZS5kaXNwbGF5RXJyb3JNc2c6IFwiICsgSlNPTi5zdHJpbmdpZnkoJHNjb3BlLmRpc3BsYXlFcnJvck1zZykpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcIiRzY29wZS5yZUNhcHRjaGFFcnJvcjogXCIgKyBKU09OLnN0cmluZ2lmeSgkc2NvcGUucmVDYXB0Y2hhRXJyb3IpKTtcclxuXHRcdFx0Y29uc29sZS5sb2coXCIkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2c6IFwiICsgSlNPTi5zdHJpbmdpZnkoJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnKSk7XHJcblx0XHRcdGNvbnNvbGUubG9nKFwiJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnOiBcIiArIEpTT04uc3RyaW5naWZ5KCRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZykpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcIiRzY29wZS5pc0VtYWlsVmFsaWQ6IFwiICsgSlNPTi5zdHJpbmdpZnkoJHNjb3BlLmlzRW1haWxWYWxpZCkpO1xyXG5cclxuICAgICAgICAgIC8qICAgaWYgKCRzY29wZS5pc0Zvcm1TdWJtaXR0ZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yKCk7XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9ICovXHJcblx0XHRcdCRzY29wZS52YWxpZGF0ZUVtYWlsKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZW1haWwpO1xyXG5cclxuXHJcblx0XHRcdGlmKHZhbGlkRm9ybSgpKXtcclxuXHRcdFx0XHRjb250YWN0V2hvbGVzYWxlclNlcnZpY2UuY29udGFjdFdob2xlc2FsZXJTZXJ2aWNlKCRzY29wZSwgcmVxdWVzdEJvZHksIGZ1bmN0aW9uKHJlc3BvbnNlKXsgICAgXHJcblx0XHRcdFx0XHR2YXIgZGF0YVJlc3BvbnNlID0gcmVzcG9uc2UuZGF0YS5yZXNwb25zZVN0YXR1c0NvZGU7XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhcImRhdGFSZXNwb25zZVwiICsgZGF0YVJlc3BvbnNlKTtcclxuXHRcdFx0XHRcdGlmIChkYXRhUmVzcG9uc2Upe1xyXG5cdFx0XHRcdFx0XHQkc2NvcGUuaXNTdWNjZXNzID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0aWYgKGRhdGFSZXNwb25zZSA9PT0gJ1RJTUVEX09VVCcpIHtcclxuXHRcdFx0XHRcdFx0XHQkc2NvcGUuZXJyb3JNc2cgPSAnVElNRUQgT1VUJztcclxuXHRcdFx0XHRcdFx0XHR3YXJuaW5nTXNnID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChkYXRhUmVzcG9uc2UgPT09ICdJTlRFUk5BTF9FUlJPUicpIHtcclxuXHRcdFx0XHRcdFx0XHQkc2NvcGUuZXJyb3JNc2cgPSAnSU5URVJOQUwgRVJST1InO1xyXG5cdFx0XHRcdFx0XHRcdHdhcm5pbmdNc2cgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGRhdGFSZXNwb25zZSA9PT0gJ0NBUFRDSEFfRVJST1InKSB7XHJcblx0XHRcdFx0XHRcdFx0JHNjb3BlLmVycm9yTXNnID0gJ0lOVkFMSUQgQ0FQVENIQSc7XHJcblx0XHRcdFx0XHRcdFx0d2FybmluZ01zZyA9IHRydWU7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoZGF0YVJlc3BvbnNlID09PSAnU0VSVklDRV9FUlJPUicpIHtcclxuXHRcdFx0XHRcdFx0XHQkc2NvcGUuZXJyb3JNc2cgPSAnU0VSVklDRSBFUlJPUic7XHJcblx0XHRcdFx0XHRcdFx0d2FybmluZ01zZyA9IHRydWU7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoZGF0YVJlc3BvbnNlID09PSAnU1VDQ0VTUycpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0JHNjb3BlLmVycm9yTXNnID0gJ1NVQ0NFU1MuIFRoYW5rIHlvdSBmb3Igc2hhcmluZyB5b3VyIGluZm9ybWF0aW9uLic7XHJcblx0XHRcdFx0XHRcdFx0d2FybmluZ01zZyA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdC8vJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdCRzY29wZS5kaXNwbGF5RXJyb3JNc2cgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHQkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHQkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdCRzY29wZS5pc0Zvcm1TdWJtaXR0ZWQgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHQvL3JlcXVlc3RCb2R5ID0ge307XHJcblx0XHRcdFx0XHRcdFx0dmFyIGRhdGE9e1xyXG5cdFx0XHRcdFx0XHRcdFx0XCJldmVudF9hY3Rpb25cIiA6IFwiZm9ybVwiLFxyXG5cdFx0XHRcdFx0XHRcdFx0XCJldmVudF9uYW1lXCIgOiBcInNlbmQgaW5mb3JtYXRpb25cIiwgXHJcblx0XHRcdFx0XHRcdFx0XHRcImV2ZW50X3R5cGVcIiA6IFwibGlmZXRpbWUgaW5jb21lIHNlbGVjdG9yXCIsXHJcblx0XHRcdFx0XHRcdFx0XHRcImV2ZW50X3ZlcnNpb25cIiA6IFwibW9kYWxcIiwgXHJcblx0XHRcdFx0XHRcdFx0XHRcImV2ZW50X3N0YXR1c1wiIDogXCJjb21wbGV0ZVwiLFxyXG5cdFx0XHRcdFx0XHRcdFx0XCJwcm9kdWN0X25hbWVcIiA6IHJlcXVlc3RCb2R5LnByaW1hcnlCZW5lZml0XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdHV0YWcubGluayhkYXRhKTsgXHJcblx0XHRcdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Y29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmKHdhcm5pbmdNc2cgPT09IHRydWUpe1x0XHJcblx0XHRcdFx0XHRcdCRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0JHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdCRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcbiAgICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRsZmdhcHAuY29udHJvbGxlcignY29udGFjdFdob2xlc2FsZXJMbGF2YUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckdGltZW91dCcsICdjb250YWN0V2hvbGVzYWxlckxsYXZhU2VydmljZScsICckd2luZG93JywgY29udGFjdFdob2xlc2FsZXJMbGF2YUNvbnRyb2xsZXJdKTtcclxuXHJcblx0ZnVuY3Rpb24gY29udGFjdFdob2xlc2FsZXJMbGF2YUNvbnRyb2xsZXIoJHNjb3BlLCAkdGltZW91dCwgY29udGFjdFdob2xlc2FsZXJMbGF2YVNlcnZpY2UsICR3aW5kb3cpIHtcclxuXHJcblx0XHR2YXIgY250Y3RXaGxzbHJMbGF2YVZNID0gdGhpcztcclxuXHJcblx0XHQkc2NvcGUuaXNQcmVwcm9kID0gZmFsc2U7XHJcblxyXG5cdFx0Ly90ZW1wXHJcblx0XHQkc2NvcGUuaXNQcmVwcm9kRW52ID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRpZiAod2luZG93LmxvY2F0aW9uLmhvc3QuaW5kZXhPZignd2NzLXJzcy1wcmVwcm9kJykgPiAtMSkge1xyXG5cdFx0XHRcdCRzY29wZS5pc1ByZXByb2QgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNvbnNvbGUubG9nKFwiaXNQcmVwcm9kOiBcIiArICRzY29wZS5pc1ByZXByb2QpO1xyXG5cdFx0fTtcclxuXHJcblx0XHR2YXIgcmVxdWVzdEJvZHkgPSB7fSwgd2FybmluZ01zZywgZm9ybUZhY3RvcjtcclxuXHRcdCRzY29wZS5yZWNhcHRjaGFTaXRlS2V5ID0gZ2xvYmFsQ29uc3RhbnQucmVjYXB0Y2hhU2l0ZUtleTtcclxuXHJcblx0XHQkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0JHNjb3BlLmlzUHJlcHJvZEVudigpO1xyXG5cdFx0XHQkc2NvcGUucmVxdWVzdEluZm9EYXRhID0ge307XHJcblx0XHR9XHJcblxyXG5cdFx0JHNjb3BlLmlzRm9ybVN1Ym1pdHRlZCA9IGZhbHNlO1xyXG5cdFx0JHNjb3BlLmRpc3BsYXlFcnJvck1zZyA9IGZhbHNlO1xyXG5cdFx0JHNjb3BlLnJlQ2FwdGNoYUVycm9yID0gZmFsc2U7XHJcblx0XHQkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuXHRcdCRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG5cdFx0JHNjb3BlLmlzRW1haWxWYWxpZCA9IGZhbHNlO1xyXG5cclxuXHRcdCQoZG9jdW1lbnQpLm9uKCdyZXNwb25zaXZlOnN0YXRlY2hhbmdlZCcsIGZ1bmN0aW9uIChlLCBwYXJhbSkge1xyXG5cdFx0XHRmb3JtRmFjdG9yID0gcGFyYW07XHJcblx0XHR9KTtcclxuXHJcblx0XHQkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHZhciBpc0Zvcm1Ub3VjaGVkID0gZmFsc2U7XHJcblx0XHRcdCQoJ2Zvcm1bbmFtZT1cImNvbnRhY3Rfd2hvbGVzYWxlcl9mb3JtXCJdIGlucHV0W25hbWU9XCJmaXJzdE5hbWVcIl0nKS5vbignZm9jdXMnLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIWlzRm9ybVRvdWNoZWQpIHtcclxuXHRcdFx0XHRcdHZhciBkYXRhID0ge1xyXG5cdFx0XHRcdFx0XHRcImV2ZW50X2FjdGlvblwiIDogXCJmb2N1c1wiLFxyXG5cdFx0XHRcdFx0XHRcImV2ZW50X25hbWVcIiA6ICdmaXJzdCBuYW1lJywgXHJcblx0XHRcdFx0XHRcdFwiZXZlbnRfdHlwZVwiIDogXCJsZXZlbGFkdmFudGFnZVwiLFxyXG5cdFx0XHRcdFx0XHRcImV2ZW50X3ZlcnNpb25cIiA6IFwiY29udGFjdCB3aG9sZXNhbGVyXCIsXHJcblx0XHRcdFx0XHRcdFwiZXZlbnRfc3RhdHVzXCIgOiBcInN0YXJ0XCIsXHJcblx0XHRcdFx0XHRcdFwicHJvZHVjdF9uYW1lXCIgOiBcIkxpbmNvbG4gTGV2ZWwgQWR2YW50YWdlXCJcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICh1dGFnKSB1dGFnLmxpbmsoZGF0YSk7XHJcblx0XHRcdFx0XHRpc0Zvcm1Ub3VjaGVkID0gdHJ1ZTtcclxuXHRcdFx0XHR9IFxyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdCRzY29wZS52YWxpZGF0ZUVtYWlsID0gZnVuY3Rpb24gKGVtYWlsVmFsdWUpIHtcclxuXHRcdFx0dmFyIEVNQUlMX1JFR0VYUCA9IC9eW19hLXowLTkhIyQlJicqPT9eXystYHt8fX5dKlteOj48OygpXCIsXFxbXFxdXSsoXFwuW19hLXowLTldKykqQFthLXowLTktXSsoXFwuW2EtejAtOS1dKykqKFxcLlthLXpdezIsNH0pJC9pO1xyXG5cdFx0XHRpZiAoZW1haWxWYWx1ZSA9PT0gJ25vbmUnIHx8IEVNQUlMX1JFR0VYUC50ZXN0KGVtYWlsVmFsdWUpKSB7XHJcblx0XHRcdFx0JHNjb3BlLmlzRW1haWxWYWxpZCA9IHRydWU7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0JHNjb3BlLmlzRW1haWxWYWxpZCA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH07XHJcblxyXG5cdFx0JHNjb3BlLm51bWJlckZvcm1hdCA9IGZ1bmN0aW9uIChldnQsIGlucHV0VmFsdWUsIG5hbWUsIHppcE9yUGhvbmUpIHtcclxuXHRcdFx0aWYgKGlucHV0VmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdHJldHVybiAnJztcclxuXHRcdFx0fVxyXG5cdFx0XHQkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOS1dL2csICcnKTtcclxuXHRcdFx0aWYgKHppcE9yUGhvbmUgPT09ICdwaG9uZScpIHtcclxuXHRcdFx0XHR2YXIgcGF0dCA9IC9eKFxcZHszfVxcLVxcZHszfS1cXGR7NH0pJC87XHJcblxyXG5cdFx0XHRcdGlmIChuYW1lID09PSAnY29udGFjdE51bWJlcicpIHtcclxuXHRcdFx0XHRcdCRzY29wZS5pc0NvcnJlY3RQaG9uZUZvcm1hdCA9ICEocGF0dC50ZXN0KCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0pKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID09PSAzICYmIGV2dC5rZXlDb2RlICE9PSA4KSB7XHJcblx0XHRcdFx0XHQkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG5cdFx0XHRcdFx0JHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ucmVwbGFjZSgvKFxcZHszfSkvLCAnJDEtJyk7XHJcblx0XHRcdFx0fSBlbHNlIGlmICgkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLmxlbmd0aCA9PT0gNyAmJiBldnQua2V5Q29kZSAhPT0gOCkge1xyXG5cdFx0XHRcdFx0JHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuXHRcdFx0XHRcdCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0gPSAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLnJlcGxhY2UoLyhcXGR7M30pKFxcZHszfSkvLFxyXG5cdFx0XHRcdFx0XHQnJDEtJDItJyk7XHJcblx0XHRcdFx0fSBlbHNlIGlmICgkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLmxlbmd0aCA9PT0gMTIpIHtcclxuXHRcdFx0XHRcdCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcblx0XHRcdFx0XHQkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KShcXGR7M30pKFxcZHs0fSkvLFxyXG5cdFx0XHRcdFx0XHQnJDEtJDItJDMnKTtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID09PSAxMCkge1xyXG5cdFx0XHRcdFx0JHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ucmVwbGFjZSgvKFxcZHszfSkoXFxkezN9KShcXGR7NH0pLyxcclxuXHRcdFx0XHRcdFx0JyQxLSQyLSQzJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmICgkc2NvcGUuaXNDb3JyZWN0UGhvbmVGb3JtYXQpIHtcclxuXHRcdFx0XHRcdGlmICgkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLmxlbmd0aCA+PSAxMikge1xyXG5cdFx0XHRcdFx0XHR2YXIgc3RyID0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXTtcclxuXHJcblx0XHRcdFx0XHRcdCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0gPSBzdHIuc2xpY2UoMCwgMTIpO1xyXG5cdFx0XHRcdFx0XHQkc2NvcGUuaXNDb3JyZWN0UGhvbmVGb3JtYXQgPSBmYWxzZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSBpZiAoemlwT3JQaG9uZSA9PT0gJ3ppcCcpIHtcclxuXHRcdFx0XHRpZiAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPT09IDUpIHtcclxuXHRcdFx0XHRcdCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05LV0vZywgJycpO1xyXG5cdFx0XHRcdFx0aWYgKGV2dC5rZXlDb2RlID09PSAxMDkgfHwgZXZ0LmtleUNvZGUgPT09IDE4OSkge1xyXG5cdFx0XHRcdFx0XHQkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSArICctJztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlzVHdvWmlwQ29kZShuYW1lLCBmYWxzZSk7XHJcblx0XHRcdFx0fSBlbHNlIGlmICgkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLmxlbmd0aCA+IDUgJiYgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPD0gMTApIHtcclxuXHRcdFx0XHRcdGlmIChuZXcgUmVnRXhwKCctJykudGVzdCgkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdKSkge1xyXG5cdFx0XHRcdFx0XHRpZiAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPT09IDEwKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIHBhdHRaaXAgPSAvXihcXGR7NX1cXC1cXGR7NH0pJC87XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmIChuYW1lID09PSAncmVxdWVzdG9yWmlwQ29kZScpIHtcclxuXHRcdFx0XHRcdFx0XHRcdCRzY29wZS5pc0NvcnJlY3RaaXBGb3JtYXQgPSAhKHBhdHRaaXAudGVzdCgkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdKSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdGlzVHdvWmlwQ29kZShuYW1lLCB0cnVlKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBlbHNlIGlmICgkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLmxlbmd0aCA9PT0gOSkge1xyXG5cdFx0XHRcdFx0XHRpZiAoZXZ0LmtleUNvZGUgPT09IDEwOSB8fCBldnQua2V5Q29kZSA9PT0gMTg5KSB7XHJcblx0XHRcdFx0XHRcdFx0JCgnIycgKyBldnQudGFyZ2V0LmlkKS5pbnNlcnRBdENhcmV0KCctJyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aXNUd29aaXBDb2RlKG5hbWUsIGZhbHNlKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGlzVHdvWmlwQ29kZShuYW1lLCB0cnVlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0aXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQkc2NvcGUuZ2V0Rm9ybURhdGEgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHJlcXVlc3RCb2R5LmlkZW50aXR5ID0gXCJMTEFWQV9DT05UQUNUX1dIT0xFX1NBTEVSXCI7XHJcblx0XHRcdHJlcXVlc3RCb2R5LmZvcm1GYWN0b3IgPSBmb3JtRmFjdG9yO1xyXG5cdFx0XHRyZXF1ZXN0Qm9keS5maXJzdE5hbWUgPSAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmZpcnN0TmFtZTtcclxuXHRcdFx0cmVxdWVzdEJvZHkubGFzdE5hbWUgPSAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmxhc3ROYW1lO1xyXG5cdFx0XHRyZXF1ZXN0Qm9keS5lbWFpbCA9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZW1haWw7XHJcblx0XHRcdGlmICgkc2NvcGUucmVxdWVzdEluZm9EYXRhLmNvbnRhY3ROdW1iZXIgPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0cmVxdWVzdEJvZHkuY29udGFjdE51bWJlciA9IFwiXCI7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmVxdWVzdEJvZHkuY29udGFjdE51bWJlciA9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuY29udGFjdE51bWJlcjtcclxuXHRcdFx0fVxyXG5cdFx0XHRjb25zb2xlLmxvZyhyZXF1ZXN0Qm9keSk7XHJcblx0XHRcdHJlcXVlc3RCb2R5LmZpcm1OYW1lID0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5jb21wYW55O1xyXG5cdFx0XHRyZXF1ZXN0Qm9keS5maW5hbmNpYWxQcm8gPSAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmZpbmFuY2lhbFBybztcclxuXHJcblx0XHR9O1xyXG5cclxuXHRcdCRzY29wZS5kaXNwbGF5RXJyb3IgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdC8vJHNjb3BlLmRpc3BsYXlFcnJvck1zZyA9ICEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5maXJzdE5hbWUgJiYgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5sYXN0TmFtZSAmJiAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmVtYWlsKSB8fCAhJHNjb3BlLmlzRW1haWxWYWxpZCB8fCAhJHNjb3BlLmlzQ29ycmVjdEZvcm1hdCB8fCAhJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdDtcclxuXHRcdFx0JHNjb3BlLmRpc3BsYXlFcnJvck1zZyA9IHRydWU7XHJcblx0XHRcdCRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG5cdFx0XHQkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuXHRcdH07XHJcblxyXG5cdFx0JHNjb3BlLnZhbGlkYXRlUmVDYXB0Y2hhID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHR2YXIgZ1JlY2FwdGNoYVZhbCA9IFwiXCI7XHJcblx0XHRcdCQoJ2Zvcm0gLmctcmVjYXB0Y2hhLXJlc3BvbnNlJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coXCIuZy1yZWNhcHRjaGEtcmVzcG9uc2U6XCIsICQodGhpcykudmFsKCkpO1xyXG5cdFx0XHRcdGlmICgkKHRoaXMpLnZhbCgpICE9PSBcIlwiKSB7XHJcblx0XHRcdFx0XHRnUmVjYXB0Y2hhVmFsID0gJCh0aGlzKS52YWwoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0Ly92YXIgZ1JlY2FwdGNoYVZhbCA9IGdSZWNhcHRjaGFFbGUuZmluZCgnI2ctcmVjYXB0Y2hhLXJlc3BvbnNlJykudmFsKCk7XHJcblx0XHRcdC8vdmFyIGdSZWNhcHRjaGFWYWwgPSBhbmd1bGFyLmVsZW1lbnQoXCIjZy1yZWNhcHRjaGEtcmVzcG9uc2VcIikudmFsKCk7XHJcblx0XHRcdGlmIChnUmVjYXB0Y2hhVmFsICE9PSBudWxsICYmIGdSZWNhcHRjaGFWYWwgIT09IFwiXCIgJiYgZ1JlY2FwdGNoYVZhbC5sZW5ndGggPiAxMDApIHtcclxuXHRcdFx0XHQkc2NvcGUucmVDYXB0Y2hhRXJyb3IgPSBmYWxzZTtcclxuXHRcdFx0XHRyZXF1ZXN0Qm9keS5nUmVjYXB0Y2hhUmVzcG9uc2UgPSBnUmVjYXB0Y2hhVmFsO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdCRzY29wZS5yZUNhcHRjaGFFcnJvciA9IHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0JHNjb3BlLlJlZGlyZWN0VG9VUkwgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHZhciBob3N0ID0gJHdpbmRvdy5sb2NhdGlvbi5vcmlnaW47XHJcblx0XHRcdHZhciBsYW5kaW5nVXJsID0gaG9zdCArIGdsb2JhbENvbnN0YW50LmxsYXZhUmVkaXJlY3Q7XHJcblx0XHRcdCR3aW5kb3cubG9jYXRpb24uaHJlZiA9IGxhbmRpbmdVcmw7XHJcblx0XHR9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIHZhbGlkRm9ybSgpIHtcclxuXHRcdFx0aWYgKCEkc2NvcGUuaXNQcmVwcm9kKSB7XHJcblx0XHRcdFx0JHNjb3BlLnZhbGlkYXRlUmVDYXB0Y2hhKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCRzY29wZS5jb250YWN0X3dob2xlc2FsZXJfZm9ybS4kdmFsaWQgJiYgKCEkc2NvcGUucmVDYXB0Y2hhRXJyb3IgJiYgJHNjb3BlLmlzRW1haWxWYWxpZCkpIHtcclxuXHRcdFx0XHQkc2NvcGUuZ2V0Rm9ybURhdGEoKTtcclxuXHRcdFx0XHRjb21tb25GdW5jdGlvbnMubG9hZGVyU2hvdygpO1xyXG5cdFx0XHRcdCRzY29wZS5kaXNwbGF5RXJyb3JNc2cgPSBmYWxzZTtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQkc2NvcGUuZGlzcGxheUVycm9yKCk7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdCRzY29wZS5zdWJtaXRMbGF2YUNvbnRhY3RXaG9sZXNhbGVyRm9ybSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0Lypjb25zb2xlLmxvZyhcInN1Ym1pdEZvcm0gLSBTdGFydFwiKVxyXG5cdFx0XHRjb25zb2xlLmxvZyhcIiRzY29wZS5kaXNwbGF5RXJyb3JNc2c6IFwiICsgSlNPTi5zdHJpbmdpZnkoJHNjb3BlLmRpc3BsYXlFcnJvck1zZykpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcIiRzY29wZS5yZUNhcHRjaGFFcnJvcjogXCIgKyBKU09OLnN0cmluZ2lmeSgkc2NvcGUucmVDYXB0Y2hhRXJyb3IpKTtcclxuXHRcdFx0Y29uc29sZS5sb2coXCIkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2c6IFwiICsgSlNPTi5zdHJpbmdpZnkoJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnKSk7XHJcblx0XHRcdGNvbnNvbGUubG9nKFwiJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnOiBcIiArIEpTT04uc3RyaW5naWZ5KCRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZykpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcIiRzY29wZS5pc0VtYWlsVmFsaWQ6IFwiICsgSlNPTi5zdHJpbmdpZnkoJHNjb3BlLmlzRW1haWxWYWxpZCkpO1xyXG5cclxuICAgICAgICAgIFx0aWYgKCRzY29wZS5pc0Zvcm1TdWJtaXR0ZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yKCk7XHJcblx0XHRcdH0qL1xyXG5cdFx0XHRpZiAoISRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZmlyc3ROYW1lICYmICEkc2NvcGUucmVxdWVzdEluZm9EYXRhLmxhc3ROYW1lICYmXHJcblx0XHRcdFx0ISRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZW1haWwgJiYgISRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuY29tcGFueSkge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwic2hvdWxkIG5vdCBiZSBhYmxlIHRvIGNsaWNrIHN1Ym1pdFwiKVxyXG5cdFx0XHRcdCRzY29wZS5pc0Zvcm1TdWJtaXR0ZWQgPSBmYWxzZTtcclxuXHRcdFx0fSBlbHNlIGlmICghJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5maW5hbmNpYWxQcm8pIHtcclxuXHRcdFx0XHQkc2NvcGUuUmVkaXJlY3RUb1VSTCgpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdCRzY29wZS5pc0Zvcm1TdWJtaXR0ZWQgPSB0cnVlO1xyXG5cdFx0XHRcdCRzY29wZS52YWxpZGF0ZUVtYWlsKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZW1haWwpO1xyXG5cdFx0XHRcdGlmICh2YWxpZEZvcm0oKSkge1xyXG5cdFx0XHRcdFx0Y29udGFjdFdob2xlc2FsZXJMbGF2YVNlcnZpY2UuY29udGFjdFdob2xlc2FsZXJMbGF2YVNlcnZpY2UoJHNjb3BlLCByZXF1ZXN0Qm9keSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHRcdHZhciBkYXRhUmVzcG9uc2UgPSByZXNwb25zZS5kYXRhLnJlc3BvbnNlU3RhdHVzQ29kZTtcclxuXHRcdFx0XHRcdFx0aWYgKGRhdGFSZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0XHRcdCRzY29wZS5pc1N1Y2Nlc3MgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdGlmIChkYXRhUmVzcG9uc2UgPT09ICdUSU1FRF9PVVQnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQkc2NvcGUuZXJyb3JNc2cgPSAnVElNRUQgT1VUJztcclxuXHRcdFx0XHRcdFx0XHRcdHdhcm5pbmdNc2cgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoZGF0YVJlc3BvbnNlID09PSAnSU5URVJOQUxfRVJST1InKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQkc2NvcGUuZXJyb3JNc2cgPSAnSU5URVJOQUwgRVJST1InO1xyXG5cdFx0XHRcdFx0XHRcdFx0d2FybmluZ01zZyA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChkYXRhUmVzcG9uc2UgPT09ICdDQVBUQ0hBX0VSUk9SJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0JHNjb3BlLmVycm9yTXNnID0gJ0lOVkFMSUQgQ0FQVENIQSc7XHJcblx0XHRcdFx0XHRcdFx0XHR3YXJuaW5nTXNnID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGRhdGFSZXNwb25zZSA9PT0gJ1NFUlZJQ0VfRVJST1InKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQkc2NvcGUuZXJyb3JNc2cgPSAnU0VSVklDRSBFUlJPUic7XHJcblx0XHRcdFx0XHRcdFx0XHR3YXJuaW5nTXNnID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGRhdGFSZXNwb25zZSA9PT0gJ1NVQ0NFU1MnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQkc2NvcGUuZXJyb3JNc2cgPSAnU1VDQ0VTUy4gVGhhbmsgeW91IGZvciBzaGFyaW5nIHlvdXIgaW5mb3JtYXRpb24uJztcclxuXHRcdFx0XHRcdFx0XHRcdHdhcm5pbmdNc2cgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHRcdC8vJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdFx0JHNjb3BlLmRpc3BsYXlFcnJvck1zZyA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdFx0JHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdFx0XHQkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0JHNjb3BlLmlzRm9ybVN1Ym1pdHRlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly9yZXF1ZXN0Qm9keSA9IHt9O1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIGRhdGEgPSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFwiZXZlbnRfYWN0aW9uXCI6IFwiYnV0dG9uXCIsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFwiZXZlbnRfbmFtZVwiOiBcInN1Ym1pdFwiLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcImV2ZW50X3R5cGVcIjogXCJsZXZlbGFkdmFudGFnZVwiLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcImV2ZW50X3ZlcnNpb25cIjogXCJjb250YWN0IHdob2xlc2FsZXJcIixcclxuXHRcdFx0XHRcdFx0XHRcdFx0XCJldmVudF9zdGF0dXNcIjogXCJjb21wbGV0ZVwiLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcInByb2R1Y3RfbmFtZVwiOiBcIkxpbmNvbG4gTGV2ZWwgQWR2YW50YWdlXCJcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdHV0YWcubGluayhkYXRhKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0Y29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAod2FybmluZ01zZyA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0XHRcdCRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHQkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHQkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fSAvL2VuZC1pZiB2YWxpZGZvcm1cclxuXHRcdFx0fSAvL2VuZCBmaW5Qcm9cclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24oKSB7Ly9hZGRlZCBjb2RlXG4gICAgYW5ndWxhci5tb2R1bGUoJ2xmZ2FwcCcpLmNvbnRyb2xsZXIoJ2ZhYUNvbnRyb2xsZXInLCBbJyR0aW1lb3V0JywgJyRzY29wZScsICdHb29nbGVNYXBTZXJ2aWNlJywgJ1Jlc3RTZXJ2aWNlJyxcbiAgICAgICAgJ0NvbW1vblNlcnZpY2UnLCAnJGZpbHRlcicsXG4gICAgICAgIGZ1bmN0aW9uKCR0aW1lb3V0LCAkc2NvcGUsIGdvb2dsZU1hcFNlcnZpY2UsIHJlc3RTZXJ2aWNlLCBjb21tb25TZXJ2aWNlLCAkZmlsdGVyKSB7XG4gICAgICAgICAgICB2YXIgZmFhVk0gPSB0aGlzO1xuXG4gICAgICAgICAgICBmYWFWTS5saW1pdFRvID0gNTtcblxuICAgICAgICAgICAgZmFhVk0uaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBmb3JtXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlYXJjaEFuQWR2aXNvcicpLnJlc2V0KCk7XG5cbiAgICAgICAgICAgICAgICBmYWFWTS5yZXN1bHRzTW9kZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGZhYVZNLnNlYXJjaFJlc3VsdHMgPSBbXTtcblxuICAgICAgICAgICAgICAgIGZhYVZNLmZpbHRlck9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICdkYWZwJyAgIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICdwZm1mbHRjJzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICdwbWZ3bGknIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICdwb213JyAgIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICdzZmMnICAgIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICdtbXJpbCcgIDogZmFsc2VcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgZmFhVk0uZmlsdGVyVGV4dCA9ICdTZWxlY3QgYSBmaWx0ZXInO1xuICAgICAgICAgICAgICAgIGZhYVZNLmZpbHRlckJ0blRleHQgPSAnQ29udGludWUnO1xuICAgICAgICAgICAgICAgIGZhYVZNLnNlYXJjaEJ5UGggPSAnWklQIGNvZGUnO1xuICAgICAgICAgICAgICAgIGZhYVZNLnNlYXJjaEJ5ID0gJ3ppcENvZGUnO1xuXG4gICAgICAgICAgICAgICAgZmFhVk0uY29tbW9uU2VydmljZSA9IGNvbW1vblNlcnZpY2U7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmYWFWTS5sb2FkTW9yZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGZhYVZNLmxpbWl0VG8gPSBmYWFWTS5saW1pdFRvICsgNTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZhYVZNLnRyaWdnZXJNYXJrZXIgPSBmdW5jdGlvbihhZHZpc29yLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIGdvb2dsZU1hcFNlcnZpY2UubGlzdFNjcm9sbChpbmRleCk7XG4gICAgICAgICAgICAgICAgZ29vZ2xlTWFwU2VydmljZS50cmlnZ2VyTWFya2VyKGFkdmlzb3IpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZmFhVk0uaXNWYWxpZFNlYXJjaEZvcm0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoKGZhYVZNLnNlYXJjaFBhcmFtICE9PSB1bmRlZmluZWQgJiYgZmFhVk0uc2VhcmNoUGFyYW0gIT09IG51bGwgJiYgZmFhVk0uc2VhcmNoUGFyYW0gIT09ICcnKSAmJiAoZmFhVk0uZmlsdGVyT3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAuZGFmcCB8fCBmYWFWTS5maWx0ZXJPcHRpb25zLnBmbWZsdGMgfHwgZmFhVk0uZmlsdGVyT3B0aW9ucy5wbWZ3bGkgfHwgZmFhVk0uZmlsdGVyT3B0aW9ucy5wb213IHx8IGZhYVZNLmZpbHRlck9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZmMgfHwgZmFhVk0uZmlsdGVyT3B0aW9ucy5tbXJpbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZhYVZNLnNlYXJjaEJ5ID09PSAnbGFzdE5hbWUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmYWFWTS5zZWFyY2hCeSA9PT0gJ3ppcENvZGUnICYmIGZhYVZNLnNlYXJjaFBhcmFtLnJlcGxhY2UoL1teMC05XS9nLCAnJykubGVuZ3RoID09PSA1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmYWFWTS50cmlnZ2VyQW5hbHl0aWNzID0gZnVuY3Rpb24oaW5kZXgsIHZlcnNpb24sIGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgIGlmICh1dGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbicgIDogJ2xpbmsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X25hbWUnICAgIDogZXZlbnROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3R5cGUnICAgIDogJ2ZpbmRhbmFkdmlzb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3ZlcnNpb24nIDogdmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9wb3NpdGlvbic6IGluZGV4XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgdXRhZy5saW5rKGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cblx0XHRcdGZhYVZNLnRyaWdnZXJBbmFseXRpY3NXaXRoRGlzdGFuY2UgPSBmdW5jdGlvbihpbmRleCwgdmVyc2lvbiwgZXZlbnROYW1lLCBkaXN0YW5jZSkge1xuICAgICAgICAgICAgICAgIGlmICh1dGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbicgIDogJ2xpbmsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X25hbWUnICAgIDogZXZlbnROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3R5cGUnICAgIDogJ2ZpbmRhbmFkdmlzb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3ZlcnNpb24nIDogdmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9wb3NpdGlvbic6IGluZGV4LFxuXHRcdFx0XHRcdFx0J2V2ZW50X3Jlc3VsdHMnIDogZGlzdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB1dGFnLmxpbmsoZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblx0XHRcdFxuICAgICAgICAgICAgZmFhVk0uY2xpY2tFbnRlciA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgICAgIGV2dCA9IChldnQpID8gZXZ0IDogd2luZG93LmV2ZW50O1xuICAgICAgICAgICAgICAgIHZhciBjaGFyQ29kZSA9IChldnQud2hpY2gpID8gZXZ0LndoaWNoIDogZXZ0LmtleUNvZGU7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPT09IDEzICYmIGZhYVZNLmlzVmFsaWRTZWFyY2hGb3JtKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmFhVk0uc2VhcmNoQWR2aXNvcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZhYVZNLmNsaWNrRW50ZXJDb250YWN0WW91ID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICAgICAgZXZ0ID0gKGV2dCkgPyBldnQgOiB3aW5kb3cuZXZlbnQ7XG4gICAgICAgICAgICAgICAgdmFyIGNoYXJDb2RlID0gKGV2dC53aGljaCkgPyBldnQud2hpY2ggOiBldnQua2V5Q29kZTtcblxuICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA9PT0gMTMgJiYgZmFhVk0uaXNWYWxpZENvbnRhY3RGb3JtKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmFhVk0uY29udGFjdFlvdSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZhYVZNLmlzVmFsaWRDb250YWN0Rm9ybSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBwaG9uZU5vUHRybiA9IC9eKFxcZHszfVxcLVxcZHszfS1cXGR7NH0pJC87XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gISEoKGZhYVZNLmZpcnN0TmFtZSAmJiBwaG9uZU5vUHRybi50ZXN0KGZhYVZNLnBob25lTm8pKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmYWFWTS5jb250YWN0WW91ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhY3RZb3UgPSB7XG4gICAgICAgICAgICAgICAgICAgICdmaXJzdE5hbWUnOiBmYWFWTS5maXJzdE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICdwaG9uZU5vJyAgOiBmYWFWTS5waG9uZU5vXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmICh1dGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbic6ICdidXR0b24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X25hbWUnICA6ICdjb250aW51ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfdHlwZScgIDogJ2ZpbmRhbmFkdmlzb3InXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgdXRhZy5saW5rKGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ2ZhYUNvbnRhY3QnLCBKU09OLnN0cmluZ2lmeShjb250YWN0WW91KSk7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gJy9wdWJsaWMvaW5kaXZpZHVhbC9jb250YWN0Zm9ybXNjbGFpbXMvZmluZGFuYWR2aXNvcic7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKiBVdGlsaXR5IGNvbW1vbiBmdW5jdGlvbnMgKi9cbiAgICAgICAgICAgIC8vIEV2ZW50IHRvIGRldGVjdCBkZXZpY2VzXG4gICAgICAgICAgICBmYWFWTS51cGRhdGVSZXN1bHRzID0gZnVuY3Rpb24oc2VhcmNoUmVzdWx0cykge1xuICAgICAgICAgICAgICAgIGZhYVZNLnNlYXJjaFJlc3VsdHMgPSBzZWFyY2hSZXN1bHRzO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZmFhVk0ubm9SZXN1bHRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gSGlkZSB0aGUgbG9hZGVyIGFmdGVyIGdldHRpbmcgdGhlIHJlc3BvbnNlIGZyb20gc2VydmljZVxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2ZhZGUnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjc3RhdHVzJykuaGlkZSgpO1xuXG4gICAgICAgICAgICAgICAgZmFhVk0ucmVzdWx0c01vZGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBmYWFWTS5maWx0ZXJUZXh0ID0gJ1NlbGVjdCBhIGZpbHRlcic7XG4gICAgICAgICAgICAgICAgZmFhVk0uZmlsdGVyQnRuVGV4dCA9ICdDb250aW51ZSc7XG4gICAgICAgICAgICAgICAgZmFhVk0uc2VhcmNoUmVzdWx0cyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgZmFhVk0ubm9SZXN1bHRzTW9kZSA9IHRydWU7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBDbGljayBldmVudCBmb3IgU2VhcmNoIGJ1dHRvblxuICAgICAgICAgICAgZmFhVk0uc2VhcmNoQWR2aXNvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIFNob3cgdGhlIGxvYWRlciBiZWZvcmUgY2FsbGluZyBzZXJ2aWNlXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjZmFkZScpLnNob3coKTtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNzdGF0dXMnKS5zaG93KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBHZW9jb2RlIHNlYXJjaCB0byBnZXQgbGF0ICYgbG5nIGZvciB0aGUgemlwY29kZSBzZWFyY2hcbiAgICAgICAgICAgICAgICAvLyBBZGRlZCBDb2RlOlxuICAgICAgICAgICAgICAgIGlmKGZhYVZNLnNlYXJjaEJ5ID09PSAnemlwQ29kZScpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvY29kZVByb21pc2UgPSBnb29nbGVNYXBTZXJ2aWNlLmdlb2NvZGVMYXRMbmcoZmFhVk0uc2VhcmNoUGFyYW0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmFhVk0uc2VhcmNoQnkgPT09J2xhc3ROYW1lJyl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbGxlZ2FsQ2hyUmVnZXggPSBuZXcgUmVnRXhwKCdeW18lXSskJyk7IC8vaWxsZWdhbCBjaGFyYWN0ZXJzIG5vdCBhbGxvd2VkICh1bmRlc2lyYWJsZSBpbnRlcmFjdGlvbiB3aXRoIGJhY2tlbmQpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvL0NoZWNrZXIgZm9yIHNwZWNpYWwgY2FzZSBhbmQgY2hhcmFjdGVyIHJlcGxhY2Ugc28gYmFja2VuZCBjb2RlIHdpbGwgcmVhZFxuICAgICAgICAgICAgICAgICAgICBpZiAoaWxsZWdhbENoclJlZ2V4LnRlc3QoZmFhVk0uc2VhcmNoUGFyYW0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvY29kZVByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoZmFsc2UpOyAvL2V4aXRzIGdlb2NvZGVQcm9taXNlIGNvbmRpdGlvbmFsIHN0YXRlbWVudFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdlb2NvZGVQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHt9KTsgLy9nb2VzIHRvIHJlc3Qgc2VydmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZhYVZNLnNlYXJjaFBhcmFtLmluZGV4T2YoXCIlXCIpICE9IC0xKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWFWTS5zZWFyY2hQYXJhbSA9IGZhYVZNLnNlYXJjaFBhcmFtLnJlcGxhY2UoXCIlXCIsXCJbJV1cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmFhVk0uc2VhcmNoUGFyYW0uaW5kZXhPZihcIl9cIikgIT0gLTEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhYVZNLnNlYXJjaFBhcmFtID0gZmFhVk0uc2VhcmNoUGFyYW0ucmVwbGFjZShcIl9cIixcIltfXVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBPcmlnaW5hbCBDb2RlOlxuICAgICAgICAgICAgICAgIC8vIHZhciBnZW9jb2RlUHJvbWlzZSA9IGdvb2dsZU1hcFNlcnZpY2UuZ2VvY29kZUxhdExuZyhmYWFWTS5zZWFyY2hQYXJhbSk7XG5cbiAgICAgICAgICAgICAgICBnZW9jb2RlUHJvbWlzZS50aGVuKGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbG9jYXRpb24gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZ2VudCBzZWFyY2hcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnL3BibC1mYWEtc2VydmljZS1hcHAvcmVzdC9wYmwtZmFhL2ZhYS9hZ2VudHNlYXJjaCc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZhciB1cmwgPSAnL3N0YXRpYy93Y3MvbGZnL21vY2svZmFhLXNlYXJjaC5qc29uJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0Qm9keSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnemlwQ29kZScgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFzdE5hbWUnOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmlsdGVyJyAgOiBmYWFWTS5maWx0ZXJPcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmFhVk0uc2VhcmNoQnkgPT09ICd6aXBDb2RlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RCb2R5LnppcENvZGUgPSBmYWFWTS5zZWFyY2hQYXJhbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Qm9keS5sb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Qm9keS5sYXN0TmFtZSA9IGZhYVZNLnNlYXJjaFBhcmFtO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdFNlcnZpY2UucG9zdCh1cmwsIHJlcXVlc3RCb2R5LCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhYVZNLnEgPSBmYWFWTS5zZWFyY2hQYXJhbTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCAmJiByZXNwb25zZS5kYXRhLnJlc3BvbnNlLnJlc3BvbnNlID09PSAnU1VDQ0VTUycgJiYgcmVzcG9uc2UuZGF0YS5hZ2VudHMubGVuZ3RoXG4gICAgICAgID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWFWTS5ub1Jlc3VsdHNNb2RlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFhVk0ucmVzdWx0c01vZGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWFWTS5maWx0ZXJUZXh0ID0gJ0ZpbHRlcic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhYVZNLmZpbHRlckJ0blRleHQgPSAnQXBwbHkgZmlsdGVycyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1vblNlcnZpY2Uuc2Nyb2xsVG9wKCcuZmFhLXNlYXJjaCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWFyY2hSZXN1bHRzID0gcmVzcG9uc2UuZGF0YS5hZ2VudHM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZhYVZNLnNlYXJjaEJ5ID09PSAnemlwQ29kZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFJlc3VsdHMgPSAkZmlsdGVyKCdvcmRlckJ5Jykoc2VhcmNoUmVzdWx0cywgJ2Rpc3RhbmNlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXBJbml0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZXN1bHRzJyAgICAgIDogc2VhcmNoUmVzdWx0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2VhcmNoQnknICAgICA6IGZhYVZNLnNlYXJjaEJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd6aXBDb2RlJyAgICAgIDogZmFhVk0uc2VhcmNoUGFyYW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Njb3BlJyAgICAgICAgOiAkc2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ZtJyAgICAgICAgICAgOiBmYWFWTSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGlzdFBybnRJZCcgICA6ICdhZHZpc29yTGlzdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xpc3RDaGlsZE5hbWUnOiAnYWR2aXNvckRldGFpbHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpbnRlcnZhbCcgICAgIDogMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ29vZ2xlTWFwU2VydmljZS5pbml0TWFwKG1hcEluaXQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWFWTS5zZWFyY2hSZXN1bHRzID0gc2VhcmNoUmVzdWx0cztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9uc2Nyb2xsID0gc3RpY2t5TWFwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnJlc2l6ZSA9IG5vblN0aWNreU1hcDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGlkZSB0aGUgbG9hZGVyIGFmdGVyIGdldHRpbmcgdGhlIHJlc3BvbnNlIGZyb20gc2VydmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjZmFkZScpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI3N0YXR1cycpLmhpZGUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsdGVyT3B0cyA9ICcnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGZhYVZNLmZpbHRlck9wdGlvbnMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZmlsdGVyT3B0cyAhPT0gJycpID8gZmlsdGVyT3B0cyA9IChmaWx0ZXJPcHRzICsgJywnICsga2V5KSA6IGZpbHRlck9wdHMgPSBrZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbicgICAgICAgIDogJ3NlYXJjaCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9uYW1lJyAgICAgICAgICA6IGZhYVZNLnNlYXJjaEJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfdHlwZScgICAgICAgICAgOiAnZmluZGFuYWR2aXNvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb3JtX21jJyAgICAgICAgICAgICA6IGZpbHRlck9wdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9zZWFyY2hfdGVybXMnICA6IGZhYVZNLnNlYXJjaFBhcmFtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfc2VhcmNoX3Jlc3VsdHMnOiBzZWFyY2hSZXN1bHRzLmxlbmd0aCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQnZXZlbnRfcmVzdWx0cycgOiBzZWFyY2hSZXN1bHRzWzBdLmRpc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0YWcubGluayhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWFWTS5ub1Jlc3VsdHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhYVZNLm5vUmVzdWx0cygpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSW5wdXQgY29udGFpbmVyIHdpbGwgY29udGFpbiBzcXVhcmUgYnJhY2tldHMgZm9yICUgYW5kIF8gaWYgdGhpcyBpcyBub3QgaW50cm9kdWNlZFxuICAgICAgICAgICAgICAgICAgICBpZiAoZmFhVk0uc2VhcmNoUGFyYW0uaW5kZXhPZihcIlslXVwiKSAhPSAtMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBmYWFWTS5zZWFyY2hQYXJhbSA9IGZhYVZNLnNlYXJjaFBhcmFtLnJlcGxhY2UoXCJbJV1cIixcIiVcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZhYVZNLnNlYXJjaFBhcmFtLmluZGV4T2YoXCJbX11cIikgIT0gLTEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgZmFhVk0uc2VhcmNoUGFyYW0gPSBmYWFWTS5zZWFyY2hQYXJhbS5yZXBsYWNlKFwiW19dXCIsXCJfXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmdW5jdGlvbiBzdGlja3lNYXAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOiA3NTFweCknKS5tYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWFkZXJIZWlnaHQgPSAxNTA7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0aWNreUVsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21hcC1jb250JylbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgc3RpY2t5RWxlLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0aWNreUVsZUhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGlja3lFbGVDaGlsZHJlbnMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzdGlja3lFbGUuY2hpbGRyZW4pO1xuXG4gICAgICAgICAgICAgICAgICAgIHN0aWNreUVsZUNoaWxkcmVucy5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkRWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGlja3lFbGVIZWlnaHQgPSBzdGlja3lFbGVIZWlnaHQgKyBjaGlsZEVsZS5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRFbGUgPSBzdGlja3lFbGUucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudEVsZUhlaWdodCA9IHBhcmVudEVsZS5jbGllbnRIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbFkgPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRUb3AgPSBwYXJlbnRFbGUub2Zmc2V0VG9wO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RpY2t5VG9wID0gKHNjcm9sbFkgLSBjb250VG9wKSArIGhlYWRlckhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoKHNjcm9sbFkgKyBoZWFkZXJIZWlnaHQpID4gY29udFRvcCAmJiAoc3RpY2t5VG9wICsgc3RpY2t5RWxlSGVpZ2h0KSA8IHBhcmVudEVsZUhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLm1hcC1jb250JylbMF0uc3R5bGUudG9wID0gc3RpY2t5VG9wICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoc2Nyb2xsWSArIGhlYWRlckhlaWdodCkgPCBjb250VG9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcubWFwLWNvbnQnKVswXS5zdHlsZS50b3AgPSAnMHB4JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG5vblN0aWNreU1hcCgpIHtcbiAgICAgICAgICAgICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEoJyhtYXgtd2lkdGg6IDc1MHB4KScpLm1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0aWNreUVsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21hcC1jb250JylbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgc3RpY2t5RWxlLnN0eWxlLnBvc2l0aW9uID0gJ3N0YXRpYyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XSk7XG59KSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmNvbnRyb2xsZXIoJ2FubnVhbEZpbGluZ3NDb250cmwnLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xyXG4gICAgJHNjb3BlLmFubnVhbFRleHRQYXRoID0gZ2xvYmFsQ29uc3RhbnQubGZnU2l0ZVBhdGggKyBnbG9iYWxDb25zdGFudC5hbm51YWxGaWxpbmdzUGF0aDtcclxuICAgICRzY29wZS5hbm51YWxUZXh0UGF0aDIwMDEgPSBnbG9iYWxDb25zdGFudC5sZmdTaXRlUGF0aCArIGdsb2JhbENvbnN0YW50LmFubnVhbEZpbGluZ3NQYXRoO1xyXG4gICAgJHNjb3BlLmFubnVhbFBkZlBhdGggPSBnbG9iYWxDb25zdGFudC5sZmdTaXRlUGF0aCArIGdsb2JhbENvbnN0YW50LmFubnVhbEZpbGluZ3NQYXRoICsgJzEway8nO1xyXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmNvbnRyb2xsZXIoJ2NsYWltQ29udHJsJywgWyckc2NvcGUnLCAnJHRpbWVvdXQnLCAnZm9ybVBvc3RTZXJ2aWNlJywgJyR3aW5kb3cnLCBmdW5jdGlvbigkc2NvcGUsICR0aW1lb3V0LFxyXG4gICAgZm9ybVBvc3RTZXJ2aWNlLCAkd2luZG93KSB7XHJcbiAgICAvKiAkKGRvY3VtZW50KS5sb2FkKGZ1bmN0aW9uICgpIHtcclxuICAgIFx0dmFyIGRhdGE9eyovXHJcbiAgICB1dGFnX2RhdGEuZXZlbnRfYWN0aW9uID0gJ2Zvcm0nO1xyXG4gICAgdXRhZ19kYXRhLmV2ZW50X25hbWUgPSAnQW5udWl0eSBEZWF0aCBDbGFpbSc7XHJcbiAgICB1dGFnX2RhdGEuZXZlbnRfdHlwZSA9ICdjbGFpbXMnO1xyXG4gICAgdXRhZ19kYXRhLmV2ZW50X3N0YXR1cyA9ICdzdGFydCc7XHJcblxyXG4gICAgLyogfVxyXG5cdFx0dXRhZy5saW5rKGRhdGEpO1xyXG5cdH0pOyovXHJcblxyXG4gICAgdmFyIGNsYWltRm9ybUZhY3Rvciwgd2FybmluZ01zZztcclxuXHJcbiAgICAkKGRvY3VtZW50KS5vbigncmVzcG9uc2l2ZTpzdGF0ZWNoYW5nZWQnLCBmdW5jdGlvbihlLCBwYXJhbSkge1xyXG4gICAgICAgIGNsYWltRm9ybUZhY3RvciA9IHBhcmFtO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLyogJCgnYm9keScpLm9uKCdmb2N1cycsXCIuZGlzYWJpbGl0eS1kYXRlLWZpZWxkXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgXHQkKHRoaXMpLmRhdGVwaWNrZXIoe1xyXG4gICAgXHRcdGNoYW5nZU1vbnRoOiB0cnVlLFxyXG4gICAgXHRcdGNoYW5nZVllYXI6IHRydWUsXHJcbiAgICBcdFx0eWVhclJhbmdlOiBcIi0yMDA6KzBcIlxyXG4gICAgXHR9KTtcclxuICAgIH0pOyAqL1xyXG4gICAgdmFyIGRhdGVQaWMgPSBuZXcgQ2FsZW5kYXIoe1xyXG4gICAgICAgICdkYXRlSWQnICAgICAgIDogJ2RhdGUnLFxyXG4gICAgICAgICdtb250aElkJyAgICAgIDogJ21vbnRoJyxcclxuICAgICAgICAneWVhcklkJyAgICAgICA6ICd5ZWFyJyxcclxuICAgICAgICAnaGlkZGVuSWQnICAgICA6ICdDbGFpbURvYicsXHJcbiAgICAgICAgJ251bWJlck9mWWVhcnMnOiAxMzBcclxuICAgICAgICB9KSxcclxuICAgICAgIGRhdGVQaWMxID0gbmV3IENhbGVuZGFyKHtcclxuICAgICAgICAnZGF0ZUlkJyAgICAgICA6ICdkYXRlMScsXHJcbiAgICAgICAgJ21vbnRoSWQnICAgICAgOiAnbW9udGgxJyxcclxuICAgICAgICAneWVhcklkJyAgICAgICA6ICd5ZWFyMScsXHJcbiAgICAgICAgJ2hpZGRlbklkJyAgICAgOiAnQ2xhaW1Eb2QnLFxyXG4gICAgICAgICdudW1iZXJPZlllYXJzJzogMTMwXHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLnN1Ym1pdEZsYWcgPSBmYWxzZTtcclxuICAgICRzY29wZS5zdGF0ZUZsYWcgPSBmYWxzZTtcclxuICAgICRzY29wZS5kb2JNb250aEZsYWcgPSBmYWxzZTtcclxuICAgICRzY29wZS5jbGFpbUZvcm1EYXRhID0ge1xyXG5cclxuICAgIH07XHJcbiAgICAvKiRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YSA9IHtcclxuICAgICAgICBcclxuICAgIH07XHJcbiAgICAkc2NvcGUuY2xhaW1JbmZvRm9ybURhdGEucmVzcG9uZEJ0biA9IFwiZW1haWxcIjsqL1xyXG4gICAgJHNjb3BlLmNsYWltRm9ybURhdGEucGVyc29uYWxJbmZvcm1hdGlvbiA9IFtdO1xyXG4gICAgJHNjb3BlLmNsYWltRm9ybURhdGEuZGVjZWFzZWRQZXJJbmZvID0gW107XHJcbiAgICAkc2NvcGUuY2xhaW1Gb3JtRGF0YS5BZGRpdGlvbmFsRGV0YWlsRm9ybURhdGEgPSBbXTtcclxuICAgIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLmhpZGUoKTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyonKS5yZW1vdmVDbGFzcygnZ2V0LXNhcnRlZGZvcm0tZGVmYXVsdC1oaWRkZW4nKTtcclxuICAgIH0pO1xyXG4gICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICRzY29wZS5zdGF0ZVZhbGlkYXRpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAkc2NvcGUuc3RhdGUgPSBhbmd1bGFyLmVsZW1lbnQoJyNzdGF0ZScpLnRleHQoKTtcclxuICAgICAgICBpZiAoJHNjb3BlLnN0YXRlICE9PSAnU2VsZWN0IHN0YXRlJykge1xyXG4gICAgICAgICAgICAkc2NvcGUuc3RhdGVGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJHNjb3BlLnN0YXRlRmxhZyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuZG9iTW9udGhWYWxpZGF0aW9uID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAkc2NvcGUuZG9iTW9udGggPSBhbmd1bGFyLmVsZW1lbnQoJyNkb2JNb250aERkJykudGV4dCgpO1xyXG4gICAgICAgIGlmICgkc2NvcGUuZG9iTW9udGggIT09ICdNb250aCcpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmRvYk1vbnRoRmxhZyA9IGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICRzY29wZS5kb2JNb250aEZsYWcgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhbmd1bGFyLmVsZW1lbnQoJyNtb250aCBsaScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuZG9iTW9udGhWYWxpZGF0aW9uKCk7XHJcbiAgICAgICAgfSwgMjAwKTtcclxuICAgIH0pO1xyXG5cclxuICAgICRzY29wZS5kb2JEYXRlVmFsaWRhdGlvbiA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgJHNjb3BlLmRvYkRhdGUgPSBhbmd1bGFyLmVsZW1lbnQoJyNkb2JEYXRlRGQnKS50ZXh0KCk7XHJcbiAgICAgICAgaWYgKCRzY29wZS5kb2JEYXRlICE9PSAnRGF0ZScpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmRvYkRhdGVGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJHNjb3BlLmRvYkRhdGVGbGFnID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYW5ndWxhci5lbGVtZW50KCcjZGF0ZSBsaScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuZG9iRGF0ZVZhbGlkYXRpb24oKTtcclxuICAgICAgICB9LCAyMDApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLmRvYlllYXJWYWxpZGF0aW9uID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAkc2NvcGUuZG9iWWVhciA9IGFuZ3VsYXIuZWxlbWVudCgnI2RvYlllYXJEZCcpLnRleHQoKTtcclxuICAgICAgICBpZiAoJHNjb3BlLmRvYlllYXIgIT09ICdZZWFyJykge1xyXG4gICAgICAgICAgICAkc2NvcGUuZG9iWWVhckZsYWcgPSBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkc2NvcGUuZG9iWWVhckZsYWcgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhbmd1bGFyLmVsZW1lbnQoJyN5ZWFyIGxpJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5kb2JEYXRlVmFsaWRhdGlvbigpO1xyXG4gICAgICAgIH0sIDIwMCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuZG9iVmFsaWRhdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkc2NvcGUuZG9iTW9udGhWYWxpZGF0aW9uKCk7XHJcbiAgICAgICAgJHNjb3BlLmRvYkRhdGVWYWxpZGF0aW9uKCk7XHJcbiAgICAgICAgJHNjb3BlLmRvYlllYXJWYWxpZGF0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgJHNjb3BlLmRlY2Vhc2VkUGVyU3RhdGVWYWxpZGF0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHNjb3BlLmRlY2Vhc2VkUGVyU3RhdGUgPSBhbmd1bGFyLmVsZW1lbnQoJyNkZWNlYXNlZFBlclN0YXRlJykudGV4dCgpO1xyXG4gICAgICAgIGlmICgkc2NvcGUuZGVjZWFzZWRQZXJTdGF0ZSAhPT0gJ1NlbGVjdCBzdGF0ZScpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmRlY2Vhc2VkUGVyU3RhdGVGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJHNjb3BlLmRlY2Vhc2VkUGVyU3RhdGVGbGFnID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgYW5ndWxhci5lbGVtZW50KCcjZGVjZWFzZWRQZXJTdGF0ZVVsIGxpJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5kZWNlYXNlZFBlclN0YXRlVmFsaWRhdGlvbigpO1xyXG4gICAgICAgIH0sIDIwMCk7XHJcbiAgICB9KTtcclxuICAgIGFuZ3VsYXIuZWxlbWVudCgnI3N0YXRlVWwgbGknKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJHNjb3BlLnN0YXRlVmFsaWRhdGlvbigpO1xyXG4gICAgICAgIH0sIDIwMCk7XHJcbiAgICB9KTtcclxuICAgICRzY29wZS5jb252ZXJ0Rm9ybURhdGEgPSBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKGRhdGEsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgaWYgKCFkYXRhW2tleV0pIHtcclxuICAgICAgICAgICAgICAgIGRhdGFba2V5XSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGlzVHdvWmlwQ29kZShuYW1lLCBib29sZWFuVmFsdWUpIHtcclxuICAgICAgICBpZiAobmFtZSA9PT0gJ3ppcCcpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCA9IGJvb2xlYW5WYWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0RGVjZWFzZWRaaXBGb3JtYXQgPSBib29sZWFuVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICRzY29wZS5kaXNhYmxpdHlQaG9uZU51bSA9IGZ1bmN0aW9uKGV2dCwgaW5wdXRWYWx1ZSwgbmFtZSwgemlwT3JQaG9uZSkge1xyXG4gICAgICAgIGlmIChpbnB1dFZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUuY2xhaW1JbmZvRm9ybURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05LV0vZywgJycpO1xyXG4gICAgICAgIGlmICh6aXBPclBob25lID09PSAncGhvbmUnKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXR0ID0gL14oXFxkezN9XFwtXFxkezN9LVxcZHs0fSkkLztcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RGb3JtYXQgPSAhKHBhdHQudGVzdCgkc2NvcGUuY2xhaW1JbmZvRm9ybURhdGFbbmFtZV0pKTtcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YVtuYW1lXS5sZW5ndGggPT09IDMgJiYgZXZ0LmtleUNvZGUgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YVtuYW1lXSA9ICRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KS8sXHJcbiAgICAgICAgICAgICAgICAgICAgJyQxLScpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YVtuYW1lXS5sZW5ndGggPT09IDcgJiYgZXZ0LmtleUNvZGUgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YVtuYW1lXSA9ICRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YVtuYW1lXS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgIC8oXFxkezN9KShcXGR7M30pLywgJyQxLSQyLScpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YVtuYW1lXS5sZW5ndGggPT09IDEyKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY2xhaW1JbmZvRm9ybURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY2xhaW1JbmZvRm9ybURhdGFbbmFtZV0gPSAkc2NvcGUuY2xhaW1JbmZvRm9ybURhdGFbbmFtZV0ucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAvKFxcZHszfSkoXFxkezN9KShcXGR7NH0pLywgJyQxLSQyLSQzJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmNsYWltSW5mb0Zvcm1EYXRhW25hbWVdLmxlbmd0aCA9PT0gMTApIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YVtuYW1lXSA9ICRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YVtuYW1lXS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgIC8oXFxkezN9KShcXGR7M30pKFxcZHs0fSkvLCAnJDEtJDItJDMnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmlzQ29ycmVjdEZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YVtuYW1lXS5sZW5ndGggPj0gMTIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyID0gJHNjb3BlLmNsYWltSW5mb0Zvcm1EYXRhW25hbWVdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2xhaW1JbmZvRm9ybURhdGFbbmFtZV0gPSBzdHIuc2xpY2UoMCwgMTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RGb3JtYXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoemlwT3JQaG9uZSA9PT0gJ3ppcCcpIHtcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YVtuYW1lXS5sZW5ndGggPT09IDUpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTktXS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleUNvZGUgPT09IDEwOSB8fCBldnQua2V5Q29kZSA9PT0gMTg5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNsYWltSW5mb0Zvcm1EYXRhW25hbWVdID0gJHNjb3BlLmNsYWltSW5mb0Zvcm1EYXRhW25hbWVdICsgJy0nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUuY2xhaW1JbmZvRm9ybURhdGFbbmFtZV0ubGVuZ3RoID4gNSAmJiAkc2NvcGUuY2xhaW1JbmZvRm9ybURhdGFbbmFtZV0ubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICA8PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5ldyBSZWdFeHAoJy0nKS50ZXN0KCRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YVtuYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmNsYWltSW5mb0Zvcm1EYXRhW25hbWVdLmxlbmd0aCA9PT0gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdHRaaXAgPSAvXihcXGR7NX1cXC1cXGR7NH0pJC87XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3ppcCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RaaXBGb3JtYXQgPSAhKHBhdHRaaXAudGVzdCgkc2NvcGUuY2xhaW1JbmZvRm9ybURhdGFbbmFtZV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3REZWNlYXNlZFppcEZvcm1hdCA9ICEocGF0dFppcC50ZXN0KCRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YVtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmNsYWltSW5mb0Zvcm1EYXRhW25hbWVdLmxlbmd0aCA9PT0gOSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldnQua2V5Q29kZSA9PT0gMTA5IHx8IGV2dC5rZXlDb2RlID09PSAxODkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnIycgKyBldnQudGFyZ2V0LmlkKS5pbnNlcnRBdENhcmV0KCctJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Q2FwdGNoYURhdGEoKSB7XHJcbiAgICAgICAgdmFyIG51Y2FwdGNoYUFuc0VudHIsIG51Y2FwdGNoYUFuc0V4dDtcclxuXHJcbiAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykpIHtcclxuICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRW50ciA9ICcnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG51Y2FwdGNoYUFuc0VudHIgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykudmFsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1leGl0JykpIHtcclxuICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gJyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1leGl0JykudmFsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgLyogJHNjb3BlLmNsYWltRm9ybURhdGFbJ251Y2FwdGNoYS1lcGQnXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1lcGQnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUuY2xhaW1Gb3JtRGF0YVsnbnVjYXB0Y2hhLWFuc3dlciddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlcicpLnZhbCgpO1xyXG4gICAgICAgICRzY29wZS5jbGFpbUZvcm1EYXRhWydudWNhcHRjaGEtYW5zd2VyLWVudGVyJ10gPSBudWNhcHRjaGFBbnNFbnRyO1xyXG4gICAgICAgICRzY29wZS5jbGFpbUZvcm1EYXRhWydudWNhcHRjaGEtYW5zd2VyLWV4aXQnXSA9IG51Y2FwdGNoYUFuc0V4dDtcclxuICAgICAgICAkc2NvcGUuY2xhaW1Gb3JtRGF0YS5sbXN1Ym1pdHRlZCA9IGFuZ3VsYXIuZWxlbWVudCgnI2xtc3VibWl0dGVkJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmNsYWltRm9ybURhdGFbJ251Y2FwdGNoYS1pbmRleCddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWluZGV4JykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmNsYWltRm9ybURhdGFbJ251Y2FwdGNoYS1kYXRhdHlwZSddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWRhdGF0eXBlJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmNsYWltRm9ybURhdGFbJ251Y2FwdGNoYS1wdHlwZSddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLXB0eXBlJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmNsYWltRm9ybURhdGFbJ251Y2FwdGNoYS1sYW5ndWFnZSddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWxhbmd1YWdlJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmNsYWltRm9ybURhdGFbJ251Y2FwdGNoYS1yZWdpb24nXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1yZWdpb24nKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUuY2xhaW1Gb3JtRGF0YVsnbnVjYXB0Y2hhLW1lZGlhLWRvd25sb2FkLXRpbWUnXSA9ICcnO1xyXG4gICAgICAgICRzY29wZS5jbGFpbUZvcm1EYXRhWydudWNhcHRjaGEtYWRzZXJ2LWRvd25sb2FkLXRpbWUnXSA9ICcnO1xyXG4gICAgICAgICRzY29wZS5jbGFpbUZvcm1EYXRhWydudWNhcHRjaGEtZmFsbGJhY2stdG9rZW4nXSA9ICcnOyAqL1xyXG4gICAgICAgICRzY29wZS5jbGFpbUZvcm1EYXRhWydnUmVjYXB0Y2hhUmVzcG9uc2UnXSA9ICQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldEZvcm1EYXRhKCkge1xyXG4gICAgICAgICRzY29wZS5jbGFpbUZvcm1EYXRhLmlkZW50aXR5ID0gJ0FOTlVJVFlfQ0xBSU1TJztcclxuICAgICAgICAkc2NvcGUuY2xhaW1Gb3JtRGF0YS5mb3JtRmFjdG9yID0gY2xhaW1Gb3JtRmFjdG9yO1xyXG4gICAgICAgICRzY29wZS5jbGFpbUZvcm1EYXRhLm5vdGlmaWVyTmFtZSA9ICRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YS5uYW1lO1xyXG4gICAgICAgICRzY29wZS5jbGFpbUZvcm1EYXRhLm5vdGlmaWVyUmVsYXRpb25zaGlwID0gJHNjb3BlLmNsYWltSW5mb0Zvcm1EYXRhLnJlbGF0aW9uc2hpcEluc3VyZWQ7XHJcbiAgICAgICAgJHNjb3BlLmNsYWltRm9ybURhdGEubm90aWZpZXJTdHJlZXRBZGRyZXNzID0gJHNjb3BlLmNsYWltSW5mb0Zvcm1EYXRhLmFkZHJlc3M7XHJcbiAgICAgICAgJHNjb3BlLmNsYWltRm9ybURhdGEubm90aWZpZXJDaXR5ID0gJHNjb3BlLmNsYWltSW5mb0Zvcm1EYXRhLmNpdHk7XHJcbiAgICAgICAgJHNjb3BlLmNsYWltRm9ybURhdGEubm90aWZpZXJTdGF0ZSA9ICRzY29wZS5zdGF0ZTtcclxuICAgICAgICAkc2NvcGUuY2xhaW1Gb3JtRGF0YS5ub3RpZmllclppcENvZGUgPSAkc2NvcGUuY2xhaW1JbmZvRm9ybURhdGEuemlwO1xyXG4gICAgICAgICRzY29wZS5jbGFpbUZvcm1EYXRhLm5vdGlmaWVyUHJlZmVycmVkUGhvbmUgPSAkc2NvcGUuY2xhaW1JbmZvRm9ybURhdGEuZXZlUGhvTnVtYmVyO1xyXG4gICAgICAgICRzY29wZS5jbGFpbUZvcm1EYXRhLm5vdGlmaWVyRW1haWwgPSAkc2NvcGUuY2xhaW1JbmZvRm9ybURhdGEuZW1haWxBZGRyZXNzO1xyXG4gICAgICAgIC8vJHNjb3BlLmNsYWltRm9ybURhdGEucmVzcG9uZFRvTm90aWZpZXJCeSA9ICRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YS5yZXNwb25kQnRuO1xyXG4gICAgICAgICRzY29wZS5jbGFpbUZvcm1EYXRhLmluc3VyZWROYW1lID0gJHNjb3BlLmNsYWltSW5mb0Zvcm1EYXRhLmRlY2Vhc2VkUGVyTmFtZTtcclxuICAgICAgICAkc2NvcGUuY2xhaW1Gb3JtRGF0YS5pbnN1cmVkUG9saWNpZXMgPSAkc2NvcGUuY2xhaW1JbmZvRm9ybURhdGEuZGVjZWFzZWRQZXJQb2xpY3lOdW1iZXI7XHJcbiAgICAgICAgJHNjb3BlLmNsYWltRm9ybURhdGEuaW5zdXJlZExhc3Q0U1NOID0gJHNjb3BlLmNsYWltSW5mb0Zvcm1EYXRhLmRlY2Vhc2VkUGVyU1NOO1xyXG4gICAgICAgICRzY29wZS5jbGFpbUZvcm1EYXRhLmluc3VyZWREb2IgPSAkc2NvcGUuY2xhaW1JbmZvRm9ybURhdGEuZGVjZWFzZWRQZXJET0I7XHJcbiAgICAgICAgJHNjb3BlLmNsYWltRm9ybURhdGEuaW5zdXJlZERlYXRoRGF0ZSA9ICRzY29wZS5jbGFpbUluZm9Gb3JtRGF0YS5pbnN1cmVkRGVhdGhEYXRlO1xyXG4gICAgICAgICRzY29wZS5jbGFpbUZvcm1EYXRhLmluc3VyZWRPdGhlclBvbGljaWVzID0gJyc7XHJcbiAgICAgICAgJHNjb3BlLmNsYWltRm9ybURhdGEuaW5zdXJlZE90aGVyUG9saWNpZXNEZXRhaWwgPSAnJztcclxuICAgICAgICAkc2NvcGUuY2xhaW1Gb3JtRGF0YS5pbnN1cmVkRGlzYWJpbGl0eUNhdXNlID0gJyc7XHJcbiAgICAgICAgJHNjb3BlLmNsYWltRm9ybURhdGEuaW5zdXJlZERpc2FiaWxpdHlEYXRlID0gJyc7XHJcbiAgICAgICAgJHNjb3BlLmNsYWltRm9ybURhdGEuaW5zdXJlZEJlbmVmaXRDbGFpbSA9ICcnO1xyXG4gICAgICAgICRzY29wZS5jbGFpbUZvcm1EYXRhLmluc3VyZWRDYXJlT25zZXQgPSAnJztcclxuICAgICAgICAkc2NvcGUuY2xhaW1Gb3JtRGF0YS5pbnN1cmVkQ2xhaW1DYXVzZSA9ICcnO1xyXG4gICAgICAgICRzY29wZS5jbGFpbUZvcm1EYXRhLmVDb25zZW50QWNjZXB0ZWQgPSAnSSBjb25zZW50IHRvIEVsZWN0cm9uaWMgVHJhbnNtaXNzaW9ucyc7IFxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRpc3BsYXlFcnIoKSB7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IHRydWU7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGlzRXJyVmFsID0gYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykuZXEoXHJcbiAgICAgICAgICAgICAgICAgICAgMCkucGFyZW50KCkub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlckhndCA9IGFuZ3VsYXIuZWxlbWVudCgnLlRvcGhlYWRlci1sb2dvYXJlYScpLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRpc0VyclZhbCA9ICh0aXNFcnJWYWwgLSBoZWFkZXJIZ3QpIC0gNTA7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3Njcm9sbFRvcCc6IHRpc0VyclZhbFxyXG4gICAgICAgICAgICAgICAgfSwgNjAwLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5lcSgwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMjAwKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB2YWxpZEZvcm0oKSB7XHJcbiAgICAgICAgLy8kc2NvcGUuY2xhaW1JbmZvRm9ybURhdGEuaW5zdXJlZERlYXRoRGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiQ2xhaW1Eb2RcIikudmFsdWU7XHJcbiAgICAgICAgLy8kc2NvcGUuY2xhaW1JbmZvRm9ybURhdGEuZGVjZWFzZWRQZXJET0IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIkNsYWltRG9iXCIpLnZhbHVlO1xyXG4gICAgICAgIC8vJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgIGlmKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiQ2xhaW1Eb2RcIikudmFsdWUpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmNsYWltSW5mb0Zvcm1EYXRhLmluc3VyZWREZWF0aERhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIkNsYWltRG9kXCIpLnZhbHVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJDbGFpbURvYlwiKS52YWx1ZSkge1xyXG4gICAgICAgICAgICAkc2NvcGUuY2xhaW1JbmZvRm9ybURhdGEuZGVjZWFzZWRQZXJET0IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIkNsYWltRG9iXCIpLnZhbHVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZihkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIkNsYWltRG9kXCIpLnZhbHVlIHx8IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiQ2xhaW1Eb2JcIikudmFsdWUpIHtcclxuICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgXHJcbiAgICAgICAgdmFyIGlzQ2FwdGNoYUF2YWlsID0gZmFsc2UsXHJcbiAgICAgICAgICAgIGNhcGNoYVZhbDtcclxuXHJcbiAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudChcIi5nLXJlY2FwdGNoYVwiKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGlzQ2FwdGNoYUF2YWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgY2FwY2hhVmFsID0gYW5ndWxhci5lbGVtZW50KCcjZy1yZWNhcHRjaGEtcmVzcG9uc2UnKS52YWwoKTtcclxuICAgICAgICAgICAgaWYgKGNhcGNoYVZhbCkge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLmhpZGUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5zaG93KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCRzY29wZS5jbGFpbUluZm9Gb3JtLiR2YWxpZCAmJiAoKGlzQ2FwdGNoYUF2YWlsICYmIGNhcGNoYVZhbCkgfHwgIWlzQ2FwdGNoYUF2YWlsKSAmJiAhJHNjb3BlLmlzQ29ycmVjdEZvcm1hdFxyXG4gICAgICAgICAgICAmJiAhJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCAmJiAhJHNjb3BlLmlzQ29ycmVjdERlY2Vhc2VkWmlwRm9ybWF0KSB7XHJcbiAgICAgICAgICAgIGlmIChpc0NhcHRjaGFBdmFpbCkge1xyXG4gICAgICAgICAgICAgICAgZ2V0Q2FwdGNoYURhdGEoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBnZXRGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVyU2hvdygpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRpc3BsYXlFcnIoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vb3BlbiBwb3B1cCBzdGFydHNcclxuICAgICRzY29wZS5kaXNwX25vbmUgPSBcImRpc3Bfbm9uZVwiO1xyXG4gICAgJHNjb3BlLm9wZW5Qb3BVcCA9IGZ1bmN0aW9uKGV2ZW50LHZhbCxjYWxsQW5hbHl0aWMpe1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIHZhciB0ZW1wVmFsdWUgPSB2YWw7XHJcbiAgICAgICAgaWYgKHRlbXBWYWx1ZSA9PSB0cnVlKXtcclxuICAgICAgICAgICAgJHNjb3BlLmNoZWNrYm94ID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYoJHNjb3BlLmRpc3Bfbm9uZSA9PT0gXCJkaXNwX25vbmVcIil7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcF9ub25lID0gXCJkaXNwX2Jsb2NrXCI7XHJcbiAgICAgICAgICAgICAgICAkKCdib2R5JykuY3NzKCdvdmVyZmxvdycsJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgaWYoY2FsbEFuYWx5dGljKXtcclxuICAgICAgICAgICAgdmFyIGRhdGExID0ge1xyXG4gICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbic6ICdsaW5rJyxcclxuICAgICAgICAgICAgICAgICdldmVudF9uYW1lJyAgOiAnRWxlY3Ryb25pYyBUcmFuc21pc3Npb25zJyxcclxuICAgICAgICAgICAgICAgICdldmVudF90eXBlJyAgOiAnbWFpbmNvbnRlbnQnXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHV0YWcubGluayhkYXRhMSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICRzY29wZS5jaGVja2JveCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZigkc2NvcGUuZGlzcF9ub25lID09PSBcImRpc3BfYmxvY2tcIil7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcF9ub25lID0gXCJkaXNwX25vbmVcIjtcclxuICAgICAgICAgICAgICAgICQoJ2JvZHknKS5jc3MoJ292ZXJmbG93JywnYXV0bycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkc2NvcGUuaGd0ID0gc2NyZWVuLmhlaWdodDtcclxuICAgICAgICBcclxuICAgICAgICBmdW5jdGlvbiBkb09uT3JpZW50YXRpb25DaGFuZ2UoKSB7XHJcbiAgICAgICAgICAgIGlmIChzY3JlZW4ud2lkdGggPD03Njgpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHdjdDtcclxuICAgICAgICAgICAgc3dpdGNoKHdpbmRvdy5vcmllbnRhdGlvbikgeyAgXHJcbiAgICAgICAgICAgICAgICBjYXNlIC05MCB8fCA5MDpcclxuICAgICAgICAgICAgICAgIC8vbGFuZHNjYXBlIHN0eWxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaGd0ID0gc2NyZWVuLmhlaWdodDtcclxuICAgICAgICAgICAgICAgIGJyZWFrOyBcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAvL3BvcnRyYWl0IHN0eWxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaGd0ID0gc2NyZWVuLmhlaWdodDtcclxuICAgICAgICAgICAgICAgIGJyZWFrOyBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVx0XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIGRvT25PcmllbnRhdGlvbkNoYW5nZSk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBmdW5jdGlvbiBkb09uT3JpZW50YXRpb25DaGFuZ2UoKSB7XHJcbiAgICAgICAgaWYgKHNjcmVlbi53aWR0aCA8PTc2OCl7XHJcbiAgICAgICAgc3dpdGNoKHdpbmRvdy5vcmllbnRhdGlvbikgeyAgXHJcbiAgICAgICAgICAgIGNhc2UgLTkwIHx8IDkwOlxyXG4gICAgICAgICAgICAvL2xhbmRzY2FwZSBzdHlsZVxyXG4gICAgICAgICAgICAkc2NvcGUuaGd0ID0gc2NyZWVuLmhlaWdodDtcclxuICAgICAgICAgICAgLy9hbGVydCgnbGFuZHNjYXBlJyk7XHJcbiAgICAgICAgICAgIC8vJHNjb3BlLm1pZEhlaWdodCA9IHNjcmVlbi5oZWlnaHQvMi4xO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgYnJlYWs7IFxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAvL3BvcnRyYWl0IFxyXG4gICAgICAgICAgICAkc2NvcGUuaGd0ID0gc2NyZWVuLmhlaWdodDtcclxuICAgICAgICAgICAgLy8kc2NvcGUubWlkSGVpZ2h0ID0gc2NyZWVuLmhlaWdodC8yLjE7XHJcbiAgICAgICAgICAgIGJyZWFrOyBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cdFxyXG4gICAgfVxyXG5cclxuICAgIC8vZm9yIGFjY2VwdCBjaGVja2JveCBzaG91bGQgYmUgY2hlY2tlZCB3aGVuIHVzZXIgYWNjZXB0cyBhbmQgcG9wIHVwIGJveCBnZXRzIGNsb3NlLlxyXG5cdC8vIGZvciBjYW5jZWwgYnV0dG9uIGl0IHNob3VsZCBiZSB1bmNoZWNrZWQgYW5kIHBvcCBnZXRzIGNsb2VzZVxyXG4gICAgJHNjb3BlLmlzQWNjZXB0ID0gZnVuY3Rpb24oZXZlbnQsdmFsKXtcclxuICAgICAgICBpZih2YWwpe1xyXG4gICAgICAgICAgICAkc2NvcGUuY2hlY2tib3ggPSB0cnVlO1xyXG4gICAgICAgICAgICBpZigkc2NvcGUuZGlzcF9ub25lID09PSBcImRpc3BfYmxvY2tcIil7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcF9ub25lID0gXCJkaXNwX25vbmVcIjtcclxuICAgICAgICAgICAgICAgICQoJ2JvZHknKS5jc3MoJ292ZXJmbG93JywnYXV0bycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBkYXRhMiA9IHtcclxuICAgICAgICAgICAgICAgICdldmVudF9hY3Rpb24nOiAnQnV0dG9uJyxcclxuICAgICAgICAgICAgICAgICdldmVudF9uYW1lJyAgOiAnSSBDb25zZW50JyxcclxuICAgICAgICAgICAgICAgICdldmVudF90eXBlJyAgOiAnbWFpbmNvbnRlbnQnXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHV0YWcubGluayhkYXRhMik7XHJcblxyXG4gICAgICAgIH0gZWxzZXtcclxuICAgICAgICAgICAgJHNjb3BlLm9wZW5Qb3BVcChldmVudCx2YWwsdHJ1ZSk7XHJcbiAgICAgICAgICAgICQoJ2JvZHknKS5jc3MoJ292ZXJmbG93JywnYXV0bycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAgLy8gJHNjb3BlLmNoZWNrYm94ID0gZmxhZzsvL3RvZ2dsaW5nIGJldHdlZW4gY2hlY2tlZCBhbmQgdW5jaGVja2VkXHJcbiAgICB9XHJcbi8vb3BlbiBwb3B1cCBlbmRzIFxyXG5cclxuICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAkc2NvcGUuc3VibWl0RmxhZyA9IHRydWU7XHJcbiAgICAgICAgJHNjb3BlLnN0YXRlVmFsaWRhdGlvbigpO1xyXG4gICAgICAgICRzY29wZS5kZWNlYXNlZFBlclN0YXRlVmFsaWRhdGlvbigpO1xyXG4gICAgICAgIGlmICh2YWxpZEZvcm0oKSkge1xyXG4gICAgICAgICAgICBmb3JtUG9zdFNlcnZpY2UuZm9ybVBvc3REYXRhKCRzY29wZSwgJHNjb3BlLmNsYWltRm9ybURhdGEsIGZ1bmN0aW9uKGRhdGFBamF4KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YVJlc3BvbmNlID0gZGF0YUFqYXguZGF0YS5yZXNwb25zZVN0YXR1c0NvZGU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGFSZXNwb25jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhUmVzcG9uY2UgPT09ICdUSU1FRF9PVVQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnVElNRUQgT1VUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uY2UgPT09ICdJTlRFUk5BTF9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzU3VjY2VzcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdJTlRFUk5BTCBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnQ0FQVENIQV9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzU3VjY2VzcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdJTlZBTElEIENBUFRDSEEnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ1NFUlZJQ0VfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnU0VSVklDRSBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnU1VDQ0VTUycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHRrc1BhZ2VVUkwgJiYgJ251bGwnICE9PSB0a3NQYWdlVVJMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2F0aW9uLmhyZWYgPSB0a3NQYWdlVVJMO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzU3VjY2VzcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2dcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdTVUNDRVNTLiBUaGFuayB5b3UgZm9yIHNoYXJpbmcgeW91ciBpbmZvcm1hdGlvbi4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNsYWltRm9ybURhdGEgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2xhaW1JbmZvRm9ybURhdGEgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tb25GdW5jdGlvbnMucmVzZXREYXRlUGlja2VyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI3N0YXRlJykudGV4dCgnU2VsZWN0IHN0YXRlJykucmVtb3ZlQXR0cignZGF0YS12YWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjZGVjZWFzZWRQZXJTdGF0ZScpLnRleHQoJ1NlbGVjdCBzdGF0ZScpLnJlbW92ZUF0dHIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YS12YWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdEZsYWcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbic6ICdmb3JtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9uYW1lJyAgOiAnQW5udWl0eSBEZWF0aCBDbGFpbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfdHlwZScgIDogJ2NsYWltcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfc3RhdHVzJzogJ2NvbXBsZXRlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRhZy5saW5rKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2gtd3JhcHBlcicpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmNDbWROZXdDaGFsbGVuZ2UoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVySGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHdhcm5pbmdNc2cgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHRhYmxlVmFsID0gYW5ndWxhci5lbGVtZW50KCcuQXJ0aWNsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7XHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJIZ3QgPSBhbmd1bGFyLmVsZW1lbnQoJy5Ub3BoZWFkZXItbG9nb2FyZWEnKS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIHRhYmxlVmFsID0gKHRhYmxlVmFsIC0gaGVhZGVySGd0KSAtIDMwO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGFibGVWYWxcclxuICAgICAgICAgICAgfSwgODAwKTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxufV0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmxmZ2FwcC5jb250cm9sbGVyKCdjb250YWN0RnJvbUNvbnRybCcsIFsnJHNjb3BlJywgJ2NvbnRhY3RGb3JtU2VydmljZScsICckdGltZW91dCcsICckd2luZG93JywgZnVuY3Rpb24oJHNjb3BlLFxyXG4gICAgY29udGFjdEZvcm1TZXJ2aWNlLCAkdGltZW91dCwgJHdpbmRvdykge1xyXG4gICAgJHNjb3BlLmluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyonKS5yZW1vdmVDbGFzcygnbm9uZScpO1xyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5oaWRlKCk7XHJcbiAgICB9O1xyXG4gICAgYW5ndWxhci5lbGVtZW50KCcjcmFkaW9fMScpLnRyaWdnZXIoJ2NsaWNrJyk7XHJcbiAgICAkc2NvcGUuaXNTdWJtaXRDbGlja2VkID0gZmFsc2U7XHJcbiAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XHJcbiAgICB2YXIgcmVzZXRWYWx1ZXMsIHdhcm5pbmdNc2c7XHJcblxyXG4gICAgLy8gJChkb2N1bWVudCkubG9hZChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgdXRhZ19kYXRhLmV2ZW50X2FjdGlvbiA9ICdmb3JtJztcclxuICAgIHV0YWdfZGF0YS5ldmVudF9uYW1lID0gJ0NvbnRhY3QgSW52ZXN0b3IgUmVsYXRpb25zJztcclxuICAgIHV0YWdfZGF0YS5ldmVudF90eXBlID0gJ2NvbnRhY3QnO1xyXG4gICAgdXRhZ19kYXRhLmV2ZW50X3N0YXR1cyA9ICdzdGFydCc7XHJcblxyXG4gICAgLy8gfSk7XHJcblxyXG4gICAgcmVzZXRWYWx1ZXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAkc2NvcGUuY29udGFjdERhdGEgPSB7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmNvbnRhY3REYXRhLnJlc3BlY3RWYWx1ZSA9ICcnO1xyXG4gICAgICAgICRzY29wZS5jb250YWN0RGF0YS5kb2luZ0F0ID0gJ1dvcmsnO1xyXG4gICAgICAgICRzY29wZS5jb250YWN0RGF0YS5maXJzdE5hbWUgPSAnJztcclxuICAgICAgICAkc2NvcGUuY29udGFjdERhdGEubGFzdE5hbWUgPSAnJztcclxuICAgICAgICAkc2NvcGUuY29udGFjdERhdGEudGl0bGUgPSAnJztcclxuICAgICAgICAkc2NvcGUuY29udGFjdERhdGEub3JnYW5pemF0aW9uID0gJyc7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRhY3REYXRhLmFkZHJlc3MgPSAnJztcclxuICAgICAgICAkc2NvcGUuY29udGFjdERhdGEuY2l0eSA9ICcnO1xyXG4gICAgICAgICRzY29wZS5jb250YWN0RGF0YS56aXBDb2RlID0gJyc7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRhY3REYXRhLm51bWJlciA9ICcnO1xyXG4gICAgICAgICRzY29wZS5jb250YWN0RGF0YS5mYXggPSAnJztcclxuICAgICAgICAkc2NvcGUuY29udGFjdERhdGEucXVlc3Rpb24gPSAnJztcclxuICAgICAgICAkc2NvcGUuY29udGFjdERhdGEuaWRlbnRpdHkgPSAnQ09OVEFDVF9VU19JUic7XHJcbiAgICB9O1xyXG4gICAgcmVzZXRWYWx1ZXMoKTtcclxuXHJcbiAgICBmdW5jdGlvbiBpc1R3b1ppcENvZGUobmFtZSwgYm9vbGVhblZhbHVlKSB7XHJcbiAgICAgICAgaWYgKG5hbWUgPT09ICd6aXBDb2RlJykge1xyXG4gICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0ID0gYm9vbGVhblZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAkc2NvcGUuY29udGFjdEZvcm1QaG9uZU51bSA9IGZ1bmN0aW9uKGV2dCwgaW5wdXRWYWx1ZSwgbmFtZSwgemlwT3JQaG9uZSkge1xyXG4gICAgICAgIGlmIChpbnB1dFZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUuY29udGFjdERhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05LV0vZywgJycpO1xyXG4gICAgICAgIGlmICh6aXBPclBob25lID09PSAncGhvbmUnKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXR0ID0gL14oXFxkezN9XFwtXFxkezN9LVxcZHs0fSkkLztcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RGb3JtYXQgPSAhKHBhdHQudGVzdCgkc2NvcGUuY29udGFjdERhdGFbbmFtZV0pKTtcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5jb250YWN0RGF0YVtuYW1lXS5sZW5ndGggPT09IDMgJiYgZXZ0LmtleUNvZGUgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb250YWN0RGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb250YWN0RGF0YVtuYW1lXSA9ICRzY29wZS5jb250YWN0RGF0YVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KS8sICckMS0nKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUuY29udGFjdERhdGFbbmFtZV0ubGVuZ3RoID09PSA3ICYmIGV2dC5rZXlDb2RlICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY29udGFjdERhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY29udGFjdERhdGFbbmFtZV0gPSAkc2NvcGUuY29udGFjdERhdGFbbmFtZV0ucmVwbGFjZSgvKFxcZHszfSkoXFxkezN9KS8sICckMS0kMi0nKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUuY29udGFjdERhdGFbbmFtZV0ubGVuZ3RoID09PSAxMikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRhY3REYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRhY3REYXRhW25hbWVdID0gJHNjb3BlLmNvbnRhY3REYXRhW25hbWVdLnJlcGxhY2UoLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sXHJcbiAgICAgICAgICAgICAgICAgICAgJyQxLSQyLSQzJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmNvbnRhY3REYXRhW25hbWVdLmxlbmd0aCA9PT0gMTApIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb250YWN0RGF0YVtuYW1lXSA9ICRzY29wZS5jb250YWN0RGF0YVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KShcXGR7M30pKFxcZHs0fSkvLFxyXG4gICAgICAgICAgICAgICAgICAgICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuaXNDb3JyZWN0Rm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmNvbnRhY3REYXRhW25hbWVdLmxlbmd0aCA+PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSAkc2NvcGUuY29udGFjdERhdGFbbmFtZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jb250YWN0RGF0YVtuYW1lXSA9IHN0ci5zbGljZSgwLCAxMik7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdEZvcm1hdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh6aXBPclBob25lID09PSAnemlwJykge1xyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmNvbnRhY3REYXRhW25hbWVdLmxlbmd0aCA9PT0gNSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRhY3REYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOS1dL2csICcnKTtcclxuICAgICAgICAgICAgICAgIGlmIChldnQua2V5Q29kZSA9PT0gMTA5IHx8IGV2dC5rZXlDb2RlID09PSAxODkpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29udGFjdERhdGFbbmFtZV0gPSAkc2NvcGUuY29udGFjdERhdGFbbmFtZV0gKyAnLSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5jb250YWN0RGF0YVtuYW1lXS5sZW5ndGggPiA1ICYmICRzY29wZS5jb250YWN0RGF0YVtuYW1lXS5sZW5ndGggPD0gMTApIHtcclxuICAgICAgICAgICAgICAgIGlmIChuZXcgUmVnRXhwKCctJykudGVzdCgkc2NvcGUuY29udGFjdERhdGFbbmFtZV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jb250YWN0RGF0YVtuYW1lXS5sZW5ndGggPT09IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXR0WmlwID0gL14oXFxkezV9XFwtXFxkezR9KSQvO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICd6aXBDb2RlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCA9ICEocGF0dFppcC50ZXN0KCRzY29wZS5jb250YWN0RGF0YVtuYW1lXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmNvbnRhY3REYXRhW25hbWVdLmxlbmd0aCA9PT0gOSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldnQua2V5Q29kZSA9PT0gMTA5IHx8IGV2dC5rZXlDb2RlID09PSAxODkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnIycgKyBldnQudGFyZ2V0LmlkKS5pbnNlcnRBdENhcmV0KCctJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAkc2NvcGUuY2hlY2tSZXNwZWN0ID0gZnVuY3Rpb24oZXZ0KSB7XHJcbiAgICAgICAgaWYgKGV2dC50YXJnZXQubmFtZSA9PT0gJ3Jlc3BlY3QnKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5jb250YWN0RGF0YS5yZXNwZWN0VmFsdWUgPSBldnQudGFyZ2V0LmRlZmF1bHRWYWx1ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKGV2dC50YXJnZXQubmFtZSA9PT0gJ3JhZGlvZ19saXRlJykge1xyXG4gICAgICAgICAgICAkc2NvcGUuY29udGFjdERhdGEuZG9pbmdBdCA9IGV2dC50YXJnZXQuZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Q2FwdGNoYURhdGEoKSB7XHJcbiAgICAgICAgdmFyIG51Y2FwdGNoYUFuc0VudHIsIG51Y2FwdGNoYUFuc0V4dDtcclxuXHJcbiAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykpIHtcclxuICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRW50ciA9ICcnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG51Y2FwdGNoYUFuc0VudHIgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykudmFsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1leGl0JykpIHtcclxuICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gJyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1leGl0JykudmFsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qJHNjb3BlLmNvbnRhY3REYXRhWydudWNhcHRjaGEtZXBkJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtZXBkJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRhY3REYXRhWydudWNhcHRjaGEtYW5zd2VyJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRhY3REYXRhWydudWNhcHRjaGEtYW5zd2VyLWVudGVyJ10gPSBudWNhcHRjaGFBbnNFbnRyO1xyXG4gICAgICAgICRzY29wZS5jb250YWN0RGF0YVsnbnVjYXB0Y2hhLWFuc3dlci1leGl0J10gPSBudWNhcHRjaGFBbnNFeHQ7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRhY3REYXRhLmxtc3VibWl0dGVkID0gYW5ndWxhci5lbGVtZW50KCcjbG1zdWJtaXR0ZWQnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUuY29udGFjdERhdGFbJ251Y2FwdGNoYS1pbmRleCddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWluZGV4JykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRhY3REYXRhWydudWNhcHRjaGEtZGF0YXR5cGUnXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1kYXRhdHlwZScpLnZhbCgpO1xyXG4gICAgICAgICRzY29wZS5jb250YWN0RGF0YVsnbnVjYXB0Y2hhLXB0eXBlJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtcHR5cGUnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUuY29udGFjdERhdGFbJ251Y2FwdGNoYS1sYW5ndWFnZSddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWxhbmd1YWdlJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRhY3REYXRhWydudWNhcHRjaGEtcmVnaW9uJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtcmVnaW9uJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRhY3REYXRhWydudWNhcHRjaGEtbWVkaWEtZG93bmxvYWQtdGltZSddID0gJyc7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRhY3REYXRhWydudWNhcHRjaGEtYWRzZXJ2LWRvd25sb2FkLXRpbWUnXSA9ICcnO1xyXG4gICAgICAgICRzY29wZS5jb250YWN0RGF0YVsnbnVjYXB0Y2hhLWZhbGxiYWNrLXRva2VuJ10gPSAnJzsqL1xyXG4gICAgICAgICRzY29wZS5jb250YWN0RGF0YVsnZ1JlY2FwdGNoYVJlc3BvbnNlJ10gPSAkKCcjZy1yZWNhcHRjaGEtcmVzcG9uc2UnKS52YWwoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkaXNwbGF5RXJyKCkge1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuZXJyLWNvbnQsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5sZW5ndGhcclxuICAgICAgICAgICAgICAgID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRpc0VyclZhbCA9IGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgJy5jLWVyci1ib3gsIC5lcnItY29udCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbycpLmVxKDApLnBhcmVudCgpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9mZnNldCgpLnRvcDtcclxuICAgICAgICAgICAgICAgIHZhciBoZWFkZXJIZ3QgPSBhbmd1bGFyLmVsZW1lbnQoJy5Ub3BoZWFkZXItbG9nb2FyZWEnKS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aXNFcnJWYWwgPSAodGlzRXJyVmFsIC0gaGVhZGVySGd0KSAtIDUwO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCdodG1sLCBib2R5Jykuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICdzY3JvbGxUb3AnOiB0aXNFcnJWYWxcclxuICAgICAgICAgICAgICAgIH0sIDYwMCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuZXJyLWJvcmRlcicpLmVxKDApLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIDIwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdmFsaWRGb3JtKCkge1xyXG4gICAgICAgIHZhciBpc0NhcHRjaGFBdmFpbCA9IGZhbHNlLFxyXG4gICAgICAgICAgICBjYXBjaGFWYWw7XHJcblxyXG4gICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5nLXJlY2FwdGNoYScpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgaXNDYXB0Y2hhQXZhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICBjYXBjaGFWYWwgPSBhbmd1bGFyLmVsZW1lbnQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpO1xyXG4gICAgICAgICAgICBpZiAoY2FwY2hhVmFsKSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLnNob3coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoJHNjb3BlLmNvbnRhY3RGb3JtLiR2YWxpZCAmJiAoYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlcicpLmxlbmd0aCA8PSAwIHx8IGNhcGNoYVZhbCkpIHtcclxuICAgICAgICAgICAgaWYgKGlzQ2FwdGNoYUF2YWlsKSB7XHJcbiAgICAgICAgICAgICAgICBnZXRDYXB0Y2hhRGF0YSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJTaG93KCk7XHJcbiAgICAgICAgICAgICRzY29wZS52YWxpZGF0aW9uRXJyb3JTaG93ID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGlzcGxheUVycigpO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAkc2NvcGUuY29udGFjdEZvcm1TdWJtaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAkc2NvcGUuaXNTdWJtaXRDbGlja2VkID0gdHJ1ZTtcclxuICAgICAgICAkc2NvcGUuY29udGFjdERhdGEuc3RhdGUgPSAoYW5ndWxhci5lbGVtZW50KCcuZ2V0Q29udGFjdEZvcm1EYXRhc3RhdGUnKS52YWwoKVxyXG4gICAgICAgICAgICA9PT0gJ1NlbGVjdCBzdGF0ZScpID8gJycgOiBhbmd1bGFyLmVsZW1lbnQoJy5nZXRDb250YWN0Rm9ybURhdGFzdGF0ZScpLnZhbCgpO1xyXG4gICAgICAgIGlmICh2YWxpZEZvcm0oKSkge1xyXG4gICAgICAgICAgICBjb250YWN0Rm9ybVNlcnZpY2UuZm9ybVBvc3REYXRhKCRzY29wZSwgJHNjb3BlLmNvbnRhY3REYXRhLCBmdW5jdGlvbihkYXRhQWpheCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGFSZXNwb25jZSA9IGRhdGFBamF4LmRhdGEucmVzcG9uc2VTdGF0dXNDb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhUmVzcG9uY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3BvbmNlID09PSAnVElNRURfT1VUJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnVElNRUQgT1VUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Ym1pdENsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnSU5URVJOQUxfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdJTlRFUk5BTCBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWJtaXRDbGlja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ0NBUFRDSEFfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdJTlZBTElEIENBUFRDSEEnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzU3VibWl0Q2xpY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uY2UgPT09ICdTRVJWSUNFX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnU0VSVklDRSBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWJtaXRDbGlja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ1NVQ0NFU1MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSB0a3NQYWdlVVJMICYmICdudWxsJyAhPT0gdGtzUGFnZVVSTCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGtzUGFnZVVSTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ1NVQ0NFU1MuIFRoYW5rIHlvdSBmb3Igc2hhcmluZyB5b3VyIGluZm9ybWF0aW9uLic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXInKS52YWwoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jb250YWN0RGF0YSA9IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Ym1pdENsaWNrZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbic6ICdmb3JtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9uYW1lJyAgOiAnQ29udGFjdCBJbnZlc3RvciBSZWxhdGlvbnMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3R5cGUnICA6ICdjb250YWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9zdGF0dXMnOiAnY29tcGxldGUnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGFnLmxpbmsoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaC13cmFwcGVyJykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuY0NtZE5ld0NoYWxsZW5nZSgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAod2FybmluZ01zZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIHNob3VsZCBtb3ZlIHRvIGluc2lkZSBzZXJ2aWNlIGhpdFxyXG4gICAgICAgICAgICAvLyByZXNldFZhbHVlcygpO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5NcndhcHBlciBpbnB1dCcpLmF0dHIoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBhbmd1bGFyLmVsZW1lbnQoJyNyYWRpb18xJykudHJpZ2dlcignY2xpY2snKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciB0YWJsZVZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnLkFydGljbGVDb250ZW50Jykub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgICAgICB2YXIgaGVhZGVySGd0ID0gYW5ndWxhci5lbGVtZW50KCcuVG9waGVhZGVyLWxvZ29hcmVhJykub3V0ZXJIZWlnaHQodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICB0YWJsZVZhbCA9ICh0YWJsZVZhbCAtIGhlYWRlckhndCkgLSAyMDtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCdodG1sLCBib2R5Jykuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgJ3Njcm9sbFRvcCc6IHRhYmxlVmFsXHJcbiAgICAgICAgICAgIH0sIDgwMCk7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbn1dKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5sZmdhcHAuY29udHJvbGxlcignY29udGFjdFVzR3BDb250cmwnLCBbJyRzY29wZScsICckdGltZW91dCcsICckd2luZG93JywgJ2NvbnRhY3RVc0dwU2VydmljZXMnLCBmdW5jdGlvbigkc2NvcGUsXHJcbiAgICAkdGltZW91dCwgJHdpbmRvdywgY29udGFjdFVzR3BTZXJ2aWNlcykge1xyXG4gICAgdmFyIGNvbnRhY3RVc0dwQ29tbW9uLCBjb250YWN0dXNHcEZvcm1GYWN0b3IsIHdhcm5pbmdNc2c7XHJcblxyXG4gICAgJChkb2N1bWVudCkub24oJ3Jlc3BvbnNpdmU6c3RhdGVjaGFuZ2VkJywgZnVuY3Rpb24oZSwgcGFyYW0pIHtcclxuICAgICAgICBjb250YWN0dXNHcEZvcm1GYWN0b3IgPSBwYXJhbTtcclxuICAgIH0pO1xyXG4gICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuXHJcbiAgICAvLyAkKGRvY3VtZW50KS5sb2FkKGZ1bmN0aW9uICgpIHtcclxuICAgIHV0YWdfZGF0YS5ldmVudF9hY3Rpb24gPSAnZm9ybSc7XHJcbiAgICB1dGFnX2RhdGEuZXZlbnRfbmFtZSA9ICdHcm91cCBiZW5lZml0cyBzdXBwb3J0JztcclxuICAgIHV0YWdfZGF0YS5ldmVudF90eXBlID0gJ2NvbnRhY3QnO1xyXG4gICAgdXRhZ19kYXRhLmV2ZW50X3N0YXR1cyA9ICdzdGFydCc7XHJcblxyXG4gICAgLy8gfSk7XHJcblxyXG4gICAgY29udGFjdFVzR3BDb21tb24gPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGNvbnRhY3RVc01vZHVsZSA9IHtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29udGFjdFVzTW9kdWxlLmNoZWNrRGF0YUVtcHR5ID0gZnVuY3Rpb24oZGF0YSwgdmFsdWVUeXBlKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZVR5cGUgPT09ICd1c2VyVHlwZScpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoZGF0YSA9PT0gJ0kgYW0gKFNlbGVjdCBvbmUpJyB8fCBkYXRhID09PSAnU2VsZWN0IG9uZScpID8gJycgOiBkYXRhO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKGRhdGEpID8gZGF0YSA6ICcnO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBjb250YWN0VXNNb2R1bGU7XHJcbiAgICB9KSgpO1xyXG4gICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5oaWRlKCk7XHJcbiAgICBhbmd1bGFyLmVsZW1lbnQoJyonKS5yZW1vdmVDbGFzcygnbm9uZScpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGlzVHdvWmlwQ29kZShuYW1lLCBib29sZWFuVmFsdWUpIHtcclxuICAgICAgICBpZiAobmFtZSA9PT0gJ3ppcENvZGUnKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RaaXBGb3JtYXQgPSBib29sZWFuVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICRzY29wZS5jb250YWN0dXNHcFBob25lTnVtID0gZnVuY3Rpb24oZXZ0LCBpbnB1dFZhbHVlLCBuYW1lLCB6aXBPclBob25lKSB7XHJcbiAgICAgICAgaWYgKGlucHV0VmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRzY29wZS5jb250YWN0VXNHcERhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05LV0vZywgJycpO1xyXG4gICAgICAgIGlmICh6aXBPclBob25lID09PSAncGhvbmUnKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXR0ID0gL14oXFxkezN9XFwtXFxkezN9LVxcZHs0fSkkLztcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RGb3JtYXQgPSAhKHBhdHQudGVzdCgkc2NvcGUuY29udGFjdFVzR3BEYXRhW25hbWVdKSk7XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuY29udGFjdFVzR3BEYXRhW25hbWVdLmxlbmd0aCA9PT0gMyAmJiBldnQua2V5Q29kZSAhPT0gOCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRhY3RVc0dwRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb250YWN0VXNHcERhdGFbbmFtZV0gPSAkc2NvcGUuY29udGFjdFVzR3BEYXRhW25hbWVdLnJlcGxhY2UoLyhcXGR7M30pLywgJyQxLScpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5jb250YWN0VXNHcERhdGFbbmFtZV0ubGVuZ3RoID09PSA3ICYmIGV2dC5rZXlDb2RlICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY29udGFjdFVzR3BEYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRhY3RVc0dwRGF0YVtuYW1lXSA9ICRzY29wZS5jb250YWN0VXNHcERhdGFbbmFtZV0ucmVwbGFjZSgvKFxcZHszfSkoXFxkezN9KS8sXHJcbiAgICAgICAgICAgICAgICAgICAgJyQxLSQyLScpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5jb250YWN0VXNHcERhdGFbbmFtZV0ubGVuZ3RoID09PSAxMikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRhY3RVc0dwRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb250YWN0VXNHcERhdGFbbmFtZV0gPSAkc2NvcGUuY29udGFjdFVzR3BEYXRhW25hbWVdLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5jb250YWN0VXNHcERhdGFbbmFtZV0ubGVuZ3RoID09PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRhY3RVc0dwRGF0YVtuYW1lXSA9ICRzY29wZS5jb250YWN0VXNHcERhdGFbbmFtZV0ucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAvKFxcZHszfSkoXFxkezN9KShcXGR7NH0pLywgJyQxLSQyLSQzJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCRzY29wZS5pc0NvcnJlY3RGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY29udGFjdFVzR3BEYXRhW25hbWVdLmxlbmd0aCA+PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSAkc2NvcGUuY29udGFjdFVzR3BEYXRhW25hbWVdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29udGFjdFVzR3BEYXRhW25hbWVdID0gc3RyLnNsaWNlKDAsIDEyKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0Rm9ybWF0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHppcE9yUGhvbmUgPT09ICd6aXAnKSB7XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuY29udGFjdFVzR3BEYXRhW25hbWVdLmxlbmd0aCA9PT0gNSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRhY3RVc0dwRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTktXS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleUNvZGUgPT09IDEwOSB8fCBldnQua2V5Q29kZSA9PT0gMTg5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRhY3RVc0dwRGF0YVtuYW1lXSA9ICRzY29wZS5jb250YWN0VXNHcERhdGFbbmFtZV0gKyAnLSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5jb250YWN0VXNHcERhdGFbbmFtZV0ubGVuZ3RoID4gNSAmJiAkc2NvcGUuY29udGFjdFVzR3BEYXRhW25hbWVdLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgPD0gMTApIHtcclxuICAgICAgICAgICAgICAgIGlmIChuZXcgUmVnRXhwKCctJykudGVzdCgkc2NvcGUuY29udGFjdFVzR3BEYXRhW25hbWVdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY29udGFjdFVzR3BEYXRhW25hbWVdLmxlbmd0aCA9PT0gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdHRaaXAgPSAvXihcXGR7NX1cXC1cXGR7NH0pJC87XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3ppcENvZGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0ID0gIShwYXR0WmlwLnRlc3QoJHNjb3BlLmNvbnRhY3RVc0dwRGF0YVtuYW1lXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmNvbnRhY3RVc0dwRGF0YVtuYW1lXS5sZW5ndGggPT09IDkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleUNvZGUgPT09IDEwOSB8fCBldnQua2V5Q29kZSA9PT0gMTg5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyMnICsgZXZ0LnRhcmdldC5pZCkuaW5zZXJ0QXRDYXJldCgnLScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgYW5ndWxhci5leHRlbmQoJHNjb3BlLCB7XHJcbiAgICAgICAgJ2NvbnRhY3RVc0dwRGF0YSc6IHtcclxuXHJcbiAgICAgICAgfSxcclxuICAgICAgICAnaXNDb250YWN0VXNHcENsaWNrZWQnOiBmYWxzZSxcclxuICAgICAgICAndmFsaWRhdGlvbkVycm9yU2hvdycgOiBmYWxzZVxyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Q2FwdGNoYURhdGEoKSB7XHJcbiAgICAgICAgdmFyIG51Y2FwdGNoYUFuc0VudHIsIG51Y2FwdGNoYUFuc0V4dDtcclxuXHJcbiAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykpIHtcclxuICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRW50ciA9ICcnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG51Y2FwdGNoYUFuc0VudHIgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykudmFsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1leGl0JykpIHtcclxuICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gJyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1leGl0JykudmFsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qJHNjb3BlLmNvbnRhY3RVc0dwRGF0YVsnbnVjYXB0Y2hhLWVwZCddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWVwZCcpLnZhbCgpO1xyXG4gICAgICAgICRzY29wZS5jb250YWN0VXNHcERhdGFbJ251Y2FwdGNoYS1hbnN3ZXInXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXInKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUuY29udGFjdFVzR3BEYXRhWydudWNhcHRjaGEtYW5zd2VyLWVudGVyJ10gPSBudWNhcHRjaGFBbnNFbnRyO1xyXG4gICAgICAgICRzY29wZS5jb250YWN0VXNHcERhdGFbJ251Y2FwdGNoYS1hbnN3ZXItZXhpdCddID0gbnVjYXB0Y2hhQW5zRXh0O1xyXG4gICAgICAgICRzY29wZS5jb250YWN0VXNHcERhdGEubG1zdWJtaXR0ZWQgPSBhbmd1bGFyLmVsZW1lbnQoJyNsbXN1Ym1pdHRlZCcpLnZhbCgpO1xyXG4gICAgICAgICRzY29wZS5jb250YWN0VXNHcERhdGFbJ251Y2FwdGNoYS1pbmRleCddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWluZGV4JykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRhY3RVc0dwRGF0YVsnbnVjYXB0Y2hhLWRhdGF0eXBlJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtZGF0YXR5cGUnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUuY29udGFjdFVzR3BEYXRhWydudWNhcHRjaGEtcHR5cGUnXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1wdHlwZScpLnZhbCgpO1xyXG4gICAgICAgICRzY29wZS5jb250YWN0VXNHcERhdGFbJ251Y2FwdGNoYS1sYW5ndWFnZSddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWxhbmd1YWdlJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRhY3RVc0dwRGF0YVsnbnVjYXB0Y2hhLXJlZ2lvbiddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLXJlZ2lvbicpLnZhbCgpO1xyXG4gICAgICAgICRzY29wZS5jb250YWN0VXNHcERhdGFbJ251Y2FwdGNoYS1tZWRpYS1kb3dubG9hZC10aW1lJ10gPSAnJztcclxuICAgICAgICAkc2NvcGUuY29udGFjdFVzR3BEYXRhWydudWNhcHRjaGEtYWRzZXJ2LWRvd25sb2FkLXRpbWUnXSA9ICcnO1xyXG4gICAgICAgICRzY29wZS5jb250YWN0VXNHcERhdGFbJ251Y2FwdGNoYS1mYWxsYmFjay10b2tlbiddID0gJyc7Ki9cclxuICAgICAgICAkc2NvcGUuY29udGFjdFVzR3BEYXRhWydnUmVjYXB0Y2hhUmVzcG9uc2UnXSA9ICQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldEZvcm1EYXRhKCkge1xyXG4gICAgICAgICRzY29wZS5jb250YWN0VXNHcERhdGEuZm9ybUZhY3RvciA9IGNvbnRhY3R1c0dwRm9ybUZhY3RvcjtcclxuICAgICAgICAkc2NvcGUuY29udGFjdFVzR3BEYXRhLmlkZW50aXR5ID0gJ0NPTlRBQ1RfVVNfR1AnO1xyXG4gICAgICAgICRzY29wZS5jb250YWN0VXNHcERhdGEudXNlclR5cGUgPSBjb250YWN0VXNHcENvbW1vbi5jaGVja0RhdGFFbXB0eShhbmd1bGFyLmVsZW1lbnQoJyN1c2VyVHlwZScpLnRleHQoKSxcclxuICAgICAgICAgICAgJ3VzZXJUeXBlJyk7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRhY3RVc0dwRGF0YS5jb250YWN0TWV0aG9kID0gJHNjb3BlLmNvbnRhY3RVc0dwRGF0YS5jb250YWN0TWV0aG9kIHx8ICdFbWFpbCc7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZGlzcGxheUVycigpIHtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gdHJ1ZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IHRydWU7XHJcbiAgICAgICAgJHNjb3BlLnZhbGlkYXRpb25FcnJvclNob3cgPSB0cnVlO1xyXG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRpc0VyclZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnLmMtZXJyLWJveCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbycpLmVxKFxyXG4gICAgICAgICAgICAgICAgICAgIDApLnBhcmVudCgpLm9mZnNldCgpLnRvcDtcclxuICAgICAgICAgICAgICAgIHZhciBoZWFkZXJIZ3QgPSBhbmd1bGFyLmVsZW1lbnQoJy5Ub3BoZWFkZXItbG9nb2FyZWEnKS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aXNFcnJWYWwgPSAodGlzRXJyVmFsIC0gaGVhZGVySGd0KSAtIDUwO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCdodG1sLCBib2R5Jykuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICdzY3JvbGxUb3AnOiB0aXNFcnJWYWxcclxuICAgICAgICAgICAgICAgIH0sIDYwMCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykuZXEoMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIDIwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdmFsaWRGb3JtKCkge1xyXG4gICAgICAgIHZhciBpc0NhcHRjaGFBdmFpbCA9IGZhbHNlLFxyXG4gICAgICAgICAgICBjYXBjaGFWYWw7XHJcblxyXG4gICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5nLXJlY2FwdGNoYScpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgaXNDYXB0Y2hhQXZhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICBjYXBjaGFWYWwgPSBhbmd1bGFyLmVsZW1lbnQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpO1xyXG4gICAgICAgICAgICBpZiAoY2FwY2hhVmFsKSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLnNob3coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoJHNjb3BlLmNvbnRhY3RVc0dwRm9ybS4kdmFsaWQgJiYgKChpc0NhcHRjaGFBdmFpbCAmJiBjYXBjaGFWYWwpIHx8ICFpc0NhcHRjaGFBdmFpbCkgJiYgISRzY29wZS5pc0NvcnJlY3RGb3JtYXRcclxuICAgICAgICAgICAgJiYgISRzY29wZS5pc0NvcnJlY3RaaXBGb3JtYXQpIHtcclxuICAgICAgICAgICAgaWYgKGlzQ2FwdGNoYUF2YWlsKSB7XHJcbiAgICAgICAgICAgICAgICBnZXRDYXB0Y2hhRGF0YSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdldEZvcm1EYXRhKCk7XHJcbiAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJTaG93KCk7XHJcbiAgICAgICAgICAgICRzY29wZS52YWxpZGF0aW9uRXJyb3JTaG93ID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGlzcGxheUVycigpO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAkc2NvcGUuc3VibWl0Q29udGFjdFVzR3AgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAkc2NvcGUuaXNDb250YWN0VXNHcENsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIGlmICh2YWxpZEZvcm0oKSkge1xyXG4gICAgICAgICAgICBjb250YWN0VXNHcFNlcnZpY2VzLmNvbnRhY3RVc0dwSW5mb1Bvc3QoJHNjb3BlLCAkc2NvcGUuY29udGFjdFVzR3BEYXRhLCBmdW5jdGlvbihkYXRhQWpheCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGFSZXNwb25jZSA9IGRhdGFBamF4LmRhdGEucmVzcG9uc2VTdGF0dXNDb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhUmVzcG9uY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3BvbmNlID09PSAnVElNRURfT1VUJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTWVzc2FnZSA9ICdUSU1FRCBPVVQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNnZXRTdGFydGVkLXN1Y2Nlc3MtdHh0JykuYWRkQ2xhc3MoJ2dldFN0YXJ0ZWQtZXJyb3InKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ0lOVEVSTkFMX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTWVzc2FnZSA9ICdJTlRFUk5BTCBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2dldFN0YXJ0ZWQtc3VjY2Vzcy10eHQnKS5hZGRDbGFzcygnZ2V0U3RhcnRlZC1lcnJvcicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnQ0FQVENIQV9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1lc3NhZ2UgPSAnSU5WQUxJRCBDQVBUQ0hBJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjZ2V0U3RhcnRlZC1zdWNjZXNzLXR4dCcpLmFkZENsYXNzKCdnZXRTdGFydGVkLWVycm9yJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uY2UgPT09ICdTRVJWSUNFX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTWVzc2FnZSA9ICdTRVJWSUNFIEVSUk9SJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjZ2V0U3RhcnRlZC1zdWNjZXNzLXR4dCcpLmFkZENsYXNzKCdnZXRTdGFydGVkLWVycm9yJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uY2UgPT09ICdTVUNDRVNTJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gdGtzUGFnZVVSTCAmJiAnbnVsbCcgIT09IHRrc1BhZ2VVUkwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24uaHJlZiA9IHRrc1BhZ2VVUkw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNZXNzYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnU1VDQ0VTUy4gVGhhbmsgeW91IGZvciBzaGFyaW5nIHlvdXIgaW5mb3JtYXRpb24uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvbnRhY3RVc0dwQ2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29udGFjdFVzR3BEYXRhID0ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjdXNlclR5cGUnKS50ZXh0KCdJIGFtIChTZWxlY3Qgb25lKScpLnJlbW92ZUF0dHIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YS12YWwnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbic6ICdmb3JtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9uYW1lJyAgOiAnR3JvdXAgYmVuZWZpdHMgc3VwcG9ydCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfdHlwZScgIDogJ2NvbnRhY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3N0YXR1cyc6ICdjb21wbGV0ZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0YWcubGluayhkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoLXdyYXBwZXInKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5jQ21kTmV3Q2hhbGxlbmdlKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh3YXJuaW5nTXNnID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHRhYmxlVmFsID0gYW5ndWxhci5lbGVtZW50KCcuQXJ0aWNsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7XHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJIZ3QgPSBhbmd1bGFyLmVsZW1lbnQoJy5Ub3BoZWFkZXItbG9nb2FyZWEnKS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIHRhYmxlVmFsID0gKHRhYmxlVmFsIC0gaGVhZGVySGd0KSAtIDIwO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGFibGVWYWxcclxuICAgICAgICAgICAgfSwgODAwKTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxufV0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbihmdW5jdGlvbigpIHtcclxuICAgIGxmZ2FwcC5jb250cm9sbGVyKCdkaXNhYmlsaXR5V2FpdmVyQ29udHJsJywgZGlzYWJpbGl0eVdhaXZlckNvbnRybCk7XHJcbiAgICBkaXNhYmlsaXR5V2FpdmVyQ29udHJsLiRpbmplY3QgPSBbJyRzY29wZScsICckdGltZW91dCcsICckd2luZG93JywgJ2Rpc2FiaWxpdHlXYWl2ZXJTZXJ2aWNlcyddO1xyXG5cclxuICAgIGZ1bmN0aW9uIGRpc2FiaWxpdHlXYWl2ZXJDb250cmwoJHNjb3BlLCAkdGltZW91dCwgJHdpbmRvdywgZGlzYWJpbGl0eVdhaXZlclNlcnZpY2VzKSB7XHJcbiAgICAgICAgLy8gJCh3aW5kb3cpLmxvYWQoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICB1dGFnX2RhdGEuZXZlbnRfYWN0aW9uID0gJ2Zvcm0nO1xyXG4gICAgICAgIHV0YWdfZGF0YS5ldmVudF9uYW1lID0gJ0Rpc2FiaWxpdHkgTm90aWZpY2F0aW9uJztcclxuICAgICAgICB1dGFnX2RhdGEuZXZlbnRfdHlwZSA9ICdjbGFpbXMnO1xyXG4gICAgICAgIHV0YWdfZGF0YS5ldmVudF9zdGF0dXMgPSAnc3RhcnQnO1xyXG5cclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy8gfSk7XHJcblxyXG4gICAgICAgIHZhciBkaXNhYmlsaXR5V2FpdmVyRmFjdG9yLCBjb21tb25EaXNhYmlsaXR5LCB3YXJuaW5nTXNnLFxyXG4gICAgICAgICAgICBkaXNhYmlsaXR5V2FpdmVyQ291bnQgPSAwO1xyXG5cclxuICAgICAgICAkKGRvY3VtZW50KS5vbigncmVzcG9uc2l2ZTpzdGF0ZWNoYW5nZWQnLCBmdW5jdGlvbihlLCBwYXJhbSkge1xyXG4gICAgICAgICAgICBkaXNhYmlsaXR5V2FpdmVyRmFjdG9yID0gcGFyYW07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qIFx0JCgnYm9keScpLm9uKCdmb2N1cycsXCIuZGlzYWJpbGl0eS1kYXRlLWZpZWxkXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIFx0XHQkKHRoaXMpLmRhdGVwaWNrZXIoe1xyXG4gICAgICAgIFx0XHRcdGNoYW5nZU1vbnRoOiB0cnVlLFxyXG4gICAgICAgIFx0XHRcdGNoYW5nZVllYXI6IHRydWUsXHJcbiAgICAgICAgXHRcdFx0eWVhclJhbmdlOiBcIi0yMDA6KzBcIlxyXG4gICAgICAgIFx0XHR9KTtcclxuICAgICAgICBcdH0pOyAqL1xyXG4gICAgICAgIHZhciBkYXRlUGljID0gbmV3IENhbGVuZGFyKHtcclxuICAgICAgICAgICAgICAgICdkYXRlSWQnICAgICAgIDogJ2RhdGUnLFxyXG4gICAgICAgICAgICAgICAgJ21vbnRoSWQnICAgICAgOiAnbW9udGgnLFxyXG4gICAgICAgICAgICAgICAgJ3llYXJJZCcgICAgICAgOiAneWVhcicsXHJcbiAgICAgICAgICAgICAgICAnaGlkZGVuSWQnICAgICA6ICdEaXNhYmlsaXR5RE9CJyxcclxuICAgICAgICAgICAgICAgICdudW1iZXJPZlllYXJzJzogMTMwXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBkYXRlUGljMSA9IG5ldyBDYWxlbmRhcih7XHJcbiAgICAgICAgICAgICAgICAnZGF0ZUlkJyAgICAgICA6ICdkYXRlMScsXHJcbiAgICAgICAgICAgICAgICAnbW9udGhJZCcgICAgICA6ICdtb250aDEnLFxyXG4gICAgICAgICAgICAgICAgJ3llYXJJZCcgICAgICAgOiAneWVhcjEnLFxyXG4gICAgICAgICAgICAgICAgJ2hpZGRlbklkJyAgICAgOiAnaW5zdXJlZF9kaXNhYmlsaXR5X2RhdGUnLFxyXG4gICAgICAgICAgICAgICAgJ251bWJlck9mWWVhcnMnOiAxMzBcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyonKS5yZW1vdmVDbGFzcygnbm9uZSBnZXQtc2FydGVkZm9ybS1kZWZhdWx0LWhpZGRlbicpO1xyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5oaWRlKCk7XHJcbiAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ3VsLmN1c3RvbS1zZWxlY3Rib3gtbGlzdC1jb250IGxpJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29tbW9uRGlzYWJpbGl0eS5kcm9wRG93blZhbGlkYXRpb24oJ25vdGlmaWVyX1N0YXRlJywgJ25vdGlmaWVyU3RhdGVGbGFnJyk7XHJcbiAgICAgICAgICAgICAgICBjb21tb25EaXNhYmlsaXR5LmRyb3BEb3duVmFsaWRhdGlvbignaW5zdXJlZF9TdGF0ZScsICdpbnN1cmVkU3RhdGVGbGFnJyk7XHJcbiAgICAgICAgICAgIH0sIDIwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29tbW9uRGlzYWJpbGl0eSA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGNvbW1vbkRpc2FiaWxpdHlNb2R1bGUgPSB7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgY29tbW9uRGlzYWJpbGl0eU1vZHVsZS5kcm9wRG93blZhbGlkYXRpb24gPSBmdW5jdGlvbihpZCwgZmxhZ05hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJyMnICsgaWQpLnRleHQoKSAhPT0gJ1NlbGVjdCBzdGF0ZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGVbZmxhZ05hbWVdID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZVtmbGFnTmFtZV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb21tb25EaXNhYmlsaXR5TW9kdWxlLmNoZWNrRGF0YSA9IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhID0gKCFkYXRhKSA/ICcnIDogZGF0YTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjb21tb25EaXNhYmlsaXR5TW9kdWxlO1xyXG4gICAgICAgIH0pKCRzY29wZSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGlzVHdvWmlwQ29kZShuYW1lLCBib29sZWFuVmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdpbnN1cmVkWmlwQ29kZScpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RJbnN1cmVkWmlwRm9ybWF0ID0gYm9vbGVhblZhbHVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCA9IGJvb2xlYW5WYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUuZGlzYWJsaXR5UGhvbmVOdW0gPSBmdW5jdGlvbihldnQsIGlucHV0VmFsdWUsIG5hbWUsIHppcE9yUGhvbmUpIHtcclxuICAgICAgICAgICAgaWYgKGlucHV0VmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTktXS9nLCAnJyk7XHJcbiAgICAgICAgICAgIGlmICh6aXBPclBob25lID09PSAncGhvbmUnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGF0dCA9IC9eKFxcZHszfVxcLVxcZHszfS1cXGR7NH0pJC87XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdub3RpZmllckRheVBob25lJykge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3REYXlGb3JtYXQgPSAhKHBhdHQudGVzdCgkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGFbbmFtZV0pKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdEZvcm1hdCA9ICEocGF0dC50ZXN0KCRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YVtuYW1lXSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YVtuYW1lXS5sZW5ndGggPT09IDMgJiYgZXZ0LmtleUNvZGUgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhW25hbWVdID0gJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhW25hbWVdLnJlcGxhY2UoLyhcXGR7M30pLyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyQxLScpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGFbbmFtZV0ubGVuZ3RoID09PSA3ICYmIGV2dC5rZXlDb2RlICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YVtuYW1lXSA9ICRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YVtuYW1lXS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKFxcZHszfSkoXFxkezN9KS8sICckMS0kMi0nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhW25hbWVdLmxlbmd0aCA9PT0gMTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhW25hbWVdID0gJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhW25hbWVdLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8oXFxkezN9KShcXGR7M30pKFxcZHs0fSkvLCAnJDEtJDItJDMnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhW25hbWVdLmxlbmd0aCA9PT0gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGFbbmFtZV0gPSAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGFbbmFtZV0ucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pc0NvcnJlY3REYXlGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhW25hbWVdLmxlbmd0aCA+PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyID0gJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhW25hbWVdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhW25hbWVdID0gc3RyLnNsaWNlKDAsIDEyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdERheUZvcm1hdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhW25hbWVdLmxlbmd0aCA+PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGFbbmFtZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YVtuYW1lXSA9IHN0ci5zbGljZSgwLCAxMik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoemlwT3JQaG9uZSA9PT0gJ3ppcCcpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGFbbmFtZV0ubGVuZ3RoID09PSA1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOS1dL2csICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleUNvZGUgPT09IDEwOSB8fCBldnQua2V5Q29kZSA9PT0gMTg5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YVtuYW1lXSA9ICRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YVtuYW1lXSArICctJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhW25hbWVdLmxlbmd0aCA+IDUgJiYgJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhW25hbWVdLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgIDw9IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ldyBSZWdFeHAoJy0nKS50ZXN0KCRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YVtuYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YVtuYW1lXS5sZW5ndGggPT09IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF0dFppcCA9IC9eKFxcZHs1fVxcLVxcZHs0fSkkLztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ2luc3VyZWRaaXBDb2RlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RJbnN1cmVkWmlwRm9ybWF0ID0gIShwYXR0WmlwLnRlc3QoJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0ID0gIShwYXR0WmlwLnRlc3QoJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhW25hbWVdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YVtuYW1lXS5sZW5ndGggPT09IDkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2dC5rZXlDb2RlID09PSAxMDkgfHwgZXZ0LmtleUNvZGUgPT09IDE4OSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnIycgKyBldnQudGFyZ2V0LmlkKS5pbnNlcnRBdENhcmV0KCctJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiAkc2NvcGUuZGlzYWJsaXR5RGF5UGhvbmVOdW0gPSBmdW5jdGlvbiAoZXZ0LCBpbnB1dFZhbHVlKSB7XHJcbiAgICAgICAgXHRpZiAoaW5wdXRWYWx1ZSA9PSB1bmRlZmluZWQpIHJldHVybiAnJ1xyXG4gICAgICAgIFx0JHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhLm5vdGlmaWVyRGF5UGhvbmUgPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05LV0vZywgJycpO1xyXG4gICAgICAgIFx0aWYgKCRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YS5ub3RpZmllckRheVBob25lLmxlbmd0aCA9PSAzICYmIGV2dC5rZXlDb2RlICE9IDgpIHtcclxuICAgICAgICBcdFx0JHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhLm5vdGlmaWVyRGF5UGhvbmUgPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgXHRcdCRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YS5ub3RpZmllckRheVBob25lID0gJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhLm5vdGlmaWVyRGF5UGhvbmUucmVwbGFjZSgvKFxcZHszfSkvLCBcIiQxLVwiKTtcclxuICAgICAgICBcdH0gZWxzZSBpZiAoJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhLm5vdGlmaWVyRGF5UGhvbmUubGVuZ3RoID09IDcgJiYgZXZ0LmtleUNvZGUgIT0gOCkge1xyXG4gICAgICAgIFx0XHQkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGEubm90aWZpZXJEYXlQaG9uZSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICBcdFx0JHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhLm5vdGlmaWVyRGF5UGhvbmUgPSAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGEubm90aWZpZXJEYXlQaG9uZS5yZXBsYWNlKC8oXFxkezN9KShcXGR7M30pLywgXCIkMS0kMi1cIik7XHJcbiAgICAgICAgXHR9IGVsc2UgaWYgKCRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YS5ub3RpZmllckRheVBob25lLmxlbmd0aCA9PSAxMikge1xyXG4gICAgICAgIFx0XHQkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGEubm90aWZpZXJEYXlQaG9uZSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICBcdFx0JHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhLm5vdGlmaWVyRGF5UGhvbmUgPSAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGEubm90aWZpZXJEYXlQaG9uZS5yZXBsYWNlKC8oXFxkezN9KShcXGR7M30pKFxcZHs0fSkvLCBcIiQxLSQyLSQzXCIpO1xyXG4gICAgICAgIFx0fSBlbHNlIGlmICgkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGEubm90aWZpZXJEYXlQaG9uZS5sZW5ndGggPT0gMTApIHtcclxuICAgICAgICBcdFx0JHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhLm5vdGlmaWVyRGF5UGhvbmUgPSAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGEubm90aWZpZXJEYXlQaG9uZS5yZXBsYWNlKC8oXFxkezN9KShcXGR7M30pKFxcZHs0fSkvLCBcIiQxLSQyLSQzXCIpO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIH07ICovXHJcbiAgICAgICAgYW5ndWxhci5leHRlbmQoJHNjb3BlLCB7XHJcbiAgICAgICAgICAgICdpc0Rpc2FiaWxpdHlDbGlja2VkJyA6IGZhbHNlLFxyXG4gICAgICAgICAgICAnbm90aWZpZXJTdGF0ZUZsYWcnICAgOiB0cnVlLFxyXG4gICAgICAgICAgICAnaW5zdXJlZFN0YXRlRmxhZycgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICAnZGlzYWJpbGl0eVdhaXZlckRhdGEnOiB7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAndmFsaWRhdGlvbkVycm9yU2hvdyc6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldENhcHRjaGFEYXRhKCkge1xyXG4gICAgICAgICAgICB2YXIgbnVjYXB0Y2hhQW5zRW50ciwgbnVjYXB0Y2hhQW5zRXh0O1xyXG5cclxuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykpIHtcclxuICAgICAgICAgICAgICAgIG51Y2FwdGNoYUFuc0VudHIgPSAnJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG51Y2FwdGNoYUFuc0VudHIgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykudmFsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKSkge1xyXG4gICAgICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gJyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKS52YWwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvKiRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YVsnbnVjYXB0Y2hhLWVwZCddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWVwZCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGFbJ251Y2FwdGNoYS1hbnN3ZXInXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXInKS52YWwoKTtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhWydudWNhcHRjaGEtYW5zd2VyLWVudGVyJ10gPSBudWNhcHRjaGFBbnNFbnRyO1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGFbJ251Y2FwdGNoYS1hbnN3ZXItZXhpdCddID0gbnVjYXB0Y2hhQW5zRXh0O1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGEubG1zdWJtaXR0ZWQgPSBhbmd1bGFyLmVsZW1lbnQoJyNsbXN1Ym1pdHRlZCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGFbJ251Y2FwdGNoYS1pbmRleCddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWluZGV4JykudmFsKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YVsnbnVjYXB0Y2hhLWRhdGF0eXBlJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtZGF0YXR5cGUnKS52YWwoKTtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhWydudWNhcHRjaGEtcHR5cGUnXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1wdHlwZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGFbJ251Y2FwdGNoYS1sYW5ndWFnZSddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWxhbmd1YWdlJykudmFsKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YVsnbnVjYXB0Y2hhLXJlZ2lvbiddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLXJlZ2lvbicpLnZhbCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGFbJ251Y2FwdGNoYS1tZWRpYS1kb3dubG9hZC10aW1lJ10gPSAnJztcclxuICAgICAgICAgICAgJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhWydudWNhcHRjaGEtYWRzZXJ2LWRvd25sb2FkLXRpbWUnXSA9ICcnO1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGFbJ251Y2FwdGNoYS1mYWxsYmFjay10b2tlbiddID0gJyc7Ki9cclxuICAgICAgICAgICAgJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhWydnUmVjYXB0Y2hhUmVzcG9uc2UnXSA9ICQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Rm9ybURhdGEoKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YS5mb3JtRmFjdG9yID0gZGlzYWJpbGl0eVdhaXZlckZhY3RvcjtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhLmlkZW50aXR5ID0gJ0RJU0FCSUxJVFlfQ0xBSU1TJztcclxuICAgICAgICAgICAgJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhLmluc3VyZWRSZWxhdGlvbnNoaXAgPSBjb21tb25EaXNhYmlsaXR5LmNoZWNrRGF0YSgkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGFcclxuICAgICAgICAgICAgICAgIC5pbnN1cmVkUmVsYXRpb25zaGlwKTtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhLm5vdGlmaWVyRXZlbmluZ1Bob25lID0gY29tbW9uRGlzYWJpbGl0eS5jaGVja0RhdGEoJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhXHJcbiAgICAgICAgICAgICAgICAubm90aWZpZXJFdmVuaW5nUGhvbmUpO1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGEubm90aWZpZXJFbWFpbCA9IGNvbW1vbkRpc2FiaWxpdHkuY2hlY2tEYXRhKCRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YS5ub3RpZmllckVtYWlsKTtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhLmluc3VyZWREYXRlT2ZCaXJ0aCA9IGNvbW1vbkRpc2FiaWxpdHkuY2hlY2tEYXRhKCRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YVxyXG4gICAgICAgICAgICAgICAgLmluc3VyZWREYXRlT2ZCaXJ0aCk7XHJcbiAgICAgICAgICAgICRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YS5pbnN1cmVkQ2F1c2VPZkRpc2FiaWxpdHkgPSBjb21tb25EaXNhYmlsaXR5LmNoZWNrRGF0YSgkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGFcclxuICAgICAgICAgICAgICAgIC5pbnN1cmVkQ2F1c2VPZkRpc2FiaWxpdHkpO1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGEuaW5zdXJlZERpc2FiaWxpdHlDYXVzZSA9IGNvbW1vbkRpc2FiaWxpdHkuY2hlY2tEYXRhKCRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YVxyXG4gICAgICAgICAgICAgICAgLmluc3VyZWREaXNhYmlsaXR5Q2F1c2UpO1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGEubm90aWZpZXJTdGF0ZSA9IGFuZ3VsYXIuZWxlbWVudCgnI25vdGlmaWVyX1N0YXRlJykudGV4dCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzYWJpbGl0eVdhaXZlckRhdGEuaW5zdXJlZFN0YXRlID0gYW5ndWxhci5lbGVtZW50KCcjaW5zdXJlZF9TdGF0ZScpLnRleHQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRpc3BsYXlFcnIoKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRzY29wZS52YWxpZGF0aW9uRXJyb3JTaG93ID0gdHJ1ZTtcclxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aXNFcnJWYWwgPSBhbmd1bGFyLmVsZW1lbnQoJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5lcSgwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAucGFyZW50KCkub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWFkZXJIZ3QgPSBhbmd1bGFyLmVsZW1lbnQoJy5Ub3BoZWFkZXItbG9nb2FyZWEnKS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGlzRXJyVmFsID0gKHRpc0VyclZhbCAtIGhlYWRlckhndCkgLSA1MDtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdzY3JvbGxUb3AnOiB0aXNFcnJWYWxcclxuICAgICAgICAgICAgICAgICAgICB9LCA2MDAsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5lcSgwKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAyMDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdmFsaWRGb3JtKCkge1xyXG4gICAgICAgICAgICB2YXIgaXNDYXB0Y2hhQXZhaWwgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNhcGNoYVZhbDtcclxuXHJcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5nLXJlY2FwdGNoYScpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGlzQ2FwdGNoYUF2YWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNhcGNoYVZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnI2ctcmVjYXB0Y2hhLXJlc3BvbnNlJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FwY2hhVmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLnNob3coKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmRpc2FiaWxpdHlfd2FpdmVyX2Zvcm0uJHZhbGlkICYmICEkc2NvcGUubm90aWZpZXJTdGF0ZUZsYWcgJiYgISRzY29wZS5pbnN1cmVkU3RhdGVGbGFnICYmICgoXHJcbiAgICAgICAgICAgICAgICAgICAgaXNDYXB0Y2hhQXZhaWwgJiYgY2FwY2hhVmFsKSB8fCAhaXNDYXB0Y2hhQXZhaWwpICYmICEkc2NvcGUuaXNDb3JyZWN0RGF5Rm9ybWF0ICYmICEkc2NvcGUuaXNDb3JyZWN0SW5zdXJlZFppcEZvcm1hdFxyXG4gICAgICAgICAgICAgICAgJiYgISRzY29wZS5pc0NvcnJlY3RaaXBGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc0NhcHRjaGFBdmFpbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdldENhcHRjaGFEYXRhKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBnZXRGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlclNob3coKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS52YWxpZGF0aW9uRXJyb3JTaG93ID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGlzcGxheUVycigpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJHNjb3BlLnN1Ym1pdFJlcXVlc3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc3VibWl0Q2xpY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICghZGlzYWJpbGl0eVdhaXZlckNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoISRzY29wZS5kaXNhYmlsaXR5V2FpdmVyRGF0YS5pbnN1cmVkRGlzYWJpbGl0eURhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5sb3N0UG9saWN5JykucmVtb3ZlQ2xhc3MoJ25nLWhpZGUnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubG9zdFBvbGljeScpLmFkZENsYXNzKCduZy1oaWRlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkaXNhYmlsaXR5V2FpdmVyQ291bnQgPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICRzY29wZS5pc0Rpc2FiaWxpdHlDbGlja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29tbW9uRGlzYWJpbGl0eS5kcm9wRG93blZhbGlkYXRpb24oJ25vdGlmaWVyX1N0YXRlJywgJ25vdGlmaWVyU3RhdGVGbGFnJyk7XHJcbiAgICAgICAgICAgIGNvbW1vbkRpc2FiaWxpdHkuZHJvcERvd25WYWxpZGF0aW9uKCdpbnN1cmVkX1N0YXRlJywgJ2luc3VyZWRTdGF0ZUZsYWcnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh2YWxpZEZvcm0oKSkge1xyXG4gICAgICAgICAgICAgICAgZGlzYWJpbGl0eVdhaXZlclNlcnZpY2VzLmRpc2FiaWxpdHlXYWl2ZXJQb3N0KCRzY29wZSwgJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhLCBmdW5jdGlvbihcclxuICAgICAgICAgICAgICAgICAgICBkYXRhQWpheCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhUmVzcG9uY2UgPSBkYXRhQWpheC5kYXRhLnJlc3BvbnNlU3RhdHVzQ29kZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFSZXNwb25jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3BvbmNlID09PSAnVElNRURfT1VUJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTWVzc2FnZSA9ICdUSU1FRCBPVVQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnSU5URVJOQUxfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNZXNzYWdlID0gJ0lOVEVSTkFMIEVSUk9SJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ0NBUFRDSEFfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNZXNzYWdlID0gJ0lOVkFMSUQgQ0FQVENIQSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uY2UgPT09ICdTRVJWSUNFX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTWVzc2FnZSA9ICdTRVJWSUNFIEVSUk9SJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ1NVQ0NFU1MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gdGtzUGFnZVVSTCAmJiAnbnVsbCcgIT09IHRrc1BhZ2VVUkwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2F0aW9uLmhyZWYgPSB0a3NQYWdlVVJMO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNZXNzYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ1NVQ0NFU1MuIFRoYW5rIHlvdSBmb3Igc2hhcmluZyB5b3VyIGluZm9ybWF0aW9uLic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc2FiaWxpdHlXYWl2ZXJEYXRhID0ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tb25GdW5jdGlvbnMucmVzZXREYXRlUGlja2VyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNub3RpZmllcl9TdGF0ZScpLnRleHQoJ1NlbGVjdCBzdGF0ZScpLnJlbW92ZUF0dHIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEtdmFsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNpbnN1cmVkX1N0YXRlJykudGV4dCgnU2VsZWN0IHN0YXRlJykucmVtb3ZlQXR0cihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YS12YWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0Rpc2FiaWxpdHlDbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YV9hbmFseXRpY3MgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbic6ICdmb3JtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfbmFtZScgIDogJ0Rpc2FiaWxpdHkgTm90aWZpY2F0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfdHlwZScgIDogJ2NsYWltcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3N0YXR1cyc6ICdjb21wbGV0ZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRhZy5saW5rKGRhdGFfYW5hbHl0aWNzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2gtd3JhcHBlcicpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5jQ21kTmV3Q2hhbGxlbmdlKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVySGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAod2FybmluZ01zZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0YWJsZVZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnLkFydGljbGVDb250ZW50Jykub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlckhndCA9IGFuZ3VsYXIuZWxlbWVudCgnLlRvcGhlYWRlci1sb2dvYXJlYScpLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRhYmxlVmFsID0gKHRhYmxlVmFsIC0gaGVhZGVySGd0KSAtIDIwO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCdodG1sLCBib2R5Jykuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICdzY3JvbGxUb3AnOiB0YWJsZVZhbFxyXG4gICAgICAgICAgICAgICAgfSwgODAwKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbihmdW5jdGlvbigpIHtcclxuICAgIGxmZ2FwcC5jb250cm9sbGVyKCdkcmlua2VyQmlkZGxlQ29udHJsJywgZHJpbmtlckJpZGRsZUNvbnRybCk7XHJcbiAgICBkcmlua2VyQmlkZGxlQ29udHJsLiRpbmplY3QgPSBbJyRzY29wZScsICckd2luZG93JywgJyR0aW1lb3V0JywgJ2RyaW5rZXJCaWRkbGVTZXJ2aWNlcyddO1xyXG5cclxuICAgIGZ1bmN0aW9uIGRyaW5rZXJCaWRkbGVDb250cmwoJHNjb3BlLCAkd2luZG93LCAkdGltZW91dCwgZHJpbmtlckJpZGRsZVNlcnZpY2VzKSB7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgICAgIHZhciByZXF1ZXN0Rm9ybUZhY3Rvciwgd2FybmluZ01zZztcclxuXHJcbiAgICAgICAgLy8gJChkb2N1bWVudCkubG9hZChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIHV0YWdfZGF0YS5ldmVudF9hY3Rpb24gPSAnZm9ybSc7XHJcbiAgICAgICAgdXRhZ19kYXRhLmV2ZW50X25hbWUgPSAnUmVxdWVzdCBmb3IgRHJpbmtlciBCaWRkbGUgV2hpdGUgUGFwZXJzJztcclxuICAgICAgICB1dGFnX2RhdGEuZXZlbnRfdHlwZSA9ICdyZXF1ZXN0JztcclxuICAgICAgICB1dGFnX2RhdGEuZXZlbnRfc3RhdHVzID0gJ3N0YXJ0JztcclxuXHJcbiAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgJChkb2N1bWVudCkub24oJ3Jlc3BvbnNpdmU6c3RhdGVjaGFuZ2VkJywgZnVuY3Rpb24oZSwgcGFyYW0pIHtcclxuICAgICAgICAgICAgcmVxdWVzdEZvcm1GYWN0b3IgPSBwYXJhbTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnKicpLnJlbW92ZUNsYXNzKCdub25lJyk7XHJcbiAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICAgICAkc2NvcGUuZHJpbmtlckJpZGRsZVBob25lTnVtID0gZnVuY3Rpb24oZXZ0LCBpbnB1dFZhbHVlLCBuYW1lKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dFZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUuZHJpbmtlckJpZGRsZURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05LV0vZywgJycpO1xyXG4gICAgICAgICAgICB2YXIgcGF0dCA9IC9eKFxcZHszfVxcLVxcZHszfS1cXGR7NH0pJC87XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0Rm9ybWF0ID0gIShwYXR0LnRlc3QoJHNjb3BlLmRyaW5rZXJCaWRkbGVEYXRhW25hbWVdKSk7XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuZHJpbmtlckJpZGRsZURhdGFbbmFtZV0ubGVuZ3RoID09PSAzICYmIGV2dC5rZXlDb2RlICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZHJpbmtlckJpZGRsZURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZHJpbmtlckJpZGRsZURhdGFbbmFtZV0gPSAkc2NvcGUuZHJpbmtlckJpZGRsZURhdGFbbmFtZV0ucmVwbGFjZSgvKFxcZHszfSkvLCAnJDEtJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmRyaW5rZXJCaWRkbGVEYXRhW25hbWVdLmxlbmd0aCA9PT0gNyAmJiBldnQua2V5Q29kZSAhPT0gOCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRyaW5rZXJCaWRkbGVEYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRyaW5rZXJCaWRkbGVEYXRhW25hbWVdID0gJHNjb3BlLmRyaW5rZXJCaWRkbGVEYXRhW25hbWVdLnJlcGxhY2UoLyhcXGR7M30pKFxcZHszfSkvLFxyXG4gICAgICAgICAgICAgICAgICAgICckMS0kMi0nKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUuZHJpbmtlckJpZGRsZURhdGFbbmFtZV0ubGVuZ3RoID09PSAxMikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRyaW5rZXJCaWRkbGVEYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRyaW5rZXJCaWRkbGVEYXRhW25hbWVdID0gJHNjb3BlLmRyaW5rZXJCaWRkbGVEYXRhW25hbWVdLnJlcGxhY2UoLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sXHJcbiAgICAgICAgICAgICAgICAgICAgJyQxLSQyLSQzJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmRyaW5rZXJCaWRkbGVEYXRhW25hbWVdLmxlbmd0aCA9PT0gMTApIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kcmlua2VyQmlkZGxlRGF0YVtuYW1lXSA9ICRzY29wZS5kcmlua2VyQmlkZGxlRGF0YVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KShcXGR7M30pKFxcZHs0fSkvLFxyXG4gICAgICAgICAgICAgICAgICAgICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuaXNDb3JyZWN0Rm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRyaW5rZXJCaWRkbGVEYXRhW25hbWVdLmxlbmd0aCA+PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSAkc2NvcGUuZHJpbmtlckJpZGRsZURhdGFbbmFtZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kcmlua2VyQmlkZGxlRGF0YVtuYW1lXSA9IHN0ci5zbGljZSgwLCAxMik7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdEZvcm1hdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGUsIHtcclxuICAgICAgICAgICAgJ2lzRHJpbmtlclN1Ym1pdCcgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICdkcmlua2VyQmlkZGxlRGF0YSc6IHtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Q2FwdGNoYURhdGEoKSB7XHJcbiAgICAgICAgICAgIHZhciBudWNhcHRjaGFBbnNFbnRyLCBudWNhcHRjaGFBbnNFeHQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZW50ZXInKSkge1xyXG4gICAgICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRW50ciA9ICcnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRW50ciA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZW50ZXInKS52YWwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZXhpdCcpKSB7XHJcbiAgICAgICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSAnJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG51Y2FwdGNoYUFuc0V4dCA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZXhpdCcpLnZhbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8qJHNjb3BlLmRyaW5rZXJCaWRkbGVEYXRhWydudWNhcHRjaGEtZXBkJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtZXBkJykudmFsKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5kcmlua2VyQmlkZGxlRGF0YVsnbnVjYXB0Y2hhLWFuc3dlciddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlcicpLnZhbCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUuZHJpbmtlckJpZGRsZURhdGFbJ251Y2FwdGNoYS1hbnN3ZXItZW50ZXInXSA9IG51Y2FwdGNoYUFuc0VudHI7XHJcbiAgICAgICAgICAgICRzY29wZS5kcmlua2VyQmlkZGxlRGF0YVsnbnVjYXB0Y2hhLWFuc3dlci1leGl0J10gPSBudWNhcHRjaGFBbnNFeHQ7XHJcbiAgICAgICAgICAgICRzY29wZS5kcmlua2VyQmlkZGxlRGF0YS5sbXN1Ym1pdHRlZCA9IGFuZ3VsYXIuZWxlbWVudCgnI2xtc3VibWl0dGVkJykudmFsKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5kcmlua2VyQmlkZGxlRGF0YVsnbnVjYXB0Y2hhLWluZGV4J10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtaW5kZXgnKS52YWwoKTtcclxuICAgICAgICAgICAgJHNjb3BlLmRyaW5rZXJCaWRkbGVEYXRhWydudWNhcHRjaGEtZGF0YXR5cGUnXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1kYXRhdHlwZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUuZHJpbmtlckJpZGRsZURhdGFbJ251Y2FwdGNoYS1wdHlwZSddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLXB0eXBlJykudmFsKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5kcmlua2VyQmlkZGxlRGF0YVsnbnVjYXB0Y2hhLWxhbmd1YWdlJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtbGFuZ3VhZ2UnKS52YWwoKTtcclxuICAgICAgICAgICAgJHNjb3BlLmRyaW5rZXJCaWRkbGVEYXRhWydudWNhcHRjaGEtcmVnaW9uJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtcmVnaW9uJykudmFsKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5kcmlua2VyQmlkZGxlRGF0YVsnbnVjYXB0Y2hhLW1lZGlhLWRvd25sb2FkLXRpbWUnXSA9ICcnO1xyXG4gICAgICAgICAgICAkc2NvcGUuZHJpbmtlckJpZGRsZURhdGFbJ251Y2FwdGNoYS1hZHNlcnYtZG93bmxvYWQtdGltZSddID0gJyc7XHJcbiAgICAgICAgICAgICRzY29wZS5kcmlua2VyQmlkZGxlRGF0YVsnbnVjYXB0Y2hhLWZhbGxiYWNrLXRva2VuJ10gPSAnJzsgKi9cclxuICAgICAgICAgICAgJHNjb3BlLmRyaW5rZXJCaWRkbGVEYXRhWydnUmVjYXB0Y2hhUmVzcG9uc2UnXSA9ICQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Rm9ybURhdGEoKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5kcmlua2VyQmlkZGxlRGF0YS5mb3JtRmFjdG9yID0gcmVxdWVzdEZvcm1GYWN0b3I7XHJcbiAgICAgICAgICAgICRzY29wZS5kcmlua2VyQmlkZGxlRGF0YS5pZGVudGl0eSA9ICdEUklOS0VSX0JJRERMRSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBkaXNwbGF5RXJyKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpc0VyclZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnLmMtZXJyLWJveCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbycpLmVxKDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wYXJlbnQoKS5vZmZzZXQoKS50b3A7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlckhndCA9IGFuZ3VsYXIuZWxlbWVudCgnLlRvcGhlYWRlci1sb2dvYXJlYScpLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aXNFcnJWYWwgPSAodGlzRXJyVmFsIC0gaGVhZGVySGd0KSAtIDUwO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnaHRtbCwgYm9keScpLnN0b3AoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3Njcm9sbFRvcCc6IHRpc0VyclZhbFxyXG4gICAgICAgICAgICAgICAgICAgIH0sIDYwMCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmMtZXJyLWJveCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbycpLmVxKDApLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIDIwMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB2YWxpZEZvcm0oKSB7XHJcbiAgICAgICAgICAgIHZhciBpc0NhcHRjaGFBdmFpbCA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY2FwY2hhVmFsO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLmctcmVjYXB0Y2hhJykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaXNDYXB0Y2hhQXZhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY2FwY2hhVmFsID0gYW5ndWxhci5lbGVtZW50KCcjZy1yZWNhcHRjaGEtcmVzcG9uc2UnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgIGlmIChjYXBjaGFWYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuZHJpbmtlckJpZGRsZUZvcm0uJHZhbGlkICYmICgoaXNDYXB0Y2hhQXZhaWwgJiYgY2FwY2hhVmFsKSB8fCAhaXNDYXB0Y2hhQXZhaWwpICYmICEkc2NvcGUuaXNDb3JyZWN0Rm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNDYXB0Y2hhQXZhaWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBnZXRDYXB0Y2hhRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZ2V0Rm9ybURhdGEoKTtcclxuICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJTaG93KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGlzcGxheUVycigpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUuY2xpY2tEcmlua2VyU3VibWl0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5pc0RyaW5rZXJTdWJtaXQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhbGlkRm9ybSgpKSB7XHJcbiAgICAgICAgICAgICAgICBkcmlua2VyQmlkZGxlU2VydmljZXMuZHJpbmtlckJpZGRsZVBvc3QoJHNjb3BlLCAkc2NvcGUuZHJpbmtlckJpZGRsZURhdGEsIGZ1bmN0aW9uKGRhdGFBamF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFSZXNwb25jZSA9IGRhdGFBamF4LmRhdGEucmVzcG9uc2VTdGF0dXNDb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3BvbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3BvbmNlID09PSAnVElNRURfT1VUJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ1RJTUVEIE9VVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0RyaW5rZXJTdWJtaXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ0lOVEVSTkFMX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ0lOVEVSTkFMIEVSUk9SJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzRHJpbmtlclN1Ym1pdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnQ0FQVENIQV9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdJTlZBTElEIENBUFRDSEEnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNEcmlua2VyU3VibWl0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uY2UgPT09ICdTRVJWSUNFX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ1NFUlZJQ0UgRVJST1InO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNEcmlua2VyU3VibWl0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uY2UgPT09ICdTVUNDRVNTJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHRrc1BhZ2VVUkwgJiYgJ251bGwnICE9PSB0a3NQYWdlVVJMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzU3VjY2VzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24uaHJlZiA9IHRrc1BhZ2VVUkw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdTVUNDRVNTLiBUaGFuayB5b3UgZm9yIHNoYXJpbmcgeW91ciBpbmZvcm1hdGlvbi4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyJykudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNEcmlua2VyU3VibWl0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZHJpbmtlckJpZGRsZURhdGEgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfYWN0aW9uJzogJ2Zvcm0nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9uYW1lJyAgOiAnUmVxdWVzdCBmb3IgRHJpbmtlciBCaWRkbGUgV2hpdGUgUGFwZXJzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfdHlwZScgIDogJ3JlcXVlc3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9zdGF0dXMnOiAnY29tcGxldGUnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0YWcubGluayhkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2gtd3JhcHBlcicpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5jQ21kTmV3Q2hhbGxlbmdlKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVySGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAod2FybmluZ01zZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0YWJsZVZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnLkFydGljbGVDb250ZW50Jykub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlckhndCA9IGFuZ3VsYXIuZWxlbWVudCgnLlRvcGhlYWRlci1sb2dvYXJlYScpLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRhYmxlVmFsID0gKHRhYmxlVmFsIC0gaGVhZGVySGd0KSAtIDIwO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCdodG1sLCBib2R5Jykuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICdzY3JvbGxUb3AnOiB0YWJsZVZhbFxyXG4gICAgICAgICAgICAgICAgfSwgODAwKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbihmdW5jdGlvbigpIHtcclxuICAgIGxmZ2FwcC5jb250cm9sbGVyKCdyZXF1ZXN0SW5mb0NvbnRybCcsIHJlcXVlc3RJbmZvQ29udHJsKTtcclxuICAgIHJlcXVlc3RJbmZvQ29udHJsLiRpbmplY3QgPSBbJyRzY29wZScsICckdGltZW91dCcsICdyZXF1ZXN0SW5mb1NlcnZpY2VzJywgJyR3aW5kb3cnXTtcclxuXHJcbiAgICBmdW5jdGlvbiByZXF1ZXN0SW5mb0NvbnRybCgkc2NvcGUsICR0aW1lb3V0LCByZXF1ZXN0SW5mb1NlcnZpY2VzLCAkd2luZG93KSB7XHJcbiAgICAgICAgLyogJChkb2N1bWVudCkubG9hZChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHR2YXIgZGF0YT17Ki9cclxuICAgICAgICB1dGFnX2RhdGEuZXZlbnRfYWN0aW9uID0gJ2Zvcm0nO1xyXG4gICAgICAgIHV0YWdfZGF0YS5ldmVudF9uYW1lID0gJ0ZpbmQgYSBGaW5hbmNpYWwgQWR2aXNvcic7XHJcbiAgICAgICAgdXRhZ19kYXRhLmV2ZW50X3R5cGUgPSAnY29udGFjdCc7XHJcbiAgICAgICAgdXRhZ19kYXRhLmV2ZW50X3N0YXR1cyA9ICdzdGFydCc7XHJcblxyXG4gICAgICAgIC8qIH1cclxuXHR1dGFnLmxpbmsoZGF0YSk7XHJcbn0pOyovXHJcblxyXG4gICAgICAgIHZhciByZXF1ZXN0Rm9ybUZhY3RvciwgY29tbW9uUmVxdWVzdCwgd2FybmluZ01zZztcclxuXHJcbiAgICAgICAgJChkb2N1bWVudCkub24oJ3Jlc3BvbnNpdmU6c3RhdGVjaGFuZ2VkJywgZnVuY3Rpb24oZSwgcGFyYW0pIHtcclxuICAgICAgICAgICAgcmVxdWVzdEZvcm1GYWN0b3IgPSBwYXJhbTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLmhpZGUoKTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyonKS5yZW1vdmVDbGFzcygnbm9uZSBnZXQtc2FydGVkZm9ybS1kZWZhdWx0LWhpZGRlbicpO1xyXG4gICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCd1bC5jdXN0b20tc2VsZWN0Ym94LWxpc3QtY29udCBsaScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbW1vblJlcXVlc3QuY2hlY2tEcm9wVmFsaWRhdGlvbigpO1xyXG4gICAgICAgICAgICB9LCAyMDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbW1vblJlcXVlc3QgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBjb21tb25SZXF1ZXN0TW9kdWxlID0ge1xyXG5cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkcm9wVmFsdWU7XHJcblxyXG4gICAgICAgICAgICBjb21tb25SZXF1ZXN0TW9kdWxlLmRyb3BEb3duVmFsaWRhdGlvbiA9IGZ1bmN0aW9uKGlkLCBmbGFnTmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGRyb3BWYWx1ZSA9IGFuZ3VsYXIuZWxlbWVudCgnIycgKyBpZCkudGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRyb3BWYWx1ZSAhPT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGVbZmxhZ05hbWVdID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZVtmbGFnTmFtZV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb21tb25SZXF1ZXN0TW9kdWxlLmNoZWNrRGF0YSA9IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhID0gKCFkYXRhKSA/ICcnIDogZGF0YTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29tbW9uUmVxdWVzdE1vZHVsZS5jaGVja09wdGlvbmFsRHJvcERhdGEgPSBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGRhdGEgPT09ICdTZWxlY3QgT25lJykgPyAnJyA6IGRhdGE7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbW1vblJlcXVlc3RNb2R1bGUuY2hlY2tEcm9wVmFsaWRhdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29tbW9uUmVxdWVzdE1vZHVsZS5kcm9wRG93blZhbGlkYXRpb24oJ2NvbnRhY3RTdGF0ZScsICdzdGF0ZUZsYWcnLCAnU2VsZWN0IHN0YXRlJyk7XHJcbiAgICAgICAgICAgICAgICBjb21tb25SZXF1ZXN0TW9kdWxlLmRyb3BEb3duVmFsaWRhdGlvbignY29udGFjdEVhcmxpZXN0JywgJ2VhcmxpZXN0RmxhZycsICdTZWxlY3QgT25lJyk7XHJcbiAgICAgICAgICAgICAgICBjb21tb25SZXF1ZXN0TW9kdWxlLmRyb3BEb3duVmFsaWRhdGlvbignY29udGFjdExhdGVzdCcsICdsYXRlc3RGbGFnJywgJ1NlbGVjdCBPbmUnKTtcclxuICAgICAgICAgICAgICAgIGNvbW1vblJlcXVlc3RNb2R1bGUuZHJvcERvd25WYWxpZGF0aW9uKCdoZWFyQWJvdXQnLCAnaGVhckFib3V0RmxhZycsICdTZWxlY3QgT25lJyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29tbW9uUmVxdWVzdE1vZHVsZTtcclxuICAgICAgICB9KSgkc2NvcGUpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBpc1R3b1ppcENvZGUobmFtZSwgYm9vbGVhblZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnemlwQ29kZScpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RaaXBGb3JtYXQgPSBib29sZWFuVmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb1Bob25lTnVtID0gZnVuY3Rpb24oZXZ0LCBpbnB1dFZhbHVlLCBuYW1lLCB6aXBPclBob25lKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dFZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOS1dL2csICcnKTtcclxuICAgICAgICAgICAgaWYgKHppcE9yUGhvbmUgPT09ICdwaG9uZScpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwYXR0ID0gL14oXFxkezN9XFwtXFxkezN9LVxcZHs0fSkkLztcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0Rm9ybWF0ID0gIShwYXR0LnRlc3QoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID09PSAzICYmIGV2dC5rZXlDb2RlICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KS8sICckMS0nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPT09IDcgJiYgZXZ0LmtleUNvZGUgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0gPSAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLnJlcGxhY2UoLyhcXGR7M30pKFxcZHszfSkvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnJDEtJDItJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID09PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ucmVwbGFjZSgvKFxcZHszfSkoXFxkezN9KShcXGR7NH0pLyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyQxLSQyLSQzJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID09PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0gPSAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLnJlcGxhY2UoLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pc0NvcnJlY3RGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPj0gMTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gc3RyLnNsaWNlKDAsIDEyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdEZvcm1hdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh6aXBPclBob25lID09PSAnemlwJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID09PSA1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTktXS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2dC5rZXlDb2RlID09PSAxMDkgfHwgZXZ0LmtleUNvZGUgPT09IDE4OSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSArICctJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPiA1ICYmICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ubGVuZ3RoIDw9IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ldyBSZWdFeHAoJy0nKS50ZXN0KCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLmxlbmd0aCA9PT0gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXR0WmlwID0gL14oXFxkezV9XFwtXFxkezR9KSQvO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAnemlwQ29kZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0ID0gIShwYXR0WmlwLnRlc3QoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLmxlbmd0aCA9PT0gOSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleUNvZGUgPT09IDEwOSB8fCBldnQua2V5Q29kZSA9PT0gMTg5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjJyArIGV2dC50YXJnZXQuaWQpLmluc2VydEF0Q2FyZXQoJy0nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRzY29wZSwge1xyXG4gICAgICAgICAgICAnaXNSZXF1ZXN0SW5mb0NsaWNrZWQnOiBmYWxzZSxcclxuICAgICAgICAgICAgJ3JlcXVlc3RJbmZvRGF0YScgICAgIDoge1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ3N0YXRlRmxhZycgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICAnZWFybGllc3RGbGFnJyAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgICdsYXRlc3RGbGFnJyAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgJ2hlYXJBYm91dEZsYWcnICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICAndmFsaWRhdGlvbkVycm9yU2hvdyc6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldENhcHRjaGFEYXRhKCkge1xyXG4gICAgICAgICAgICB2YXIgbnVjYXB0Y2hhQW5zRW50ciwgbnVjYXB0Y2hhQW5zRXh0O1xyXG5cclxuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykpIHtcclxuICAgICAgICAgICAgICAgIG51Y2FwdGNoYUFuc0VudHIgPSAnJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG51Y2FwdGNoYUFuc0VudHIgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykudmFsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKSkge1xyXG4gICAgICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gJyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKS52YWwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhWydudWNhcHRjaGEtZXBkJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtZXBkJykudmFsKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbJ251Y2FwdGNoYS1hbnN3ZXInXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXInKS52YWwoKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVsnbnVjYXB0Y2hhLWFuc3dlci1lbnRlciddID0gbnVjYXB0Y2hhQW5zRW50cjtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVsnbnVjYXB0Y2hhLWFuc3dlci1leGl0J10gPSBudWNhcHRjaGFBbnNFeHQ7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEubG1zdWJtaXR0ZWQgPSBhbmd1bGFyLmVsZW1lbnQoJyNsbXN1Ym1pdHRlZCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhWydudWNhcHRjaGEtaW5kZXgnXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1pbmRleCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhWydudWNhcHRjaGEtZGF0YXR5cGUnXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1kYXRhdHlwZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhWydudWNhcHRjaGEtcHR5cGUnXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1wdHlwZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhWydudWNhcHRjaGEtbGFuZ3VhZ2UnXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1sYW5ndWFnZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhWydudWNhcHRjaGEtcmVnaW9uJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtcmVnaW9uJykudmFsKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbJ251Y2FwdGNoYS1tZWRpYS1kb3dubG9hZC10aW1lJ10gPSAnJztcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVsnbnVjYXB0Y2hhLWFkc2Vydi1kb3dubG9hZC10aW1lJ10gPSAnJztcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVsnbnVjYXB0Y2hhLWZhbGxiYWNrLXRva2VuJ10gPSAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEZvcm1EYXRhKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmZvcm1GYWN0b3IgPSByZXF1ZXN0Rm9ybUZhY3RvcjtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5pZGVudGl0eSA9ICdSRVFVRVNUX01PUkVfSU5GTyc7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuc3RhdGUgPSBhbmd1bGFyLmVsZW1lbnQoJyNjb250YWN0U3RhdGUnKS50ZXh0KCk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEudGltZUVhcmxpZXN0QXZhaWwgPSBjb21tb25SZXF1ZXN0LmNoZWNrT3B0aW9uYWxEcm9wRGF0YShhbmd1bGFyLmVsZW1lbnQoXHJcbiAgICAgICAgICAgICAgICAnI2NvbnRhY3RFYXJsaWVzdCcpLnRleHQoKSk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEudGltZUxhc3Rlc3RBdmFpbCA9IGNvbW1vblJlcXVlc3QuY2hlY2tPcHRpb25hbERyb3BEYXRhKGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICcjY29udGFjdExhdGVzdCcpLnRleHQoKSk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuaGVhckFib3V0VXMgPSBjb21tb25SZXF1ZXN0LmNoZWNrT3B0aW9uYWxEcm9wRGF0YShhbmd1bGFyLmVsZW1lbnQoJyNoZWFyQWJvdXQnKS50ZXh0KCkpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmluY29tZVJhbmdlID0gY29tbW9uUmVxdWVzdC5jaGVja09wdGlvbmFsRHJvcERhdGEoYW5ndWxhci5lbGVtZW50KCcjaW5jb21lUmFuZ2UnKVxyXG4gICAgICAgICAgICAgICAgLnRleHQoKSk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuYW5udWFsUmV2ZW51ZSA9IGNvbW1vblJlcXVlc3QuY2hlY2tPcHRpb25hbERyb3BEYXRhKGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICcjYW5udWFsUmV2ZW51ZScpLnRleHQoKSk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEubnVtYmVyRW1wbG95ZWVzID0gY29tbW9uUmVxdWVzdC5jaGVja09wdGlvbmFsRHJvcERhdGEoYW5ndWxhci5lbGVtZW50KFxyXG4gICAgICAgICAgICAgICAgJyNob3dNYW55RW1wJykudGV4dCgpKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5taWRkbGVJbml0aWFsID0gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5taWRkbGVJbml0aWFsKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5idXNpbmVzc05hbWUgPSBjb21tb25SZXF1ZXN0LmNoZWNrRGF0YSgkc2NvcGUucmVxdWVzdEluZm9EYXRhLmJ1c2luZXNzTmFtZSk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuYWRkcmVzc0xpbmUyID0gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5hZGRyZXNzTGluZTIpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmZheCA9IGNvbW1vblJlcXVlc3QuY2hlY2tEYXRhKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZmF4KTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS53ZWVrZGF5cyA9IGNvbW1vblJlcXVlc3QuY2hlY2tEYXRhKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEud2Vla2RheXMpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLndlZWtlbmRzID0gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS53ZWVrZW5kcyk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEucGVyc29uYWxQbGFubmluZyA9IGNvbW1vblJlcXVlc3QuY2hlY2tEYXRhKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEucGVyc29uYWxQbGFubmluZyk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuYnVzaW5lc3NQbGFubmluZyA9IGNvbW1vblJlcXVlc3QuY2hlY2tEYXRhKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuYnVzaW5lc3NQbGFubmluZyk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuYnVzaW5lc3NUeXBlID0gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5idXNpbmVzc1R5cGUpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmVtcGxveW1lbnRTdGF0dXMgPSBjb21tb25SZXF1ZXN0LmNoZWNrRGF0YSgkc2NvcGUucmVxdWVzdEluZm9EYXRhLmVtcGxveW1lbnRTdGF0dXMpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmFubnVpdGllcyA9IGNvbW1vblJlcXVlc3QuY2hlY2tEYXRhKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuYW5udWl0aWVzKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5maW5hbmNpYWxQbGFubmluZyA9IGNvbW1vblJlcXVlc3QuY2hlY2tEYXRhKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZmluYW5jaWFsUGxhbm5pbmcpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmxpZmVJbnN1cmFuY2UgPSBjb21tb25SZXF1ZXN0LmNoZWNrRGF0YSgkc2NvcGUucmVxdWVzdEluZm9EYXRhLmxpZmVJbnN1cmFuY2UpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmludmVzdG1lbnRzID0gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5pbnZlc3RtZW50cyk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEucGVuc2lvblJldGlyZW1lbnQgPSBjb21tb25SZXF1ZXN0LmNoZWNrRGF0YSgkc2NvcGUucmVxdWVzdEluZm9EYXRhLnBlbnNpb25SZXRpcmVtZW50KTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5jb2xsZWdlSW52ZXN0bWVudCA9IGNvbW1vblJlcXVlc3QuY2hlY2tEYXRhKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuY29sbGVnZUludmVzdG1lbnQpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmxvbmdUZXJtRXhwZW5zZSA9IGNvbW1vblJlcXVlc3QuY2hlY2tEYXRhKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEubG9uZ1Rlcm1FeHBlbnNlKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS53ZWFsdGhBY2N1bXVsYXRpb24gPSBjb21tb25SZXF1ZXN0LmNoZWNrRGF0YSgkc2NvcGUucmVxdWVzdEluZm9EYXRhLndlYWx0aEFjY3VtdWxhdGlvbik7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZXN0YXRlQ29uc2VydmF0aW9uID0gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5lc3RhdGVDb25zZXJ2YXRpb24pO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmRlZmluZWRCZW5lZml0UHJvZ3JhbSA9IGNvbW1vblJlcXVlc3QuY2hlY2tEYXRhKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZGVmaW5lZEJlbmVmaXRQcm9ncmFtKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5kZWZpbmVkQ29udHJpYnV0aW9uUHJvZ3JhbSA9IGNvbW1vblJlcXVlc3QuY2hlY2tEYXRhKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZGVmaW5lZENvbnRyaWJ1dGlvblByb2dyYW0pO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmdyb3VwSW5zdXJhbmNlID0gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5ncm91cEluc3VyYW5jZSk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZXhlY3V0aXZlQ29tcGVuc2F0aW9uID0gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5leGVjdXRpdmVDb21wZW5zYXRpb24pO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLnBheXJvbGxEZWR1Y3Rpb24gPSBjb21tb25SZXF1ZXN0LmNoZWNrRGF0YSgkc2NvcGUucmVxdWVzdEluZm9EYXRhLnBheXJvbGxEZWR1Y3Rpb24pO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmZpbmFuY2lhbFBsYW5uaW5nQnVzID0gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5maW5hbmNpYWxQbGFubmluZ0J1cyk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuYnVzaW5lc3NTdWNjZXNzaW9uUGxhbm5pbmcgPSBjb21tb25SZXF1ZXN0LmNoZWNrRGF0YSgkc2NvcGUucmVxdWVzdEluZm9EYXRhLmJ1c2luZXNzU3VjY2Vzc2lvblBsYW5uaW5nKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5leGlzdGluZ0N1c3RvbWVySW5mb3JtYXRpb24gPSAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5leGlzdGluZ0N1c3RvbWVyID09PSAnWWVzJylcclxuICAgICAgICAgICAgICAgID8gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5leGlzdGluZ0N1c3RvbWVySW5mb3JtYXRpb24pIDogJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBkaXNwbGF5RXJyKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IHRydWU7XHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLmMtZXJyLWJveCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbycpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGlzRXJyVmFsID0gYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykuZXEoMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgpLm9mZnNldCgpLnRvcDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVySGd0ID0gYW5ndWxhci5lbGVtZW50KCcuVG9waGVhZGVyLWxvZ29hcmVhJykub3V0ZXJIZWlnaHQodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRpc0VyclZhbCA9ICh0aXNFcnJWYWwgLSBoZWFkZXJIZ3QpIC0gNTA7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCdodG1sLCBib2R5Jykuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGlzRXJyVmFsXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgNjAwLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykuZXEoMCkuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgMjAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHZhbGlkRm9ybSgpIHtcclxuICAgICAgICAgICAgdmFyIGlzQ2FwdGNoYUF2YWlsID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjYXBjaGFWYWw7XHJcblxyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2gtd3JhcHBlcicpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGlzQ2FwdGNoYUF2YWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNhcGNoYVZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXInKS52YWwoKTtcclxuICAgICAgICAgICAgICAgIGlmIChjYXBjaGFWYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLnJlcXVlc3RfaW5mb19mb3JtLiR2YWxpZCAmJiAhJHNjb3BlLnN0YXRlRmxhZyAmJiAhJHNjb3BlLmVhcmxpZXN0RmxhZyAmJiAhJHNjb3BlLmxhdGVzdEZsYWdcclxuICAgICAgICAgICAgICAgICYmICEkc2NvcGUuaGVhckFib3V0RmxhZyAmJiAoKGlzQ2FwdGNoYUF2YWlsICYmIGNhcGNoYVZhbCkgfHwgIWlzQ2FwdGNoYUF2YWlsKSAmJiAhJHNjb3BlLmlzQ29ycmVjdEZvcm1hdFxyXG4gICAgICAgICAgICAgICAgJiYgISRzY29wZS5pc0NvcnJlY3RaaXBGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc0NhcHRjaGFBdmFpbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdldENhcHRjaGFEYXRhKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBnZXRGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlclNob3coKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS52YWxpZGF0aW9uRXJyb3JTaG93ID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGlzcGxheUVycigpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUuc3VibWl0UmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBjb21tb25SZXF1ZXN0LmNoZWNrRHJvcFZhbGlkYXRpb24oKTtcclxuICAgICAgICAgICAgJHNjb3BlLmlzUmVxdWVzdEluZm9DbGlja2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh2YWxpZEZvcm0oKSkge1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdEluZm9TZXJ2aWNlcy5yZXF1ZXN0SW5mb1Bvc3QoJHNjb3BlLCAkc2NvcGUucmVxdWVzdEluZm9EYXRhLCBmdW5jdGlvbihkYXRhQWpheCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhUmVzcG9uY2UgPSBkYXRhQWpheC5kYXRhLnJlc3BvbnNlU3RhdHVzQ29kZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFSZXNwb25jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ1RJTUVEX09VVCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdUSU1FRCBPVVQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnSU5URVJOQUxfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnSU5URVJOQUwgRVJST1InO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnQ0FQVENIQV9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdJTlZBTElEIENBUFRDSEEnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnU0VSVklDRV9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdTRVJWSUNFIEVSUk9SJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ1NVQ0NFU1MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gdGtzUGFnZVVSTCAmJiAnbnVsbCcgIT09IHRrc1BhZ2VVUkwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWNjZXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGtzUGFnZVVSTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ1NVQ0NFU1MuIFRoYW5rIHlvdSBmb3Igc2hhcmluZyB5b3VyIGluZm9ybWF0aW9uLic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXInKS52YWwoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YSA9IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjY29udGFjdFN0YXRlJykudGV4dCgnU2VsZWN0IHN0YXRlJykucmVtb3ZlQXR0cignZGF0YS12YWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2NvbnRhY3RFYXJsaWVzdCwgI2NvbnRhY3RMYXRlc3QsICNoZWFyQWJvdXQsICNhbm51YWxSZXZlbnVlLCAjaG93TWFueUVtcCwgI2luY29tZVJhbmdlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKS50ZXh0KCdTZWxlY3Qgb25lJykucmVtb3ZlQXR0cignZGF0YS12YWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1JlcXVlc3RJbmZvQ2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbic6ICdmb3JtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfbmFtZScgIDogJ0ZpbmQgYSBGaW5hbmNpYWwgQWR2aXNvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3R5cGUnICA6ICdjb250YWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfc3RhdHVzJzogJ2NvbXBsZXRlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGFnLmxpbmsoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoLXdyYXBwZXInKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuY0NtZE5ld0NoYWxsZW5nZSgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdhcm5pbmdNc2cgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGFibGVWYWwgPSBhbmd1bGFyLmVsZW1lbnQoJy5BcnRpY2xlQ29udGVudCcpLm9mZnNldCgpLnRvcDtcclxuICAgICAgICAgICAgICAgIHZhciBoZWFkZXJIZ3QgPSBhbmd1bGFyLmVsZW1lbnQoJy5Ub3BoZWFkZXItbG9nb2FyZWEnKS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0YWJsZVZhbCA9ICh0YWJsZVZhbCAtIGhlYWRlckhndCkgLSAyMDtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnaHRtbCwgYm9keScpLnN0b3AoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGFibGVWYWxcclxuICAgICAgICAgICAgICAgIH0sIDgwMCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufSkoKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcbiAgICBsZmdhcHAuY29udHJvbGxlcigncmVxdWVzdEluZm9FbXBsb3llckNvbnRybCcsIHJlcXVlc3RJbmZvRW1wbG95ZXJDb250cmwpO1xyXG4gICAgcmVxdWVzdEluZm9FbXBsb3llckNvbnRybC4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJHRpbWVvdXQnLCAncmVxdWVzdEluZm9TZXJ2aWNlcycsICckd2luZG93J107XHJcblxyXG4gICAgZnVuY3Rpb24gcmVxdWVzdEluZm9FbXBsb3llckNvbnRybCgkc2NvcGUsICR0aW1lb3V0LCByZXF1ZXN0SW5mb1NlcnZpY2VzLCAkd2luZG93KSB7XHJcbiAgICAgICAgJHNjb3BlLmlzUmVxdWVzdEluZm9FbXBsb3llckNsaWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuaXNGaXJzdENsaWNrID0gdHJ1ZTtcclxuICAgICAgICB2YXIgaXNJbmZvcm1hdGlvblNlbGVjdGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8qICQoZG9jdW1lbnQpLmxvYWQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFx0dmFyIGRhdGE9eyovXHJcbiAgICAgICAgLy8gdXRhZ19kYXRhW1wiZXZlbnRfYWN0aW9uXCJdID0gXCJmb3JtXCI7XHJcbiAgICAgICAgLy8gdXRhZ19kYXRhW1wiZXZlbnRfbmFtZVwiXSA9IFwiRmluZCBhIEZpbmFuY2lhbCBBZHZpc29yIOKAkyBFbXBsb3llclwiO1xyXG4gICAgICAgIC8vIHV0YWdfZGF0YVtcImV2ZW50X3R5cGVcIl0gPSBcImNvbnRhY3RcIjtcclxuICAgICAgICAvLyB1dGFnX2RhdGFbXCJldmVudF9zdGF0dXNcIl0gPSBcInN0YXJ0XCI7XHJcbiAgICAgICAgLyogfVxyXG5cdHV0YWcubGluayhkYXRhKTtcclxufSk7Ki9cclxuXHJcbiAgICAgICAgJHNjb3BlLmluZm9MaXN0ID0ge1xyXG4gICAgICAgICAgICAnaW5mb09iaic6IHtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICdhZGRJbmZvJzogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coa2V5LHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmluZm9PYmpba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmluZm9PYmpba2V5XTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmZvT2JqW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ2lzRW1wdHknOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLmluZm9PYmopLmxlbmd0aCA9PT0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5pc0VtYWlsVmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUudmFsaWRhdGVFbWFpbCA9IGZ1bmN0aW9uKGVtYWlsVmFsdWUpIHtcclxuICAgICAgICAgICAgdmFyIEVNQUlMX1JFR0VYUCA9IC9eW19hLXowLTldKyhcXC5bX2EtejAtOV0rKSpAW2EtejAtOS1dKyhcXC5bYS16MC05LV0rKSooXFwuW2Etel17Miw0fSkkLztcclxuXHJcbiAgICAgICAgICAgIGlmIChlbWFpbFZhbHVlID09PSAnbm9uZScgfHwgRU1BSUxfUkVHRVhQLnRlc3QoZW1haWxWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc0VtYWlsVmFsaWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICRzY29wZS5pc0VtYWlsVmFsaWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgcmVxdWVzdEZvcm1GYWN0b3IsIGNvbW1vblJlcXVlc3QsIHdhcm5pbmdNc2c7XHJcblxyXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdyZXNwb25zaXZlOnN0YXRlY2hhbmdlZCcsIGZ1bmN0aW9uKGUsIHBhcmFtKSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3RGb3JtRmFjdG9yID0gcGFyYW07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5oaWRlKCk7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcqJykucmVtb3ZlQ2xhc3MoJ25vbmUgZ2V0LXNhcnRlZGZvcm0tZGVmYXVsdC1oaWRkZW4nKTtcclxuICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVySGlkZSgpO1xyXG5cclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ3VsLmN1c3RvbS1zZWxlY3Rib3gtbGlzdC1jb250IGxpJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29tbW9uUmVxdWVzdC5jaGVja0Ryb3BWYWxpZGF0aW9uKCk7XHJcbiAgICAgICAgICAgIH0sIDIwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29tbW9uUmVxdWVzdCA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGNvbW1vblJlcXVlc3RNb2R1bGUgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRyb3BWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbW1vblJlcXVlc3RNb2R1bGUuZHJvcERvd25WYWxpZGF0aW9uID0gZnVuY3Rpb24oaWQsIGZsYWdOYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgZHJvcFZhbHVlID0gYW5ndWxhci5lbGVtZW50KCcjJyArIGlkKS50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZHJvcFZhbHVlICE9PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZVtmbGFnTmFtZV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlW2ZsYWdOYW1lXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbW1vblJlcXVlc3RNb2R1bGUuY2hlY2tEYXRhID0gZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEgPSAoIWRhdGEpID8gJycgOiBkYXRhO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb21tb25SZXF1ZXN0TW9kdWxlLmNoZWNrT3B0aW9uYWxEcm9wRGF0YSA9IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoZGF0YSA9PT0gJ1NlbGVjdCBPbmUnKSA/ICcnIDogZGF0YTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29tbW9uUmVxdWVzdE1vZHVsZS5jaGVja0Ryb3BWYWxpZGF0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBjb21tb25SZXF1ZXN0TW9kdWxlLmRyb3BEb3duVmFsaWRhdGlvbignY29udGFjdFN0YXRlJywgJ3N0YXRlRmxhZycsICdTZWxlY3QgU3RhdGUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjb21tb25SZXF1ZXN0TW9kdWxlLmRyb3BEb3duVmFsaWRhdGlvbignYW5udWFsQ29udHJpYnV0aW9uJywgJ2FubnVhbENvbnRyaWJ1dGlvbkZsYWcnLCAnQW5udWFsIGNvbnRyaWJ1dGlvbicpO1xyXG4gICAgICAgICAgICAgICAgY29tbW9uUmVxdWVzdE1vZHVsZS5kcm9wRG93blZhbGlkYXRpb24oJ25vT2ZFbXAnLCAnbm9PZkVtcEZsYWcnLCAnTnVtYmVyIG9mIGVtcGxveWVlcycpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNvbW1vblJlcXVlc3RNb2R1bGU7XHJcbiAgICAgICAgfSkoJHNjb3BlKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaXNUd29aaXBDb2RlKG5hbWUsIGJvb2xlYW5WYWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3ppcENvZGUnKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0ID0gYm9vbGVhblZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkc2NvcGUub25Gb2N1c0FuYWx5dGljcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmlzRmlyc3RDbGljaykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzRmlyc3RDbGljayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbicgOiAnZm9ybScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X25hbWUnICAgOiAnRmluZCBhIEZpbmFuY2lhbCBBZHZpc29yIOKAkyBFbXBsb3llcicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3ZlcnNpb24nOiAnMScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3R5cGUnICAgOiAnY29udGFjdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3N0YXR1cycgOiAnc3RhcnQnXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHV0YWcubGluayhkYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5udW1iZXJGb3JtYXQgPSBmdW5jdGlvbihldnQsIGlucHV0VmFsdWUsIG5hbWUsIHppcE9yUGhvbmUpIHtcclxuICAgICAgICAgICAgaWYgKGlucHV0VmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05LV0vZywgJycpO1xyXG4gICAgICAgICAgICBpZiAoemlwT3JQaG9uZSA9PT0gJ3Bob25lJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhdHQgPSAvXihcXGR7M31cXC1cXGR7M30tXFxkezR9KSQvO1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RGb3JtYXQgPSAhKHBhdHQudGVzdCgkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPT09IDMgJiYgZXZ0LmtleUNvZGUgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0gPSAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLnJlcGxhY2UoLyhcXGR7M30pLywgJyQxLScpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLmxlbmd0aCA9PT0gNyAmJiBldnQua2V5Q29kZSAhPT0gOCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ucmVwbGFjZSgvKFxcZHszfSkoXFxkezN9KS8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICckMS0kMi0nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPT09IDEyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KShcXGR7M30pKFxcZHs0fSkvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnJDEtJDItJDMnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPT09IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ucmVwbGFjZSgvKFxcZHszfSkoXFxkezN9KShcXGR7NH0pLyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyQxLSQyLSQzJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmlzQ29ycmVjdEZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLmxlbmd0aCA+PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyID0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0gPSBzdHIuc2xpY2UoMCwgMTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0Rm9ybWF0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHppcE9yUGhvbmUgPT09ICd6aXAnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPT09IDUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOS1dL2csICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleUNvZGUgPT09IDEwOSB8fCBldnQua2V5Q29kZSA9PT0gMTg5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0gPSAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdICsgJy0nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLmxlbmd0aCA+IDUgJiYgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPD0gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3IFJlZ0V4cCgnLScpLnRlc3QoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID09PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdHRaaXAgPSAvXihcXGR7NX1cXC1cXGR7NH0pJC87XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICd6aXBDb2RlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RaaXBGb3JtYXQgPSAhKHBhdHRaaXAudGVzdCgkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID09PSA5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldnQua2V5Q29kZSA9PT0gMTA5IHx8IGV2dC5rZXlDb2RlID09PSAxODkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyMnICsgZXZ0LnRhcmdldC5pZCkuaW5zZXJ0QXRDYXJldCgnLScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgYW5ndWxhci5leHRlbmQoJHNjb3BlLCB7XHJcbiAgICAgICAgICAgICdpc1JlcXVlc3RJbmZvRW1wbG95ZXJDbGlja2VkJzogZmFsc2UsXHJcbiAgICAgICAgICAgICdyZXF1ZXN0SW5mb0RhdGEnICAgICAgICAgICAgIDoge1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ2luZm9PcG4nOiB7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAnc3RhdGVGbGFnJyAgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgICdhbm51YWxDb250cmlidXRpb25GbGFnJzogdHJ1ZSxcclxuICAgICAgICAgICAgJ25vT2ZFbXBGbGFnJyAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICAndmFsaWRhdGlvbkVycm9yU2hvdycgICA6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldENhcHRjaGFEYXRhKCkge1xyXG4gICAgICAgICAgICB2YXIgbnVjYXB0Y2hhQW5zRW50ciwgbnVjYXB0Y2hhQW5zRXh0O1xyXG5cclxuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykpIHtcclxuICAgICAgICAgICAgICAgIG51Y2FwdGNoYUFuc0VudHIgPSAnJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG51Y2FwdGNoYUFuc0VudHIgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykudmFsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKSkge1xyXG4gICAgICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gJyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKS52YWwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvKiRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbJ251Y2FwdGNoYS1lcGQnXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1lcGQnKS52YWwoKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVsnbnVjYXB0Y2hhLWFuc3dlciddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlcicpLnZhbCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhWydudWNhcHRjaGEtYW5zd2VyLWVudGVyJ10gPSBudWNhcHRjaGFBbnNFbnRyO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhWydudWNhcHRjaGEtYW5zd2VyLWV4aXQnXSA9IG51Y2FwdGNoYUFuc0V4dDtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5sbXN1Ym1pdHRlZCA9IGFuZ3VsYXIuZWxlbWVudCgnI2xtc3VibWl0dGVkJykudmFsKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbJ251Y2FwdGNoYS1pbmRleCddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWluZGV4JykudmFsKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbJ251Y2FwdGNoYS1kYXRhdHlwZSddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWRhdGF0eXBlJykudmFsKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbJ251Y2FwdGNoYS1wdHlwZSddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLXB0eXBlJykudmFsKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbJ251Y2FwdGNoYS1sYW5ndWFnZSddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWxhbmd1YWdlJykudmFsKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbJ251Y2FwdGNoYS1yZWdpb24nXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1yZWdpb24nKS52YWwoKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVsnbnVjYXB0Y2hhLW1lZGlhLWRvd25sb2FkLXRpbWUnXSA9ICcnO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhWydudWNhcHRjaGEtYWRzZXJ2LWRvd25sb2FkLXRpbWUnXSA9ICcnO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhWydudWNhcHRjaGEtZmFsbGJhY2stdG9rZW4nXSA9ICcnOyovXHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbJ2dSZWNhcHRjaGFSZXNwb25zZSddID0gJCgnI2ctcmVjYXB0Y2hhLXJlc3BvbnNlJykudmFsKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbmVlZEluZm9MaXN0ID0gW107XHJcblxyXG4gICAgICAgIHZhciBzZXRJbmZvTGlzdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmluZm9MaXN0LmluZm9PYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFba2V5XSA9IGNvbW1vblJlcXVlc3QuY2hlY2tEYXRhKCRzY29wZS5pbmZvTGlzdC5pbmZvT2JqW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pbmZvTGlzdC5pbmZvT2JqW2tleV0gIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pbmZvTGlzdC5pbmZvT2JqW2tleV0uaW5kZXhPZignKCcpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZWVkSW5mb0xpc3QucHVzaCgkc2NvcGUuaW5mb0xpc3QuaW5mb09ialtrZXldLnN1YnN0cmluZygwLCAkc2NvcGUuaW5mb0xpc3QuaW5mb09ialtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleV0uaW5kZXhPZignKCcpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmVlZEluZm9MaXN0LnB1c2goJHNjb3BlLmluZm9MaXN0LmluZm9PYmpba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRGb3JtRGF0YSgpIHtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5mb3JtRmFjdG9yID0gcmVxdWVzdEZvcm1GYWN0b3I7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuaWRlbnRpdHkgPSAnRklORF9BTl9BRFZJU09SX0VNUExPWUVSJztcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5idXNpbmVzc05hbWUgPSBjb21tb25SZXF1ZXN0LmNoZWNrRGF0YSgkc2NvcGUucmVxdWVzdEluZm9EYXRhLmJ1c2luZXNzTmFtZSk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZmlyc3ROYW1lID0gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5maXJzdE5hbWUpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLm1pZGRsZUluaXRpYWwgPSBjb21tb25SZXF1ZXN0LmNoZWNrRGF0YSgkc2NvcGUucmVxdWVzdEluZm9EYXRhLm1pZGRsZUluaXRpYWwpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmxhc3ROYW1lID0gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5sYXN0TmFtZSk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZW1haWwgPSBjb21tb25SZXF1ZXN0LmNoZWNrRGF0YSgkc2NvcGUucmVxdWVzdEluZm9EYXRhLmVtYWlsKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5lbWFpbENvbmZpcm1hdGlvbiA9IGNvbW1vblJlcXVlc3QuY2hlY2tEYXRhKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZW1haWxDb25maXJtYXRpb24pO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmFkZHJlc3MgPSBjb21tb25SZXF1ZXN0LmNoZWNrRGF0YSgkc2NvcGUucmVxdWVzdEluZm9EYXRhLmFkZHJlc3MpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmFkZHJlc3NMaW5lMiA9IGNvbW1vblJlcXVlc3QuY2hlY2tEYXRhKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuYWRkcmVzc0xpbmUyKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5jaXR5ID0gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5jaXR5KTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5zdGF0ZSA9IGFuZ3VsYXIuZWxlbWVudCgnI2NvbnRhY3RTdGF0ZScpLnRleHQoKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS56aXBDb2RlID0gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS56aXBDb2RlKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5waG9uZSA9IGNvbW1vblJlcXVlc3QuY2hlY2tEYXRhKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEucGhvbmUpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLnBob25lT3B0aW9uYWwgPSBjb21tb25SZXF1ZXN0LmNoZWNrRGF0YSgkc2NvcGUucmVxdWVzdEluZm9EYXRhLnBob25lT3B0aW9uYWwpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmhhdmVQcm9kdWN0ID0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5oYXZlUHJvZHVjdDtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5pbmR1c3RyeVR5cGUgPSAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmluZHVzdHJ5VHlwZTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5ub09mRW1wID0gYW5ndWxhci5lbGVtZW50KCcjbm9PZkVtcCcpLnRleHQoKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5hbm51YWxDb250cmlidXRpb24gPSBhbmd1bGFyLmVsZW1lbnQoJyNhbm51YWxDb250cmlidXRpb24nKS50ZXh0KCk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEubG5jUHJpdmFjeU5vdGljZSA9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEubG5jUHJpdmFjeU5vdGljZTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5wYWdlVVJMID0gdXRhZy5kYXRhLnBhZ2VfcmVmZXJyaW5nX3VybDtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS51c2Vzc2lvbmlkID0gdXRhZy5kYXRhWydjcC5zX3ZpJ107XHJcbiAgICAgICAgICAgIHNldEluZm9MaXN0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBkaXNwbGF5RXJyKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IHRydWU7XHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLmMtZXJyLWJveCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbycpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGlzRXJyVmFsID0gYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykuZXEoMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgpLm9mZnNldCgpLnRvcDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVySGd0ID0gYW5ndWxhci5lbGVtZW50KCcuVG9waGVhZGVyLWxvZ29hcmVhJykub3V0ZXJIZWlnaHQodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRpc0VyclZhbCA9ICh0aXNFcnJWYWwgLSBoZWFkZXJIZ3QpIC0gNTA7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCdodG1sLCBib2R5Jykuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGlzRXJyVmFsXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgNjAwLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykuZXEoMCkuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgMjAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHZhbGlkRm9ybSgpIHtcclxuICAgICAgICAgICAgdmFyIGlzQ2FwdGNoYUF2YWlsID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjYXBjaGFWYWw7XHJcblxyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcuZy1yZWNhcHRjaGEnKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpc0NhcHRjaGFBdmFpbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjYXBjaGFWYWwgPSBhbmd1bGFyLmVsZW1lbnQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhcGNoYVZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUucmVxdWVzdF9pbmZvX2VtcGxveWVyLiR2YWxpZCAmJiAhJHNjb3BlLnN0YXRlRmxhZyAmJiAhJHNjb3BlLm5vT2ZFbXBGbGFnICYmICgoaXNDYXB0Y2hhQXZhaWxcclxuICAgICAgICAgICAgICAgICAgICAmJiBjYXBjaGFWYWwpIHx8ICFpc0NhcHRjaGFBdmFpbCkgJiYgISRzY29wZS5pc0NvcnJlY3RGb3JtYXQgJiYgISRzY29wZS5pc0NvcnJlY3RaaXBGb3JtYXRcclxuICAgICAgICAgICAgICAgICYmICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZW1haWwgPT09ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZW1haWxDb25maXJtYXRpb24gJiYgaXNJbmZvcm1hdGlvblNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNDYXB0Y2hhQXZhaWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBnZXRDYXB0Y2hhRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZ2V0Rm9ybURhdGEoKTtcclxuICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJTaG93KCk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRpc3BsYXlFcnIoKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHNjb3BlLnN1Ym1pdFJlcXVlc3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgY29tbW9uUmVxdWVzdC5jaGVja0Ryb3BWYWxpZGF0aW9uKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5pc1JlcXVlc3RJbmZvRW1wbG95ZXJDbGlja2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGlzSW5mb3JtYXRpb25TZWxlY3RlZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKCRzY29wZS5pbmZvTGlzdC5pbmZvT2JqKS5sZW5ndGggPiAwO1xyXG5cclxuICAgICAgICAgICAgLy8gdG8gYXZvaWQgaXNzdWUgd2l0aCBhdXRvIGZpbGwgdmFsaWRhdGluZyBlbWFpbFxyXG4gICAgICAgICAgICAkc2NvcGUudmFsaWRhdGVFbWFpbCgkc2NvcGUucmVxdWVzdEluZm9EYXRhLmVtYWlsKTsgLy8gZW5kc1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhbGlkRm9ybSgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0SW5mb1NlcnZpY2VzLnJlcXVlc3RJbmZvUG9zdCgkc2NvcGUsICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEsIGZ1bmN0aW9uKGRhdGFBamF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFSZXNwb25jZSA9IGRhdGFBamF4LmRhdGEucmVzcG9uc2VTdGF0dXNDb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3BvbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3BvbmNlID09PSAnVElNRURfT1VUJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ1RJTUVEIE9VVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uY2UgPT09ICdJTlRFUk5BTF9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdJTlRFUk5BTCBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uY2UgPT09ICdDQVBUQ0hBX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ0lOVkFMSUQgQ0FQVENIQSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uY2UgPT09ICdTRVJWSUNFX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ1NFUlZJQ0UgRVJST1InO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnU1VDQ0VTUycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSB0a3NQYWdlVVJMICYmICdudWxsJyAhPT0gdGtzUGFnZVVSTCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2F0aW9uLmhyZWYgPSB0a3NQYWdlVVJMO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnU1VDQ0VTUy4gVGhhbmsgeW91IGZvciBzaGFyaW5nIHlvdXIgaW5mb3JtYXRpb24uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlcicpLnZhbCgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjY29udGFjdFN0YXRlJykudGV4dCgnU2VsZWN0IFN0YXRlJykucmVtb3ZlQXR0cignZGF0YS12YWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2FubnVhbENvbnRyaWJ1dGlvbicpLnRleHQoJ0FubnVhbCBjb250cmlidXRpb24nKS5yZW1vdmVBdHRyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhLXZhbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjbm9PZkVtcCcpLnRleHQoJ051bWJlciBvZiBlbXBsb3llZXMnKS5yZW1vdmVBdHRyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhLXZhbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzUmVxdWVzdEluZm9FbXBsb3llckNsaWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0ZpcnN0Q2xpY2sgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9hY3Rpb24nIDogJ2Zvcm0nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9uYW1lJyAgIDogJ0ZpbmQgYSBGaW5hbmNpYWwgQWR2aXNvciDigJMgRW1wbG95ZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF92ZXJzaW9uJzogJzEnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF90eXBlJyAgIDogJ2NvbnRhY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9zdGF0dXMnIDogJ2NvbXBsZXRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9ybV96aXBjb2RlJyA6ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuemlwQ29kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9ybV95ZXNubycgICA6ICgnWWVzJyA9PT0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5oYXZlUHJvZHVjdCA/ICcxJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICgnTm8nID09PSAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmhhdmVQcm9kdWN0ID8gJzInIDogJzAnKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Zvcm1fbWMnOiBuZWVkSW5mb0xpc3Quam9pbignLCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhbmFseXRpYyBkYXRhJyxkYXRhKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGFnLmxpbmsoZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YSA9IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmluZm9PcHQgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmZvTGlzdC5pbmZvT2JqID0ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoLXdyYXBwZXInKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuY0NtZE5ld0NoYWxsZW5nZSgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdhcm5pbmdNc2cgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGFibGVWYWwgPSBhbmd1bGFyLmVsZW1lbnQoJy5BcnRpY2xlQ29udGVudCcpLm9mZnNldCgpLnRvcDtcclxuICAgICAgICAgICAgICAgIHZhciBoZWFkZXJIZ3QgPSBhbmd1bGFyLmVsZW1lbnQoJy5Ub3BoZWFkZXItbG9nb2FyZWEnKS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0YWJsZVZhbCA9ICh0YWJsZVZhbCAtIGhlYWRlckhndCkgLSAyMDtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnaHRtbCwgYm9keScpLnN0b3AoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGFibGVWYWxcclxuICAgICAgICAgICAgICAgIH0sIDgwMCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufSkoKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcbiAgICBsZmdhcHAuY29udHJvbGxlcigncmVxdWVzdEluZm9VcGRhdGVDb250cmwnLCByZXF1ZXN0SW5mb1VwZGF0ZUNvbnRybCk7XHJcbiAgICByZXF1ZXN0SW5mb1VwZGF0ZUNvbnRybC4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJHRpbWVvdXQnLCAncmVxdWVzdEluZm9TZXJ2aWNlcycsICckd2luZG93J107XHJcblxyXG4gICAgZnVuY3Rpb24gcmVxdWVzdEluZm9VcGRhdGVDb250cmwoJHNjb3BlLCAkdGltZW91dCwgcmVxdWVzdEluZm9TZXJ2aWNlcywgJHdpbmRvdykge1xyXG4gICAgICAgICRzY29wZS5pc1JlcXVlc3RJbmZvVXBkYXRlQ2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5pc0ZpcnN0Q2xpY2sgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyAkc2NvcGUuT2JqZWN0ID0gT2JqZWN0O1xyXG4gICAgICAgIC8qICQoZG9jdW1lbnQpLmxvYWQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFx0dmFyIGRhdGE9eyovXHJcbiAgICAgICAgLy8gdXRhZ19kYXRhW1wiZXZlbnRfYWN0aW9uXCJdID0gXCJmb3JtXCI7XHJcbiAgICAgICAgLy8gdXRhZ19kYXRhW1wiZXZlbnRfbmFtZVwiXSA9IFwiRmluZCBhIEZpbmFuY2lhbCBBZHZpc29yXCI7XHJcbiAgICAgICAgLy8gdXRhZ19kYXRhW1wiZXZlbnRfdHlwZVwiXSA9IFwiY29udGFjdFwiO1xyXG4gICAgICAgIC8vIHV0YWdfZGF0YVtcImV2ZW50X3N0YXR1c1wiXSA9IFwic3RhcnRcIjtcclxuICAgICAgICAvKiB9XHJcblx0dXRhZy5saW5rKGRhdGEpO1xyXG59KTsqL1xyXG5cclxuICAgICAgICAkc2NvcGUuaXNFbWFpbFZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLnZhbGlkYXRlRW1haWwgPSBmdW5jdGlvbihlbWFpbFZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZhciBFTUFJTF9SRUdFWFAgPSAvXltfYS16MC05XSsoXFwuW19hLXowLTldKykqQFthLXowLTktXSsoXFwuW2EtejAtOS1dKykqKFxcLlthLXpdezIsNH0pJC87XHJcblxyXG4gICAgICAgICAgICBpZiAoZW1haWxWYWx1ZSA9PT0gJ25vbmUnIHx8IEVNQUlMX1JFR0VYUC50ZXN0KGVtYWlsVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNFbWFpbFZhbGlkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUuaXNFbWFpbFZhbGlkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHJlcXVlc3RGb3JtRmFjdG9yLCBjb21tb25SZXF1ZXN0LCB3YXJuaW5nTXNnO1xyXG5cclxuICAgICAgICAkKGRvY3VtZW50KS5vbigncmVzcG9uc2l2ZTpzdGF0ZWNoYW5nZWQnLCBmdW5jdGlvbihlLCBwYXJhbSkge1xyXG4gICAgICAgICAgICByZXF1ZXN0Rm9ybUZhY3RvciA9IHBhcmFtO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnKicpLnJlbW92ZUNsYXNzKCdub25lIGdldC1zYXJ0ZWRmb3JtLWRlZmF1bHQtaGlkZGVuJyk7XHJcbiAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ3VsLmN1c3RvbS1zZWxlY3Rib3gtbGlzdC1jb250IGxpJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29tbW9uUmVxdWVzdC5jaGVja0Ryb3BWYWxpZGF0aW9uKCk7XHJcbiAgICAgICAgICAgIH0sIDIwMCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRzY29wZS5mYWFJbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdmYWFDb250YWN0JykgIT09IHVuZGVmaW5lZCAmJiBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdmYWFDb250YWN0JylcclxuICAgICAgICAgICAgICAgICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmFhQ29udGFjdCA9IEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnZmFhQ29udGFjdCcpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmZpcnN0TmFtZSA9IGZhYUNvbnRhY3QuZmlyc3ROYW1lO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5waG9uZSA9IGZhYUNvbnRhY3QucGhvbmVObztcclxuICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oJ2ZhYUNvbnRhY3QnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbW1vblJlcXVlc3QgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBjb21tb25SZXF1ZXN0TW9kdWxlID0ge1xyXG5cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkcm9wVmFsdWU7XHJcblxyXG4gICAgICAgICAgICBjb21tb25SZXF1ZXN0TW9kdWxlLmRyb3BEb3duVmFsaWRhdGlvbiA9IGZ1bmN0aW9uKGlkLCBmbGFnTmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGRyb3BWYWx1ZSA9IGFuZ3VsYXIuZWxlbWVudCgnIycgKyBpZCkudGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRyb3BWYWx1ZSAhPT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGVbZmxhZ05hbWVdID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZVtmbGFnTmFtZV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb21tb25SZXF1ZXN0TW9kdWxlLmNoZWNrRGF0YSA9IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhID0gKCFkYXRhKSA/ICcnIDogZGF0YTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29tbW9uUmVxdWVzdE1vZHVsZS5jaGVja09wdGlvbmFsRHJvcERhdGEgPSBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGRhdGEgPT09ICdTZWxlY3QgT25lJykgPyAnJyA6IGRhdGE7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbW1vblJlcXVlc3RNb2R1bGUuY2hlY2tEcm9wVmFsaWRhdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29tbW9uUmVxdWVzdE1vZHVsZS5kcm9wRG93blZhbGlkYXRpb24oJ2NvbnRhY3RTdGF0ZScsICdzdGF0ZUZsYWcnLCAnU2VsZWN0IFN0YXRlJyk7XHJcbiAgICAgICAgICAgICAgICBjb21tb25SZXF1ZXN0TW9kdWxlLmRyb3BEb3duVmFsaWRhdGlvbignY29udGFjdFRpbWUnLCAnYmVzdFRpbWUnLFxyXG4gICAgICAgICAgICAgICAgICAgICdUaGUgYmVzdCB0aW1lIHRvIGNhbGwgbWUgaXMnKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjb21tb25SZXF1ZXN0TW9kdWxlO1xyXG4gICAgICAgIH0pKCRzY29wZSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGlzVHdvWmlwQ29kZShuYW1lLCBib29sZWFuVmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICd6aXBDb2RlJykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCA9IGJvb2xlYW5WYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJHNjb3BlLm9uRm9jdXNBbmFseXRpY3MgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5pc0ZpcnN0Q2xpY2spIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc0ZpcnN0Q2xpY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICdldmVudF9hY3Rpb24nIDogJ2Zvcm0nLFxyXG4gICAgICAgICAgICAgICAgICAgICdldmVudF9uYW1lJyAgIDogJ0ZpbmQgYSBGaW5hbmNpYWwgQWR2aXNvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3ZlcnNpb24nOiAnMicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3R5cGUnICAgOiAnY29udGFjdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3N0YXR1cycgOiAnc3RhcnQnXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHV0YWcubGluayhkYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5nb2FscyA9IHtcclxuICAgICAgICAgICAgJ2dvYWxzTGlzdCc6IHtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICd1cGRhdGVHb2FsJzogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ29hbHNMaXN0W2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5nb2Fsc0xpc3Rba2V5XTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nb2Fsc0xpc3Rba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAnaXNFbXB0eSc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuZ29hbHNMaXN0KS5sZW5ndGggPT09IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUubnVtYmVyRm9ybWF0ID0gZnVuY3Rpb24oZXZ0LCBpbnB1dFZhbHVlLCBuYW1lLCB6aXBPclBob25lKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dFZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOS1dL2csICcnKTtcclxuICAgICAgICAgICAgaWYgKHppcE9yUGhvbmUgPT09ICdwaG9uZScpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwYXR0ID0gL14oXFxkezN9XFwtXFxkezN9LVxcZHs0fSkkLztcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0Rm9ybWF0ID0gIShwYXR0LnRlc3QoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID09PSAzICYmIGV2dC5rZXlDb2RlICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KS8sICckMS0nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPT09IDcgJiYgZXZ0LmtleUNvZGUgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0gPSAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLnJlcGxhY2UoLyhcXGR7M30pKFxcZHszfSkvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnJDEtJDItJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID09PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ucmVwbGFjZSgvKFxcZHszfSkoXFxkezN9KShcXGR7NH0pLyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyQxLSQyLSQzJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID09PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0gPSAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLnJlcGxhY2UoLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pc0NvcnJlY3RGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPj0gMTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9ICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gc3RyLnNsaWNlKDAsIDEyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdEZvcm1hdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh6aXBPclBob25lID09PSAnemlwJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID09PSA1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTktXS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2dC5rZXlDb2RlID09PSAxMDkgfHwgZXZ0LmtleUNvZGUgPT09IDE4OSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdID0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSArICctJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXS5sZW5ndGggPiA1ICYmICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0ubGVuZ3RoIDw9IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ldyBSZWdFeHAoJy0nKS50ZXN0KCRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbbmFtZV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLmxlbmd0aCA9PT0gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXR0WmlwID0gL14oXFxkezV9XFwtXFxkezR9KSQvO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAnemlwQ29kZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0ID0gIShwYXR0WmlwLnRlc3QoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVtuYW1lXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUucmVxdWVzdEluZm9EYXRhW25hbWVdLmxlbmd0aCA9PT0gOSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleUNvZGUgPT09IDEwOSB8fCBldnQua2V5Q29kZSA9PT0gMTg5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjJyArIGV2dC50YXJnZXQuaWQpLmluc2VydEF0Q2FyZXQoJy0nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRzY29wZSwge1xyXG4gICAgICAgICAgICAnaXNSZXF1ZXN0SW5mb1VwZGF0ZUNsaWNrZWQnOiBmYWxzZSxcclxuICAgICAgICAgICAgJ3JlcXVlc3RJbmZvRGF0YScgICAgICAgICAgIDoge1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ2dvYWwnOiB7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAnc3RhdGVGbGFnJyAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgICdiZXN0VGltZScgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgJ3ZhbGlkYXRpb25FcnJvclNob3cnOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRDYXB0Y2hhRGF0YSgpIHtcclxuICAgICAgICAgICAgdmFyIG51Y2FwdGNoYUFuc0VudHIsIG51Y2FwdGNoYUFuc0V4dDtcclxuXHJcbiAgICAgICAgICAgIGlmICghYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1lbnRlcicpKSB7XHJcbiAgICAgICAgICAgICAgICBudWNhcHRjaGFBbnNFbnRyID0gJyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBudWNhcHRjaGFBbnNFbnRyID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1lbnRlcicpLnZhbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1leGl0JykpIHtcclxuICAgICAgICAgICAgICAgIG51Y2FwdGNoYUFuc0V4dCA9ICcnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1leGl0JykudmFsKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVsnbnVjYXB0Y2hhLWVwZCddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWVwZCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhWydudWNhcHRjaGEtYW5zd2VyJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyJykudmFsKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbJ251Y2FwdGNoYS1hbnN3ZXItZW50ZXInXSA9IG51Y2FwdGNoYUFuc0VudHI7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbJ251Y2FwdGNoYS1hbnN3ZXItZXhpdCddID0gbnVjYXB0Y2hhQW5zRXh0O1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmxtc3VibWl0dGVkID0gYW5ndWxhci5lbGVtZW50KCcjbG1zdWJtaXR0ZWQnKS52YWwoKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVsnbnVjYXB0Y2hhLWluZGV4J10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtaW5kZXgnKS52YWwoKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVsnbnVjYXB0Y2hhLWRhdGF0eXBlJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtZGF0YXR5cGUnKS52YWwoKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVsnbnVjYXB0Y2hhLXB0eXBlJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtcHR5cGUnKS52YWwoKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVsnbnVjYXB0Y2hhLWxhbmd1YWdlJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtbGFuZ3VhZ2UnKS52YWwoKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVsnbnVjYXB0Y2hhLXJlZ2lvbiddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLXJlZ2lvbicpLnZhbCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhWydudWNhcHRjaGEtbWVkaWEtZG93bmxvYWQtdGltZSddID0gJyc7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbJ251Y2FwdGNoYS1hZHNlcnYtZG93bmxvYWQtdGltZSddID0gJyc7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGFbJ251Y2FwdGNoYS1mYWxsYmFjay10b2tlbiddID0gJyc7Ki9cclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YVsnZ1JlY2FwdGNoYVJlc3BvbnNlJ10gPSAkKCcjZy1yZWNhcHRjaGEtcmVzcG9uc2UnKS52YWwoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzZWxlY3RlZEdvYWxzID0gW107XHJcbiAgICAgICAgdmFyIHNldEdvYWxzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuZ29hbHMuZ29hbHNMaXN0LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhW2tleV0gPSBjb21tb25SZXF1ZXN0LmNoZWNrRGF0YSgkc2NvcGUuZ29hbHMuZ29hbHNMaXN0W2tleV0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5nb2Fscy5nb2Fsc0xpc3Rba2V5XSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEdvYWxzLnB1c2goJHNjb3BlLmdvYWxzLmdvYWxzTGlzdFtrZXldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Rm9ybURhdGEoKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZm9ybUZhY3RvciA9IHJlcXVlc3RGb3JtRmFjdG9yO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmlkZW50aXR5ID0gJ0ZJTkRfQU5fQURWSVNPUic7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZmlyc3ROYW1lID0gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5maXJzdE5hbWUpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLm1pZGRsZUluaXRpYWwgPSBjb21tb25SZXF1ZXN0LmNoZWNrRGF0YSgkc2NvcGUucmVxdWVzdEluZm9EYXRhLm1pZGRsZUluaXRpYWwpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmxhc3ROYW1lID0gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5sYXN0TmFtZSk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZW1haWwgPSBjb21tb25SZXF1ZXN0LmNoZWNrRGF0YSgkc2NvcGUucmVxdWVzdEluZm9EYXRhLmVtYWlsKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5lbWFpbENvbmZpcm1hdGlvbiA9IGNvbW1vblJlcXVlc3QuY2hlY2tEYXRhKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZW1haWxDb25maXJtYXRpb24pO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmFkZHJlc3MgPSBjb21tb25SZXF1ZXN0LmNoZWNrRGF0YSgkc2NvcGUucmVxdWVzdEluZm9EYXRhLmFkZHJlc3MpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmFkZHJlc3NMaW5lMiA9IGNvbW1vblJlcXVlc3QuY2hlY2tEYXRhKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuYWRkcmVzc0xpbmUyKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5jaXR5ID0gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5jaXR5KTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5zdGF0ZSA9IGFuZ3VsYXIuZWxlbWVudCgnI2NvbnRhY3RTdGF0ZScpLnRleHQoKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS56aXBDb2RlID0gY29tbW9uUmVxdWVzdC5jaGVja0RhdGEoJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS56aXBDb2RlKTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5waG9uZSA9IGNvbW1vblJlcXVlc3QuY2hlY2tEYXRhKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEucGhvbmUpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLnBob25lT3B0aW9uYWwgPSBjb21tb25SZXF1ZXN0LmNoZWNrRGF0YSgkc2NvcGUucmVxdWVzdEluZm9EYXRhLnBob25lT3B0aW9uYWwpO1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmNvbnRhY3RUaW1lID0gYW5ndWxhci5lbGVtZW50KCcjY29udGFjdFRpbWUnKS50ZXh0KCk7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuaGF2ZVByb2R1Y3QgPSAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmhhdmVQcm9kdWN0O1xyXG4gICAgICAgICAgICAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmxuY1ByaXZhY3lOb3RpY2UgPSAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmxuY1ByaXZhY3lOb3RpY2U7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEucGFnZVVSTCA9IHV0YWcuZGF0YS5wYWdlX3JlZmVycmluZ191cmw7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXF1ZXN0SW5mb0RhdGEudXNlc3Npb25pZCA9IHV0YWcuZGF0YVsnY3Auc192aSddO1xyXG4gICAgICAgICAgICBzZXRHb2FscygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZGlzcGxheUVycigpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgJHNjb3BlLnZhbGlkYXRpb25FcnJvclNob3cgPSB0cnVlO1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpc0VyclZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnLmMtZXJyLWJveCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbycpLmVxKDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wYXJlbnQoKS5vZmZzZXQoKS50b3A7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlckhndCA9IGFuZ3VsYXIuZWxlbWVudCgnLlRvcGhlYWRlci1sb2dvYXJlYScpLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aXNFcnJWYWwgPSAodGlzRXJyVmFsIC0gaGVhZGVySGd0KSAtIDUwO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnaHRtbCwgYm9keScpLnN0b3AoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3Njcm9sbFRvcCc6IHRpc0VyclZhbFxyXG4gICAgICAgICAgICAgICAgICAgIH0sIDYwMCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmMtZXJyLWJveCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbycpLmVxKDApLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIDIwMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB2YWxpZEZvcm0oKSB7XHJcbiAgICAgICAgICAgIHZhciBpc0NhcHRjaGFBdmFpbCA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY2FwY2hhVmFsO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLmctcmVjYXB0Y2hhJykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaXNDYXB0Y2hhQXZhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY2FwY2hhVmFsID0gYW5ndWxhci5lbGVtZW50KCcjZy1yZWNhcHRjaGEtcmVzcG9uc2UnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgIGlmIChjYXBjaGFWYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBpc0dvYWxzU2VsZWN0ZWQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcygkc2NvcGUuZ29hbHMuZ29hbHNMaXN0KS5sZW5ndGggPiAwO1xyXG5cclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2lzR29hbHNTZWxlY3RlZCcsaXNHb2Fsc1NlbGVjdGVkKTtcclxuXHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUucmVxdWVzdF9pbmZvX3VwZGF0ZS4kdmFsaWQgJiYgISRzY29wZS5zdGF0ZUZsYWcgJiYgISRzY29wZS5iZXN0VGltZSAmJiAoKGlzQ2FwdGNoYUF2YWlsXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgY2FwY2hhVmFsKSB8fCAhaXNDYXB0Y2hhQXZhaWwpICYmICEkc2NvcGUuaXNDb3JyZWN0Rm9ybWF0ICYmICEkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0XHJcbiAgICAgICAgICAgICAgICAmJiAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmVtYWlsID09PSAkc2NvcGUucmVxdWVzdEluZm9EYXRhLmVtYWlsQ29uZmlybWF0aW9uICYmIGlzR29hbHNTZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzQ2FwdGNoYUF2YWlsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0Q2FwdGNoYURhdGEoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGdldEZvcm1EYXRhKCk7XHJcbiAgICAgICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVyU2hvdygpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZhbGlkYXRpb25FcnJvclNob3cgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkaXNwbGF5RXJyKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRzY29wZSwge1xyXG4gICAgICAgICAgICAnc3VibWl0UmVxdWVzdCc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29tbW9uUmVxdWVzdC5jaGVja0Ryb3BWYWxpZGF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNSZXF1ZXN0SW5mb1VwZGF0ZUNsaWNrZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHRvIGF2b2lkIGlzc3VlIHdpdGggYXV0byBmaWxsIHZhbGlkYXRpbmcgZW1haWxcclxuICAgICAgICAgICAgICAgICRzY29wZS52YWxpZGF0ZUVtYWlsKCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEuZW1haWwpOyAvLyBlbmRzXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkRm9ybSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJyRzY29wZS5yZXF1ZXN0SW5mb0RhdGEnLCRzY29wZS5yZXF1ZXN0SW5mb0RhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJbmZvU2VydmljZXMucmVxdWVzdEluZm9Qb3N0KCRzY29wZSwgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YSwgZnVuY3Rpb24oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFBamF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhUmVzcG9uY2UgPSBkYXRhQWpheC5kYXRhLnJlc3BvbnNlU3RhdHVzQ29kZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhUmVzcG9uY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ1RJTUVEX09VVCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnVElNRUQgT1VUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnSU5URVJOQUxfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ0lOVEVSTkFMIEVSUk9SJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnQ0FQVENIQV9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnSU5WQUxJRCBDQVBUQ0hBJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnU0VSVklDRV9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnU0VSVklDRSBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ1NVQ0NFU1MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHRrc1BhZ2VVUkwgJiYgJ251bGwnICE9PSB0a3NQYWdlVVJMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGtzUGFnZVVSTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2dcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ1NVQ0NFU1MuIFRoYW5rIHlvdSBmb3Igc2hhcmluZyB5b3VyIGluZm9ybWF0aW9uLic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXInKS52YWwoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjY29udGFjdFN0YXRlJykudGV4dCgnU2VsZWN0IFN0YXRlJykucmVtb3ZlQXR0cihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEtdmFsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2NvbnRhY3RFYXJsaWVzdCwgI2NvbnRhY3RMYXRlc3QsICNoZWFyQWJvdXQsICNhbm51YWxSZXZlbnVlLCAjaG93TWFueUVtcCwgI2luY29tZVJhbmdlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkudGV4dCgnU2VsZWN0IG9uZScpLnJlbW92ZUF0dHIoJ2RhdGEtdmFsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzUmVxdWVzdEluZm9VcGRhdGVDbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzRmlyc3RDbGljayA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfYWN0aW9uJyA6ICdmb3JtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X25hbWUnICAgOiAnRmluZCBhIEZpbmFuY2lhbCBBZHZpc29yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3ZlcnNpb24nOiAnMicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF90eXBlJyAgIDogJ2NvbnRhY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfc3RhdHVzJyA6ICdjb21wbGV0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb3JtX3ppcGNvZGUnIDogJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS56aXBDb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9ybV95ZXNubycgICA6ICgnWWVzJyA9PT0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5oYXZlUHJvZHVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnMScgOiAoJ05vJyA9PT0gJHNjb3BlLnJlcXVlc3RJbmZvRGF0YS5oYXZlUHJvZHVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJzInIDogJzAnKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb3JtX21jJzogc2VsZWN0ZWRHb2Fscy5qb2luKCcsJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYW5hbHl0aWNzIGRhdGEnLGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGFnLmxpbmsoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcXVlc3RJbmZvRGF0YSA9IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ29hbCA9IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ29hbHMuZ29hbHNMaXN0ID0ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoLXdyYXBwZXInKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmNDbWROZXdDaGFsbGVuZ2UoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod2FybmluZ01zZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZVZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnLkFydGljbGVDb250ZW50Jykub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWFkZXJIZ3QgPSBhbmd1bGFyLmVsZW1lbnQoJy5Ub3BoZWFkZXItbG9nb2FyZWEnKS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGVWYWwgPSAodGFibGVWYWwgLSBoZWFkZXJIZ3QpIC0gMjA7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCdodG1sLCBib2R5Jykuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGFibGVWYWxcclxuICAgICAgICAgICAgICAgICAgICB9LCA4MDApO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmxmZ2FwcC5jb250cm9sbGVyKCdmcmF1ZFJlcG9ydGluZ0NvbnRsJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJHRpbWVvdXQnLCAnJHdpbmRvdycsICdmcmF1ZEZvcm1TZXJ2aWNlJywgZnVuY3Rpb24oJHNjb3BlLFxyXG4gICAgJGh0dHAsICR0aW1lb3V0LCAkd2luZG93LCBmcmF1ZEZvcm1TZXJ2aWNlKSB7XHJcbiAgICAvKiB2YXIgZGF0YT17Ki9cclxuICAgIHV0YWdfZGF0YS5ldmVudF9hY3Rpb24gPSAnZm9ybSc7XHJcbiAgICB1dGFnX2RhdGEuZXZlbnRfbmFtZSA9ICdGcmF1ZCBIb3RsaW5lJztcclxuICAgIHV0YWdfZGF0YS5ldmVudF90eXBlID0gJ2ZyYXVkJztcclxuICAgIHV0YWdfZGF0YS5ldmVudF9zdGF0dXMgPSAnc3RhcnQnO1xyXG5cclxuICAgIC8qIH0qL1xyXG4gICAgLy8gdXRhZy5saW5rKGRhdGEpO1xyXG5cclxuICAgIHZhciBjb21tb25SZXF1ZXN0TW9kdWxlID0ge1xyXG5cclxuICAgICAgICB9LFxyXG4gICAgICAgIGZyYXVkRm9ybUZhY3Rvciwgd2FybmluZ01zZztcclxuXHJcbiAgICAkKGRvY3VtZW50KS5vbigncmVzcG9uc2l2ZTpzdGF0ZWNoYW5nZWQnLCBmdW5jdGlvbihlLCBwYXJhbSkge1xyXG4gICAgICAgIGZyYXVkRm9ybUZhY3RvciA9IHBhcmFtO1xyXG4gICAgfSk7XHJcbiAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICRzY29wZS5pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLmhpZGUoKTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyonKS5yZW1vdmVDbGFzcygnZ2V0LXNhcnRlZGZvcm0tZGVmYXVsdC1oaWRkZW4nKTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNwcmVsb2FkZXIsIC5ibGFja19vdmVybGF5JykuaGlkZSgpO1xyXG4gICAgICAgICRzY29wZS5mcmF1ZFJlcG9ydGluZ0RhdGEgPSB7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmZyYXVkUmVwb3J0aW5nUG9zdERhdGEgPSB7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbW1vblJlcXVlc3RNb2R1bGUuY2hlY2tEYXRhID0gZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBkYXRhID0gKCFkYXRhKSA/ICcnIDogZGF0YTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Q2FwdGNoYURhdGEoKSB7XHJcbiAgICAgICAgdmFyIG51Y2FwdGNoYUFuc0VudHIsIG51Y2FwdGNoYUFuc0V4dDtcclxuXHJcbiAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykpIHtcclxuICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRW50ciA9ICcnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG51Y2FwdGNoYUFuc0VudHIgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykudmFsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1leGl0JykpIHtcclxuICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gJyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1leGl0JykudmFsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qJHNjb3BlLmZyYXVkUmVwb3J0aW5nUG9zdERhdGFbJ251Y2FwdGNoYS1lcGQnXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1lcGQnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUuZnJhdWRSZXBvcnRpbmdQb3N0RGF0YVsnbnVjYXB0Y2hhLWFuc3dlciddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlcicpLnZhbCgpO1xyXG4gICAgICAgICRzY29wZS5mcmF1ZFJlcG9ydGluZ1Bvc3REYXRhWydudWNhcHRjaGEtYW5zd2VyLWVudGVyJ10gPSBudWNhcHRjaGFBbnNFbnRyO1xyXG4gICAgICAgICRzY29wZS5mcmF1ZFJlcG9ydGluZ1Bvc3REYXRhWydudWNhcHRjaGEtYW5zd2VyLWV4aXQnXSA9IG51Y2FwdGNoYUFuc0V4dDtcclxuICAgICAgICAkc2NvcGUuZnJhdWRSZXBvcnRpbmdQb3N0RGF0YS5sbXN1Ym1pdHRlZCA9IGFuZ3VsYXIuZWxlbWVudCgnI2xtc3VibWl0dGVkJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmZyYXVkUmVwb3J0aW5nUG9zdERhdGFbJ251Y2FwdGNoYS1pbmRleCddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWluZGV4JykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmZyYXVkUmVwb3J0aW5nUG9zdERhdGFbJ251Y2FwdGNoYS1kYXRhdHlwZSddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWRhdGF0eXBlJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmZyYXVkUmVwb3J0aW5nUG9zdERhdGFbJ251Y2FwdGNoYS1wdHlwZSddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLXB0eXBlJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmZyYXVkUmVwb3J0aW5nUG9zdERhdGFbJ251Y2FwdGNoYS1sYW5ndWFnZSddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWxhbmd1YWdlJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmZyYXVkUmVwb3J0aW5nUG9zdERhdGFbJ251Y2FwdGNoYS1yZWdpb24nXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1yZWdpb24nKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUuZnJhdWRSZXBvcnRpbmdQb3N0RGF0YVsnbnVjYXB0Y2hhLW1lZGlhLWRvd25sb2FkLXRpbWUnXSA9ICcnO1xyXG4gICAgICAgICRzY29wZS5mcmF1ZFJlcG9ydGluZ1Bvc3REYXRhWydudWNhcHRjaGEtYWRzZXJ2LWRvd25sb2FkLXRpbWUnXSA9ICcnO1xyXG4gICAgICAgICRzY29wZS5mcmF1ZFJlcG9ydGluZ1Bvc3REYXRhWydudWNhcHRjaGEtZmFsbGJhY2stdG9rZW4nXSA9ICcnOyAqL1xyXG4gICAgICAgICRzY29wZS5mcmF1ZFJlcG9ydGluZ1Bvc3REYXRhWydnUmVjYXB0Y2hhUmVzcG9uc2UnXSA9ICQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldEZvcm1EYXRhKCkge1xyXG4gICAgICAgICRzY29wZS5mcmF1ZFJlcG9ydGluZ1Bvc3REYXRhLmlkZW50aXR5ID0gJ0ZSQVVEX1JFUE9SVCc7XHJcbiAgICAgICAgJHNjb3BlLmZyYXVkUmVwb3J0aW5nUG9zdERhdGEuZm9ybUZhY3RvciA9IGZyYXVkRm9ybUZhY3RvcjtcclxuICAgICAgICAkc2NvcGUuZnJhdWRSZXBvcnRpbmdQb3N0RGF0YS5xdWVzdGlvbjEgPSBjb21tb25SZXF1ZXN0TW9kdWxlLmNoZWNrRGF0YSgkc2NvcGUuZnJhdWRSZXBvcnRpbmdEYXRhLnBlcnNvbk9yQ29tcGFueSk7XHJcbiAgICAgICAgJHNjb3BlLmZyYXVkUmVwb3J0aW5nUG9zdERhdGEucXVlc3Rpb24yID0gY29tbW9uUmVxdWVzdE1vZHVsZS5jaGVja0RhdGEoJHNjb3BlLmZyYXVkUmVwb3J0aW5nRGF0YS5hZGRyZXNzT3JUZWxlcGhvbmVOdW1iZXIpO1xyXG4gICAgICAgICRzY29wZS5mcmF1ZFJlcG9ydGluZ1Bvc3REYXRhLnF1ZXN0aW9uMyA9IGNvbW1vblJlcXVlc3RNb2R1bGUuY2hlY2tEYXRhKCRzY29wZS5mcmF1ZFJlcG9ydGluZ0RhdGEuYWRkaXRpb25hbEZyYXVkSW5mbyk7XHJcbiAgICAgICAgJHNjb3BlLmZyYXVkUmVwb3J0aW5nUG9zdERhdGEucXVlc3Rpb240ID0gY29tbW9uUmVxdWVzdE1vZHVsZS5jaGVja0RhdGEoJHNjb3BlLmZyYXVkUmVwb3J0aW5nRGF0YS5pbnN1cmFuY2VEYXRhKTtcclxuICAgICAgICAkc2NvcGUuZnJhdWRSZXBvcnRpbmdQb3N0RGF0YS5xdWVzdGlvbjUgPSBjb21tb25SZXF1ZXN0TW9kdWxlLmNoZWNrRGF0YSgkc2NvcGUuZnJhdWRSZXBvcnRpbmdEYXRhLnBvbGljeUNvbnRyYWN0QWNjdE5vKTtcclxuICAgICAgICAkc2NvcGUuZnJhdWRSZXBvcnRpbmdQb3N0RGF0YS5xdWVzdGlvbjYgPSBjb21tb25SZXF1ZXN0TW9kdWxlLmNoZWNrRGF0YSgkc2NvcGUuZnJhdWRSZXBvcnRpbmdEYXRhLmRvbGxhckFtdCk7XHJcbiAgICAgICAgJHNjb3BlLmZyYXVkUmVwb3J0aW5nUG9zdERhdGEucXVlc3Rpb243ID0gY29tbW9uUmVxdWVzdE1vZHVsZS5jaGVja0RhdGEoJHNjb3BlLmZyYXVkUmVwb3J0aW5nRGF0YS5kYXRlT2ZJbmNpZGVudCk7XHJcbiAgICAgICAgJHNjb3BlLmZyYXVkUmVwb3J0aW5nUG9zdERhdGEucXVlc3Rpb244ID0gY29tbW9uUmVxdWVzdE1vZHVsZS5jaGVja0RhdGEoJHNjb3BlLmZyYXVkUmVwb3J0aW5nRGF0YS5zdXNwaWNpb3VzU2l0dWF0aW9uKTtcclxuICAgICAgICAkc2NvcGUuZnJhdWRSZXBvcnRpbmdQb3N0RGF0YS5xdWVzdGlvbjkgPSBjb21tb25SZXF1ZXN0TW9kdWxlLmNoZWNrRGF0YSgkc2NvcGUuZnJhdWRSZXBvcnRpbmdEYXRhLmRvY3VtZW50UHJvb2YpO1xyXG4gICAgICAgICRzY29wZS5mcmF1ZFJlcG9ydGluZ1Bvc3REYXRhLnF1ZXN0aW9uMTAgPSBjb21tb25SZXF1ZXN0TW9kdWxlLmNoZWNrRGF0YSgkc2NvcGUuZnJhdWRSZXBvcnRpbmdEYXRhLmFkZGl0aW9uYWxJbmNpZGVudEluZm8pO1xyXG4gICAgICAgICRzY29wZS5mcmF1ZFJlcG9ydGluZ1Bvc3REYXRhLnF1ZXN0aW9uMTEgPSBjb21tb25SZXF1ZXN0TW9kdWxlLmNoZWNrRGF0YSgkc2NvcGUuZnJhdWRSZXBvcnRpbmdEYXRhLmFkZGl0aW9uYWxSZXBvcnRlckluZm8pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRpc3BsYXlFcnIoKSB7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IHRydWU7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLnZhbGlkYXRpb25FcnJvclNob3cgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHZhbGlkRm9ybSgpIHtcclxuICAgICAgICB2YXIgaXNDYXB0Y2hhQXZhaWwgPSBmYWxzZSxcclxuICAgICAgICAgICAgY2FwY2hhVmFsO1xyXG5cclxuICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcuZy1yZWNhcHRjaGEnKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGlzQ2FwdGNoYUF2YWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgY2FwY2hhVmFsID0gYW5ndWxhci5lbGVtZW50KCcjZy1yZWNhcHRjaGEtcmVzcG9uc2UnKS52YWwoKTtcclxuICAgICAgICAgICAgaWYgKGNhcGNoYVZhbCkge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLmhpZGUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5zaG93KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCgoaXNDYXB0Y2hhQXZhaWwgJiYgY2FwY2hhVmFsKSB8fCAhaXNDYXB0Y2hhQXZhaWwpKSB7XHJcbiAgICAgICAgICAgIGlmIChpc0NhcHRjaGFBdmFpbCkge1xyXG4gICAgICAgICAgICAgICAgZ2V0Q2FwdGNoYURhdGEoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBnZXRGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNyZWZyZXNoJykudHJpZ2dlcignY2xpY2snKTtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjcHJlbG9hZGVyLCAuYmxhY2tfb3ZlcmxheScpLnNob3coKTtcclxuICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlclNob3coKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkaXNwbGF5RXJyKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAkc2NvcGUuaXNTdWJtaXRDbGlja2VkID0gdHJ1ZTtcclxuICAgICAgICBpZiAodmFsaWRGb3JtKCkpIHtcclxuICAgICAgICAgICAgZnJhdWRGb3JtU2VydmljZS5mcmF1ZEZvcm1Qb3N0RGF0YSgkc2NvcGUsICRzY29wZS5mcmF1ZFJlcG9ydGluZ1Bvc3REYXRhLCBmdW5jdGlvbihkYXRhQWpheCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGFSZXNwYW9uY2UgPSBkYXRhQWpheC5kYXRhLnJlc3BvbnNlU3RhdHVzQ29kZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3Bhb25jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhUmVzcGFvbmNlID09PSAnVElNRURfT1VUJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnVElNRUQgT1VUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcGFvbmNlID09PSAnSU5URVJOQUxfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdJTlRFUk5BTCBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3Bhb25jZSA9PT0gJ0NBUFRDSEFfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdJTlZBTElEIENBUFRDSEEnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwYW9uY2UgPT09ICdTRVJWSUNFX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnU0VSVklDRSBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3Bhb25jZSA9PT0gJ1NVQ0NFU1MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSB0a3NQYWdlVVJMICYmICdudWxsJyAhPT0gdGtzUGFnZVVSTCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGtzUGFnZVVSTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ1NVQ0NFU1MuIFRoYW5rIHlvdSBmb3Igc2hhcmluZyB5b3VyIGluZm9ybWF0aW9uLic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZnJhdWRSZXBvcnRpbmdEYXRhID0ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZyYXVkUmVwb3J0aW5nUG9zdERhdGEgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9hY3Rpb24nOiAnZm9ybScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfbmFtZScgIDogJ0ZyYXVkIEhvdGxpbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3R5cGUnICA6ICdmcmF1ZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfc3RhdHVzJzogJ2NvbXBsZXRlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2gtd3JhcHBlcicpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmNDbWROZXdDaGFsbGVuZ2UoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVySGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Ym1pdENsaWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh3YXJuaW5nTXNnID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgdGFibGVWYWwgPSBhbmd1bGFyLmVsZW1lbnQoJy5BcnRpY2xlQ29udGVudCcpLm9mZnNldCgpLnRvcDtcclxuICAgICAgICB2YXIgaGVhZGVySGd0ID0gYW5ndWxhci5lbGVtZW50KCcuVG9waGVhZGVyLWxvZ29hcmVhJykub3V0ZXJIZWlnaHQodHJ1ZSk7XHJcblxyXG4gICAgICAgIHRhYmxlVmFsID0gKHRhYmxlVmFsIC0gaGVhZGVySGd0KSAtIDIwO1xyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnaHRtbCwgYm9keScpLnN0b3AoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgJ3Njcm9sbFRvcCc6IHRhYmxlVmFsXHJcbiAgICAgICAgfSwgODAwKTtcclxuICAgIH07XHJcbn1dKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5sZmdhcHAuY29udHJvbGxlcignaG93VG9HZXRTdGFydGVkJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJHRpbWVvdXQnLCAnZm9ybVBvc3RTZXJ2aWNlJywgJyR3aW5kb3cnLCBmdW5jdGlvbigkc2NvcGUsXHJcbiAgICAkaHR0cCwgJHRpbWVvdXQsIGZvcm1Qb3N0U2VydmljZSwgJHdpbmRvdykge1xyXG4gICAgdmFyIGdldFN0YXJ0ZWRmb3JtRmFjdG9yLCB3YXJuaW5nTXNnO1xyXG5cclxuICAgICRzY29wZS5pc1ZhbGlkU3RhdGUgPSBmYWxzZTtcclxuICAgICRzY29wZS5pc1ZhbGlkQW5udWFsR3Jvc3MgPSBmYWxzZTtcclxuICAgICRzY29wZS5pc1ZhbGlkV2Vic2l0ZSA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLmdldFN0YXJ0ZWRGb3JtUG9zdERhdGEgPSB7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICAvKiAkKGRvY3VtZW50KS5sb2FkKGZ1bmN0aW9uICgpIHtcclxuICAgIFx0dmFyIGRhdGE9eyovXHJcbiAgICB1dGFnX2RhdGEuZXZlbnRfYWN0aW9uID0gJ2Zvcm0nO1xyXG4gICAgdXRhZ19kYXRhLmV2ZW50X25hbWUgPSAnSm9pbiBMaW5jb2xuIEZpbmFuY2lhbCBOZXR3b3JrJztcclxuICAgIHV0YWdfZGF0YS5ldmVudF90eXBlID0gJ2pvaW5sZm4nO1xyXG4gICAgdXRhZ19kYXRhLmV2ZW50X3N0YXR1cyA9ICdzdGFydCc7XHJcblxyXG4gICAgLyogfVxyXG5cdFx0dXRhZy5saW5rKGRhdGEpO1xyXG5cdH0pOyovXHJcblxyXG4gICAgJChkb2N1bWVudCkub24oJ3Jlc3BvbnNpdmU6c3RhdGVjaGFuZ2VkJywgZnVuY3Rpb24oZSwgcGFyYW0pIHtcclxuICAgICAgICBnZXRTdGFydGVkZm9ybUZhY3RvciA9IHBhcmFtO1xyXG4gICAgfSk7XHJcbiAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnKicpLnJlbW92ZUNsYXNzKCdub25lIGdldC1zYXJ0ZWRmb3JtLWRlZmF1bHQtaGlkZGVuJyk7XHJcbiAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5nZXRTdGFydGVkLXN0YXRlLWNvbnQgdWwgbGknKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZVN0YXRlKCk7XHJcbiAgICAgICAgICAgIH0sIDIwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuZ2V0U3RhcnRlZC1hbm51YWwtZ3Jvc3MtY29udCB1bCBsaScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlQW5udWFsR3Jvc3MoKTtcclxuICAgICAgICAgICAgfSwgMjAwKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5nZXRTdGFydGVkLXdlYnNpdGUtYnktY29udCB1bCBsaScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlV2Vic2l0ZSgpO1xyXG4gICAgICAgICAgICB9LCAyMDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBqUXVlcnkoJyN6aXBNZXNnJykuYWRkQ2xhc3MoJ25nLWhpZGUnKTtcclxuICAgICRzY29wZS52YWxpZGF0ZUxlbmd0aCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChqUXVlcnkoJyNob3d0b0dldFppcCcpLnZhbCgpLmxlbmd0aCA8IDMpIHtcclxuICAgICAgICAgICAgalF1ZXJ5KCcjaG93dG9HZXRaaXAnKS5hZGRDbGFzcygnZXJyLWJvcmRlcicpO1xyXG4gICAgICAgICAgICBqUXVlcnkoJyN6aXBNZXNnJykucmVtb3ZlQ2xhc3MoJ25nLWhpZGUnKTtcclxuICAgICAgICAgICAgalF1ZXJ5KCcjemlwTWVzZycpLmFkZENsYXNzKCduZy1zaG93Jyk7XHJcbiAgICAgICAgICAgIGpRdWVyeSgnI3ppcE1lc2cnKS5jc3Moe1xyXG4gICAgICAgICAgICAgICAgJ2Rpc3BsYXknOiAnYmxvY2shaW1wb3J0YW50J1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBqUXVlcnkoJyNob3d0b0dldFppcCcpLnJlbW92ZUNsYXNzKCdlcnItYm9yZGVyJyk7XHJcbiAgICAgICAgICAgIGpRdWVyeSgnI3ppcE1lc2cnKS5yZW1vdmVDbGFzcygnbmctc2hvdycpO1xyXG4gICAgICAgICAgICBqUXVlcnkoJyN6aXBNZXNnJykuYWRkQ2xhc3MoJ25nLWhpZGUnKTtcclxuICAgICAgICAgICAgalF1ZXJ5KCcjemlwTWVzZycpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICdub25lIWltcG9ydGFudCdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZVN0YXRlKCkge1xyXG4gICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5nZXRTdGFydGVkRm9ybURhdGFzdGF0ZScpLnRleHQoKSA9PT0gJycgfHwgYW5ndWxhci5lbGVtZW50KFxyXG4gICAgICAgICAgICAgICAgJy5nZXRTdGFydGVkRm9ybURhdGFzdGF0ZScpLnRleHQoKSA9PT0gJ1NlbGVjdCBzdGF0ZScpIHtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuZ2V0U3RhcnRlZEZvcm1EYXRhc3RhdGUnKS5hZGRDbGFzcygnYy1lcnItYm94LW5vaW1nJykuY2xvc2VzdChcclxuICAgICAgICAgICAgICAgICcuZ2V0U3RhcnRlZC1zdGF0ZS1jb250JykuZmluZCgnLmVyci1jb250Jykuc2hvdygpO1xyXG4gICAgICAgICAgICAkc2NvcGUuaXNWYWxpZFN0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuZ2V0U3RhcnRlZEZvcm1EYXRhc3RhdGUnKS5yZW1vdmVDbGFzcygnYy1lcnItYm94LW5vaW1nJykuY2xvc2VzdChcclxuICAgICAgICAgICAgICAgICcuZ2V0U3RhcnRlZC1zdGF0ZS1jb250JykuZmluZCgnLmVyci1jb250JykuaGlkZSgpO1xyXG4gICAgICAgICAgICAkc2NvcGUuaXNWYWxpZFN0YXRlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdmFsaWRhdFJvbGUoKSB7XHJcbiAgICAgICAgaWYgKGJhY2tncm91bmRJbmZvci5jdXJyZW50Um9sZSA9PT0gJycpIHtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcucm9sZS1ib3gtaXRlbScpLmFkZENsYXNzKCdjLWVyci1ib3gtcmFkaW8nKTtcclxuICAgICAgICAgICAgJHNjb3BlLmlzVmFsaWRSb2xlID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcucm9sZS1ib3gtaXRlbScpLnJlbW92ZUNsYXNzKCdjLWVyci1ib3gtcmFkaW8nKTtcclxuICAgICAgICAgICAgJHNjb3BlLmlzVmFsaWRSb2xlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVJbnRlcmVzdCgpIHtcclxuICAgICAgICBpZiAoYmFja2dyb3VuZEluZm9yLmludGVyZXN0ID09PSAnJykge1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5pbnRlcmVzdC1ib3gtaXRlbScpLmFkZENsYXNzKCdjLWVyci1ib3gtcmFkaW8nKTtcclxuICAgICAgICAgICAgJHNjb3BlLmlzVmFsaWRJbnRlcmVzdCA9IGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmludGVyZXN0LWJveC1pdGVtJykucmVtb3ZlQ2xhc3MoJ2MtZXJyLWJveC1yYWRpbycpO1xyXG4gICAgICAgICAgICAkc2NvcGUuaXNWYWxpZEludGVyZXN0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVBbm51YWxHcm9zcygpIHtcclxuICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcuZ2V0U3RhcnRlZC1hbm51YWwtZ3Jvc3MnKS50ZXh0KCkgPT09ICcnIHx8IGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICcuZ2V0U3RhcnRlZC1hbm51YWwtZ3Jvc3MnKS50ZXh0KCkgPT09ICdTZWxlY3Qgb25lJykge1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5nZXRTdGFydGVkLWFubnVhbC1ncm9zcycpLmFkZENsYXNzKCdjLWVyci1ib3gtbm9pbWcnKS5jbG9zZXN0KFxyXG4gICAgICAgICAgICAgICAgJy5nZXRTdGFydGVkLWFubnVhbC1ncm9zcy1jb250JykuZmluZCgnLmVyci1jb250Jykuc2hvdygpO1xyXG4gICAgICAgICAgICAkc2NvcGUuaXNWYWxpZEFubnVhbEdyb3NzID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuZ2V0U3RhcnRlZC1hbm51YWwtZ3Jvc3MnKS5yZW1vdmVDbGFzcygnYy1lcnItYm94LW5vaW1nJykuY2xvc2VzdChcclxuICAgICAgICAgICAgICAgICcuZ2V0U3RhcnRlZC1hbm51YWwtZ3Jvc3MtY29udCcpLmZpbmQoJy5lcnItY29udCcpLmhpZGUoKTtcclxuICAgICAgICAgICAgJHNjb3BlLmlzVmFsaWRBbm51YWxHcm9zcyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlV2Vic2l0ZSgpIHtcclxuICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcuZ2V0U3RhcnRlZC13ZWJzaXRlLWJ5JykudGV4dCgpID09PSAnJyB8fCBhbmd1bGFyLmVsZW1lbnQoXHJcbiAgICAgICAgICAgICAgICAnLmdldFN0YXJ0ZWQtd2Vic2l0ZS1ieScpLnRleHQoKSA9PT0gJ1NlbGVjdCBvbmUnKSB7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmdldFN0YXJ0ZWQtd2Vic2l0ZS1ieScpLmFkZENsYXNzKCdjLWVyci1ib3gtbm9pbWcnKS5jbG9zZXN0KFxyXG4gICAgICAgICAgICAgICAgJy5nZXRTdGFydGVkLXdlYnNpdGUtYnktY29udCcpLmZpbmQoJy5lcnItY29udCcpLnNob3coKTtcclxuICAgICAgICAgICAgJHNjb3BlLmlzVmFsaWRXZWJzaXRlID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuZ2V0U3RhcnRlZC13ZWJzaXRlLWJ5JykucmVtb3ZlQ2xhc3MoJ2MtZXJyLWJveC1ub2ltZycpLmNsb3Nlc3QoXHJcbiAgICAgICAgICAgICAgICAnLmdldFN0YXJ0ZWQtd2Vic2l0ZS1ieS1jb250JykuZmluZCgnLmVyci1jb250JykuaGlkZSgpO1xyXG4gICAgICAgICAgICAkc2NvcGUuaXNWYWxpZFdlYnNpdGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgYmFja2dyb3VuZEluZm9yID0ge1xyXG4gICAgICAgICdjdXJyZW50Um9sZSc6ICcnLFxyXG4gICAgICAgICdpbnRlcmVzdCcgICA6ICcnXHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5pc1N1Y2Nlc3MgPSBmYWxzZTtcclxuICAgICRzY29wZS5pc1N1Ym1pdENsaWNrZWQgPSBmYWxzZTtcclxuICAgICRzY29wZS52YWxpZGF0aW9uRXJyb3JTaG93ID0gZmFsc2U7XHJcbiAgICAkc2NvcGUudW5DaGVjayA9IGZ1bmN0aW9uKGV2dCwgbmFtZSkge1xyXG4gICAgICAgIGlmIChuYW1lID09PSAncm9sZScpIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZEluZm9yLmN1cnJlbnRSb2xlID0gZXZ0LnRhcmdldC52YWx1ZTtcclxuICAgICAgICAgICAgdmFsaWRhdFJvbGUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kSW5mb3IuaW50ZXJlc3QgPSBldnQudGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgICAgICB2YWxpZGF0ZUludGVyZXN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBpc1R3b1ppcENvZGUobmFtZSwgYm9vbGVhblZhbHVlKSB7XHJcbiAgICAgICAgaWYgKG5hbWUgPT09ICd6aXAnKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RaaXBGb3JtYXQgPSBib29sZWFuVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHNjb3BlLm51bWJlckZvcm1hdCA9IGZ1bmN0aW9uKGV2dCwgaW5wdXRWYWx1ZSwgbmFtZSwgemlwT3JQaG9uZSkge1xyXG4gICAgICAgIGlmIChpbnB1dFZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1EYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOS1dL2csICcnKTtcclxuICAgICAgICBpZiAoemlwT3JQaG9uZSA9PT0gJ3Bob25lJykge1xyXG4gICAgICAgICAgICB2YXIgcGF0dCA9IC9eKFxcZHszfVxcLVxcZHszfS1cXGR7NH0pJC87XHJcblxyXG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3Bob25lTnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFBob25lRm9ybWF0ID0gIShwYXR0LnRlc3QoJHNjb3BlLmdldFN0YXJ0ZWRGb3JtRGF0YVtuYW1lXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuZ2V0U3RhcnRlZEZvcm1EYXRhW25hbWVdLmxlbmd0aCA9PT0gMyAmJiBldnQua2V5Q29kZSAhPT0gOCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmdldFN0YXJ0ZWRGb3JtRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5nZXRTdGFydGVkRm9ybURhdGFbbmFtZV0gPSAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1EYXRhW25hbWVdLnJlcGxhY2UoLyhcXGR7M30pLyxcclxuICAgICAgICAgICAgICAgICAgICAnJDEtJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmdldFN0YXJ0ZWRGb3JtRGF0YVtuYW1lXS5sZW5ndGggPT09IDcgJiYgZXZ0LmtleUNvZGUgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5nZXRTdGFydGVkRm9ybURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1EYXRhW25hbWVdID0gJHNjb3BlLmdldFN0YXJ0ZWRGb3JtRGF0YVtuYW1lXS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgIC8oXFxkezN9KShcXGR7M30pLywgJyQxLSQyLScpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5nZXRTdGFydGVkRm9ybURhdGFbbmFtZV0ubGVuZ3RoID09PSAxMikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmdldFN0YXJ0ZWRGb3JtRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5nZXRTdGFydGVkRm9ybURhdGFbbmFtZV0gPSAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1EYXRhW25hbWVdLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5nZXRTdGFydGVkRm9ybURhdGFbbmFtZV0ubGVuZ3RoID09PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmdldFN0YXJ0ZWRGb3JtRGF0YVtuYW1lXSA9ICRzY29wZS5nZXRTdGFydGVkRm9ybURhdGFbbmFtZV0ucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAvKFxcZHszfSkoXFxkezN9KShcXGR7NH0pLywgJyQxLSQyLSQzJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCRzY29wZS5pc0NvcnJlY3RQaG9uZUZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5nZXRTdGFydGVkRm9ybURhdGFbbmFtZV0ubGVuZ3RoID49IDEyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9ICRzY29wZS5nZXRTdGFydGVkRm9ybURhdGFbbmFtZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRTdGFydGVkRm9ybURhdGFbbmFtZV0gPSBzdHIuc2xpY2UoMCwgMTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RQaG9uZUZvcm1hdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh6aXBPclBob25lID09PSAnemlwJykge1xyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmdldFN0YXJ0ZWRGb3JtRGF0YVtuYW1lXS5sZW5ndGggPT09IDUpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5nZXRTdGFydGVkRm9ybURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05LV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2dC5rZXlDb2RlID09PSAxMDkgfHwgZXZ0LmtleUNvZGUgPT09IDE4OSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRTdGFydGVkRm9ybURhdGFbbmFtZV0gPSAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1EYXRhW25hbWVdICsgJy0nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUuZ2V0U3RhcnRlZEZvcm1EYXRhW25hbWVdLmxlbmd0aCA+IDUgJiYgJHNjb3BlLmdldFN0YXJ0ZWRGb3JtRGF0YVtuYW1lXS5sZW5ndGhcclxuICAgICAgICAgICAgICAgIDw9IDEwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3IFJlZ0V4cCgnLScpLnRlc3QoJHNjb3BlLmdldFN0YXJ0ZWRGb3JtRGF0YVtuYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmdldFN0YXJ0ZWRGb3JtRGF0YVtuYW1lXS5sZW5ndGggPT09IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXR0WmlwID0gL14oXFxkezV9XFwtXFxkezR9KSQvO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICd6aXAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0ID0gIShwYXR0WmlwLnRlc3QoJHNjb3BlLmdldFN0YXJ0ZWRGb3JtRGF0YVtuYW1lXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmdldFN0YXJ0ZWRGb3JtRGF0YVtuYW1lXS5sZW5ndGggPT09IDkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleUNvZGUgPT09IDEwOSB8fCBldnQua2V5Q29kZSA9PT0gMTg5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyMnICsgZXZ0LnRhcmdldC5pZCkuaW5zZXJ0QXRDYXJldCgnLScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGdldENhcHRjaGFEYXRhKCkge1xyXG4gICAgICAgIHZhciBudWNhcHRjaGFBbnNFbnRyLCBudWNhcHRjaGFBbnNFeHQ7XHJcblxyXG4gICAgICAgIGlmICghYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1lbnRlcicpKSB7XHJcbiAgICAgICAgICAgIG51Y2FwdGNoYUFuc0VudHIgPSAnJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBudWNhcHRjaGFBbnNFbnRyID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1lbnRlcicpLnZhbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZXhpdCcpKSB7XHJcbiAgICAgICAgICAgIG51Y2FwdGNoYUFuc0V4dCA9ICcnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG51Y2FwdGNoYUFuc0V4dCA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZXhpdCcpLnZhbCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyokc2NvcGUuZ2V0U3RhcnRlZEZvcm1Qb3N0RGF0YVsnbnVjYXB0Y2hhLWVwZCddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWVwZCcpLnZhbCgpO1xyXG4gICAgICAgICRzY29wZS5nZXRTdGFydGVkRm9ybVBvc3REYXRhWydudWNhcHRjaGEtYW5zd2VyJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmdldFN0YXJ0ZWRGb3JtUG9zdERhdGFbJ251Y2FwdGNoYS1hbnN3ZXItZW50ZXInXSA9IG51Y2FwdGNoYUFuc0VudHI7XHJcbiAgICAgICAgJHNjb3BlLmdldFN0YXJ0ZWRGb3JtUG9zdERhdGFbJ251Y2FwdGNoYS1hbnN3ZXItZXhpdCddID0gbnVjYXB0Y2hhQW5zRXh0O1xyXG4gICAgICAgICRzY29wZS5nZXRTdGFydGVkRm9ybVBvc3REYXRhLmxtc3VibWl0dGVkID0gYW5ndWxhci5lbGVtZW50KCcjbG1zdWJtaXR0ZWQnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1Qb3N0RGF0YVsnbnVjYXB0Y2hhLWluZGV4J10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtaW5kZXgnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1Qb3N0RGF0YVsnbnVjYXB0Y2hhLWRhdGF0eXBlJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtZGF0YXR5cGUnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1Qb3N0RGF0YVsnbnVjYXB0Y2hhLXB0eXBlJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtcHR5cGUnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1Qb3N0RGF0YVsnbnVjYXB0Y2hhLWxhbmd1YWdlJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtbGFuZ3VhZ2UnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1Qb3N0RGF0YVsnbnVjYXB0Y2hhLXJlZ2lvbiddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLXJlZ2lvbicpLnZhbCgpO1xyXG4gICAgICAgICRzY29wZS5nZXRTdGFydGVkRm9ybVBvc3REYXRhWydudWNhcHRjaGEtbWVkaWEtZG93bmxvYWQtdGltZSddID0gJyc7XHJcbiAgICAgICAgJHNjb3BlLmdldFN0YXJ0ZWRGb3JtUG9zdERhdGFbJ251Y2FwdGNoYS1hZHNlcnYtZG93bmxvYWQtdGltZSddID0gJyc7XHJcbiAgICAgICAgJHNjb3BlLmdldFN0YXJ0ZWRGb3JtUG9zdERhdGFbJ251Y2FwdGNoYS1mYWxsYmFjay10b2tlbiddID0gJyc7Ki9cclxuICAgICAgICAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1Qb3N0RGF0YVsnZ1JlY2FwdGNoYVJlc3BvbnNlJ10gPSAkKCcjZy1yZWNhcHRjaGEtcmVzcG9uc2UnKS52YWwoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRGb3JtRGF0YSgpIHtcclxuICAgICAgICAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1Qb3N0RGF0YS5pZGVudGl0eSA9ICdKT0lOX0xGTic7XHJcbiAgICAgICAgJHNjb3BlLmdldFN0YXJ0ZWRGb3JtUG9zdERhdGEuZm9ybUZhY3RvciA9IGdldFN0YXJ0ZWRmb3JtRmFjdG9yO1xyXG4gICAgICAgICRzY29wZS5nZXRTdGFydGVkRm9ybVBvc3REYXRhLmZpcnN0TmFtZSA9ICRzY29wZS5nZXRTdGFydGVkRm9ybURhdGEuZmlyc3ROYW1lO1xyXG4gICAgICAgICRzY29wZS5nZXRTdGFydGVkRm9ybVBvc3REYXRhLmxhc3ROYW1lID0gJHNjb3BlLmdldFN0YXJ0ZWRGb3JtRGF0YS5sYXN0TmFtZTtcclxuICAgICAgICAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1Qb3N0RGF0YS5hZGRyZXNzID0gJHNjb3BlLmdldFN0YXJ0ZWRGb3JtRGF0YS5hZGRyZXNzO1xyXG4gICAgICAgICRzY29wZS5nZXRTdGFydGVkRm9ybVBvc3REYXRhLmNpdHkgPSAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1EYXRhLmNpdHk7XHJcbiAgICAgICAgJHNjb3BlLmdldFN0YXJ0ZWRGb3JtUG9zdERhdGEuc3RhdGUgPSBhbmd1bGFyLmVsZW1lbnQoJy5nZXRTdGFydGVkRm9ybURhdGFzdGF0ZScpLnRleHQoKTtcclxuICAgICAgICAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1Qb3N0RGF0YS56aXAgPSAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1EYXRhLnppcDtcclxuICAgICAgICAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1Qb3N0RGF0YS5lbWFpbCA9ICRzY29wZS5nZXRTdGFydGVkRm9ybURhdGEuZW1haWw7XHJcbiAgICAgICAgJHNjb3BlLmdldFN0YXJ0ZWRGb3JtUG9zdERhdGEucGhvbmVOdW1iZXIgPSAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1EYXRhLnBob25lTnVtYmVyO1xyXG4gICAgICAgICRzY29wZS5nZXRTdGFydGVkRm9ybVBvc3REYXRhLnBob25lVHlwZSA9ICRzY29wZS5waG9uZTtcclxuICAgICAgICAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1Qb3N0RGF0YS5iYWNrZ3JvdW5kSW5mbyA9IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgJ3F1ZXN0aW9uJzogJ015IGN1cnJlbnQgcm9sZSBpcycsXHJcbiAgICAgICAgICAgICAgICAnYW5zd2VyJyAgOiBiYWNrZ3JvdW5kSW5mb3IuY3VycmVudFJvbGVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgJ3F1ZXN0aW9uJzogJ0kgYW0gaW50ZXJlc3RlZCBpbiBsZWFybmluZyBtb3JlIGFib3V0JyxcclxuICAgICAgICAgICAgICAgICdhbnN3ZXInICA6IGJhY2tncm91bmRJbmZvci5pbnRlcmVzdFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAncXVlc3Rpb24nOiAnTXkgYW5udWFsIGdyb3NzL2RlYWxlciBjb25jZXNzaW9ucyBhcmUgYWJvdXQnLFxyXG4gICAgICAgICAgICAgICAgJ2Fuc3dlcicgIDogYW5ndWxhci5lbGVtZW50KCcuZ2V0U3RhcnRlZC1hbm51YWwtZ3Jvc3MnKS50ZXh0KClcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgJ3F1ZXN0aW9uJzogJ0kgY2FtZSB0byBMaW5jb2xuIEZpbmFuY2lhbCBOZXR3b3JrIHdlYnNpdGUgYnkgd2F5IG9mJyxcclxuICAgICAgICAgICAgICAgICdhbnN3ZXInICA6IGFuZ3VsYXIuZWxlbWVudCgnLmdldFN0YXJ0ZWQtd2Vic2l0ZS1ieScpLnRleHQoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkaXNwbGF5RXJyKCkge1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS52YWxpZGF0aW9uRXJyb3JTaG93ID0gdHJ1ZTtcclxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLmMtZXJyLWJveCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbywgLmVyci1ib3JkZXInKS5sZW5ndGhcclxuICAgICAgICAgICAgICAgID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRpc0VyclZhbCA9IGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8sIC5lcnItYm9yZGVyJykuZXEoMCkucGFyZW50KClcclxuICAgICAgICAgICAgICAgICAgICAub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlckhndCA9IGFuZ3VsYXIuZWxlbWVudCgnLlRvcGhlYWRlci1sb2dvYXJlYScpLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRpc0VyclZhbCA9ICh0aXNFcnJWYWwgLSBoZWFkZXJIZ3QpIC0gNTA7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3Njcm9sbFRvcCc6IHRpc0VyclZhbFxyXG4gICAgICAgICAgICAgICAgfSwgNjAwLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvLCAuZXJyLWJvcmRlcicpLmVxKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAwKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCAyMDApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHZhbGlkRm9ybSgpIHtcclxuICAgICAgICB2YXIgaXNDYXB0Y2hhQXZhaWwgPSBmYWxzZSxcclxuICAgICAgICAgICAgY2FwY2hhVmFsO1xyXG5cclxuICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcuZy1yZWNhcHRjaGEnKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGlzQ2FwdGNoYUF2YWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgY2FwY2hhVmFsID0gYW5ndWxhci5lbGVtZW50KCcjZy1yZWNhcHRjaGEtcmVzcG9uc2UnKS52YWwoKTtcclxuICAgICAgICAgICAgaWYgKGNhcGNoYVZhbCkge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLmhpZGUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5zaG93KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFsaWRhdGVTdGF0ZSgpO1xyXG4gICAgICAgIHZhbGlkYXRSb2xlKCk7XHJcbiAgICAgICAgdmFsaWRhdGVJbnRlcmVzdCgpO1xyXG4gICAgICAgIHZhbGlkYXRlQW5udWFsR3Jvc3MoKTtcclxuICAgICAgICB2YWxpZGF0ZVdlYnNpdGUoKTtcclxuICAgICAgICBpZiAoJHNjb3BlLmdldFN0YXJ0ZWRGb3JtLiR2YWxpZCAmJiAkc2NvcGUuaXNWYWxpZFN0YXRlICYmICRzY29wZS5pc1ZhbGlkUm9sZSAmJiAkc2NvcGUuaXNWYWxpZEludGVyZXN0XHJcbiAgICAgICAgICAgICYmICRzY29wZS5pc1ZhbGlkQW5udWFsR3Jvc3MgJiYgJHNjb3BlLmlzVmFsaWRXZWJzaXRlICYmICgoaXNDYXB0Y2hhQXZhaWwgJiYgY2FwY2hhVmFsKSB8fCAhaXNDYXB0Y2hhQXZhaWwpICYmICEkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0ICYmICEkc2NvcGUuaXNDb3JyZWN0UGhvbmVGb3JtYXQpIHtcclxuICAgICAgICAgICAgaWYgKGlzQ2FwdGNoYUF2YWlsKSB7XHJcbiAgICAgICAgICAgICAgICBnZXRDYXB0Y2hhRGF0YSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdldEZvcm1EYXRhKCk7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI3JlZnJlc2gnKS50cmlnZ2VyKCdjbGljaycpO1xyXG4gICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVyU2hvdygpO1xyXG4gICAgICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRpc3BsYXlFcnIoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICRzY29wZS5pc1N1Ym1pdENsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIGlmICghJHNjb3BlLnBob25lKSB7XHJcbiAgICAgICAgICAgIGlmICghY29tbW9uRnVuY3Rpb25zLmlzSUUoOCwgJ2x0ZScpKSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNXb3JrJykudHJpZ2dlcignY2xpY2snKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHZhbGlkRm9ybSgpKSB7XHJcbiAgICAgICAgICAgIGZvcm1Qb3N0U2VydmljZS5mb3JtUG9zdERhdGEoJHNjb3BlLCAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1Qb3N0RGF0YSwgZnVuY3Rpb24oZGF0YUFqYXgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRhUmVzcGFvbmNlID0gZGF0YUFqYXguZGF0YS5yZXNwb25zZVN0YXR1c0NvZGU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGFSZXNwYW9uY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3Bhb25jZSA9PT0gJ1RJTUVEX09VVCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ1RJTUVEIE9VVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3Bhb25jZSA9PT0gJ0lOVEVSTkFMX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnSU5URVJOQUwgRVJST1InO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwYW9uY2UgPT09ICdDQVBUQ0hBX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnSU5WQUxJRCBDQVBUQ0hBJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcGFvbmNlID09PSAnU0VSVklDRV9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ1NFUlZJQ0UgRVJST1InO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwYW9uY2UgPT09ICdTVUNDRVNTJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gdGtzUGFnZVVSTCAmJiAnbnVsbCcgIT09IHRrc1BhZ2VVUkwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24uaHJlZiA9IHRrc1BhZ2VVUkw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ1NVQ0NFU1MuIFRoYW5rIHlvdSBmb3Igc2hhcmluZyB5b3VyIGluZm9ybWF0aW9uLic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2dldFN0YXJ0ZWQtc3VjY2Vzcy10eHQnKS5yZW1vdmVDbGFzcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2V0U3RhcnRlZC1lcnJvcicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRTdGFydGVkRm9ybURhdGEgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0U3RhcnRlZEZvcm1Qb3N0RGF0YSA9IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmdldFN0YXJ0ZWRGb3JtRGF0YXN0YXRlJykudGV4dCgnU2VsZWN0IHN0YXRlJykucmVtb3ZlQXR0cihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhLXZhbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5nZXRTdGFydGVkLWFubnVhbC1ncm9zcycpLnRleHQoJ1NlbGVjdCBvbmUnKS5yZW1vdmVBdHRyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEtdmFsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmdldFN0YXJ0ZWQtd2Vic2l0ZScpLnRleHQoJ1NlbGVjdCBvbmUnKS5yZW1vdmVBdHRyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEtdmFsJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9hY3Rpb24nOiAnZm9ybScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfbmFtZScgIDogJ0pvaW4gTGluY29sbiBGaW5hbmNpYWwgTmV0d29yaycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfdHlwZScgIDogJ2pvaW5sZm4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3N0YXR1cyc6ICdjb21wbGV0ZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0YWcubGluayhkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoLXdyYXBwZXInKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5jQ21kTmV3Q2hhbGxlbmdlKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWJtaXRDbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubGZnLXJhZGlvLXJvbGUgaW5wdXQnKS5hdHRyKCdjaGVja2VkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY29tbW9uRnVuY3Rpb25zLmlzSUUoOCwgJ2x0ZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI1dvcmsnKS50cmlnZ2VyKCdjbGljaycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh3YXJuaW5nTXNnID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHRhYmxlVmFsID0gYW5ndWxhci5lbGVtZW50KCcuQXJ0aWNsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7XHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJIZ3QgPSBhbmd1bGFyLmVsZW1lbnQoJy5Ub3BoZWFkZXItbG9nb2FyZWEnKS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIHRhYmxlVmFsID0gKHRhYmxlVmFsIC0gaGVhZGVySGd0KSAtIDIwO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGFibGVWYWxcclxuICAgICAgICAgICAgfSwgODAwKTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxufV0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbihmdW5jdGlvbigpIHtcclxuICAgIGxmZ2FwcC5jb250cm9sbGVyKCdsZmFTdHJlZXRTY2FwZVJlZ0Zvcm1Db250cmwnLCBsZmFTdHJlZXRTY2FwZVJlZ0Zvcm1Db250cmwpO1xyXG4gICAgbGZhU3RyZWV0U2NhcGVSZWdGb3JtQ29udHJsLiRpbmplY3QgPSBbJyRzY29wZScsICckdGltZW91dCcsICdmb3JtUG9zdFNlcnZpY2UnLCAnJHdpbmRvdyddO1xyXG5cclxuICAgIGZ1bmN0aW9uIGxmYVN0cmVldFNjYXBlUmVnRm9ybUNvbnRybCgkc2NvcGUsICR0aW1lb3V0LCBmb3JtUG9zdFNlcnZpY2UsICR3aW5kb3cpIHtcclxuICAgICAgICAvLyBpc2xmYXN0cmVldFNjYXBlUmVnRm9ybUNsaWNrZWQgOiBmYWxzZTtcclxuICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVySGlkZSgpO1xyXG4gICAgICAgIHZhciBjbGVhclZhbHVlcywgd2FybmluZ01zZztcclxuICAgICAgICB2YXIgZm9ybUZhY3RvcjtcclxuXHJcbiAgICAgICAgJHNjb3BlLmlzbGZhc3RyZWV0U2NhcGVSZWdGb3JtQ2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5pc1ByZWZpeDFGaWxsZWQgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuaXNBY2NOdW0xRmlsbGVkID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLndhdGNoUHJlZml4YW5kQWNjTnVtID0gZnVuY3Rpb24ocHJlZml4VmFsdWUsIGFjY051bVZhbHVlKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5pc1ByZWZpeDFGaWxsZWQgPSBwcmVmaXhWYWx1ZTtcclxuICAgICAgICAgICAgJHNjb3BlLmlzQWNjTnVtMUZpbGxlZCA9IGFjY051bVZhbHVlO1xyXG4gICAgICAgICAgICBpZiAoISRzY29wZS5pc1ByZWZpeDFGaWxsZWQgJiYgJHNjb3BlLmlzbGZhc3RyZWV0U2NhcGVSZWdGb3JtQ2xpY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuYWNjTGlzdHdyYXBwZXInKS5jaGlsZHJlbigpLmZpcnN0KCkuZmluZCgnaW5wdXRbbmFtZT1cInByZWZpeFwiXScpLmFkZENsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICdjLWVyci1ib3gnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUuaXNQcmVmaXgxRmlsbGVkICYmICRzY29wZS5pc2xmYXN0cmVldFNjYXBlUmVnRm9ybUNsaWNrZWQpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmFjY0xpc3R3cmFwcGVyJykuY2hpbGRyZW4oKS5maXJzdCgpLmZpbmQoJ2lucHV0W25hbWU9XCJwcmVmaXhcIl0nKS5yZW1vdmVDbGFzcyhcclxuICAgICAgICAgICAgICAgICAgICAnYy1lcnItYm94Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCEkc2NvcGUuaXNBY2NOdW0xRmlsbGVkICYmICRzY29wZS5pc2xmYXN0cmVldFNjYXBlUmVnRm9ybUNsaWNrZWQpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmFjY0xpc3R3cmFwcGVyJykuY2hpbGRyZW4oKS5maXJzdCgpLmZpbmQoJ2lucHV0W25hbWU9XCJhY2NOdW1cIl0nKS5hZGRDbGFzcyhcclxuICAgICAgICAgICAgICAgICAgICAnYy1lcnItYm94Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmlzQWNjTnVtMUZpbGxlZCAmJiAkc2NvcGUuaXNsZmFzdHJlZXRTY2FwZVJlZ0Zvcm1DbGlja2VkKSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5hY2NMaXN0d3JhcHBlcicpLmNoaWxkcmVuKCkuZmlyc3QoKS5maW5kKCdpbnB1dFtuYW1lPVwiYWNjTnVtXCJdJykucmVtb3ZlQ2xhc3MoXHJcbiAgICAgICAgICAgICAgICAgICAgJ2MtZXJyLWJveCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJChkb2N1bWVudCkub24oJ3Jlc3BvbnNpdmU6c3RhdGVjaGFuZ2VkJywgZnVuY3Rpb24oZSwgcGFyYW0pIHtcclxuICAgICAgICAgICAgZm9ybUZhY3RvciA9IHBhcmFtO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyB2YXJpYWJsZSBmb3IgYWRkIG1vcmUgYWNjIGZ1bmN0aW9uYWxpdHlcclxuICAgICAgICAkc2NvcGUuYWNjTGlzdCA9IFtdO1xyXG5cclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyonKS5yZW1vdmVDbGFzcygnbm9uZScpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgY29tbW9uUmVxdWVzdCA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGNvbW1vblJlcXVlc3RNb2R1bGUgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRyb3BWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbW1vblJlcXVlc3RNb2R1bGUuZHJvcERvd25WYWxpZGF0aW9uID0gZnVuY3Rpb24oaWQsIGZsYWdOYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgZHJvcFZhbHVlID0gYW5ndWxhci5lbGVtZW50KCcjJyArIGlkKS50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZHJvcFZhbHVlICE9PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZVtmbGFnTmFtZV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlW2ZsYWdOYW1lXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29tbW9uUmVxdWVzdE1vZHVsZTtcclxuICAgICAgICB9KSgkc2NvcGUpO1xyXG5cclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ3VsLmN1c3RvbS1zZWxlY3Rib3gtbGlzdC1jb250IGxpJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbW1vblJlcXVlc3QuZHJvcERvd25WYWxpZGF0aW9uKCdjb250YWN0U3RhdGUnLCAnc3RhdGVGbGFnJywgJ1NlbGVjdCBTdGF0ZScpO1xyXG4gICAgICAgICAgICB9LCAyMDApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBpc1R3b1ppcENvZGUobmFtZSwgYm9vbGVhblZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnemlwY29kZScpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RaaXBGb3JtYXQgPSBib29sZWFuVmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRzY29wZS5udW1iZXJGb3JtYXQgPSBmdW5jdGlvbihldnQsIGlucHV0VmFsdWUsIG5hbWUsIHppcE9yUGhvbmUpIHtcclxuICAgICAgICAgICAgaWYgKGlucHV0VmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICRzY29wZS5sZmFTdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOS1dL2csICcnKTtcclxuICAgICAgICAgICAgaWYgKHppcE9yUGhvbmUgPT09ICdwaG9uZScgfHwgemlwT3JQaG9uZSA9PT0gJ2ZheCcpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwYXR0ID0gL14oXFxkezN9XFwtXFxkezN9LVxcZHs0fSkkLztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ1Bob25lbnVtYmVyJyB8fCBuYW1lID09PSAnZmF4Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RQaG9uZUZvcm1hdCA9ICEocGF0dC50ZXN0KCRzY29wZS5sZmFTdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV0ubGVuZ3RoID09PSAzICYmIGV2dC5rZXlDb2RlICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV0gPSAkc2NvcGUubGZhU3RyZWV0U2NhcGVSZWdWYWx1ZVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KS8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICckMS0nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV0ubGVuZ3RoID09PSA3ICYmIGV2dC5rZXlDb2RlICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV0gPSAkc2NvcGUubGZhU3RyZWV0U2NhcGVSZWdWYWx1ZVtuYW1lXS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKFxcZHszfSkoXFxkezN9KS8sICckMS0kMi0nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV0ubGVuZ3RoID09PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sZmFTdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sZmFTdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdID0gJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV0ucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUubGZhU3RyZWV0U2NhcGVSZWdWYWx1ZVtuYW1lXS5sZW5ndGggPT09IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV0gPSAkc2NvcGUubGZhU3RyZWV0U2NhcGVSZWdWYWx1ZVtuYW1lXS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKFxcZHszfSkoXFxkezN9KShcXGR7NH0pLywgJyQxLSQyLSQzJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmlzQ29ycmVjdFBob25lRm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5sZmFTdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdLmxlbmd0aCA+PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyID0gJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGZhU3RyZWV0U2NhcGVSZWdWYWx1ZVtuYW1lXSA9IHN0ci5zbGljZSgwLCAxMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RQaG9uZUZvcm1hdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh6aXBPclBob25lID09PSAnemlwJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5sZmFTdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdLmxlbmd0aCA9PT0gNSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sZmFTdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOS1dL2csICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleUNvZGUgPT09IDEwOSB8fCBldnQua2V5Q29kZSA9PT0gMTg5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sZmFTdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdID0gJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV0gKyAnLSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5sZmFTdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdLmxlbmd0aCA+IDUgJiYgJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV1cclxuICAgICAgICAgICAgICAgICAgICAubGVuZ3RoIDw9IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ldyBSZWdFeHAoJy0nKS50ZXN0KCRzY29wZS5sZmFTdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV0ubGVuZ3RoID09PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdHRaaXAgPSAvXihcXGR7NX1cXC1cXGR7NH0pJC87XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICd6aXBjb2RlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RaaXBGb3JtYXQgPSAhKHBhdHRaaXAudGVzdCgkc2NvcGUubGZhU3RyZWV0U2NhcGVSZWdWYWx1ZVtuYW1lXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUubGZhU3RyZWV0U2NhcGVSZWdWYWx1ZVtuYW1lXS5sZW5ndGggPT09IDkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2dC5rZXlDb2RlID09PSAxMDkgfHwgZXZ0LmtleUNvZGUgPT09IDE4OSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnIycgKyBldnQudGFyZ2V0LmlkKS5pbnNlcnRBdENhcmV0KCctJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRzY29wZSwge1xyXG4gICAgICAgICAgICAnaXNsZmFzdHJlZXRTY2FwZVJlZ0Zvcm1DbGlja2VkJzogZmFsc2UsXHJcbiAgICAgICAgICAgICdsZmFTdHJlZXRTY2FwZVJlZ1ZhbHVlJyAgICAgICAgOiB7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAndmFsaWRhdGlvbkVycm9yU2hvdyc6IGZhbHNlLFxyXG4gICAgICAgICAgICAnc3RhdGVGbGFnJyAgICAgICAgICA6IHRydWVcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYW5ndWxhci5leHRlbmQoJHNjb3BlLCB7XHJcbiAgICAgICAgICAgICdsZmFTdHJlZXRTY2FwZUZvcm1TdWJtaXQnOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc2xmYXN0cmVldFNjYXBlUmVnRm9ybUNsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUuaXNQcmVmaXgxRmlsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuYWNjTGlzdHdyYXBwZXInKS5jaGlsZHJlbigpLmZpcnN0KCkuZmluZCgnaW5wdXRbbmFtZT1cInByZWZpeFwiXScpLmFkZENsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnYy1lcnItYm94Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUuaXNQcmVmaXgxRmlsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuYWNjTGlzdHdyYXBwZXInKS5jaGlsZHJlbigpLmZpcnN0KCkuZmluZCgnaW5wdXRbbmFtZT1cImFjY051bVwiXScpLmFkZENsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnYy1lcnItYm94Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGNhcGNoYVZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnI2ctcmVjYXB0Y2hhLXJlc3BvbnNlJykudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNhcGNoYVZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb21tb25SZXF1ZXN0LmRyb3BEb3duVmFsaWRhdGlvbignY29udGFjdFN0YXRlJywgJ3N0YXRlRmxhZycsICdTZWxlY3QgU3RhdGUnKTtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubGZhcmVnc2l0ZXJmb3JtLiR2YWxpZCAmJiAhJHNjb3BlLmlzQ29ycmVjdFBob25lRm9ybWF0ICYmICEkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0XHJcbiAgICAgICAgICAgICAgICAgICAgJiYgKGFuZ3VsYXIuZWxlbWVudCgnI2ctcmVjYXB0Y2hhJykubGVuZ3RoIDw9IDAgfHwgY2FwY2hhVmFsKSAmJiAhJHNjb3BlLnN0YXRlRmxhZ1xyXG4gICAgICAgICAgICAgICAgICAgICYmICRzY29wZS5pc1ByZWZpeDFGaWxsZWQgJiYgJHNjb3BlLmlzQWNjTnVtMUZpbGxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJTaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZhbGlkYXRpb25FcnJvclNob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbnVjYXB0Y2hhQW5zRW50ciwgbnVjYXB0Y2hhQW5zRXh0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZW50ZXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudWNhcHRjaGFBbnNFbnRyID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRW50ciA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZW50ZXInKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxmYVN0cmVlU2NhcGV2YWx1ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2lkZW50aXR5JyAgICAgICAgOiAnTEZBX1JFR0lTVEVSX01ZU1RSRUVUU0NBUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZm9ybUZhY3RvcnknICAgICA6IGZvcm1GYWN0b3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdwb3J0Zm9saW9JbmNsdWRlJzogKCRzY29wZS5sZmFTdHJlZXRTY2FwZVJlZ1ZhbHVlLnBvcnRmb2xpbyA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZSA6ICRzY29wZS5sZmFTdHJlZXRTY2FwZVJlZ1ZhbHVlLnBvcnRmb2xpbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RheFNldHVwJzogKCRzY29wZS5sZmFTdHJlZXRTY2FwZVJlZ1ZhbHVlLnRheFNldHVwID09PSB1bmRlZmluZWQpID8gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWUudGF4U2V0dXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdpbnN0aXR1dGVTZXR1cCc6ICgkc2NvcGUubGZhU3RyZWV0U2NhcGVSZWdWYWx1ZS5pbnN0aXR1dGVTZXR1cFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPT09IHVuZGVmaW5lZCkgPyBmYWxzZSA6ICRzY29wZS5sZmFTdHJlZXRTY2FwZVJlZ1ZhbHVlLmluc3RpdHV0ZVNldHVwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZW50aXR5T3JJbnN0aXR1dGlvbmFsTmFtZScgICAgIDogJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWUuRW50aXR5dmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdmaXJzdE5hbWUnICAgICAgICAgICAgICAgICAgICAgOiAkc2NvcGUubGZhU3RyZWV0U2NhcGVSZWdWYWx1ZS5maXJzdE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdtaWRkbGVOYW1lJyAgICAgICAgICAgICAgICAgICAgOiAkc2NvcGUubGZhU3RyZWV0U2NhcGVSZWdWYWx1ZS5taWRkbGVOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbGFzdE5hbWUnICAgICAgICAgICAgICAgICAgICAgIDogJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWUubGFzdE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdhZGRyZXNzTGluZTEnICAgICAgICAgICAgICAgICAgOiAkc2NvcGUubGZhU3RyZWV0U2NhcGVSZWdWYWx1ZS5hZGRyZXNzTGluZTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdhZGRyZXNzTGluZTInICAgICAgICAgICAgICAgICAgOiAkc2NvcGUubGZhU3RyZWV0U2NhcGVSZWdWYWx1ZS5hZGRyZXNzTGluZTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdjaXR5JyAgICAgICAgICAgICAgICAgICAgICAgICAgOiAkc2NvcGUubGZhU3RyZWV0U2NhcGVSZWdWYWx1ZS5jaXR5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc3RhdGUnICAgICAgICAgICAgICAgICAgICAgICAgIDogYW5ndWxhci5lbGVtZW50KCcubGZhU2lnbnVwU3RhdGUnKS50ZXh0KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICd6aXBDb2RlJyAgICAgICAgICAgICAgICAgICAgICAgOiAkc2NvcGUubGZhU3RyZWV0U2NhcGVSZWdWYWx1ZS56aXBjb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAncGhvbmUnICAgICAgICAgICAgICAgICAgICAgICAgIDogJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWUuUGhvbmVudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdlbWFpbCcgICAgICAgICAgICAgICAgICAgICAgICAgOiAkc2NvcGUubGZhU3RyZWV0U2NhcGVSZWdWYWx1ZS5lbWFpbElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZmF4JyAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJHNjb3BlLmxmYVN0cmVldFNjYXBlUmVnVmFsdWUuZmF4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnYWNjTGlzdCcgICAgICAgICAgICAgICAgICAgICAgIDogJHNjb3BlLmFjY0xpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qJ251Y2FwdGNoYS1lcGQnICAgICAgICAgICAgICAgICA6IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1lcGQnKS52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ251Y2FwdGNoYS1hbnN3ZXInICAgICAgICAgICAgICA6IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXInKS52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ251Y2FwdGNoYS1hbnN3ZXItZW50ZXInICAgICAgICA6IG51Y2FwdGNoYUFuc0VudHIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdudWNhcHRjaGEtYW5zd2VyLWV4aXQnICAgICAgICAgOiBudWNhcHRjaGFBbnNFeHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdsbXN1Ym1pdHRlZCcgICAgICAgICAgICAgICAgICAgOiBhbmd1bGFyLmVsZW1lbnQoJyNsbXN1Ym1pdHRlZCcpLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbnVjYXB0Y2hhLWluZGV4JyAgICAgICAgICAgICAgIDogYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWluZGV4JykudmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdudWNhcHRjaGEtZGF0YXR5cGUnICAgICAgICAgICAgOiBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtZGF0YXR5cGUnKS52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ251Y2FwdGNoYS1wdHlwZScgICAgICAgICAgICAgICA6IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1wdHlwZScpLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbnVjYXB0Y2hhLWxhbmd1YWdlJyAgICAgICAgICAgIDogYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWxhbmd1YWdlJykudmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdudWNhcHRjaGEtcmVnaW9uJyAgICAgICAgICAgICAgOiBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtcmVnaW9uJykudmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdudWNhcHRjaGEtbWVkaWEtZG93bmxvYWQtdGltZScgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ251Y2FwdGNoYS1hZHNlcnYtZG93bmxvYWQtdGltZSc6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbnVjYXB0Y2hhLWZhbGxiYWNrLXRva2VuJyAgICAgIDogJycqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZ1JlY2FwdGNoYVJlc3BvbnNlJyAgICAgICAgICAgICAgOiBhbmd1bGFyLmVsZW1lbnQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1Qb3N0U2VydmljZS5mb3JtUG9zdERhdGEoJHNjb3BlLCBsZmFTdHJlZVNjYXBldmFsdWUsIGZ1bmN0aW9uKGRhdGFBamF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhUmVzcG9uY2UgPSBkYXRhQWpheC5kYXRhLnJlc3BvbnNlU3RhdHVzQ29kZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhUmVzcG9uY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ1RJTUVEX09VVCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnVElNRUQgT1VUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnSU5URVJOQUxfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ0lOVEVSTkFMIEVSUk9SJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnQ0FQVENIQV9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnSU5WQUxJRCBDQVBUQ0hBJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnU0VSVklDRV9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnU0VSVklDRSBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ1NVQ0NFU1MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHRrc1BhZ2VVUkwgJiYgJ251bGwnICE9PSB0a3NQYWdlVVJMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGtzUGFnZVVSTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdTVUNDRVNTLiBUaGFuayB5b3UgZm9yIHNoYXJpbmcgeW91ciBpbmZvcm1hdGlvbi4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hY2NMaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmxmYVNpZ251cFN0YXRlJykudGV4dCgnU2VsZWN0IFN0YXRlJykucmVtb3ZlQXR0cihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhLXZhbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5zZS1ib3gtbmV3LWlucHV0JykudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzUHJlZml4MUZpbGxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNBY2NOdW0xRmlsbGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmFjY0xpc3R3cmFwcGVyJykuY2hpbGRyZW4oKS5maXJzdCgpLmZpbmQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5wdXRbbmFtZT1cInByZWZpeFwiXScpLnJlbW92ZUNsYXNzKCdjLWVyci1ib3gnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuYWNjTGlzdHdyYXBwZXInKS5jaGlsZHJlbigpLmZpcnN0KCkuZmluZChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpbnB1dFtuYW1lPVwiYWNjTnVtXCJdJykucmVtb3ZlQ2xhc3MoJ2MtZXJyLWJveCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlRmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sZmFTdHJlZXRTY2FwZVJlZ1ZhbHVlID0ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc2xmYXN0cmVldFNjYXBlUmVnRm9ybUNsaWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWNjTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9uY0NtZE5ld0NoYWxsZW5nZSgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVySGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3YXJuaW5nTXNnID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5sZW5ndGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpc0VyclZhbCA9IGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5lcSgwKS5wYXJlbnQoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vZmZzZXQoKS50b3A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVySGd0ID0gYW5ndWxhci5lbGVtZW50KCcuVG9waGVhZGVyLWxvZ29hcmVhJykub3V0ZXJIZWlnaHQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlzRXJyVmFsID0gKHRpc0VyclZhbCAtIGhlYWRlckhndCkgLSA1MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnaHRtbCwgYm9keScpLnN0b3AoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGlzRXJyVmFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA2MDAsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5lcSgwKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LCAyMDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHRhYmxlVmFsID0gYW5ndWxhci5lbGVtZW50KCcuQXJ0aWNsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7XHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJIZ3QgPSBhbmd1bGFyLmVsZW1lbnQoJy5Ub3BoZWFkZXItbG9nb2FyZWEnKS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIHRhYmxlVmFsID0gKHRhYmxlVmFsIC0gaGVhZGVySGd0KSAtIDIwO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGFibGVWYWxcclxuICAgICAgICAgICAgfSwgODAwKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUuY2xlYXJWYWx1ZXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmlzbGZhc3RyZWV0U2NhcGVSZWdGb3JtQ2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUubGZhU3RyZWV0U2NhcGVSZWdWYWx1ZSA9IHtcclxuXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmxmYVNpZ251cFN0YXRlJykudGV4dCgnU2VsZWN0IFN0YXRlJykucmVtb3ZlQXR0cignZGF0YS12YWwnKTtcclxuICAgICAgICAgICAgJHNjb3BlLnZhbGlkYXRpb25FcnJvclNob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgJHNjb3BlLmFjY0xpc3QgPSBbXTtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLnNlLWJveC1uZXctaW5wdXQnKS52YWwoJycpO1xyXG4gICAgICAgICAgICAkc2NvcGUuaXNQcmVmaXgxRmlsbGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRzY29wZS5pc0FjY051bTFGaWxsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuYWNjTGlzdHdyYXBwZXInKS5jaGlsZHJlbigpLmZpcnN0KCkuZmluZCgnaW5wdXRbbmFtZT1cInByZWZpeFwiXScpLnJlbW92ZUNsYXNzKFxyXG4gICAgICAgICAgICAgICAgJ2MtZXJyLWJveCcpO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5hY2NMaXN0d3JhcHBlcicpLmNoaWxkcmVuKCkuZmlyc3QoKS5maW5kKCdpbnB1dFtuYW1lPVwiYWNjTnVtXCJdJykucmVtb3ZlQ2xhc3MoXHJcbiAgICAgICAgICAgICAgICAnYy1lcnItYm94Jyk7XHJcbiAgICAgICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIHRoaXMgaXMgdG8gYWRkLCAzIGRlZmF1bHQgYWNjb3VudCBudW1iZXIgYm94ZXNcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjYWRkTW9yZUFjY291bnRzJykudHJpZ2dlcignY2xpY2snKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbihmdW5jdGlvbigpIHtcclxuICAgIGxmZ2FwcC5jb250cm9sbGVyKCdsZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1Db250cmwnLCBsZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1Db250cmwpO1xyXG4gICAgbGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtQ29udHJsLiRpbmplY3QgPSBbJyRzY29wZScsICckdGltZW91dCcsICdmb3JtUG9zdFNlcnZpY2UnLCAnJHdpbmRvdyddO1xyXG5cclxuICAgIGZ1bmN0aW9uIGxmYVN0cmVldFNjYXBlVXBkYXRlRm9ybUNvbnRybCgkc2NvcGUsICR0aW1lb3V0LCBmb3JtUG9zdFNlcnZpY2UsICR3aW5kb3cpIHtcclxuICAgICAgICAkc2NvcGUuaXNsZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1DbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XHJcbiAgICAgICAgdmFyIGNsZWFyVmFsdWVzLCB3YXJuaW5nTXNnO1xyXG5cclxuICAgICAgICAvLyB2YXJpYWJsZSBmb3IgYWRkIG1vcmUgYWNjIGZ1bmN0aW9uYWxpdHlcclxuXHJcbiAgICAgICAgJHNjb3BlLmFjY0xpc3QgPSBbXTtcclxuICAgICAgICAkc2NvcGUuYWNjRGVsTGlzdCA9IFtdO1xyXG5cclxuICAgICAgICB2YXIgZm9ybUZhY3RvcjtcclxuXHJcbiAgICAgICAgJChkb2N1bWVudCkub24oJ3Jlc3BvbnNpdmU6c3RhdGVjaGFuZ2VkJywgZnVuY3Rpb24oZSwgcGFyYW0pIHtcclxuICAgICAgICAgICAgZm9ybUZhY3RvciA9IHBhcmFtO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyonKS5yZW1vdmVDbGFzcygnbm9uZScpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgY29tbW9uUmVxdWVzdCA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGNvbW1vblJlcXVlc3RNb2R1bGUgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRyb3BWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbW1vblJlcXVlc3RNb2R1bGUuZHJvcERvd25WYWxpZGF0aW9uID0gZnVuY3Rpb24oaWQsIGZsYWdOYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgZHJvcFZhbHVlID0gYW5ndWxhci5lbGVtZW50KCcjJyArIGlkKS50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZHJvcFZhbHVlICE9PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZVtmbGFnTmFtZV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlW2ZsYWdOYW1lXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29tbW9uUmVxdWVzdE1vZHVsZTtcclxuICAgICAgICB9KSgkc2NvcGUpO1xyXG5cclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ3VsLmN1c3RvbS1zZWxlY3Rib3gtbGlzdC1jb250IGxpJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbW1vblJlcXVlc3QuZHJvcERvd25WYWxpZGF0aW9uKCdjb250YWN0U3RhdGUnLCAnc3RhdGVGbGFnJywgJ1NlbGVjdCBTdGF0ZScpO1xyXG4gICAgICAgICAgICB9LCAyMDApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHRhYmxlVmFsID0gYW5ndWxhci5lbGVtZW50KCcuQXJ0aWNsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7XHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJIZ3QgPSBhbmd1bGFyLmVsZW1lbnQoJy5Ub3BoZWFkZXItbG9nb2FyZWEnKS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIHRhYmxlVmFsID0gKHRhYmxlVmFsIC0gaGVhZGVySGd0KSAtIDIwO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGFibGVWYWxcclxuICAgICAgICAgICAgfSwgODAwKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGUsIHtcclxuICAgICAgICAgICAgJ2lzbGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtQ2xpY2tlZCc6IGZhbHNlLFxyXG4gICAgICAgICAgICAnbGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YScgICAgIDoge1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ3ZhbGlkYXRpb25FcnJvclNob3cnOiBmYWxzZSxcclxuICAgICAgICAgICAgJ3N0YXRlRmxhZycgICAgICAgICAgOiB0cnVlXHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBpc1R3b1ppcENvZGUobmFtZSwgYm9vbGVhblZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnemlwJykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCA9IGJvb2xlYW5WYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJHNjb3BlLm51bWJlckZvcm1hdCA9IGZ1bmN0aW9uKGV2dCwgaW5wdXRWYWx1ZSwgbmFtZSwgemlwT3JQaG9uZSkge1xyXG4gICAgICAgICAgICBpZiAoaW5wdXRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJHNjb3BlLmxmYVN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05LV0vZywgJycpO1xyXG4gICAgICAgICAgICBpZiAoemlwT3JQaG9uZSA9PT0gJ3Bob25lJyB8fCB6aXBPclBob25lID09PSAnZmF4Jykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhdHQgPSAvXihcXGR7M31cXC1cXGR7M30tXFxkezR9KSQvO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAncGhvbmVOdW1iZXInIHx8IG5hbWUgPT09ICdmYXgnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFBob25lRm9ybWF0ID0gIShwYXR0LnRlc3QoJHNjb3BlLmxmYVN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtuYW1lXS5sZW5ndGggPT09IDMgJiYgZXZ0LmtleUNvZGUgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtuYW1lXSA9ICRzY29wZS5sZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW25hbWVdLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8oXFxkezN9KS8sICckMS0nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmxmYVN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0ubGVuZ3RoID09PSA3ICYmIGV2dC5rZXlDb2RlICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxmYVN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxmYVN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0gPSAkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtuYW1lXS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKFxcZHszfSkoXFxkezN9KS8sICckMS0kMi0nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmxmYVN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0ubGVuZ3RoID09PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW25hbWVdID0gJHNjb3BlLmxmYVN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0ucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtuYW1lXS5sZW5ndGggPT09IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxmYVN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0gPSAkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtuYW1lXS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKFxcZHszfSkoXFxkezN9KShcXGR7NH0pLywgJyQxLSQyLSQzJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmlzQ29ycmVjdFBob25lRm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5sZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW25hbWVdLmxlbmd0aCA+PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyID0gJHNjb3BlLmxmYVN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtuYW1lXSA9IHN0ci5zbGljZSgwLCAxMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RQaG9uZUZvcm1hdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh6aXBPclBob25lID09PSAnemlwJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5sZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW25hbWVdLmxlbmd0aCA9PT0gNSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOS1dL2csICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleUNvZGUgPT09IDEwOSB8fCBldnQua2V5Q29kZSA9PT0gMTg5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW25hbWVdID0gJHNjb3BlLmxmYVN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJy0nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtuYW1lXS5sZW5ndGggPiA1ICYmICRzY29wZS5sZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWVdLmxlbmd0aCA8PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXcgUmVnRXhwKCctJykudGVzdCgkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtuYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5sZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW25hbWVdLmxlbmd0aCA9PT0gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXR0WmlwID0gL14oXFxkezV9XFwtXFxkezR9KSQvO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAnemlwJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RaaXBGb3JtYXQgPSAhKHBhdHRaaXAudGVzdCgkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmxmYVN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0ubGVuZ3RoID09PSA5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldnQua2V5Q29kZSA9PT0gMTA5IHx8IGV2dC5rZXlDb2RlID09PSAxODkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyMnICsgZXZ0LnRhcmdldC5pZCkuaW5zZXJ0QXRDYXJldCgnLScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgYW5ndWxhci5leHRlbmQoJHNjb3BlLCB7XHJcbiAgICAgICAgICAgICdsZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1TdWJtaXQnOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc2xmYVN0cmVldFNjYXBlVXBkYXRlRm9ybUNsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNhcGNoYVZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnI2ctcmVjYXB0Y2hhLXJlc3BvbnNlJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FwY2hhVmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLnNob3coKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY29tbW9uUmVxdWVzdC5kcm9wRG93blZhbGlkYXRpb24oJ2NvbnRhY3RTdGF0ZScsICdzdGF0ZUZsYWcnLCAnU2VsZWN0IFN0YXRlJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmxmYVVwZGF0ZWZvcm0uJHZhbGlkICYmICEkc2NvcGUuc3RhdGVGbGFnICYmIChhbmd1bGFyLmVsZW1lbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICcjZy1yZWNhcHRjaGEnKS5sZW5ndGggPD0gMCB8fCBjYXBjaGFWYWwpICYmICEkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0XHJcbiAgICAgICAgICAgICAgICAgICAgJiYgISRzY29wZS5pc0NvcnJlY3RQaG9uZUZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJTaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZhbGlkYXRpb25FcnJvclNob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbnVjYXB0Y2hhQW5zRW50ciwgbnVjYXB0Y2hhQW5zRXh0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZW50ZXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudWNhcHRjaGFBbnNFbnRyID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRW50ciA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZW50ZXInKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0cmVlU2NhcGVVcGRhdGVEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnaWRlbnRpdHknICAgICAgICAgICAgICAgICAgICAgIDogJ0xGQV9VUERBVEVfTVlTVFJFRVRTQ0FQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdmb3JtRmFjdG9yJyAgICAgICAgICAgICAgICAgICAgOiBmb3JtRmFjdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAncG9ydGZvbGlvSW5jbHVkZScgICAgICAgICAgICAgIDogJHNjb3BlLmxmYVN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGEucG9ydGZvbGlvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnYWNjZXNzUHJpb3InICAgICAgICAgICAgICAgICAgIDogJHNjb3BlLmxmYVN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGEuYWNjZXNzUHJpb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdteVN0cmVldHNjYXBlSUQnICAgICAgICAgICAgICAgOiAkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YS5zdHJlZXRTY2FwZUlELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnaW5zdGl0dXRpb25hbE5hbWUnICAgICAgICAgICAgIDogJHNjb3BlLmxmYVN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGEuaW5zdGl0dXRpb25hbE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdmaXJzdE5hbWUnICAgICAgICAgICAgICAgICAgICAgOiAkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YS5maXJzdE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdtaWRkbGVOYW1lJyAgICAgICAgICAgICAgICAgICAgOiAkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YS5taWRkbGVJbnRpYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdsYXN0TmFtZScgICAgICAgICAgICAgICAgICAgICAgOiAkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YS5sYXN0TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZHJlc3NMaW5lMScgICAgICAgICAgICAgICAgICA6ICRzY29wZS5sZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhLmFkZHJlc3NMaW5lMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZHJlc3NMaW5lMicgICAgICAgICAgICAgICAgICA6ICRzY29wZS5sZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhLmFkZHJlc3NMaW5lMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NpdHknICAgICAgICAgICAgICAgICAgICAgICAgICA6ICRzY29wZS5sZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhLmNpdHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdzdGF0ZScgICAgICAgICAgICAgICAgICAgICAgICAgOiBhbmd1bGFyLmVsZW1lbnQoJyNjb250YWN0U3RhdGUnKS50ZXh0KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICd6aXBDb2RlJyAgICAgICAgICAgICAgICAgICAgICAgOiAkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YS56aXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdwaG9uZScgICAgICAgICAgICAgICAgICAgICAgICAgOiAkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YS5waG9uZU51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2ZheCcgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICRzY29wZS5sZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhLmZheCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FjY1RvQWRkJyAgICAgICAgICAgICAgICAgICAgICA6ICRzY29wZS5hY2NMaXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnYWNjVG9EZWxldGUnICAgICAgICAgICAgICAgICAgIDogJHNjb3BlLmFjY0RlbExpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdlbWFpbCcgICAgICAgICAgICAgICAgICAgICAgICAgOiAkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YS51cGRhdGVFbWFpbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLyonbnVjYXB0Y2hhLWVwZCcgICAgICAgICAgICAgICAgIDogYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWVwZCcpLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbnVjYXB0Y2hhLWFuc3dlcicgICAgICAgICAgICAgIDogYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlcicpLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbnVjYXB0Y2hhLWFuc3dlci1lbnRlcicgICAgICAgIDogbnVjYXB0Y2hhQW5zRW50cixcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ251Y2FwdGNoYS1hbnN3ZXItZXhpdCcgICAgICAgICA6IG51Y2FwdGNoYUFuc0V4dCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2xtc3VibWl0dGVkJyAgICAgICAgICAgICAgICAgICA6IGFuZ3VsYXIuZWxlbWVudCgnI2xtc3VibWl0dGVkJykudmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdudWNhcHRjaGEtaW5kZXgnICAgICAgICAgICAgICAgOiBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtaW5kZXgnKS52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ251Y2FwdGNoYS1kYXRhdHlwZScgICAgICAgICAgICA6IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1kYXRhdHlwZScpLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbnVjYXB0Y2hhLXB0eXBlJyAgICAgICAgICAgICAgIDogYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLXB0eXBlJykudmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdudWNhcHRjaGEtbGFuZ3VhZ2UnICAgICAgICAgICAgOiBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtbGFuZ3VhZ2UnKS52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ251Y2FwdGNoYS1yZWdpb24nICAgICAgICAgICAgICA6IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1yZWdpb24nKS52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ251Y2FwdGNoYS1tZWRpYS1kb3dubG9hZC10aW1lJyA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbnVjYXB0Y2hhLWFkc2Vydi1kb3dubG9hZC10aW1lJzogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdudWNhcHRjaGEtZmFsbGJhY2stdG9rZW4nICAgICAgOiAnJyovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdnUmVjYXB0Y2hhUmVzcG9uc2UnICAgICAgICAgICAgICA6IGFuZ3VsYXIuZWxlbWVudCgnI2ctcmVjYXB0Y2hhLXJlc3BvbnNlJykudmFsKClcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncGF5bG9hZCcgLCBzdHJlZVNjYXBlVXBkYXRlRGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1Qb3N0U2VydmljZS5mb3JtUG9zdERhdGEoJHNjb3BlLCBzdHJlZVNjYXBlVXBkYXRlRGF0YSwgZnVuY3Rpb24oZGF0YUFqYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFSZXNwb25jZSA9IGRhdGFBamF4LmRhdGEucmVzcG9uc2VTdGF0dXNDb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFSZXNwb25jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzU3VjY2VzcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3BvbmNlID09PSAnVElNRURfT1VUJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdUSU1FRCBPVVQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uY2UgPT09ICdJTlRFUk5BTF9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnSU5URVJOQUwgRVJST1InO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uY2UgPT09ICdDQVBUQ0hBX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdJTlZBTElEIENBUFRDSEEnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uY2UgPT09ICdTRVJWSUNFX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdTRVJWSUNFIEVSUk9SJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnU1VDQ0VTUycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gdGtzUGFnZVVSTCAmJiAnbnVsbCcgIT09IHRrc1BhZ2VVUkwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzU3VjY2VzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2F0aW9uLmhyZWYgPSB0a3NQYWdlVVJMO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2dcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ1NVQ0NFU1MuIFRoYW5rIHlvdSBmb3Igc2hhcmluZyB5b3VyIGluZm9ybWF0aW9uLic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubGZhU2lnbnVwU3RhdGUnKS50ZXh0KCdTZWxlY3QgU3RhdGUnKS5yZW1vdmVBdHRyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEtdmFsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hY2NMaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hY2NEZWxMaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLnNlLWJveC1uZXctaW5wdXQnKS52YWwoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlRmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sZmFTdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhID0ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc2xmYVN0cmVldFNjYXBlVXBkYXRlRm9ybUNsaWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWNjTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hY2NEZWxMaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2gtd3JhcHBlcicpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuY0NtZE5ld0NoYWxsZW5nZSgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVySGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3YXJuaW5nTXNnID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5sZW5ndGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpc0VyclZhbCA9IGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5lcSgwKS5wYXJlbnQoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vZmZzZXQoKS50b3A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVySGd0ID0gYW5ndWxhci5lbGVtZW50KCcuVG9waGVhZGVyLWxvZ29hcmVhJykub3V0ZXJIZWlnaHQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlzRXJyVmFsID0gKHRpc0VyclZhbCAtIGhlYWRlckhndCkgLSA1MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnaHRtbCwgYm9keScpLnN0b3AoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGlzRXJyVmFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA2MDAsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5lcSgwKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LCAyMDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgJ2NsZWFyVmFsdWVzJzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YSA9IHtcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzbGZhU3RyZWV0U2NhcGVVcGRhdGVGb3JtQ2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubGZhU2lnbnVwU3RhdGUnKS50ZXh0KCdTZWxlY3QgU3RhdGUnKS5yZW1vdmVBdHRyKCdkYXRhLXZhbCcpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFjY0xpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hY2NEZWxMaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5zZS1ib3gtbmV3LWlucHV0JykudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHRoaXMgaXMgdG8gYWRkLCAzIGRlZmF1bHQgYWNjb3VudCBudW1iZXIgYm94ZXNcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjYWRkTW9yZUFjY291bnRzJykudHJpZ2dlcignY2xpY2snKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyB0aGlzIGlzIHRvIGFkZCwgMyBkZWZhdWx0IGFjY291bnQgbnVtYmVyIGJveGVzXHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2FkZERlbE1vcmVBY2NvdW50cycpLnRyaWdnZXIoJ2NsaWNrJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSkoKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcbiAgICBsZmdhcHAuY29udHJvbGxlcignc3RyZWV0U2NhcGVSZWdGb3JtQ29udHJsJywgc3RyZWV0U2NhcGVSZWdGb3JtQ29udHJsKTtcclxuICAgIHN0cmVldFNjYXBlUmVnRm9ybUNvbnRybC4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyRzY29wZScsICckdGltZW91dCcsICdmb3JtUG9zdFNlcnZpY2UnLCAnJHdpbmRvdyddO1xyXG5cclxuICAgIGZ1bmN0aW9uIHN0cmVldFNjYXBlUmVnRm9ybUNvbnRybCgkcm9vdFNjb3BlLCAkc2NvcGUsICR0aW1lb3V0LCBmb3JtUG9zdFNlcnZpY2UsICR3aW5kb3cpIHtcclxuICAgICAgICAkc2NvcGUuaXNzdHJlZXRTY2FwZVJlZ0Zvcm1DbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLnZhbGlkYXRpb25FcnJvclNob3cgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLnRvcGljRmxhZyA9IHRydWU7XHJcbiAgICAgICAgdmFyIGZvcm1GYWN0b3I7XHJcblxyXG4gICAgICAgIC8vIHZhcmlhYmxlIGZvciBhZGQgbW9yZSBhY2MgZnVuY3Rpb25hbGl0eVxyXG4gICAgICAgICRzY29wZS5hY2NMaXN0ID0gW107XHJcbiAgICAgICAgJHNjb3BlLmlzUHJlZml4MUZpbGxlZCA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5pc0FjY051bTFGaWxsZWQgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUud2F0Y2hQcmVmaXhhbmRBY2NOdW0gPSBmdW5jdGlvbihwcmVmaXhWYWx1ZSwgYWNjTnVtVmFsdWUpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmlzUHJlZml4MUZpbGxlZCA9IHByZWZpeFZhbHVlO1xyXG4gICAgICAgICAgICAkc2NvcGUuaXNBY2NOdW0xRmlsbGVkID0gYWNjTnVtVmFsdWU7XHJcbiAgICAgICAgICAgIGlmICghJHNjb3BlLmlzUHJlZml4MUZpbGxlZCAmJiAkc2NvcGUuaXNzdHJlZXRTY2FwZVJlZ0Zvcm1DbGlja2VkKSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5hY2NMaXN0d3JhcHBlcicpLmNoaWxkcmVuKCkuZmlyc3QoKS5maW5kKCdpbnB1dFtuYW1lPVwicHJlZml4XCJdJykuYWRkQ2xhc3MoXHJcbiAgICAgICAgICAgICAgICAgICAgJ2MtZXJyLWJveCcpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5pc1ByZWZpeDFGaWxsZWQgJiYgJHNjb3BlLmlzc3RyZWV0U2NhcGVSZWdGb3JtQ2xpY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuYWNjTGlzdHdyYXBwZXInKS5jaGlsZHJlbigpLmZpcnN0KCkuZmluZCgnaW5wdXRbbmFtZT1cInByZWZpeFwiXScpLnJlbW92ZUNsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICdjLWVyci1ib3gnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoISRzY29wZS5pc0FjY051bTFGaWxsZWQgJiYgJHNjb3BlLmlzc3RyZWV0U2NhcGVSZWdGb3JtQ2xpY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuYWNjTGlzdHdyYXBwZXInKS5jaGlsZHJlbigpLmZpcnN0KCkuZmluZCgnaW5wdXRbbmFtZT1cImFjY051bVwiXScpLmFkZENsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICdjLWVyci1ib3gnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUuaXNBY2NOdW0xRmlsbGVkICYmICRzY29wZS5pc3N0cmVldFNjYXBlUmVnRm9ybUNsaWNrZWQpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmFjY0xpc3R3cmFwcGVyJykuY2hpbGRyZW4oKS5maXJzdCgpLmZpbmQoJ2lucHV0W25hbWU9XCJhY2NOdW1cIl0nKS5yZW1vdmVDbGFzcyhcclxuICAgICAgICAgICAgICAgICAgICAnYy1lcnItYm94Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkKGRvY3VtZW50KS5vbigncmVzcG9uc2l2ZTpzdGF0ZWNoYW5nZWQnLCBmdW5jdGlvbihlLCBwYXJhbSkge1xyXG4gICAgICAgICAgICBmb3JtRmFjdG9yID0gcGFyYW07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnKicpLnJlbW92ZUNsYXNzKCdub25lJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XHJcbiAgICAgICAgdmFyIGNsZWFyVmFsdWVzLCB3YXJuaW5nTXNnO1xyXG5cclxuICAgICAgICB2YXIgY29tbW9uUmVxdWVzdCA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGNvbW1vblJlcXVlc3RNb2R1bGUgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRyb3BWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbW1vblJlcXVlc3RNb2R1bGUuZHJvcERvd25WYWxpZGF0aW9uID0gZnVuY3Rpb24oaWQsIGZsYWdOYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgZHJvcFZhbHVlID0gYW5ndWxhci5lbGVtZW50KCcjJyArIGlkKS50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZHJvcFZhbHVlICE9PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZVtmbGFnTmFtZV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlW2ZsYWdOYW1lXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29tbW9uUmVxdWVzdE1vZHVsZTtcclxuICAgICAgICB9KSgkc2NvcGUpO1xyXG5cclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ3VsLmN1c3RvbS1zZWxlY3Rib3gtbGlzdC1jb250IGxpJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbW1vblJlcXVlc3QuZHJvcERvd25WYWxpZGF0aW9uKCdjb250YWN0U3RhdGUnLCAnc3RhdGVGbGFnJywgJ1NlbGVjdCBTdGF0ZScpO1xyXG4gICAgICAgICAgICB9LCAyMDApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBpc1R3b1ppcENvZGUobmFtZSwgYm9vbGVhblZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnemlwJykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCA9IGJvb2xlYW5WYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUubnVtYmVyRm9ybWF0ID0gZnVuY3Rpb24oZXZ0LCBpbnB1dFZhbHVlLCBuYW1lLCB6aXBPclBob25lKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dFZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUuc3RyZWV0U2NhcGVSZWdWYWx1ZVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTktXS9nLCAnJyk7XHJcbiAgICAgICAgICAgIGlmICh6aXBPclBob25lID09PSAncGhvbmUnIHx8IHppcE9yUGhvbmUgPT09ICdmYXgnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGF0dCA9IC9eKFxcZHszfVxcLVxcZHszfS1cXGR7NH0pJC87XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdwaG9uZU51bWJlcicgfHwgbmFtZSA9PT0gJ2ZheCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0UGhvbmVGb3JtYXQgPSAhKHBhdHQudGVzdCgkc2NvcGUuc3RyZWV0U2NhcGVSZWdWYWx1ZVtuYW1lXSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdLmxlbmd0aCA9PT0gMyAmJiBldnQua2V5Q29kZSAhPT0gOCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdID0gJHNjb3BlLnN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV0ucmVwbGFjZSgvKFxcZHszfSkvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnJDEtJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdLmxlbmd0aCA9PT0gNyAmJiBldnQua2V5Q29kZSAhPT0gOCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdID0gJHNjb3BlLnN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV0ucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgLyhcXGR7M30pKFxcZHszfSkvLCAnJDEtJDItJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdLmxlbmd0aCA9PT0gMTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RyZWV0U2NhcGVSZWdWYWx1ZVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RyZWV0U2NhcGVSZWdWYWx1ZVtuYW1lXSA9ICRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8oXFxkezN9KShcXGR7M30pKFxcZHs0fSkvLCAnJDEtJDItJDMnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLnN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV0ubGVuZ3RoID09PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdID0gJHNjb3BlLnN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV0ucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pc0NvcnJlY3RQaG9uZUZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc3RyZWV0U2NhcGVSZWdWYWx1ZVtuYW1lXS5sZW5ndGggPj0gMTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9ICRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV0gPSBzdHIuc2xpY2UoMCwgMTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0UGhvbmVGb3JtYXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoemlwT3JQaG9uZSA9PT0gJ3ppcCcpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc3RyZWV0U2NhcGVSZWdWYWx1ZVtuYW1lXS5sZW5ndGggPT09IDUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RyZWV0U2NhcGVSZWdWYWx1ZVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTktXS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2dC5rZXlDb2RlID09PSAxMDkgfHwgZXZ0LmtleUNvZGUgPT09IDE4OSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RyZWV0U2NhcGVSZWdWYWx1ZVtuYW1lXSA9ICRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdICsgJy0nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUuc3RyZWV0U2NhcGVSZWdWYWx1ZVtuYW1lXS5sZW5ndGggPiA1ICYmICRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgIDw9IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ldyBSZWdFeHAoJy0nKS50ZXN0KCRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnN0cmVldFNjYXBlUmVnVmFsdWVbbmFtZV0ubGVuZ3RoID09PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdHRaaXAgPSAvXihcXGR7NX1cXC1cXGR7NH0pJC87XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICd6aXAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCA9ICEocGF0dFppcC50ZXN0KCRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlW25hbWVdLmxlbmd0aCA9PT0gOSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleUNvZGUgPT09IDEwOSB8fCBldnQua2V5Q29kZSA9PT0gMTg5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjJyArIGV2dC50YXJnZXQuaWQpLmluc2VydEF0Q2FyZXQoJy0nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgYW5ndWxhci5leHRlbmQoJHNjb3BlLCB7XHJcbiAgICAgICAgICAgICdpc3N0cmVldFNjYXBlUmVnRm9ybUNsaWNrZWQnOiBmYWxzZSxcclxuICAgICAgICAgICAgJ3N0cmVldFNjYXBlUmVnVmFsdWUnICAgICAgICA6IHtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICd2YWxpZGF0aW9uRXJyb3JTaG93JzogZmFsc2UsXHJcbiAgICAgICAgICAgICdzdGF0ZUZsYWcnICAgICAgICAgIDogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGUsIHtcclxuICAgICAgICAgICAgJ3N0cmVldFNjYXBlRm9ybVN1Ym1pdCc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzc3RyZWV0U2NhcGVSZWdGb3JtQ2xpY2tlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUuaXNQcmVmaXgxRmlsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuYWNjTGlzdHdyYXBwZXInKS5jaGlsZHJlbigpLmZpcnN0KCkuZmluZCgnaW5wdXRbbmFtZT1cInByZWZpeFwiXScpLmFkZENsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnYy1lcnItYm94Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUuaXNQcmVmaXgxRmlsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuYWNjTGlzdHdyYXBwZXInKS5jaGlsZHJlbigpLmZpcnN0KCkuZmluZCgnaW5wdXRbbmFtZT1cImFjY051bVwiXScpLmFkZENsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnYy1lcnItYm94Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGNhcGNoYVZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnI2ctcmVjYXB0Y2hhLXJlc3BvbnNlJykudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNhcGNoYVZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb21tb25SZXF1ZXN0LmRyb3BEb3duVmFsaWRhdGlvbignY29udGFjdFN0YXRlJywgJ3N0YXRlRmxhZycsICdTZWxlY3QgU3RhdGUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnN0cmVldFNjYXBlUmVnRm9ybS4kdmFsaWQgJiYgISRzY29wZS5zdGF0ZUZsYWcgJiYgKGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyNnLXJlY2FwdGNoYScpLmxlbmd0aCA8PSAwIHx8IGNhcGNoYVZhbCkgJiYgISRzY29wZS5pc0NvcnJlY3RaaXBGb3JtYXRcclxuICAgICAgICAgICAgICAgICAgICAmJiAhJHNjb3BlLmlzQ29ycmVjdFBob25lRm9ybWF0ICYmICRzY29wZS5pc1ByZWZpeDFGaWxsZWQgJiYgJHNjb3BlLmlzQWNjTnVtMUZpbGxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJTaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG51Y2FwdGNoYUFuc0VudHIsIG51Y2FwdGNoYUFuc0V4dDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRW50ciA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG51Y2FwdGNoYUFuc0VudHIgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1leGl0JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1leGl0JykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyZWVTY2FwZXZhbHVlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnaWRlbnRpdHknICA6ICdMRlNfUkVHSVNURVJfTVlTVFJFRVRTQ0FQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdmb3JtRmFjdG9yJzogZm9ybUZhY3RvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3BvcnRmb2xpbycgOiAoJHNjb3BlLnN0cmVldFNjYXBlUmVnVmFsdWUucG9ydGZvbGlvID09PSB1bmRlZmluZWQpID8gZmFsc2UgOiAkc2NvcGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdHJlZXRTY2FwZVJlZ1ZhbHVlLnBvcnRmb2xpbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RheFNldHVwJzogKCRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlLnRheFNldHVwID09PSB1bmRlZmluZWQpID8gZmFsc2UgOiAkc2NvcGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdHJlZXRTY2FwZVJlZ1ZhbHVlLnRheFNldHVwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnaW5zdGl0dXRlU2V0dXAnOiAoJHNjb3BlLnN0cmVldFNjYXBlUmVnVmFsdWUuaW5zdGl0dXRlU2V0dXAgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2UgOiAkc2NvcGUuc3RyZWV0U2NhcGVSZWdWYWx1ZS5pbnN0aXR1dGVTZXR1cCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2VudGl0eU9ySW5zdGl0dXRpb25hbE5hbWUnICAgICA6ICRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlLm5vdGlmaWVyTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2ZpcnN0TmFtZScgICAgICAgICAgICAgICAgICAgICA6ICRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlLm5vdGlmaWVyRmlyc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWlkZGxlTmFtZScgICAgICAgICAgICAgICAgICAgIDogJHNjb3BlLnN0cmVldFNjYXBlUmVnVmFsdWUubWlkZGxlTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2xhc3ROYW1lJyAgICAgICAgICAgICAgICAgICAgICA6ICRzY29wZS5zdHJlZXRTY2FwZVJlZ1ZhbHVlLm5vdGlmaWVyTGFzdE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdhZGRyZXNzTGluZTEnICAgICAgICAgICAgICAgICAgOiAkc2NvcGUuc3RyZWV0U2NhcGVSZWdWYWx1ZS5hZGRyZXNzTGluZTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdhZGRyZXNzTGluZTInICAgICAgICAgICAgICAgICAgOiAkc2NvcGUuc3RyZWV0U2NhcGVSZWdWYWx1ZS5hZGRyZXNzTGluZTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdjaXR5JyAgICAgICAgICAgICAgICAgICAgICAgICAgOiAkc2NvcGUuc3RyZWV0U2NhcGVSZWdWYWx1ZS5jaXR5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc3RhdGUnICAgICAgICAgICAgICAgICAgICAgICAgIDogYW5ndWxhci5lbGVtZW50KCcjY29udGFjdFN0YXRlJykudGV4dCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnemlwQ29kZScgICAgICAgICAgICAgICAgICAgICAgIDogJHNjb3BlLnN0cmVldFNjYXBlUmVnVmFsdWUuemlwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAncGhvbmUnICAgICAgICAgICAgICAgICAgICAgICAgIDogJHNjb3BlLnN0cmVldFNjYXBlUmVnVmFsdWUuUGhvbmVudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdmYXgnICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAkc2NvcGUuc3RyZWV0U2NhcGVSZWdWYWx1ZS5mYXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdlbWFpbCcgICAgICAgICAgICAgICAgICAgICAgICAgOiAkc2NvcGUuc3RyZWV0U2NhcGVSZWdWYWx1ZS5lbWFpbElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnYWNjTGlzdCcgICAgICAgICAgICAgICAgICAgICAgIDogJHNjb3BlLmFjY0xpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qJ251Y2FwdGNoYS1lcGQnICAgICAgICAgICAgICAgICA6IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1lcGQnKS52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ251Y2FwdGNoYS1hbnN3ZXInICAgICAgICAgICAgICA6IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXInKS52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ251Y2FwdGNoYS1hbnN3ZXItZW50ZXInICAgICAgICA6IG51Y2FwdGNoYUFuc0VudHIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdudWNhcHRjaGEtYW5zd2VyLWV4aXQnICAgICAgICAgOiBudWNhcHRjaGFBbnNFeHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdsbXN1Ym1pdHRlZCcgICAgICAgICAgICAgICAgICAgOiBhbmd1bGFyLmVsZW1lbnQoJyNsbXN1Ym1pdHRlZCcpLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbnVjYXB0Y2hhLWluZGV4JyAgICAgICAgICAgICAgIDogYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWluZGV4JykudmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdudWNhcHRjaGEtZGF0YXR5cGUnICAgICAgICAgICAgOiBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtZGF0YXR5cGUnKS52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ251Y2FwdGNoYS1wdHlwZScgICAgICAgICAgICAgICA6IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1wdHlwZScpLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbnVjYXB0Y2hhLWxhbmd1YWdlJyAgICAgICAgICAgIDogYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWxhbmd1YWdlJykudmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdudWNhcHRjaGEtcmVnaW9uJyAgICAgICAgICAgICAgOiBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtcmVnaW9uJykudmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdudWNhcHRjaGEtbWVkaWEtZG93bmxvYWQtdGltZScgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ251Y2FwdGNoYS1hZHNlcnYtZG93bmxvYWQtdGltZSc6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbnVjYXB0Y2hhLWZhbGxiYWNrLXRva2VuJyAgICAgIDogJycqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZ1JlY2FwdGNoYVJlc3BvbnNlJyAgICAgICAgICAgICAgOiBhbmd1bGFyLmVsZW1lbnQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJyZWcgZm9ybSBkYXRhXCIsc3RyZWVTY2FwZXZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBhbGVydChzdHJlZVNjYXBldmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1Qb3N0U2VydmljZS5mb3JtUG9zdERhdGEoJHNjb3BlLCBzdHJlZVNjYXBldmFsdWUsIGZ1bmN0aW9uKGRhdGFBamF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhUmVzcG9uY2UgPSBkYXRhQWpheC5kYXRhLnJlc3BvbnNlU3RhdHVzQ29kZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhUmVzcG9uY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ1RJTUVEX09VVCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnVElNRUQgT1VUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnSU5URVJOQUxfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ0lOVEVSTkFMIEVSUk9SJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnQ0FQVENIQV9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnSU5WQUxJRCBDQVBUQ0hBJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnU0VSVklDRV9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnU0VSVklDRSBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ1NVQ0NFU1MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHRrc1BhZ2VVUkwgJiYgJ251bGwnICE9PSB0a3NQYWdlVVJMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24uaHJlZiA9IHRrc1BhZ2VVUkw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzU3VjY2VzcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnU1VDQ0VTUy4gVGhhbmsgeW91IGZvciBzaGFyaW5nIHlvdXIgaW5mb3JtYXRpb24uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWNjTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5zZS1ib3gtbmV3LWlucHV0JykudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubGZzU2lnbnVwU3RhdGUnKS50ZXh0KCdTZWxlY3QgU3RhdGUnKS5yZW1vdmVBdHRyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEtdmFsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1ByZWZpeDFGaWxsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQWNjTnVtMUZpbGxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5hY2NMaXN0d3JhcHBlcicpLmNoaWxkcmVuKCkuZmlyc3QoKS5maW5kKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lucHV0W25hbWU9XCJwcmVmaXhcIl0nKS5yZW1vdmVDbGFzcygnYy1lcnItYm94Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmFjY0xpc3R3cmFwcGVyJykuY2hpbGRyZW4oKS5maXJzdCgpLmZpbmQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5wdXRbbmFtZT1cImFjY051bVwiXScpLnJlbW92ZUNsYXNzKCdjLWVyci1ib3gnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZUZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RyZWV0U2NhcGVSZWdWYWx1ZSA9IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNzdHJlZXRTY2FwZVJlZ0Zvcm1DbGlja2VkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hY2NMaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2gtd3JhcHBlcicpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuY0NtZE5ld0NoYWxsZW5nZSgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVySGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3YXJuaW5nTXNnID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5sZW5ndGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpc0VyclZhbCA9IGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5lcSgwKS5wYXJlbnQoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vZmZzZXQoKS50b3A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVySGd0ID0gYW5ndWxhci5lbGVtZW50KCcuVG9waGVhZGVyLWxvZ29hcmVhJykub3V0ZXJIZWlnaHQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlzRXJyVmFsID0gKHRpc0VyclZhbCAtIGhlYWRlckhndCkgLSA1MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnaHRtbCwgYm9keScpLnN0b3AoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGlzRXJyVmFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA2MDAsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5lcSgwKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LCAyMDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgdGFibGVWYWwgPSBhbmd1bGFyLmVsZW1lbnQoJy5BcnRpY2xlQ29udGVudCcpLm9mZnNldCgpLnRvcDtcclxuICAgICAgICAgICAgdmFyIGhlYWRlckhndCA9IGFuZ3VsYXIuZWxlbWVudCgnLlRvcGhlYWRlci1sb2dvYXJlYScpLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICAgICAgdGFibGVWYWwgPSAodGFibGVWYWwgLSBoZWFkZXJIZ3QpIC0gMjA7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnaHRtbCwgYm9keScpLnN0b3AoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICdzY3JvbGxUb3AnOiB0YWJsZVZhbFxyXG4gICAgICAgICAgICB9LCA4MDApO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5jbGVhclZhbHVlcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuc3RyZWV0U2NhcGVSZWdWYWx1ZSA9IHtcclxuXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5pc3N0cmVldFNjYXBlUmVnRm9ybUNsaWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubGZzU2lnbnVwU3RhdGUnKS50ZXh0KCdTZWxlY3QgU3RhdGUnKS5yZW1vdmVBdHRyKCdkYXRhLXZhbCcpO1xyXG4gICAgICAgICAgICAkc2NvcGUuYWNjTGlzdCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJhZnRlciBjbGVhcmVkXCIsICRzY29wZS5hY2NMaXN0KTtcclxuICAgICAgICAgICAgJHNjb3BlLnZhbGlkYXRpb25FcnJvclNob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLnNlLWJveC1uZXctaW5wdXQnKS52YWwoJycpO1xyXG4gICAgICAgICAgICAkc2NvcGUuaXNQcmVmaXgxRmlsbGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRzY29wZS5pc0FjY051bTFGaWxsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuYWNjTGlzdHdyYXBwZXInKS5jaGlsZHJlbigpLmZpcnN0KCkuZmluZCgnaW5wdXRbbmFtZT1cInByZWZpeFwiXScpLnJlbW92ZUNsYXNzKFxyXG4gICAgICAgICAgICAgICAgJ2MtZXJyLWJveCcpO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5hY2NMaXN0d3JhcHBlcicpLmNoaWxkcmVuKCkuZmlyc3QoKS5maW5kKCdpbnB1dFtuYW1lPVwiYWNjTnVtXCJdJykucmVtb3ZlQ2xhc3MoXHJcbiAgICAgICAgICAgICAgICAnYy1lcnItYm94Jyk7XHJcbiAgICAgICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIHRoaXMgaXMgdG8gYWRkLCAzIGRlZmF1bHQgYWNjb3VudCBudW1iZXIgYm94ZXNcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjYWRkTW9yZUFjY291bnRzJykudHJpZ2dlcignY2xpY2snKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbihmdW5jdGlvbigpIHtcclxuICAgIGxmZ2FwcC5jb250cm9sbGVyKCdzdHJlZXRTY2FwZVVwZGF0ZUZvcm1Db250cmwnLCBzdHJlZXRTY2FwZVVwZGF0ZUZvcm1Db250cmwpO1xyXG4gICAgc3RyZWV0U2NhcGVVcGRhdGVGb3JtQ29udHJsLiRpbmplY3QgPSBbJyRzY29wZScsICckdGltZW91dCcsICdmb3JtUG9zdFNlcnZpY2UnLCAnJHdpbmRvdyddO1xyXG5cclxuICAgIGZ1bmN0aW9uIHN0cmVldFNjYXBlVXBkYXRlRm9ybUNvbnRybCgkc2NvcGUsICR0aW1lb3V0LCBmb3JtUG9zdFNlcnZpY2UsICR3aW5kb3cpIHtcclxuICAgICAgICAkc2NvcGUuaXNzdHJlZXRTY2FwZVVwZGF0ZUZvcm1DbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XHJcbiAgICAgICAgdmFyIGNsZWFyVmFsdWVzLCB3YXJuaW5nTXNnO1xyXG5cclxuICAgICAgICAvLyB2YXJpYWJsZSBmb3IgYWRkIG1vcmUgYWNjIGZ1bmN0aW9uYWxpdHlcclxuXHJcbiAgICAgICAgJHNjb3BlLmFjY0xpc3QgPSBbXTtcclxuICAgICAgICAkc2NvcGUuYWNjRGVsTGlzdCA9IFtdO1xyXG5cclxuICAgICAgICB2YXIgZm9ybUZhY3RvcjtcclxuXHJcbiAgICAgICAgJChkb2N1bWVudCkub24oJ3Jlc3BvbnNpdmU6c3RhdGVjaGFuZ2VkJywgZnVuY3Rpb24oZSwgcGFyYW0pIHtcclxuICAgICAgICAgICAgZm9ybUZhY3RvciA9IHBhcmFtO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyonKS5yZW1vdmVDbGFzcygnbm9uZScpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgY29tbW9uUmVxdWVzdCA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGNvbW1vblJlcXVlc3RNb2R1bGUgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRyb3BWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbW1vblJlcXVlc3RNb2R1bGUuZHJvcERvd25WYWxpZGF0aW9uID0gZnVuY3Rpb24oaWQsIGZsYWdOYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgZHJvcFZhbHVlID0gYW5ndWxhci5lbGVtZW50KCcjJyArIGlkKS50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZHJvcFZhbHVlICE9PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZVtmbGFnTmFtZV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlW2ZsYWdOYW1lXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29tbW9uUmVxdWVzdE1vZHVsZTtcclxuICAgICAgICB9KSgkc2NvcGUpO1xyXG5cclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ3VsLmN1c3RvbS1zZWxlY3Rib3gtbGlzdC1jb250IGxpJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbW1vblJlcXVlc3QuZHJvcERvd25WYWxpZGF0aW9uKCdjb250YWN0U3RhdGUnLCAnc3RhdGVGbGFnJywgJ1NlbGVjdCBTdGF0ZScpO1xyXG4gICAgICAgICAgICB9LCAyMDApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGUsIHtcclxuICAgICAgICAgICAgJ2lzc3RyZWV0U2NhcGVVcGRhdGVGb3JtQ2xpY2tlZCc6IGZhbHNlLFxyXG4gICAgICAgICAgICAnc3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YScgICAgIDoge1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ3ZhbGlkYXRpb25FcnJvclNob3cnOiBmYWxzZSxcclxuICAgICAgICAgICAgJ3N0YXRlRmxhZycgICAgICAgICAgOiB0cnVlXHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBpc1R3b1ppcENvZGUobmFtZSwgYm9vbGVhblZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnemlwJykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCA9IGJvb2xlYW5WYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJHNjb3BlLnZhbGlkYXRlU3RyZWV0U2NhcElkID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLm51bWJlckZvcm1hdCA9IGZ1bmN0aW9uKGV2dCwgaW5wdXRWYWx1ZSwgbmFtZSwgemlwT3JQaG9uZSkge1xyXG4gICAgICAgICAgICBpZiAoaW5wdXRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05LV0vZywgJycpO1xyXG4gICAgICAgICAgICBpZiAoemlwT3JQaG9uZSA9PT0gJ3Bob25lJyB8fCB6aXBPclBob25lID09PSAnZmF4Jykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhdHQgPSAvXihcXGR7M31cXC1cXGR7M30tXFxkezR9KSQvO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAncGhvbmVOdW1iZXInIHx8IG5hbWUgPT09ICdmYXgnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFBob25lRm9ybWF0ID0gIShwYXR0LnRlc3QoJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtuYW1lXS5sZW5ndGggPT09IDMgJiYgZXZ0LmtleUNvZGUgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtuYW1lXSA9ICRzY29wZS5zdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW25hbWVdLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8oXFxkezN9KS8sICckMS0nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0ubGVuZ3RoID09PSA3ICYmIGV2dC5rZXlDb2RlICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0gPSAkc2NvcGUuc3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtuYW1lXS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKFxcZHszfSkoXFxkezN9KS8sICckMS0kMi0nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0ubGVuZ3RoID09PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW25hbWVdID0gJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0ucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUuc3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtuYW1lXS5sZW5ndGggPT09IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0gPSAkc2NvcGUuc3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtuYW1lXS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKFxcZHszfSkoXFxkezN9KShcXGR7NH0pLywgJyQxLSQyLSQzJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmlzQ29ycmVjdFBob25lRm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5zdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW25hbWVdLmxlbmd0aCA+PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyID0gJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtuYW1lXSA9IHN0ci5zbGljZSgwLCAxMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RQaG9uZUZvcm1hdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh6aXBPclBob25lID09PSAnemlwJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5zdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW25hbWVdLmxlbmd0aCA9PT0gNSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOS1dL2csICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleUNvZGUgPT09IDEwOSB8fCBldnQua2V5Q29kZSA9PT0gMTg5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW25hbWVdID0gJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0gKyAnLSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5zdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW25hbWVdLmxlbmd0aCA+IDUgJiYgJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZV0ubGVuZ3RoIDw9IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ldyBSZWdFeHAoJy0nKS50ZXN0KCRzY29wZS5zdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW25hbWVdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGFbbmFtZV0ubGVuZ3RoID09PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdHRaaXAgPSAvXihcXGR7NX1cXC1cXGR7NH0pJC87XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICd6aXAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCA9ICEocGF0dFppcC50ZXN0KCRzY29wZS5zdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUuc3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YVtuYW1lXS5sZW5ndGggPT09IDkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2dC5rZXlDb2RlID09PSAxMDkgfHwgZXZ0LmtleUNvZGUgPT09IDE4OSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnIycgKyBldnQudGFyZ2V0LmlkKS5pbnNlcnRBdENhcmV0KCctJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHRhYmxlVmFsID0gYW5ndWxhci5lbGVtZW50KCcuQXJ0aWNsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7XHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJIZ3QgPSBhbmd1bGFyLmVsZW1lbnQoJy5Ub3BoZWFkZXItbG9nb2FyZWEnKS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIHRhYmxlVmFsID0gKHRhYmxlVmFsIC0gaGVhZGVySGd0KSAtIDIwO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGFibGVWYWxcclxuICAgICAgICAgICAgfSwgODAwKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGUsIHtcclxuICAgICAgICAgICAgJ3N0cmVldFNjYXBlVXBkYXRlRm9ybVN1Ym1pdCc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzc3RyZWV0U2NhcGVVcGRhdGVGb3JtQ2xpY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FwY2hhVmFsID0gYW5ndWxhci5lbGVtZW50KCcjZy1yZWNhcHRjaGEtcmVzcG9uc2UnKS52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2FwY2hhVmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLnNob3coKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbW1vblJlcXVlc3QuZHJvcERvd25WYWxpZGF0aW9uKCdjb250YWN0U3RhdGUnLCAnc3RhdGVGbGFnJywgJ1NlbGVjdCBTdGF0ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc3RyZWV0U2NhcGVVcGRhdGVGb3JtLiR2YWxpZCAmJiAhJHNjb3BlLnN0YXRlRmxhZyAmJiAoYW5ndWxhci5lbGVtZW50KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnI2ctcmVjYXB0Y2hhJykubGVuZ3RoIDw9IDAgfHwgY2FwY2hhVmFsKSAmJiAhJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdFxyXG4gICAgICAgICAgICAgICAgICAgICYmICEkc2NvcGUuaXNDb3JyZWN0UGhvbmVGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVyU2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS52YWxpZGF0aW9uRXJyb3JTaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG51Y2FwdGNoYUFuc0VudHIsIG51Y2FwdGNoYUFuc0V4dDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRW50ciA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG51Y2FwdGNoYUFuc0VudHIgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1leGl0JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlci1leGl0JykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHJlZVNjYXBlVXBkYXRlRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2lkZW50aXR5JyAgICAgICAgICAgICAgICAgICAgICA6ICdMRlNfVVBEQVRFX01ZU1RSRUVUU0NBUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZm9ybUZhY3RvcicgICAgICAgICAgICAgICAgICAgIDogZm9ybUZhY3RvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3BvcnRmb2xpb0luY2x1ZGUnICAgICAgICAgICAgICA6ICRzY29wZS5zdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhLnBvcnRmb2xpbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FjY2Vzc1ByaW9yJyAgICAgICAgICAgICAgICAgICA6ICRzY29wZS5zdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhLmFjY2Vzc1ByaW9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbXlTdHJlZXRzY2FwZUlEJyAgICAgICAgICAgICAgIDogJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGEuc3RyZWV0U2NhcGVJRCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2VudGl0eU9ySW5zdGl0dXRpb25hbE5hbWUnICAgICA6ICRzY29wZS5zdHJlZXRTY2FwZVVwZGF0ZUZvcm1EYXRhLmluc3RpdHV0aW9uYWxOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZmlyc3ROYW1lJyAgICAgICAgICAgICAgICAgICAgIDogJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGEuZmlyc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWlkZGxlTmFtZScgICAgICAgICAgICAgICAgICAgIDogJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGEubWlkZGxlSW50aWFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbGFzdE5hbWUnICAgICAgICAgICAgICAgICAgICAgIDogJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGEubGFzdE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdhZGRyZXNzTGluZTEnICAgICAgICAgICAgICAgICAgOiAkc2NvcGUuc3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YS5hZGRyZXNzTGluZTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdhZGRyZXNzTGluZTInICAgICAgICAgICAgICAgICAgOiAkc2NvcGUuc3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YS5hZGRyZXNzTGluZTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdjaXR5JyAgICAgICAgICAgICAgICAgICAgICAgICAgOiAkc2NvcGUuc3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YS5jaXR5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc3RhdGUnICAgICAgICAgICAgICAgICAgICAgICAgIDogYW5ndWxhci5lbGVtZW50KCcjY29udGFjdFN0YXRlJykudGV4dCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnemlwQ29kZScgICAgICAgICAgICAgICAgICAgICAgIDogJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGEuemlwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAncGhvbmUnICAgICAgICAgICAgICAgICAgICAgICAgIDogJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGEucGhvbmVOdW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdmYXgnICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAkc2NvcGUuc3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YS5mYXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdhY2NUb0FkZCcgICAgICAgICAgICAgICAgICAgICAgOiAkc2NvcGUuYWNjTGlzdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FjY1RvRGVsZXRlJyAgICAgICAgICAgICAgICAgICA6ICRzY29wZS5hY2NEZWxMaXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZW1haWwnICAgICAgICAgICAgICAgICAgICAgICAgIDogJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGEudXBkYXRlRW1haWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qJ251Y2FwdGNoYS1lcGQnICAgICAgICAgICAgICAgICA6IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1lcGQnKS52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ251Y2FwdGNoYS1hbnN3ZXInICAgICAgICAgICAgICA6IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXInKS52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ251Y2FwdGNoYS1hbnN3ZXItZW50ZXInICAgICAgICA6IG51Y2FwdGNoYUFuc0VudHIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdudWNhcHRjaGEtYW5zd2VyLWV4aXQnICAgICAgICAgOiBudWNhcHRjaGFBbnNFeHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdsbXN1Ym1pdHRlZCcgICAgICAgICAgICAgICAgICAgOiBhbmd1bGFyLmVsZW1lbnQoJyNsbXN1Ym1pdHRlZCcpLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbnVjYXB0Y2hhLWluZGV4JyAgICAgICAgICAgICAgIDogYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWluZGV4JykudmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdudWNhcHRjaGEtZGF0YXR5cGUnICAgICAgICAgICAgOiBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtZGF0YXR5cGUnKS52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ251Y2FwdGNoYS1wdHlwZScgICAgICAgICAgICAgICA6IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1wdHlwZScpLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbnVjYXB0Y2hhLWxhbmd1YWdlJyAgICAgICAgICAgIDogYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWxhbmd1YWdlJykudmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdudWNhcHRjaGEtcmVnaW9uJyAgICAgICAgICAgICAgOiBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtcmVnaW9uJykudmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdudWNhcHRjaGEtbWVkaWEtZG93bmxvYWQtdGltZScgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ251Y2FwdGNoYS1hZHNlcnYtZG93bmxvYWQtdGltZSc6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbnVjYXB0Y2hhLWZhbGxiYWNrLXRva2VuJyAgICAgIDogJycqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZ1JlY2FwdGNoYVJlc3BvbnNlJyAgICAgICAgICAgICAgOiBhbmd1bGFyLmVsZW1lbnQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3BheWxvYWQnICwgc3RyZWVTY2FwZVVwZGF0ZURhdGEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3JtUG9zdFNlcnZpY2UuZm9ybVBvc3REYXRhKCRzY29wZSwgc3RyZWVTY2FwZVVwZGF0ZURhdGEsIGZ1bmN0aW9uKGRhdGFBamF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhUmVzcG9uY2UgPSBkYXRhQWpheC5kYXRhLnJlc3BvbnNlU3RhdHVzQ29kZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhUmVzcG9uY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ1RJTUVEX09VVCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnVElNRUQgT1VUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnSU5URVJOQUxfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ0lOVEVSTkFMIEVSUk9SJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnQ0FQVENIQV9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnSU5WQUxJRCBDQVBUQ0hBJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnU0VSVklDRV9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnU0VSVklDRSBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ1NVQ0NFU1MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHRrc1BhZ2VVUkwgJiYgJ251bGwnICE9PSB0a3NQYWdlVVJMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGtzUGFnZVVSTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdTVUNDRVNTLiBUaGFuayB5b3UgZm9yIHNoYXJpbmcgeW91ciBpbmZvcm1hdGlvbi4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hY2NMaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hY2NEZWxMaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmxmYVNpZ251cFN0YXRlJykudGV4dCgnU2VsZWN0IFN0YXRlJykucmVtb3ZlQXR0cihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhLXZhbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5zZS1ib3gtbmV3LWlucHV0JykudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZUZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RyZWV0U2NhcGVVcGRhdGVGb3JtRGF0YSA9IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNzdHJlZXRTY2FwZVVwZGF0ZUZvcm1DbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFjY0xpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWNjRGVsTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoLXdyYXBwZXInKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmNDbWROZXdDaGFsbGVuZ2UoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod2FybmluZ01zZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZhbGlkYXRpb25FcnJvclNob3cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aXNFcnJWYWwgPSBhbmd1bGFyLmVsZW1lbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykuZXEoMCkucGFyZW50KClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlckhndCA9IGFuZ3VsYXIuZWxlbWVudCgnLlRvcGhlYWRlci1sb2dvYXJlYScpLm91dGVySGVpZ2h0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpc0VyclZhbCA9ICh0aXNFcnJWYWwgLSBoZWFkZXJIZ3QpIC0gNTA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Njcm9sbFRvcCc6IHRpc0VyclZhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgNjAwLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkuZXEoMCkuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMjAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICdjbGVhclZhbHVlcyc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0cmVldFNjYXBlVXBkYXRlRm9ybURhdGEgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc3N0cmVldFNjYXBlVXBkYXRlRm9ybUNsaWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmxmYVNpZ251cFN0YXRlJykudGV4dCgnU2VsZWN0IFN0YXRlJykucmVtb3ZlQXR0cignZGF0YS12YWwnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hY2NMaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWNjRGVsTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZhbGlkYXRpb25FcnJvclNob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuc2UtYm94LW5ldy1pbnB1dCcpLnZhbCgnJyk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyB0aGlzIGlzIHRvIGFkZCwgMyBkZWZhdWx0IGFjY291bnQgbnVtYmVyIGJveGVzXHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2FkZE1vcmVBY2NvdW50cycpLnRyaWdnZXIoJ2NsaWNrJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gdGhpcyBpcyB0byBhZGQsIDMgZGVmYXVsdCBhY2NvdW50IG51bWJlciBib3hlc1xyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNhZGREZWxNb3JlQWNjb3VudHMnKS50cmlnZ2VyKCdjbGljaycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmNvbnRyb2xsZXIoJ2xpZmVJbnN1cmFuY2VEZWF0aENvbnRybCcsIFsnJHNjb3BlJywgJyR0aW1lb3V0JywgJyR3aW5kb3cnLCAnbGlmZUluc3VyYW5jZURlYXRoU2VydmljZXMnLCBmdW5jdGlvbihcclxuICAgICRzY29wZSwgJHRpbWVvdXQsICR3aW5kb3csIGxpZmVJbnN1cmFuY2VEZWF0aFNlcnZpY2VzKSB7XHJcbiAgICAvKiAkKGRvY3VtZW50KS5sb2FkKGZ1bmN0aW9uICgpIHtcclxuICAgIFx0dmFyIGRhdGE9eyovXHJcbiAgICB1dGFnX2RhdGEuZXZlbnRfYWN0aW9uID0gJ2Zvcm0nO1xyXG4gICAgdXRhZ19kYXRhLmV2ZW50X25hbWUgPSAnTGlmZSBJbnN1cmFuY2UgRGVhdGggTm90aWZpY2F0aW9uJztcclxuICAgIHV0YWdfZGF0YS5ldmVudF90eXBlID0gJ2NsYWltcyc7XHJcbiAgICB1dGFnX2RhdGEuZXZlbnRfdmVyc2lvbiA9ICcyJztcclxuICAgIHV0YWdfZGF0YS5ldmVudF9zdGF0dXMgPSAnc3RhcnQnO1xyXG5cclxuICAgIC8qIH1cclxuXHRcdHV0YWcubGluayhkYXRhKTtcclxuXHR9KTsqL1xyXG5cclxuICAgIHZhciBsaWZlSW5zdXJhbmNlRGVhdGhDb21tb24sIGxpZmVJbnN1cmFuY2VEZWF0aEZhY3Rvciwgd2FybmluZ01zZyxcclxuICAgICAgICBsaWZlSW5zdXJhbmNlQ291bnQgPSAwO1xyXG5cclxuICAgICQoZG9jdW1lbnQpLm9uKCdyZXNwb25zaXZlOnN0YXRlY2hhbmdlZCcsIGZ1bmN0aW9uKGUsIHBhcmFtKSB7XHJcbiAgICAgICAgbGlmZUluc3VyYW5jZURlYXRoRmFjdG9yID0gcGFyYW07XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKiBcdCQoJ2JvZHknKS5vbignZm9jdXMnLFwiLmRpc2FiaWxpdHktZGF0ZS1maWVsZFwiLCBmdW5jdGlvbigpIHtcclxuICAgIFx0XHQkKHRoaXMpLmRhdGVwaWNrZXIoe1xyXG4gICAgXHRcdFx0Y2hhbmdlTW9udGg6IHRydWUsXHJcbiAgICBcdFx0XHRjaGFuZ2VZZWFyOiB0cnVlLFxyXG4gICAgXHRcdFx0eWVhclJhbmdlOiBcIi0yMDA6KzBcIlxyXG4gICAgXHRcdH0pO1xyXG4gICAgXHR9KTtcclxuICAgICAqL1xyXG4gICAgdmFyIGRhdGVQaWMgPSBuZXcgQ2FsZW5kYXIoe1xyXG4gICAgICAgICAgICAnZGF0ZUlkJyAgICAgICA6ICdkYXRlJyxcclxuICAgICAgICAgICAgJ21vbnRoSWQnICAgICAgOiAnbW9udGgnLFxyXG4gICAgICAgICAgICAneWVhcklkJyAgICAgICA6ICd5ZWFyJyxcclxuICAgICAgICAgICAgJ2hpZGRlbklkJyAgICAgOiAnbGlmZURPQm9wdGlvbmFsJyxcclxuICAgICAgICAgICAgJ251bWJlck9mWWVhcnMnOiAxMzBcclxuICAgICAgICB9KSxcclxuICAgICAgICBkYXRlUGljMSA9IG5ldyBDYWxlbmRhcih7XHJcbiAgICAgICAgICAgICdkYXRlSWQnICAgICAgIDogJ2RhdGUxJyxcclxuICAgICAgICAgICAgJ21vbnRoSWQnICAgICAgOiAnbW9udGgxJyxcclxuICAgICAgICAgICAgJ3llYXJJZCcgICAgICAgOiAneWVhcjEnLFxyXG4gICAgICAgICAgICAnaGlkZGVuSWQnICAgICA6ICdpbnN1cmVkX2xpZmVfZGF0ZScsXHJcbiAgICAgICAgICAgICdudW1iZXJPZlllYXJzJzogMTMwXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gaXNUd29aaXBDb2RlKG5hbWUsIGJvb2xlYW5WYWx1ZSkge1xyXG4gICAgICAgIGlmIChuYW1lID09PSAnbm90aWZpZXJaaXBDb2RlJykge1xyXG4gICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0ID0gYm9vbGVhblZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RJbnN1cmVkWmlwRm9ybWF0ID0gYm9vbGVhblZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoUGhvbmVOdW0gPSBmdW5jdGlvbihldnQsIGlucHV0VmFsdWUsIG5hbWUsIHppcE9yUGhvbmUpIHtcclxuICAgICAgICBpZiAoaW5wdXRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05LV0vZywgJycpO1xyXG4gICAgICAgIGlmICh6aXBPclBob25lID09PSAncGhvbmUnKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXR0ID0gL14oXFxkezN9XFwtXFxkezN9LVxcZHs0fSkkLztcclxuXHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnbm90aWZpZXJQcmVmZXJyZWRQaG9uZScpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RGb3JtYXQgPSAhKHBhdHQudGVzdCgkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVtuYW1lXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVtuYW1lXS5sZW5ndGggPT09IDMgJiYgZXZ0LmtleUNvZGUgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGFbbmFtZV0gPSAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVtuYW1lXS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgIC8oXFxkezN9KS8sICckMS0nKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVtuYW1lXS5sZW5ndGggPT09IDcgJiYgZXZ0LmtleUNvZGUgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGFbbmFtZV0gPSAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVtuYW1lXS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgIC8oXFxkezN9KShcXGR7M30pLywgJyQxLSQyLScpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhW25hbWVdLmxlbmd0aCA9PT0gMTIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGFbbmFtZV0gPSAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVtuYW1lXS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgIC8oXFxkezN9KShcXGR7M30pKFxcZHs0fSkvLCAnJDEtJDItJDMnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVtuYW1lXS5sZW5ndGggPT09IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVtuYW1lXSA9ICRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhW25hbWVdLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuaXNDb3JyZWN0Rm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGFbbmFtZV0ubGVuZ3RoID49IDEyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9ICRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhW25hbWVdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVtuYW1lXSA9IHN0ci5zbGljZSgwLCAxMik7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdEZvcm1hdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhW25hbWVdLmxlbmd0aCA+PSAxMikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0ciA9ICRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhW25hbWVdO1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhW25hbWVdID0gc3RyLnNsaWNlKDAsIDEyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoemlwT3JQaG9uZSA9PT0gJ3ppcCcpIHtcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhW25hbWVdLmxlbmd0aCA9PT0gNSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05LV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2dC5rZXlDb2RlID09PSAxMDkgfHwgZXZ0LmtleUNvZGUgPT09IDE4OSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhW25hbWVdID0gJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGFbbmFtZV0gKyAnLSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhW25hbWVdLmxlbmd0aCA+IDUgJiYgJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGFbXHJcbiAgICAgICAgICAgICAgICBuYW1lXS5sZW5ndGggPD0gMTApIHtcclxuICAgICAgICAgICAgICAgIGlmIChuZXcgUmVnRXhwKCctJykudGVzdCgkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVtuYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGFbbmFtZV0ubGVuZ3RoID09PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF0dFppcCA9IC9eKFxcZHs1fVxcLVxcZHs0fSkkLztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAnbm90aWZpZXJaaXBDb2RlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCA9ICEocGF0dFppcC50ZXN0KCRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0SW5zdXJlZFppcEZvcm1hdCA9ICEocGF0dFppcC50ZXN0KCRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVtuYW1lXS5sZW5ndGggPT09IDkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleUNvZGUgPT09IDEwOSB8fCBldnQua2V5Q29kZSA9PT0gMTg5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyMnICsgZXZ0LnRhcmdldC5pZCkuaW5zZXJ0QXRDYXJldCgnLScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgIGxpZmVJbnN1cmFuY2VEZWF0aENvbW1vbiA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgbGlmZUluc3VyYW5jZURlYXRoTW9kdWxlID0ge1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZHJvcFZhbHVlO1xyXG5cclxuICAgICAgICBsaWZlSW5zdXJhbmNlRGVhdGhNb2R1bGUuc3RhdGVEcm9wVmFsaWRhdGlvbiA9IGZ1bmN0aW9uKGlkLCBmbGFnTmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgZHJvcFZhbHVlID0gYW5ndWxhci5lbGVtZW50KCcjJyArIGlkKS50ZXh0KCk7XHJcbiAgICAgICAgICAgIGlmIChkcm9wVmFsdWUgIT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGVbZmxhZ05hbWVdID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGVbZmxhZ05hbWVdID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGlmZUluc3VyYW5jZURlYXRoTW9kdWxlLmNoZWNrRW1wdHlEYXRhID0gZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGRhdGEpID8gZGF0YSA6ICcnO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBsaWZlSW5zdXJhbmNlRGVhdGhNb2R1bGU7XHJcbiAgICB9KSgpO1xyXG4gICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5oaWRlKCk7XHJcbiAgICBhbmd1bGFyLmVsZW1lbnQoJyonKS5yZW1vdmVDbGFzcygnbm9uZScpO1xyXG4gICAgYW5ndWxhci5lbGVtZW50KCd1bC5jdXN0b20tc2VsZWN0Ym94LWxpc3QtY29udCBsaScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBsaWZlSW5zdXJhbmNlRGVhdGhDb21tb24uc3RhdGVEcm9wVmFsaWRhdGlvbignbm90aWZpZXJTdGF0ZUxpZmVJbnN1cmFuY2UnLFxyXG4gICAgICAgICAgICAgICAgJ25vdGlmaWVyU3RhdGVGbGFnJywgJ1NlbGVjdCBzdGF0ZScpO1xyXG4gICAgICAgICAgICBsaWZlSW5zdXJhbmNlRGVhdGhDb21tb24uc3RhdGVEcm9wVmFsaWRhdGlvbignaW5zdXJlZFN0YXRlTGlmZUluc3VyYW5jZScsXHJcbiAgICAgICAgICAgICAgICAnaW5zdXJlZFN0YXRlRmxhZycsICdTZWxlY3Qgc3RhdGUnKTtcclxuICAgICAgICB9LCAyMDApO1xyXG4gICAgfSk7XHJcbiAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGUsIHtcclxuICAgICAgICAnbGlmZUluc3VyYW5jZURlYXRoRGF0YSc6IHtcclxuXHJcbiAgICAgICAgfSxcclxuICAgICAgICAnaXNMaWZlSW5zdXJhbmNlRGVhdGhDbGlja2VkJzogZmFsc2UsXHJcbiAgICAgICAgJ3ZhbGlkYXRpb25FcnJvclNob3cnICAgICAgICA6IGZhbHNlXHJcbiAgICB9KTtcclxuICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB0YWJsZVZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnLkFydGljbGVDb250ZW50Jykub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgIHZhciBoZWFkZXJIZ3QgPSBhbmd1bGFyLmVsZW1lbnQoJy5Ub3BoZWFkZXItbG9nb2FyZWEnKS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgdGFibGVWYWwgPSAodGFibGVWYWwgLSBoZWFkZXJIZ3QpIC0gMjA7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCdodG1sLCBib2R5Jykuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGFibGVWYWxcclxuICAgICAgICB9LCA4MDApO1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBnZXRDYXB0Y2hhRGF0YSgpIHtcclxuICAgICAgICB2YXIgbnVjYXB0Y2hhQW5zRW50ciwgbnVjYXB0Y2hhQW5zRXh0O1xyXG5cclxuICAgICAgICBpZiAoIWFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZW50ZXInKSkge1xyXG4gICAgICAgICAgICBudWNhcHRjaGFBbnNFbnRyID0gJyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRW50ciA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZW50ZXInKS52YWwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKSkge1xyXG4gICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSAnJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKS52YWwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyokc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVsnbnVjYXB0Y2hhLWVwZCddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWVwZCcpLnZhbCgpO1xyXG4gICAgICAgICRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhWydudWNhcHRjaGEtYW5zd2VyJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGFbJ251Y2FwdGNoYS1hbnN3ZXItZW50ZXInXSA9IG51Y2FwdGNoYUFuc0VudHI7XHJcbiAgICAgICAgJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGFbJ251Y2FwdGNoYS1hbnN3ZXItZXhpdCddID0gbnVjYXB0Y2hhQW5zRXh0O1xyXG4gICAgICAgICRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhLmxtc3VibWl0dGVkID0gYW5ndWxhci5lbGVtZW50KCcjbG1zdWJtaXR0ZWQnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVsnbnVjYXB0Y2hhLWluZGV4J10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtaW5kZXgnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVsnbnVjYXB0Y2hhLWRhdGF0eXBlJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtZGF0YXR5cGUnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVsnbnVjYXB0Y2hhLXB0eXBlJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtcHR5cGUnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVsnbnVjYXB0Y2hhLWxhbmd1YWdlJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtbGFuZ3VhZ2UnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVsnbnVjYXB0Y2hhLXJlZ2lvbiddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLXJlZ2lvbicpLnZhbCgpO1xyXG4gICAgICAgICRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhWydudWNhcHRjaGEtbWVkaWEtZG93bmxvYWQtdGltZSddID0gJyc7XHJcbiAgICAgICAgJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGFbJ251Y2FwdGNoYS1hZHNlcnYtZG93bmxvYWQtdGltZSddID0gJyc7XHJcbiAgICAgICAgJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGFbJ251Y2FwdGNoYS1mYWxsYmFjay10b2tlbiddID0gJyc7Ki9cclxuICAgICAgICAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVsnZ1JlY2FwdGNoYVJlc3BvbnNlJ10gPSAkKCcjZy1yZWNhcHRjaGEtcmVzcG9uc2UnKS52YWwoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRGb3JtRGF0YSgpIHtcclxuICAgICAgICAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YS5mb3JtRmFjdG9yID0gbGlmZUluc3VyYW5jZURlYXRoRmFjdG9yO1xyXG4gICAgICAgICRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhLmlkZW50aXR5ID0gJ0xJRkVfQ0xBSU1TJztcclxuICAgICAgICAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YS5ub3RpZmllclJlbGF0aW9uc2hpcCA9IGxpZmVJbnN1cmFuY2VEZWF0aENvbW1vbi5jaGVja0VtcHR5RGF0YSgkc2NvcGVcclxuICAgICAgICAgICAgLmxpZmVJbnN1cmFuY2VEZWF0aERhdGEubm90aWZpZXJSZWxhdGlvbnNoaXApO1xyXG4gICAgICAgICRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhLm5vdGlmaWVyU3RhdGUgPSBhbmd1bGFyLmVsZW1lbnQoJyNub3RpZmllclN0YXRlTGlmZUluc3VyYW5jZScpLnRleHQoKTtcclxuICAgICAgICAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YS5pbnN1cmVkU3RhdGUgPSBhbmd1bGFyLmVsZW1lbnQoJyNpbnN1cmVkU3RhdGVMaWZlSW5zdXJhbmNlJykudGV4dCgpO1xyXG4gICAgICAgICRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhLm5vdGlmaWVyRXZlbmluZ1Bob25lID0gbGlmZUluc3VyYW5jZURlYXRoQ29tbW9uLmNoZWNrRW1wdHlEYXRhKCRzY29wZVxyXG4gICAgICAgICAgICAubGlmZUluc3VyYW5jZURlYXRoRGF0YS5ub3RpZmllckV2ZW5pbmdQaG9uZSk7XHJcbiAgICAgICAgJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGEubm90aWZpZXJFbWFpbCA9IGxpZmVJbnN1cmFuY2VEZWF0aENvbW1vbi5jaGVja0VtcHR5RGF0YSgkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVxyXG4gICAgICAgICAgICAubm90aWZpZXJFbWFpbCk7XHJcbiAgICAgICAgJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGEuaW5zdXJlZERvYiA9IGxpZmVJbnN1cmFuY2VEZWF0aENvbW1vbi5jaGVja0VtcHR5RGF0YSgkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVxyXG4gICAgICAgICAgICAuaW5zdXJlZERvYik7XHJcbiAgICAgICAgJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGEuaW5zdXJlZERlYXRoUGxhY2UgPSBsaWZlSW5zdXJhbmNlRGVhdGhDb21tb24uY2hlY2tFbXB0eURhdGEoJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGFcclxuICAgICAgICAgICAgLmluc3VyZWREZWF0aFBsYWNlKTtcclxuICAgICAgICAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YS5pbnN1cmVkRGVhdGhDYXVzZSA9IGxpZmVJbnN1cmFuY2VEZWF0aENvbW1vbi5jaGVja0VtcHR5RGF0YSgkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YVxyXG4gICAgICAgICAgICAuaW5zdXJlZERlYXRoQ2F1c2UpO1xyXG4gICAgICAgICRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhLmluc3VyZWRPdGhlclBvbGljaWVzID0gbGlmZUluc3VyYW5jZURlYXRoQ29tbW9uLmNoZWNrRW1wdHlEYXRhKCRzY29wZVxyXG4gICAgICAgICAgICAubGlmZUluc3VyYW5jZURlYXRoRGF0YS5pbnN1cmVkT3RoZXJQb2xpY2llcyk7XHJcbiAgICAgICAgJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGEuaW5zdXJlZE90aGVyUG9saWNpZXNEZXRhaWwgPSBsaWZlSW5zdXJhbmNlRGVhdGhDb21tb24uY2hlY2tFbXB0eURhdGEoXHJcbiAgICAgICAgICAgICRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhLmluc3VyZWRPdGhlclBvbGljaWVzRGV0YWlsKTtcclxuICAgICAgICAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YS5pbnN1cmVkTGFzdDRTU04gPSBsaWZlSW5zdXJhbmNlRGVhdGhDb21tb24uY2hlY2tFbXB0eURhdGEoJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGFcclxuICAgICAgICAgICAgICAgIC5kZWNlYXNlZFBlclNTTik7XHJcbiAgICAgICAgJHNjb3BlLmxpZmVJbnN1cmFuY2VEZWF0aERhdGEuZUNvbnNlbnRBY2NlcHRlZCA9ICdJIGNvbnNlbnQgdG8gRWxlY3Ryb25pYyBUcmFuc21pc3Npb25zJzsgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRpc3BsYXlFcnIoKSB7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IHRydWU7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLnZhbGlkYXRpb25FcnJvclNob3cgPSB0cnVlO1xyXG4gICAgICAgICRzY29wZS52YWxpZGF0aW9uRXJyb3JTaG93ID0gdHJ1ZTtcclxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLmMtZXJyLWJveCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbycpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aXNFcnJWYWwgPSBhbmd1bGFyLmVsZW1lbnQoJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5lcShcclxuICAgICAgICAgICAgICAgICAgICAwKS5wYXJlbnQoKS5vZmZzZXQoKS50b3A7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGVhZGVySGd0ID0gYW5ndWxhci5lbGVtZW50KCcuVG9waGVhZGVyLWxvZ29hcmVhJykub3V0ZXJIZWlnaHQodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGlzRXJyVmFsID0gKHRpc0VyclZhbCAtIGhlYWRlckhndCkgLSA1MDtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnaHRtbCwgYm9keScpLnN0b3AoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGlzRXJyVmFsXHJcbiAgICAgICAgICAgICAgICB9LCA2MDAsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmMtZXJyLWJveCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbycpLmVxKDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCAyMDApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHZhbGlkRm9ybSgpIHtcclxuICAgICAgICB2YXIgaXNDYXB0Y2hhQXZhaWwgPSBmYWxzZSxcclxuICAgICAgICAgICAgY2FwY2hhVmFsO1xyXG5cclxuICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcuZy1yZWNhcHRjaGEnKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGlzQ2FwdGNoYUF2YWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgY2FwY2hhVmFsID0gYW5ndWxhci5lbGVtZW50KCcjZy1yZWNhcHRjaGEtcmVzcG9uc2UnKS52YWwoKTtcclxuICAgICAgICAgICAgaWYgKGNhcGNoYVZhbCkge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLmhpZGUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5zaG93KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhGb3JtLiR2YWxpZCAmJiAoKGlzQ2FwdGNoYUF2YWlsICYmIGNhcGNoYVZhbCkgfHwgIWlzQ2FwdGNoYUF2YWlsKSAmJiAhJHNjb3BlLmlzQ29ycmVjdEZvcm1hdCAmJiAhJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCAmJiAhJHNjb3BlLmlzQ29ycmVjdEluc3VyZWRaaXBGb3JtYXQpIHtcclxuICAgICAgICAgICAgaWYgKGlzQ2FwdGNoYUF2YWlsKSB7XHJcbiAgICAgICAgICAgICAgICBnZXRDYXB0Y2hhRGF0YSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdldEZvcm1EYXRhKCk7XHJcbiAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJTaG93KCk7XHJcbiAgICAgICAgICAgICRzY29wZS52YWxpZGF0aW9uRXJyb3JTaG93ID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGlzcGxheUVycigpO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy9vcGVuIHBvcHVwIHN0YXJ0c1xyXG4gICAgJHNjb3BlLmRpc3Bfbm9uZSA9IFwiZGlzcF9ub25lXCI7XHJcbiAgICAkc2NvcGUub3BlblBvcFVwID0gZnVuY3Rpb24oZXZlbnQsdmFsLGNhbGxBbmFseXRpYyl7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgdmFyIHRlbXBWYWx1ZSA9IHZhbDtcclxuICAgICAgICBpZiAodGVtcFZhbHVlID09IHRydWUpe1xyXG4gICAgICAgICAgICAkc2NvcGUuY2hlY2tib3ggPSB0cnVlO1xyXG4gICAgICAgICAgICBpZigkc2NvcGUuZGlzcF9ub25lID09PSBcImRpc3Bfbm9uZVwiKXtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kaXNwX25vbmUgPSBcImRpc3BfYmxvY2tcIjtcclxuICAgICAgICAgICAgICAgICQoJ2JvZHknKS5jc3MoJ292ZXJmbG93JywnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICBpZihjYWxsQW5hbHl0aWMpe1xyXG4gICAgICAgICAgICB2YXIgZGF0YTEgPSB7XHJcbiAgICAgICAgICAgICAgICAnZXZlbnRfYWN0aW9uJzogJ2xpbmsnLFxyXG4gICAgICAgICAgICAgICAgJ2V2ZW50X25hbWUnICA6ICdFbGVjdHJvbmljIFRyYW5zbWlzc2lvbnMnLFxyXG4gICAgICAgICAgICAgICAgJ2V2ZW50X3R5cGUnICA6ICdtYWluY29udGVudCdcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdXRhZy5saW5rKGRhdGExKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgJHNjb3BlLmNoZWNrYm94ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmKCRzY29wZS5kaXNwX25vbmUgPT09IFwiZGlzcF9ibG9ja1wiKXtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kaXNwX25vbmUgPSBcImRpc3Bfbm9uZVwiO1xyXG4gICAgICAgICAgICAgICAgJCgnYm9keScpLmNzcygnb3ZlcmZsb3cnLCdhdXRvJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRzY29wZS5oZ3QgPSBzY3JlZW4uaGVpZ2h0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZ1bmN0aW9uIGRvT25PcmllbnRhdGlvbkNoYW5nZSgpIHtcclxuICAgICAgICAgICAgaWYgKHNjcmVlbi53aWR0aCA8PTc2OCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgd2N0O1xyXG4gICAgICAgICAgICBzd2l0Y2god2luZG93Lm9yaWVudGF0aW9uKSB7ICBcclxuICAgICAgICAgICAgICAgIGNhc2UgLTkwIHx8IDkwOlxyXG4gICAgICAgICAgICAgICAgLy9sYW5kc2NhcGUgc3R5bGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5oZ3QgPSBzY3JlZW4uaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7IFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIC8vcG9ydHJhaXQgc3R5bGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5oZ3QgPSBzY3JlZW4uaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7IFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHRcclxuICAgICAgICB9XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgZG9Pbk9yaWVudGF0aW9uQ2hhbmdlKTtcclxuICAgIH1cclxuICBcclxuICAgIGZ1bmN0aW9uIGRvT25PcmllbnRhdGlvbkNoYW5nZSgpIHtcclxuICAgICAgICBpZiAoc2NyZWVuLndpZHRoIDw9NzY4KXtcclxuICAgICAgICBzd2l0Y2god2luZG93Lm9yaWVudGF0aW9uKSB7ICBcclxuICAgICAgICAgICAgY2FzZSAtOTAgfHwgOTA6XHJcbiAgICAgICAgICAgIC8vbGFuZHNjYXBlIHN0eWxlXHJcbiAgICAgICAgICAgICRzY29wZS5oZ3QgPSBzY3JlZW4uaGVpZ2h0O1xyXG4gICAgICAgICAgICAvL2FsZXJ0KCdsYW5kc2NhcGUnKTtcclxuICAgICAgICAgICAgLy8kc2NvcGUubWlkSGVpZ2h0ID0gc2NyZWVuLmhlaWdodC8yLjE7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBicmVhazsgXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIC8vcG9ydHJhaXQgXHJcbiAgICAgICAgICAgICRzY29wZS5oZ3QgPSBzY3JlZW4uaGVpZ2h0O1xyXG4gICAgICAgICAgICAvLyRzY29wZS5taWRIZWlnaHQgPSBzY3JlZW4uaGVpZ2h0LzIuMTtcclxuICAgICAgICAgICAgYnJlYWs7IFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVx0XHJcbiAgICB9XHJcblxyXG4gICAgLy9mb3IgYWNjZXB0IGNoZWNrYm94IHNob3VsZCBiZSBjaGVja2VkIHdoZW4gdXNlciBhY2NlcHRzIGFuZCBwb3AgdXAgYm94IGdldHMgY2xvc2UuXHJcblx0Ly8gZm9yIGNhbmNlbCBidXR0b24gaXQgc2hvdWxkIGJlIHVuY2hlY2tlZCBhbmQgcG9wIGdldHMgY2xvZXNlXHJcbiAgICAkc2NvcGUuaXNBY2NlcHQgPSBmdW5jdGlvbihldmVudCx2YWwpe1xyXG4gICAgICAgIGlmKHZhbCl7XHJcbiAgICAgICAgICAgICRzY29wZS5jaGVja2JveCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmKCRzY29wZS5kaXNwX25vbmUgPT09IFwiZGlzcF9ibG9ja1wiKXtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kaXNwX25vbmUgPSBcImRpc3Bfbm9uZVwiO1xyXG4gICAgICAgICAgICAgICAgJCgnYm9keScpLmNzcygnb3ZlcmZsb3cnLCdhdXRvJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGRhdGEyID0ge1xyXG4gICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbic6ICdCdXR0b24nLFxyXG4gICAgICAgICAgICAgICAgJ2V2ZW50X25hbWUnICA6ICdJIENvbnNlbnQnLFxyXG4gICAgICAgICAgICAgICAgJ2V2ZW50X3R5cGUnICA6ICdtYWluY29udGVudCdcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdXRhZy5saW5rKGRhdGEyKTtcclxuXHJcbiAgICAgICAgfSBlbHNle1xyXG4gICAgICAgICAgICAkc2NvcGUub3BlblBvcFVwKGV2ZW50LHZhbCx0cnVlKTtcclxuICAgICAgICAgICAgJCgnYm9keScpLmNzcygnb3ZlcmZsb3cnLCdhdXRvJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICAvLyAkc2NvcGUuY2hlY2tib3ggPSBmbGFnOy8vdG9nZ2xpbmcgYmV0d2VlbiBjaGVja2VkIGFuZCB1bmNoZWNrZWRcclxuICAgIH1cclxuXHJcbiAgICAvLyBUbyBwcmludCB0aGUgcG9wIHVwIGNvbnRlbnRzXHJcblx0XHQkc2NvcGUucHJpbnREaXYgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHByaW50Q29udGVudHMgPSAkKFwiI21pZF9jb250ZW50XCIpLmh0bWwoKTtcclxuICAgICAgICAgICBcdHZhciBwb3B1cFdpbiA9IHdpbmRvdy5vcGVuKCcnLCAnX2JsYW5rJyk7IC8vdG8gb3BlbiBuZXcgd2luZG93XHJcbiAgICAgICAgICAgIHBvcHVwV2luLmRvY3VtZW50LndyaXRlKCc8aHRtbD48aGVhZD48dGl0bGU+UHJpbnQgUHJldmlldzwvdGl0bGU+PC9oZWFkPjxib2R5PicgKyBwcmludENvbnRlbnRzICsgJzwvYm9keT48L2h0bWw+Jyk7XHJcbiAgICAgICAgICAgIHBvcHVwV2luLnByaW50KCk7XHJcbiAgICAgICAgICAgIHBvcHVwV2luLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9IFxyXG4vL29wZW4gcG9wdXAgZW5kcyAgXHJcblxyXG5cclxuICAgICRzY29wZS5zdWJtaXRMaWZlSW5zdXJhbmNlRGVhdGggPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBzdWJtaXRDbGlja2VkID0gdHJ1ZTtcclxuICAgICAgICBpZiAoIWxpZmVJbnN1cmFuY2VDb3VudCkge1xyXG4gICAgICAgICAgICBpZiAoISRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhLmluc3VyZWREZWF0aERhdGUpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmxvc3RQb2xpY3knKS5yZW1vdmVDbGFzcygnbmctaGlkZScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubG9zdFBvbGljeScpLmFkZENsYXNzKCduZy1oaWRlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGlmZUluc3VyYW5jZUNvdW50ID0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxpZmVJbnN1cmFuY2VEZWF0aENvbW1vbi5zdGF0ZURyb3BWYWxpZGF0aW9uKCdub3RpZmllclN0YXRlTGlmZUluc3VyYW5jZScsICdub3RpZmllclN0YXRlRmxhZycsXHJcbiAgICAgICAgICAgICdTZWxlY3Qgc3RhdGUnKTtcclxuICAgICAgICBsaWZlSW5zdXJhbmNlRGVhdGhDb21tb24uc3RhdGVEcm9wVmFsaWRhdGlvbignaW5zdXJlZFN0YXRlTGlmZUluc3VyYW5jZScsICdpbnN1cmVkU3RhdGVGbGFnJyxcclxuICAgICAgICAgICAgJ1NlbGVjdCBzdGF0ZScpO1xyXG4gICAgICAgICRzY29wZS5pc0xpZmVJbnN1cmFuY2VEZWF0aENsaWNrZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICBpZiAodmFsaWRGb3JtKCkpIHtcclxuICAgICAgICAgICAgbGlmZUluc3VyYW5jZURlYXRoU2VydmljZXMubGlmZUluc3VyYW5jZURlYXRoSW5mb1Bvc3QoJHNjb3BlLCAkc2NvcGUubGlmZUluc3VyYW5jZURlYXRoRGF0YSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGRhdGFBamF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFSZXNwb25jZSA9IGRhdGFBamF4LmRhdGEucmVzcG9uc2VTdGF0dXNDb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3BvbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhUmVzcG9uY2UgPT09ICdUSU1FRF9PVVQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1lc3NhZ2UgPSAnVElNRUQgT1VUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ0lOVEVSTkFMX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzU3VjY2VzcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNZXNzYWdlID0gJ0lOVEVSTkFMIEVSUk9SJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ0NBUFRDSEFfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1lc3NhZ2UgPSAnSU5WQUxJRCBDQVBUQ0hBJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ1NFUlZJQ0VfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1lc3NhZ2UgPSAnU0VSVklDRSBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uY2UgPT09ICdTVUNDRVNTJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHRrc1BhZ2VVUkwgJiYgJ251bGwnICE9PSB0a3NQYWdlVVJMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGtzUGFnZVVSTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzU3VjY2VzcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdTVUNDRVNTLiBUaGFuayB5b3UgZm9yIHNoYXJpbmcgeW91ciBpbmZvcm1hdGlvbi4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saWZlSW5zdXJhbmNlRGVhdGhEYXRhID0ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tb25GdW5jdGlvbnMucmVzZXREYXRlUGlja2VyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyNub3RpZmllclN0YXRlTGlmZUluc3VyYW5jZSwgI2luc3VyZWRTdGF0ZUxpZmVJbnN1cmFuY2UnKS50ZXh0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTZWxlY3Qgc3RhdGUnKS5yZW1vdmVBdHRyKCdkYXRhLXZhbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzTGlmZUluc3VyYW5jZURlYXRoQ2xpY2tlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9hY3Rpb24nOiAnZm9ybScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X25hbWUnICA6ICdMaWZlIEluc3VyYW5jZSBEZWF0aCBOb3RpZmljYXRpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF90eXBlJyAgOiAnY2xhaW1zJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfdmVyc2lvbic6ICcyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfc3RhdHVzJzogJ2NvbXBsZXRlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGFnLmxpbmsoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoLXdyYXBwZXInKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuY0NtZE5ld0NoYWxsZW5nZSgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdhcm5pbmdNc2cgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufV0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmxmZ2FwcC5jb250cm9sbGVyKCdsb25nVGVybUNhcmVDb250cmwnLCBbJyRzY29wZScsICckdGltZW91dCcsICckd2luZG93JywgJ2xvbmdUZXJtQ2FyZVNlcnZpY2VzJywgZnVuY3Rpb24oJHNjb3BlLFxyXG4gICAgJHRpbWVvdXQsICR3aW5kb3csIGxvbmdUZXJtQ2FyZVNlcnZpY2VzKSB7XHJcbiAgICAvKiAkKGRvY3VtZW50KS5sb2FkKGZ1bmN0aW9uICgpIHtcclxuICAgIFx0dmFyIGRhdGE9eyovXHJcbiAgICB1dGFnX2RhdGEuZXZlbnRfYWN0aW9uID0gJ2Zvcm0nO1xyXG4gICAgdXRhZ19kYXRhLmV2ZW50X25hbWUgPSAnTG9uZy1UZXJtIENhcmUgU3RhcnQgTm90aWZpY2F0aW9uJztcclxuICAgIHV0YWdfZGF0YS5ldmVudF90eXBlID0gJ2NsYWltcyc7XHJcbiAgICB1dGFnX2RhdGEuZXZlbnRfc3RhdHVzID0gJ3N0YXJ0JztcclxuXHJcbiAgICAvKiB9XHJcblx0XHR1dGFnLmxpbmsoZGF0YSk7XHJcblx0fSk7Ki9cclxuXHJcbiAgICB2YXIgbG9uZ1Rlcm1DYXJlQ29tbW9uLCBsb25nVGVybUNhcmVGYWN0b3IsIHdhcm5pbmdNc2csXHJcbiAgICAgICAgbG9uZ0NhcmVDb3VudCA9IDA7XHJcblxyXG4gICAgJChkb2N1bWVudCkub24oJ3Jlc3BvbnNpdmU6c3RhdGVjaGFuZ2VkJywgZnVuY3Rpb24oZSwgcGFyYW0pIHtcclxuICAgICAgICBsb25nVGVybUNhcmVGYWN0b3IgPSBwYXJhbTtcclxuICAgIH0pO1xyXG4gICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuXHJcbiAgICAvKiAkKCdib2R5Jykub24oJ2ZvY3VzJyxcIi5kaXNhYmlsaXR5LWRhdGUtZmllbGRcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICBcdCQodGhpcykuZGF0ZXBpY2tlcih7XHJcbiAgICBcdFx0Y2hhbmdlTW9udGg6IHRydWUsXHJcbiAgICBcdFx0Y2hhbmdlWWVhcjogdHJ1ZSxcclxuICAgIFx0XHR5ZWFyUmFuZ2U6IFwiLTIwMDorMFwiXHJcbiAgICBcdH0pO1xyXG4gICAgfSk7ICovXHJcblxyXG4gICAgdmFyIGRhdGVQaWMgPSBuZXcgQ2FsZW5kYXIoe1xyXG4gICAgICAgICAgICAnZGF0ZUlkJyAgICAgICA6ICdkYXRlJyxcclxuICAgICAgICAgICAgJ21vbnRoSWQnICAgICAgOiAnbW9udGgnLFxyXG4gICAgICAgICAgICAneWVhcklkJyAgICAgICA6ICd5ZWFyJyxcclxuICAgICAgICAgICAgJ2hpZGRlbklkJyAgICAgOiAnTG9uZ0RPQm9wdGlvbmFsJyxcclxuICAgICAgICAgICAgJ251bWJlck9mWWVhcnMnOiAxMzBcclxuICAgICAgICB9KSxcclxuICAgICAgICBkYXRlUGljMSA9IG5ldyBDYWxlbmRhcih7XHJcbiAgICAgICAgICAgICdkYXRlSWQnICAgICAgIDogJ2RhdGUxJyxcclxuICAgICAgICAgICAgJ21vbnRoSWQnICAgICAgOiAnbW9udGgxJyxcclxuICAgICAgICAgICAgJ3llYXJJZCcgICAgICAgOiAneWVhcjEnLFxyXG4gICAgICAgICAgICAnaGlkZGVuSWQnICAgICA6ICdpbnN1cmVkQ2FyZU9uc2V0JyxcclxuICAgICAgICAgICAgJ251bWJlck9mWWVhcnMnOiAxMzBcclxuICAgICAgICB9KTtcclxuXHJcbiAgICBsb25nVGVybUNhcmVDb21tb24gPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGxvbmdUZXJtQ2FyZU1vZHVsZSA9IHtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRyb3BWYWx1ZTtcclxuXHJcbiAgICAgICAgbG9uZ1Rlcm1DYXJlTW9kdWxlLnN0YXRlRHJvcFZhbGlkYXRpb24gPSBmdW5jdGlvbihpZCwgZmxhZ05hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGRyb3BWYWx1ZSA9IGFuZ3VsYXIuZWxlbWVudCgnIycgKyBpZCkudGV4dCgpO1xyXG4gICAgICAgICAgICBpZiAoZHJvcFZhbHVlICE9PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlW2ZsYWdOYW1lXSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlW2ZsYWdOYW1lXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGxvbmdUZXJtQ2FyZU1vZHVsZS5jaGVja0VtcHR5RGF0YSA9IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChkYXRhKSA/IGRhdGEgOiAnJztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gbG9uZ1Rlcm1DYXJlTW9kdWxlO1xyXG4gICAgfSkoKTtcclxuICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XHJcbiAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG4gICAgYW5ndWxhci5lbGVtZW50KCcqJykucmVtb3ZlQ2xhc3MoJ25vbmUnKTtcclxuICAgIGFuZ3VsYXIuZWxlbWVudCgndWwuY3VzdG9tLXNlbGVjdGJveC1saXN0LWNvbnQgbGknKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgbG9uZ1Rlcm1DYXJlQ29tbW9uLnN0YXRlRHJvcFZhbGlkYXRpb24oJ25vdGlmaWVyU3RhdGVMb25nVGVybScsXHJcbiAgICAgICAgICAgICAgICAnbm90aWZpZXJTdGF0ZUZsYWcnLCAnU2VsZWN0IHN0YXRlJyk7XHJcbiAgICAgICAgICAgIGxvbmdUZXJtQ2FyZUNvbW1vbi5zdGF0ZURyb3BWYWxpZGF0aW9uKCdpbnN1cmVkU3RhdGVMb25nVGVybScsXHJcbiAgICAgICAgICAgICAgICAnaW5zdXJlZFN0YXRlRmxhZycsICdTZWxlY3Qgc3RhdGUnKTtcclxuICAgICAgICB9LCAyMDApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gaXNUd29aaXBDb2RlKG5hbWUsIGJvb2xlYW5WYWx1ZSkge1xyXG4gICAgICAgIGlmIChuYW1lID09PSAnbm90aWZpZXJaaXBDb2RlJykge1xyXG4gICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0ID0gYm9vbGVhblZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ2luc3VyZWRaaXBDb2RlJykge1xyXG4gICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0aW5zdXJlZFppcEZvcm1hdCA9IGJvb2xlYW5WYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJHNjb3BlLm51bWJlckZvcm1hdCA9IGZ1bmN0aW9uKGV2dCwgaW5wdXRWYWx1ZSwgbmFtZSwgemlwT3JQaG9uZSkge1xyXG4gICAgICAgIGlmIChpbnB1dFZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTktXS9nLCAnJyk7XHJcbiAgICAgICAgaWYgKHppcE9yUGhvbmUgPT09ICdwaG9uZScpIHtcclxuICAgICAgICAgICAgdmFyIHBhdHQgPSAvXihcXGR7M31cXC1cXGR7M30tXFxkezR9KSQvO1xyXG5cclxuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdub3RpZmllckRheVBob25lJykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFBob25lRm9ybWF0ID0gIShwYXR0LnRlc3QoJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGFbbmFtZV0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ25vdGlmaWVyUHJlZmVycmVkUGhvbmUnKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0UGhvbmVGb3JtYXQgPSAhKHBhdHQudGVzdCgkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVtuYW1lXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVtuYW1lXS5sZW5ndGggPT09IDMgJiYgZXZ0LmtleUNvZGUgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5sb25nVGVybUNhcmVEYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGFbbmFtZV0gPSAkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KS8sICckMS0nKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVtuYW1lXS5sZW5ndGggPT09IDcgJiYgZXZ0LmtleUNvZGUgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5sb25nVGVybUNhcmVEYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGFbbmFtZV0gPSAkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KShcXGR7M30pLyxcclxuICAgICAgICAgICAgICAgICAgICAnJDEtJDItJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGFbbmFtZV0ubGVuZ3RoID09PSAxMikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVtuYW1lXSA9ICRzY29wZS5sb25nVGVybUNhcmVEYXRhW25hbWVdLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5sb25nVGVybUNhcmVEYXRhW25hbWVdLmxlbmd0aCA9PT0gMTApIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5sb25nVGVybUNhcmVEYXRhW25hbWVdID0gJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGFbbmFtZV0ucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAvKFxcZHszfSkoXFxkezN9KShcXGR7NH0pLywgJyQxLSQyLSQzJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCRzY29wZS5pc0NvcnJlY3RQaG9uZUZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5sb25nVGVybUNhcmVEYXRhW25hbWVdLmxlbmd0aCA+PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSAkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVtuYW1lXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGFbbmFtZV0gPSBzdHIuc2xpY2UoMCwgMTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RQaG9uZUZvcm1hdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5sb25nVGVybUNhcmVEYXRhW25hbWVdLmxlbmd0aCA+PSAxMikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0ciA9ICRzY29wZS5sb25nVGVybUNhcmVEYXRhW25hbWVdO1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5sb25nVGVybUNhcmVEYXRhW25hbWVdID0gc3RyLnNsaWNlKDAsIDEyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoemlwT3JQaG9uZSA9PT0gJ3ppcCcpIHtcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5sb25nVGVybUNhcmVEYXRhW25hbWVdLmxlbmd0aCA9PT0gNSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05LV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2dC5rZXlDb2RlID09PSAxMDkgfHwgZXZ0LmtleUNvZGUgPT09IDE4OSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sb25nVGVybUNhcmVEYXRhW25hbWVdID0gJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGFbbmFtZV0gKyAnLSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5sb25nVGVybUNhcmVEYXRhW25hbWVdLmxlbmd0aCA+IDUgJiYgJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGFbbmFtZV0ubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICA8PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5ldyBSZWdFeHAoJy0nKS50ZXN0KCRzY29wZS5sb25nVGVybUNhcmVEYXRhW25hbWVdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVtuYW1lXS5sZW5ndGggPT09IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXR0WmlwID0gL14oXFxkezV9XFwtXFxkezR9KSQvO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdub3RpZmllclppcENvZGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0ID0gIShwYXR0WmlwLnRlc3QoJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGFbbmFtZV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAnaW5zdXJlZFppcENvZGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0aW5zdXJlZFppcEZvcm1hdCA9ICEocGF0dFppcC50ZXN0KCRzY29wZS5sb25nVGVybUNhcmVEYXRhW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVtuYW1lXS5sZW5ndGggPT09IDkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleUNvZGUgPT09IDEwOSB8fCBldnQua2V5Q29kZSA9PT0gMTg5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyMnICsgZXZ0LnRhcmdldC5pZCkuaW5zZXJ0QXRDYXJldCgnLScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpc1R3b1ppcENvZGUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgYW5ndWxhci5leHRlbmQoJHNjb3BlLCB7XHJcbiAgICAgICAgJ2xvbmdUZXJtQ2FyZURhdGEnOiB7XHJcblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2lzTG9uZ1Rlcm1DYXJlU3VibWl0JzogZmFsc2UsXHJcbiAgICAgICAgJ3ZhbGlkYXRpb25FcnJvclNob3cnIDogZmFsc2UsXHJcbiAgICAgICAgJ25vdGlmaWVyU3RhdGVGbGFnJyAgIDogdHJ1ZSxcclxuICAgICAgICAnaW5zdXJlZFN0YXRlRmxhZycgICAgOiB0cnVlXHJcbiAgICB9KTtcclxuICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB0YWJsZVZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnLkFydGljbGVDb250ZW50Jykub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgIHZhciBoZWFkZXJIZ3QgPSBhbmd1bGFyLmVsZW1lbnQoJy5Ub3BoZWFkZXItbG9nb2FyZWEnKS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgdGFibGVWYWwgPSAodGFibGVWYWwgLSBoZWFkZXJIZ3QpIC0gMjA7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCdodG1sLCBib2R5Jykuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGFibGVWYWxcclxuICAgICAgICB9LCA4MDApO1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBnZXRDYXB0Y2hhRGF0YSgpIHtcclxuICAgICAgICB2YXIgbnVjYXB0Y2hhQW5zRW50ciwgbnVjYXB0Y2hhQW5zRXh0O1xyXG5cclxuICAgICAgICBpZiAoIWFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZW50ZXInKSkge1xyXG4gICAgICAgICAgICBudWNhcHRjaGFBbnNFbnRyID0gJyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRW50ciA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZW50ZXInKS52YWwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKSkge1xyXG4gICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSAnJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKS52YWwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAvKiAkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVsnbnVjYXB0Y2hhLWVwZCddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWVwZCcpLnZhbCgpO1xyXG4gICAgICAgICRzY29wZS5sb25nVGVybUNhcmVEYXRhWydudWNhcHRjaGEtYW5zd2VyJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGFbJ251Y2FwdGNoYS1hbnN3ZXItZW50ZXInXSA9IG51Y2FwdGNoYUFuc0VudHI7XHJcbiAgICAgICAgJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGFbJ251Y2FwdGNoYS1hbnN3ZXItZXhpdCddID0gbnVjYXB0Y2hhQW5zRXh0O1xyXG4gICAgICAgICRzY29wZS5sb25nVGVybUNhcmVEYXRhLmxtc3VibWl0dGVkID0gYW5ndWxhci5lbGVtZW50KCcjbG1zdWJtaXR0ZWQnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVsnbnVjYXB0Y2hhLWluZGV4J10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtaW5kZXgnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVsnbnVjYXB0Y2hhLWRhdGF0eXBlJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtZGF0YXR5cGUnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVsnbnVjYXB0Y2hhLXB0eXBlJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtcHR5cGUnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVsnbnVjYXB0Y2hhLWxhbmd1YWdlJ10gPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtbGFuZ3VhZ2UnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVsnbnVjYXB0Y2hhLXJlZ2lvbiddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLXJlZ2lvbicpLnZhbCgpO1xyXG4gICAgICAgICRzY29wZS5sb25nVGVybUNhcmVEYXRhWydudWNhcHRjaGEtbWVkaWEtZG93bmxvYWQtdGltZSddID0gJyc7XHJcbiAgICAgICAgJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGFbJ251Y2FwdGNoYS1hZHNlcnYtZG93bmxvYWQtdGltZSddID0gJyc7XHJcbiAgICAgICAgJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGFbJ251Y2FwdGNoYS1mYWxsYmFjay10b2tlbiddID0gJyc7Ki9cclxuICAgICAgICAkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVsnZ1JlY2FwdGNoYVJlc3BvbnNlJ10gPSAkKCcjZy1yZWNhcHRjaGEtcmVzcG9uc2UnKS52YWwoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRGb3JtRGF0YSgpIHtcclxuICAgICAgICAkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YS5mb3JtRmFjdG9yID0gbG9uZ1Rlcm1DYXJlRmFjdG9yO1xyXG4gICAgICAgICRzY29wZS5sb25nVGVybUNhcmVEYXRhLmlkZW50aXR5ID0gJ0NBUkVfQ0xBSU1TJztcclxuICAgICAgICAkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YS5ub3RpZmllclJlbGF0aW9uc2hpcCA9IGxvbmdUZXJtQ2FyZUNvbW1vbi5jaGVja0VtcHR5RGF0YSgkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YVxyXG4gICAgICAgICAgICAubm90aWZpZXJSZWxhdGlvbnNoaXApO1xyXG4gICAgICAgICRzY29wZS5sb25nVGVybUNhcmVEYXRhLm5vdGlmaWVyU3RhdGUgPSBhbmd1bGFyLmVsZW1lbnQoJyNub3RpZmllclN0YXRlTG9uZ1Rlcm0nKS50ZXh0KCk7XHJcbiAgICAgICAgJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGEubm90aWZpZXJFdmVuaW5nUGhvbmUgPSBsb25nVGVybUNhcmVDb21tb24uY2hlY2tFbXB0eURhdGEoJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGFcclxuICAgICAgICAgICAgLm5vdGlmaWVyRXZlbmluZ1Bob25lKTtcclxuICAgICAgICAkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YS5ub3RpZmllckVtYWlsID0gbG9uZ1Rlcm1DYXJlQ29tbW9uLmNoZWNrRW1wdHlEYXRhKCRzY29wZS5sb25nVGVybUNhcmVEYXRhLm5vdGlmaWVyRW1haWwpO1xyXG4gICAgICAgICRzY29wZS5sb25nVGVybUNhcmVEYXRhLmluc3VyZWRTdGF0ZSA9IGFuZ3VsYXIuZWxlbWVudCgnI2luc3VyZWRTdGF0ZUxvbmdUZXJtJykudGV4dCgpO1xyXG4gICAgICAgICRzY29wZS5sb25nVGVybUNhcmVEYXRhLmluc3VyZWREb2IgPSBsb25nVGVybUNhcmVDb21tb24uY2hlY2tFbXB0eURhdGEoJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGEuaW5zdXJlZERvYik7XHJcbiAgICAgICAgJHNjb3BlLmxvbmdUZXJtQ2FyZURhdGEuZUNvbnNlbnRBY2NlcHRlZCA9ICdJIGNvbnNlbnQgdG8gRWxlY3Ryb25pYyBUcmFuc21pc3Npb25zJzsgXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZGlzcGxheUVycigpIHtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gdHJ1ZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IHRydWU7XHJcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGlzRXJyVmFsID0gYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykuZXEoXHJcbiAgICAgICAgICAgICAgICAgICAgMCkucGFyZW50KCkub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlckhndCA9IGFuZ3VsYXIuZWxlbWVudCgnLlRvcGhlYWRlci1sb2dvYXJlYScpLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRpc0VyclZhbCA9ICh0aXNFcnJWYWwgLSBoZWFkZXJIZ3QpIC0gNTA7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3Njcm9sbFRvcCc6IHRpc0VyclZhbFxyXG4gICAgICAgICAgICAgICAgfSwgNjAwLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5lcSgwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMjAwKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB2YWxpZEZvcm0oKSB7XHJcbiAgICAgICAgdmFyIGlzQ2FwdGNoYUF2YWlsID0gZmFsc2UsXHJcbiAgICAgICAgICAgIGNhcGNoYVZhbDtcclxuXHJcbiAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLmctcmVjYXB0Y2hhJykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBpc0NhcHRjaGFBdmFpbCA9IHRydWU7XHJcbiAgICAgICAgICAgIGNhcGNoYVZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnI2ctcmVjYXB0Y2hhLXJlc3BvbnNlJykudmFsKCk7XHJcbiAgICAgICAgICAgIGlmIChjYXBjaGFWYWwpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuc2hvdygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgkc2NvcGUubG9uZ1Rlcm1DYXJlRm9ybS4kdmFsaWQgJiYgKChpc0NhcHRjaGFBdmFpbCAmJiBjYXBjaGFWYWwpIHx8ICFpc0NhcHRjaGFBdmFpbCkgJiYgISRzY29wZVxyXG4gICAgICAgICAgICAuaXNDb3JyZWN0aW5zdXJlZFppcEZvcm1hdCAmJiAhJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCAmJiAhJHNjb3BlLmlzQ29ycmVjdFBob25lRm9ybWF0KSB7XHJcbiAgICAgICAgICAgIGlmIChpc0NhcHRjaGFBdmFpbCkge1xyXG4gICAgICAgICAgICAgICAgZ2V0Q2FwdGNoYURhdGEoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBnZXRGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVyU2hvdygpO1xyXG4gICAgICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRpc3BsYXlFcnIoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuLy9vcGVuIHBvcHVwIHN0YXJ0c1xyXG4kc2NvcGUuZGlzcF9ub25lID0gXCJkaXNwX25vbmVcIjtcclxuJHNjb3BlLm9wZW5Qb3BVcCA9IGZ1bmN0aW9uKGV2ZW50LHZhbCxjYWxsQW5hbHl0aWMpe1xyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB2YXIgdGVtcFZhbHVlID0gdmFsO1xyXG4gICAgaWYgKHRlbXBWYWx1ZSA9PSB0cnVlKXtcclxuICAgICAgICAkc2NvcGUuY2hlY2tib3ggPSB0cnVlO1xyXG4gICAgICAgIGlmKCRzY29wZS5kaXNwX25vbmUgPT09IFwiZGlzcF9ub25lXCIpe1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzcF9ub25lID0gXCJkaXNwX2Jsb2NrXCI7XHJcbiAgICAgICAgICAgICQoJ2JvZHknKS5jc3MoJ292ZXJmbG93JywnaGlkZGVuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgaWYoY2FsbEFuYWx5dGljKXtcclxuICAgICAgICB2YXIgZGF0YTEgPSB7XHJcbiAgICAgICAgICAgICdldmVudF9hY3Rpb24nOiAnbGluaycsXHJcbiAgICAgICAgICAgICdldmVudF9uYW1lJyAgOiAnRWxlY3Ryb25pYyBUcmFuc21pc3Npb25zJyxcclxuICAgICAgICAgICAgJ2V2ZW50X3R5cGUnICA6ICdtYWluY29udGVudCdcclxuICAgICAgICB9O1xyXG4gICAgICAgIHV0YWcubGluayhkYXRhMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2V7XHJcbiAgICAgICAgJHNjb3BlLmNoZWNrYm94ID0gZmFsc2U7XHJcbiAgICAgICAgaWYoJHNjb3BlLmRpc3Bfbm9uZSA9PT0gXCJkaXNwX2Jsb2NrXCIpe1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzcF9ub25lID0gXCJkaXNwX25vbmVcIjtcclxuICAgICAgICAgICAgJCgnYm9keScpLmNzcygnb3ZlcmZsb3cnLCdhdXRvJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICRzY29wZS5oZ3QgPSBzY3JlZW4uaGVpZ2h0O1xyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBkb09uT3JpZW50YXRpb25DaGFuZ2UoKSB7XHJcbiAgICAgICAgaWYgKHNjcmVlbi53aWR0aCA8PTc2OCl7XHJcbiAgICAgICAgICAgIHZhciB3Y3Q7XHJcbiAgICAgICAgc3dpdGNoKHdpbmRvdy5vcmllbnRhdGlvbikgeyAgXHJcbiAgICAgICAgICAgIGNhc2UgLTkwIHx8IDkwOlxyXG4gICAgICAgICAgICAvL2xhbmRzY2FwZSBzdHlsZVxyXG4gICAgICAgICAgICAkc2NvcGUuaGd0ID0gc2NyZWVuLmhlaWdodDtcclxuICAgICAgICAgICAgYnJlYWs7IFxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAvL3BvcnRyYWl0IHN0eWxlXHJcbiAgICAgICAgICAgICRzY29wZS5oZ3QgPSBzY3JlZW4uaGVpZ2h0O1xyXG4gICAgICAgICAgICBicmVhazsgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHRcclxuICAgIH1cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIGRvT25PcmllbnRhdGlvbkNoYW5nZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvT25PcmllbnRhdGlvbkNoYW5nZSgpIHtcclxuICAgIGlmIChzY3JlZW4ud2lkdGggPD03Njgpe1xyXG4gICAgc3dpdGNoKHdpbmRvdy5vcmllbnRhdGlvbikgeyAgXHJcbiAgICAgICAgY2FzZSAtOTAgfHwgOTA6XHJcbiAgICAgICAgLy9sYW5kc2NhcGUgc3R5bGVcclxuICAgICAgICAkc2NvcGUuaGd0ID0gc2NyZWVuLmhlaWdodDtcclxuICAgICAgICAvLyRzY29wZS5taWRIZWlnaHQgPSBzY3JlZW4uaGVpZ2h0LzIuMTtcclxuICAgICAgICBcclxuICAgICAgICBicmVhazsgXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAvL3BvcnRyYWl0IFxyXG4gICAgICAgICRzY29wZS5oZ3QgPSBzY3JlZW4uaGVpZ2h0O1xyXG4gICAgICAgIC8vJHNjb3BlLm1pZEhlaWdodCA9IHNjcmVlbi5oZWlnaHQvMi4xO1xyXG4gICAgICAgIGJyZWFrOyBcclxuICAgICAgICB9XHJcbiAgICB9XHRcclxufVxyXG5cclxuLy9mb3IgYWNjZXB0IGNoZWNrYm94IHNob3VsZCBiZSBjaGVja2VkIHdoZW4gdXNlciBhY2NlcHRzIGFuZCBwb3AgdXAgYm94IGdldHMgY2xvc2UuXHJcbi8vIGZvciBjYW5jZWwgYnV0dG9uIGl0IHNob3VsZCBiZSB1bmNoZWNrZWQgYW5kIHBvcCBnZXRzIGNsb2VzZVxyXG4kc2NvcGUuaXNBY2NlcHQgPSBmdW5jdGlvbihldmVudCx2YWwpe1xyXG4gICAgaWYodmFsKXtcclxuICAgICAgICAkc2NvcGUuY2hlY2tib3ggPSB0cnVlO1xyXG4gICAgICAgIGlmKCRzY29wZS5kaXNwX25vbmUgPT09IFwiZGlzcF9ibG9ja1wiKXtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc3Bfbm9uZSA9IFwiZGlzcF9ub25lXCI7XHJcbiAgICAgICAgICAgICQoJ2JvZHknKS5jc3MoJ292ZXJmbG93JywnYXV0bycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGF0YTIgPSB7XHJcbiAgICAgICAgICAgICdldmVudF9hY3Rpb24nOiAnQnV0dG9uJyxcclxuICAgICAgICAgICAgJ2V2ZW50X25hbWUnICA6ICdJIENvbnNlbnQnLFxyXG4gICAgICAgICAgICAnZXZlbnRfdHlwZScgIDogJ21haW5jb250ZW50J1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdXRhZy5saW5rKGRhdGEyKTtcclxuXHJcbiAgICB9IGVsc2V7XHJcbiAgICAgICAgJHNjb3BlLm9wZW5Qb3BVcChldmVudCx2YWwsdHJ1ZSk7XHJcbiAgICAgICAgJCgnYm9keScpLmNzcygnb3ZlcmZsb3cnLCdhdXRvJyk7XHJcbiAgICB9XHJcbiAgICAgLy8gJHNjb3BlLmNoZWNrYm94ID0gZmxhZzsvL3RvZ2dsaW5nIGJldHdlZW4gY2hlY2tlZCBhbmQgdW5jaGVja2VkXHJcbn1cclxuLy9vcGVuIHBvcHVwIGVuZHMgXHJcblxyXG4gICAgJHNjb3BlLnN1Ym1pdExvbmdUZXJtQ2FyZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGxvbmdUZXJtQ2FyZUNvbW1vbi5zdGF0ZURyb3BWYWxpZGF0aW9uKCdub3RpZmllclN0YXRlTG9uZ1Rlcm0nLCAnbm90aWZpZXJTdGF0ZUZsYWcnLFxyXG4gICAgICAgICAgICAnU2VsZWN0IHN0YXRlJyk7XHJcbiAgICAgICAgbG9uZ1Rlcm1DYXJlQ29tbW9uLnN0YXRlRHJvcFZhbGlkYXRpb24oJ2luc3VyZWRTdGF0ZUxvbmdUZXJtJywgJ2luc3VyZWRTdGF0ZUZsYWcnLFxyXG4gICAgICAgICAgICAnU2VsZWN0IHN0YXRlJyk7XHJcbiAgICAgICAgJHNjb3BlLmlzTG9uZ1Rlcm1DYXJlU3VibWl0ID0gdHJ1ZTtcclxuICAgICAgICBzdWJtaXRDbGlja2VkID0gdHJ1ZTtcclxuICAgICAgICBpZiAoIWxvbmdDYXJlQ291bnQpIHtcclxuICAgICAgICAgICAgaWYgKCEkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YS5pbnN1cmVkQ2FyZU9uc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5sb3N0UG9saWN5JykucmVtb3ZlQ2xhc3MoJ25nLWhpZGUnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmxvc3RQb2xpY3knKS5hZGRDbGFzcygnbmctaGlkZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxvbmdDYXJlQ291bnQgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsaWRGb3JtKCkpIHtcclxuICAgICAgICAgICAgbG9uZ1Rlcm1DYXJlU2VydmljZXMubG9uZ1Rlcm1DYXJlSW5mb1Bvc3QoJHNjb3BlLCAkc2NvcGUubG9uZ1Rlcm1DYXJlRGF0YSwgZnVuY3Rpb24oXHJcbiAgICAgICAgICAgICAgICBkYXRhQWpheCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGFSZXNwb25jZSA9IGRhdGFBamF4LmRhdGEucmVzcG9uc2VTdGF0dXNDb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhUmVzcG9uY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3BvbmNlID09PSAnVElNRURfT1VUJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ1RJTUVEIE9VVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnSU5URVJOQUxfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnSU5URVJOQUwgRVJST1InO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ0NBUFRDSEFfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnSU5WQUxJRCBDQVBUQ0hBJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uY2UgPT09ICdTRVJWSUNFX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ1NFUlZJQ0UgRVJST1InO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ1NVQ0NFU1MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSB0a3NQYWdlVVJMICYmICdudWxsJyAhPT0gdGtzUGFnZVVSTCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGtzUGFnZVVSTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnU1VDQ0VTUy4gVGhhbmsgeW91IGZvciBzaGFyaW5nIHlvdXIgaW5mb3JtYXRpb24uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sb25nVGVybUNhcmVEYXRhID0ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLnJlc2V0RGF0ZVBpY2tlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNub3RpZmllclN0YXRlTG9uZ1Rlcm0nKS50ZXh0KCdTZWxlY3Qgc3RhdGUnKS5yZW1vdmVBdHRyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEtdmFsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2luc3VyZWRTdGF0ZUxvbmdUZXJtJykudGV4dCgnU2VsZWN0IHN0YXRlJykucmVtb3ZlQXR0cihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhLXZhbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNMb25nVGVybUNhcmVTdWJtaXQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbic6ICdmb3JtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9uYW1lJyAgOiAnTG9uZy1UZXJtIENhcmUgU3RhcnQgTm90aWZpY2F0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF90eXBlJyAgOiAnY2xhaW1zJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9zdGF0dXMnOiAnY29tcGxldGUnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGFnLmxpbmsoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaC13cmFwcGVyJykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuY0NtZE5ld0NoYWxsZW5nZSgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAod2FybmluZ01zZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmNvbnRyb2xsZXIoJ3JlZ2lzdGVyU3VwcGxpZXJDb250cmwnLCBbJyRzY29wZScsICckdGltZW91dCcsICdyZWdpc3RlclN1cHBsaWVyU2VydmljZXMnLCAnJHdpbmRvdycsIGZ1bmN0aW9uKFxyXG4gICAgJHNjb3BlLCAkdGltZW91dCwgcmVnaXN0ZXJTdXBwbGllclNlcnZpY2VzLCAkd2luZG93KSB7XHJcbiAgICAvKiBDb21tb24gZnVuY3Rpb24gbW9kdWxlIHN0YXJ0Ki9cclxuICAgICRzY29wZS5yZWdpc3RlclN1cHBpbGVyID0ge1xyXG5cclxuICAgIH07XHJcbiAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgdmFyIHJlZ2lzdGVyU3VwcGxpZXJGYWN0b3IsIHdhcm5pbmdNc2c7XHJcblxyXG4gICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICQoZG9jdW1lbnQpLm9uKCdyZXNwb25zaXZlOnN0YXRlY2hhbmdlZCcsIGZ1bmN0aW9uKGUsIHBhcmFtKSB7XHJcbiAgICAgICAgcmVnaXN0ZXJTdXBwbGllckZhY3RvciA9IHBhcmFtO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLyogJChkb2N1bWVudCkubG9hZChmdW5jdGlvbiAoKSB7XHJcbiAgICBcdHZhciBkYXRhPXsqL1xyXG4gICAgdXRhZ19kYXRhLmV2ZW50X2FjdGlvbiA9ICdmb3JtJztcclxuICAgIHV0YWdfZGF0YS5ldmVudF9uYW1lID0gJ1N1cHBsaWVyIERpdmVyc2l0eSBSZWdpc3RyYXRpb24nO1xyXG4gICAgdXRhZ19kYXRhLmV2ZW50X3R5cGUgPSAnc3VwcGxpZXInO1xyXG4gICAgdXRhZ19kYXRhLmV2ZW50X3N0YXR1cyA9ICdzdGFydCc7XHJcblxyXG4gICAgLyogfVxyXG5cdFx0dXRhZy5saW5rKGRhdGEpO1xyXG5cdH0pOyovXHJcblxyXG4gICAgYW5ndWxhci5lbGVtZW50KCcqJykucmVtb3ZlQ2xhc3MoJ2dldC1zYXJ0ZWRmb3JtLWRlZmF1bHQtaGlkZGVuJyk7XHJcbiAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG4gICAgYW5ndWxhci5lbGVtZW50KCcjcmVnaXN0ZXJTdXBwbGllckZvcm0sIC5lcnItY29udCcpLnJlbW92ZUNsYXNzKCdub25lJyk7XHJcbiAgICAkc2NvcGUuc3RhdGVWYWwgPSB0cnVlO1xyXG4gICAgJHNjb3BlLmlzTm90Q2hlY2tlZE93bmVyc2hpcCA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLmlzRW1wdHlPdGhlck93bmVyc2hpcCA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLmlzU0JEQ2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgdmFyIHJlZ2lzdGVyQ29tbW9uLCB0YWJsZUNlcnRpZmljYXRpb24sIGNoZWNrYm94ZXNDb21weUluZm8sIGNlcnRpZmljYXRpb25DaGVja2JveGVzLFxyXG4gICAgICAgIGNvbXBhbnlJbmZvID0ge1xyXG5cclxuICAgICAgICB9LFxyXG4gICAgICAgIGNlcnRpZmljYXRpb25JbmZvID0ge1xyXG5cclxuICAgICAgICB9LFxyXG4gICAgICAgIHRhYmxlQ2VydGlmaWNhdGlvbiwgY2VydGRhdGVMZW5ndGgsIGJ1c2luZXNzQ2hlY2tib3hlcyxcclxuICAgICAgICBjZXJ0ZGF0ZU9iaiA9IHtcclxuXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0YWJsZUNvdW50ID0gMCxcclxuICAgICAgICB0YWJsZV9pZHMgPSB7XHJcbiAgICAgICAgICAgICdwbHVzLU5NU0RDJyAgICAgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgJ3BsdXMtV0JFTkMnICAgICAgICAgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICAncGx1cy1OV0JPQycgICAgICAgICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICdwbHVzLXZldGVyYW5Pd25lZCcgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgJ3BsdXMtdmV0T3duZWQnICAgICAgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICAncGx1cy1TQkFIdWJab25lJyAgICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICdwbHVzLVNCQScgICAgICAgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgJ3BsdXMtYXdhcmRNYW5hZ2VtZW50JyA6IGZhbHNlLFxyXG4gICAgICAgICAgICAncGx1cy1VU1BBTicgICAgICAgICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICdwbHVzLVVTQkxOJyAgICAgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgJ3BsdXMtTkdMQ0MnICAgICAgICAgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICAncGx1cy1jZXJ0aWZpY2F0ZU90aGVyJzogZmFsc2VcclxuICAgICAgICB9O1xyXG5cclxuICAgICQoJyN0YWJsZUNlcnRpZmljYXRpb24gdGJvZHkgdHIgdGQ6Zmlyc3QtY2hpbGQnKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgJC5lYWNoKHRhYmxlX2lkcywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSBlLnRhcmdldC5pZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGVfaWRzW2tleV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGVfaWRzW2tleV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgICQoJyN0YWJsZUNlcnRpZmljYXRpb24gdGJvZHkgdHIgdGQgc3Bhbi5sZmdjaGVjay1ib3ggcCBpbnB1dCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICB2YXIgY2hlY2tlZElkID0gJ3BsdXMtJyArIGUudGFyZ2V0LmlkO1xyXG5cclxuICAgICAgICAkLmVhY2godGFibGVfaWRzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChrZXkgPT09IGNoZWNrZWRJZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoZS50YXJnZXQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NsaWNrJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmVnaXN0ZXJDb21tb24gPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHJlZ2lzdGVyTW9kdWxlID0ge1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZWdpc3Rlck1vZHVsZS5jb250aW51ZUJhY2tGb2N1cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgb2xIZWlnaHQgPSBhbmd1bGFyLmVsZW1lbnQoJyNtYWluLWNvbnRlbnQgaDInKS5vZmZzZXQoKS50b3A7XHJcblxyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogb2xIZWlnaHRcclxuICAgICAgICAgICAgfSwgODAwKTtcclxuICAgICAgICAgICAgaWYgKHRhYmxlQ291bnQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlQ2VydGlmaWNhdGlvbiA9ICQoJyN0YWJsZUNlcnRpZmljYXRpb24nKS5kYXRhVGFibGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGVzdHJveScgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdyZXNwb25zaXZlJyAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2JMZW5ndGhDaGFuZ2UnOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2JTb3J0JyAgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2JGaWx0ZXInICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3BhZ2luZycgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2luZm8nICAgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2F1dG9XaWR0aCcgICAgOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSwgNTApO1xyXG4gICAgICAgICAgICAgICAgdGFibGVDb3VudCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZWdpc3Rlck1vZHVsZS5zdGF0ZVZhbGlkYXRlRnVuYyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgc3RhdGVWYWx1ZSA9IGFuZ3VsYXIuZWxlbWVudCgnLm9yZ1N0YXRlJykudGV4dCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHN0YXRlVmFsdWUgPT09ICcnIHx8IHN0YXRlVmFsdWUgPT09ICdTZWxlY3Qgc3RhdGUnKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVWYWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZVZhbCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJlZ2lzdGVyTW9kdWxlLnZhbGlkYXRlQ29tcGFueUdvb2RzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5nb29kc1ZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgJHNjb3BlLm90aGVyc1ZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICghY2hlY2tib3hlc0NvbXB5SW5mby5pcygnOmNoZWNrZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmdvb2RzVmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmdvb2RzU2VsZWN0ZWQgPSBbXTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5nb29kc1ZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmdvb2RzLmdvb2RzMTQgPT09IHRydWUgJiYgYW5ndWxhci5lbGVtZW50KCcjb3RoZXJJbmZvJykudmFsKCkgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm90aGVyc1ZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm90aGVyc1ZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCQoJyNnb29kczE0JykucHJvcCgnY2hlY2tlZCcpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjb3RoZXJJbmZvJykudmFsKCcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVnaXN0ZXJNb2R1bGUub3duZXJFdGhuaWNpdGllcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcjZXRobmljaXRpZXNPdGhlcnMnKS5pcygnOmNoZWNrZWQnKSAmJiBhbmd1bGFyLmVsZW1lbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgJyNldGhuaWNpdHlPdGhlcnMnKS52YWwoKSA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc293bmVyRXRobmljaXRpZXNPdGhlcnNDaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc293bmVyRXRobmljaXRpZXNPdGhlcnNDaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZWdpc3Rlck1vZHVsZS5jZXJ0aWZ5Q29udGFjdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoIWNlcnRpZmljYXRpb25DaGVja2JveGVzLmlzKCc6Y2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNjZXJ0aWZpY2F0aW9uQ2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNjZXJ0aWZpY2F0aW9uQ2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmNlcnRpZmljYXRpb24tY29udCAgLmNlcnQtbnVtYmVyJykucmVtb3ZlQ2xhc3MoJ2Vyci1ib3JkZXInKS5uZXh0KClcclxuICAgICAgICAgICAgICAgIC5oaWRlKCk7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmNlcnRpZmljYXRpb24tY29udCAgLmNlcnQtZXhwJykucmVtb3ZlQ2xhc3MoJ2Vyci1ib3JkZXInKS5uZXh0KCkuaGlkZSgpO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5jZXJ0LWV4cCcpLnJlbW92ZUNsYXNzKCdlcnItYm9yZGVyJykubmV4dCgpLmhpZGUoKTtcclxuICAgICAgICAgICAgY2VydGRhdGVMZW5ndGggPSAwO1xyXG4gICAgICAgICAgICBjZXJ0aWZpY2F0aW9uSW5mby5jZXJ0aWZpY2F0aW9uID0gW107XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuY2VydGlmaWNhdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNlcnROdW1iZXIsIGNlcnRkYXRlLCBjZXJ0ZGF0ZU1vYmlsZSwgY2VydGRhdGVWYWw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNlcnROdW1iZXIgPSBhbmd1bGFyLmVsZW1lbnQoJyMnICsga2V5KS5jbG9zZXN0KCd0cicpLmZpbmQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICcuY2VydC1udW1iZXInKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnY2VydGlmaWNhdGVPdGhlcklucHV0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSAnT1RIRVInO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjZXJ0ZGF0ZSA9IGFuZ3VsYXIuZWxlbWVudCgnIycgKyBrZXkgKyAnLWRhdGUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVnaXN0ZXJTdXBwbGllckZhY3RvciA9PT0gJ21vYmlsZScgJiYgKCQod2luZG93KS53aWR0aCgpIDw9IDQzMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNlcnRkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmd1bGFyLmVsZW1lbnQoJyMnK2tleSsnLWRhdGUnKS52YWwoY2VydGRhdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZXJ0ZGF0ZU9ialtrZXldID0gYW5ndWxhci5lbGVtZW50KCcjJyArIGtleSArICctZGF0ZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2VydGRhdGVPYmpba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyMnICsga2V5ICsgJy1kYXRlJykudmFsKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VydGRhdGVPYmpba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjJyArIGtleSArICctZGF0ZScpLnZhbCgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jZXJ0ZGF0ZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge30pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlcnRkYXRlVmFsID0gY2VydGRhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VydGRhdGVNb2JpbGUgPSBhbmd1bGFyLmVsZW1lbnQoJyMnICsga2V5KS5jbG9zZXN0KCd0cicpLmZpbmQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLmNlcnQtZXhwJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlcnRkYXRlVmFsID0gY2VydGRhdGVNb2JpbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjZXJ0ZGF0ZSB8fCBjZXJ0ZGF0ZU1vYmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZXJ0ZGF0ZUxlbmd0aCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjZXJ0aWZpY2F0aW9uSW5mby5jZXJ0aWZpY2F0aW9uLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2VydGlmaWNhdGlvbic6IGFuZ3VsYXIuZWxlbWVudCgnIycgKyBrZXkpLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2VydE51bWJlcicgICA6IGNlcnROdW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdleHBpcnlEYXRlJyAgIDogY2VydGRhdGVWYWxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNlcnROdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjJyArIGtleSkuY2xvc2VzdCgndHInKS5maW5kKCcuY2VydC1udW1iZXInKS5yZW1vdmVDbGFzcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlcnItYm9yZGVyJykubmV4dCgpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyMnICsga2V5KS5jbG9zZXN0KCd0cicpLmZpbmQoJy5jZXJ0LW51bWJlcicpLmFkZENsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Vyci1ib3JkZXInKS5uZXh0KCkuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2VydGRhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZ2lzdGVyU3VwcGxpZXJGYWN0b3IgPT09ICdtb2JpbGUnICYmICgkKHdpbmRvdykud2lkdGgoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw9IDQzMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnIycgKyBrZXkpLmNsb3Nlc3QoJ3RyJykubmV4dCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCcuY2VydC1leHAnKS5yZW1vdmVDbGFzcygnZXJyLWJvcmRlcicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5uZXh0KCkuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJyNjZXJ0aWZpY2F0ZU90aGVyJykuaXMoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnOmNoZWNrZWQnKSAmJiBhbmd1bGFyLmVsZW1lbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI09USEVSLWRhdGUnKS52YWwoKSA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjT1RIRVItZGF0ZScpLmFkZENsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Vyci1ib3JkZXInKS5uZXh0KCkuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI09USEVSLWRhdGUnKS5yZW1vdmVDbGFzcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlcnItYm9yZGVyJykubmV4dCgpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnI2NlcnRpZmljYXRlT3RoZXInKS5pcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc6Y2hlY2tlZCcpICYmIGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcub3RoZXItdGV4dC1ib3gnKS52YWwoKSA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcub3RoZXItdGV4dC1ib3gnKS5hZGRDbGFzcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlcnItYm9yZGVyJykubmV4dCgpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5vdGhlci10ZXh0LWJveCcpLnJlbW92ZUNsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Vyci1ib3JkZXInKS5uZXh0KCkuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyMnICsga2V5KS5jbG9zZXN0KCd0cicpLmZpbmQoJy5jZXJ0LWV4cCcpLnJlbW92ZUNsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlcnItYm9yZGVyJykubmV4dCgpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVnaXN0ZXJTdXBwbGllckZhY3RvciA9PT0gJ21vYmlsZScgJiYgKCQod2luZG93KS53aWR0aCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8PSA0MzApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnIycgKyBrZXkpLmNsb3Nlc3QoJ3RyIHRkJykuZmluZChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy5jZXJ0aWZpY2F0aW9uLWNoZWNrYm94JykuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2VydGRhdGVPYmpba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyMnICsga2V5KS5jbG9zZXN0KCd0cicpLm5leHQoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5jZXJ0LWV4cCcpLmFkZENsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlcnItYm9yZGVyJykubmV4dCgpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjJyArIGtleSkuY2xvc2VzdCgndHInKS5uZXh0KClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCcuY2VydC1leHAnKS5yZW1vdmVDbGFzcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXJyLWJvcmRlcicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnIycgKyBrZXkpLmNsb3Nlc3QoJ3RyJykubmV4dCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmNlcnQtZXhwJykuYWRkQ2xhc3MoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Vyci1ib3JkZXInKS5uZXh0KCkuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyMnICsga2V5KS5jbG9zZXN0KCd0cicpLm5leHQoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5jZXJ0LWV4cCcpLmFkZENsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlcnItYm9yZGVyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnI2NlcnRpZmljYXRlT3RoZXInKS5pcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzpjaGVja2VkJykgJiYgYW5ndWxhci5lbGVtZW50KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI09USEVSLWRhdGUnKS52YWwoKSA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNPVEhFUi1kYXRlJykuYWRkQ2xhc3MoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlcnItYm9yZGVyJykubmV4dCgpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjT1RIRVItZGF0ZScpLnJlbW92ZUNsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXJyLWJvcmRlcicpLm5leHQoKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcjY2VydGlmaWNhdGVPdGhlcicpLmlzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnOmNoZWNrZWQnKSAmJiBhbmd1bGFyLmVsZW1lbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcub3RoZXItdGV4dC1ib3gnKS52YWwoKSA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5vdGhlci10ZXh0LWJveCcpLmFkZENsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXJyLWJvcmRlcicpLm5leHQoKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm90aGVyLXRleHQtYm94JykucmVtb3ZlQ2xhc3MoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlcnItYm9yZGVyJykubmV4dCgpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyMnICsga2V5KS5jbG9zZXN0KCd0cicpLmZpbmQoJy5jZXJ0LWV4cCcpLmFkZENsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Vyci1ib3JkZXInKS5uZXh0KCkuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcjY2VydGlmaWNhdGVPdGhlcicpLmlzKCc6Y2hlY2tlZCcpICYmIGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcuY2VydGlmaWNhdGVPdGhlcklucHV0JykudmFsKCkgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuY2VydGlmaWNhdGVPdGhlcklucHV0JykuYWRkQ2xhc3MoJ2Vyci1ib3JkZXInKS5uZXh0KClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9USEVSLWRhdGUgY2VydC1udW1iZXJcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuY2VydGlmaWNhdGVPdGhlcklucHV0JykucmVtb3ZlQ2xhc3MoJ2Vyci1ib3JkZXInKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAubmV4dCgpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJyNjZXJ0Tm8nKS52YWwoKSA9PT0gJycgJiYgYW5ndWxhci5lbGVtZW50KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyNjZXJ0aWZpY2F0ZU90aGVyJykuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNjZXJ0Tm8nKS5hZGRDbGFzcygnZXJyLWJvcmRlcicpLm5leHQoKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2NlcnRObycpLnJlbW92ZUNsYXNzKCdlcnItYm9yZGVyJykubmV4dCgpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJyNPVEhFUi1kYXRlJykudmFsKCkgPT09ICcnICYmIGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjY2VydGlmaWNhdGVPdGhlcicpLmlzKCc6Y2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjT1RIRVItZGF0ZScpLmFkZENsYXNzKCdlcnItYm9yZGVyJykubmV4dCgpLnNob3coKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjT1RIRVItZGF0ZScpLnJlbW92ZUNsYXNzKCdlcnItYm9yZGVyJykubmV4dCgpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge31cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJNb2R1bGU7XHJcbiAgICB9KSgkc2NvcGUpO1xyXG5cclxuICAgIGFuZ3VsYXIuZWxlbWVudCgnLm9yZy1zdGF0ZS1jb250IHVsIGxpJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJlZ2lzdGVyQ29tbW9uLnN0YXRlVmFsaWRhdGVGdW5jKCk7XHJcbiAgICAgICAgfSwgMjAwKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIGlzVHdvWmlwQ29kZShuYW1lLCBib29sZWFuVmFsdWUpIHtcclxuICAgICAgICBpZiAobmFtZSA9PT0gJ29yZ1ppcCcpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCA9IGJvb2xlYW5WYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJHNjb3BlLnJlZ2lzdGVyU3VwcGxpZXJQaG9uZU51bSA9IGZ1bmN0aW9uKGV2dCwgaW5wdXRWYWx1ZSwgbmFtZSwgemlwT3JQaG9uZSkge1xyXG4gICAgICAgIGlmIChpbnB1dFZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOS1dL2csICcnKTtcclxuICAgICAgICBpZiAoemlwT3JQaG9uZSA9PT0gJ3Bob25lJykge1xyXG4gICAgICAgICAgICB2YXIgcGF0dCA9IC9eKFxcZHszfVxcLVxcZHszfS1cXGR7NH0pJC87XHJcblxyXG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ29yZ1Bob25lTnVtJykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdEZvcm1hdCA9ICEocGF0dC50ZXN0KCRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGFbbmFtZV0pKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc1ByaW1hcnlDb3JyZWN0Rm9ybWF0ID0gIShwYXR0LnRlc3QoJHNjb3BlLnJlZ2lzdGVyQ29tcHlJbmZvRGF0YVtuYW1lXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhW25hbWVdLmxlbmd0aCA9PT0gMyAmJiBldnQua2V5Q29kZSAhPT0gOCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlZ2lzdGVyQ29tcHlJbmZvRGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGFbbmFtZV0gPSAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhW25hbWVdLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgLyhcXGR7M30pLywgJyQxLScpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID09PSA3ICYmIGV2dC5rZXlDb2RlICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlZ2lzdGVyQ29tcHlJbmZvRGF0YVtuYW1lXSA9ICRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGFbbmFtZV0ucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAvKFxcZHszfSkoXFxkezN9KS8sICckMS0kMi0nKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhW25hbWVdLmxlbmd0aCA9PT0gMTIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhW25hbWVdID0gJHNjb3BlLnJlZ2lzdGVyQ29tcHlJbmZvRGF0YVtuYW1lXS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgIC8oXFxkezN9KShcXGR7M30pKFxcZHs0fSkvLCAnJDEtJDItJDMnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhW25hbWVdLmxlbmd0aCA9PT0gMTApIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGFbbmFtZV0gPSAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhW25hbWVdLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuaXNDb3JyZWN0Rm9ybWF0ICYmIG5hbWUgPT09ICdvcmdQaG9uZU51bScpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhW25hbWVdLmxlbmd0aCA+PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhW25hbWVdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhW25hbWVdID0gc3RyLnNsaWNlKDAsIDEyKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb3JyZWN0Rm9ybWF0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmlzUHJpbWFyeUNvcnJlY3RGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhW25hbWVdLmxlbmd0aCA+PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhW25hbWVdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhW25hbWVdID0gc3RyLnNsaWNlKDAsIDEyKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNQcmltYXJ5Q29ycmVjdEZvcm1hdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh6aXBPclBob25lID09PSAnemlwJykge1xyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLnJlZ2lzdGVyQ29tcHlJbmZvRGF0YVtuYW1lXS5sZW5ndGggPT09IDUpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05LV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2dC5rZXlDb2RlID09PSAxMDkgfHwgZXZ0LmtleUNvZGUgPT09IDE4OSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGFbbmFtZV0gPSAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhW25hbWVdICsgJy0nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhW25hbWVdLmxlbmd0aCA+IDUgJiYgJHNjb3BlLnJlZ2lzdGVyQ29tcHlJbmZvRGF0YVtcclxuICAgICAgICAgICAgICAgIG5hbWVdLmxlbmd0aCA8PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5ldyBSZWdFeHAoJy0nKS50ZXN0KCRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGFbbmFtZV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID09PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF0dFppcCA9IC9eKFxcZHs1fVxcLVxcZHs0fSkkLztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAnb3JnWmlwJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFppcEZvcm1hdCA9ICEocGF0dFppcC50ZXN0KCRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGFbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVHdvWmlwQ29kZShuYW1lLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGFbbmFtZV0ubGVuZ3RoID09PSA5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2dC5rZXlDb2RlID09PSAxMDkgfHwgZXZ0LmtleUNvZGUgPT09IDE4OSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjJyArIGV2dC50YXJnZXQuaWQpLmluc2VydEF0Q2FyZXQoJy0nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaXNUd29aaXBDb2RlKG5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkKCcuY2VydGlmaWNhdGlvbi1jb250IHRib2R5IHRyIHRkOmZpcnN0LWNoaWxkJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIC8vICRzY29wZS5jZXJ0aWZpY2F0aW9uWycnK2UudGFyZ2V0LmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmlkXSA9IHRydWU7XHJcbiAgICAgICAgcmVnaXN0ZXJDb21tb24uY2VydGlmeUNvbnRhY3QoKTtcclxuICAgIH0pO1xyXG4gICAgJCgnYm9keScpLm9uKCdmb2N1cycsICcuY2VydC1leHAnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygkKHRoaXMpKTtcclxuICAgICAgICAkKHRoaXMpLmRhdGVwaWNrZXIoe1xyXG4gICAgICAgICAgICAnY2hhbmdlTW9udGgnOiB0cnVlLFxyXG4gICAgICAgICAgICAnY2hhbmdlWWVhcicgOiB0cnVlLFxyXG4gICAgICAgICAgICAnb25TZWxlY3QnICAgOiBmdW5jdGlvbihkYXRlVGV4dCwgaW5zdCkge1xyXG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJDb21tb24uY2VydGlmeUNvbnRhY3QoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLyogQ29tbW9uIGZ1bmN0aW9uIG1vZHVsZSBlbmQqL1xyXG4gICAgLyogU3RlcCAxIGZvcm0gU3RhcnQqL1xyXG4gICAgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHt9KTtcclxuICAgICRzY29wZS5pc0NvbnRpbnVlQ2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLmNvbnRpbnVlQmFjayA9IHRydWU7XHJcbiAgICAkc2NvcGUuZ29vZHNTZWxlY3RlZCA9IFtdO1xyXG4gICAgY2hlY2tib3hlc0NvbXB5SW5mbyA9ICQoJy5nb29kc1NlcnZpY2VzIGlucHV0W3R5cGU9XFwnY2hlY2tib3hcXCddJyk7XHJcbiAgICAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhID0ge1xyXG5cclxuICAgIH07XHJcbiAgICAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhLmJ1c2luZXNzQXMgPSAnJztcclxuICAgICRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGEuYnJhZHNoZWV0TnVtID0gJyc7XHJcbiAgICAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhLm9yZ1Bob25lTnVtRXh0biA9ICcnO1xyXG4gICAgJHNjb3BlLnJlZ2lzdGVyQ29tcHlJbmZvRGF0YS5wcmltYXJ5Q29udFBob25lTnVtRXh0biA9ICcnO1xyXG4gICAgJHNjb3BlLnZhbGlkYXRlR29vZHNTZXJ2aWNlcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJlZ2lzdGVyQ29tbW9uLnZhbGlkYXRlQ29tcGFueUdvb2RzKCk7XHJcbiAgICB9O1xyXG4gICAgJHNjb3BlLmNvbnRpbnVlU3VibWl0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY29tcGFueUluZm8uY2xhaW1Gb3JtID0ge1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbXBhbnlJbmZvLnByaW1hcnlBZGRyZXNzID0ge1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbXBhbnlJbmZvLnByaW1hcnlDb250YWN0ID0ge1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbXBhbnlJbmZvLnN1cHBsaWVyR29vZHNTZXJ2aWNlcztcclxuICAgICAgICAkc2NvcGUuaXNDb250aW51ZUNsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIHJlZ2lzdGVyQ29tbW9uLnN0YXRlVmFsaWRhdGVGdW5jKCk7XHJcbiAgICAgICAgcmVnaXN0ZXJDb21tb24udmFsaWRhdGVDb21wYW55R29vZHMoKTtcclxuICAgICAgICBpZiAoJHNjb3BlLnJlZ2lzdGVyQ29tcHlJbmZvLiR2YWxpZCAmJiAkc2NvcGUuc3RhdGVWYWwgJiYgISRzY29wZS5nb29kc1ZhbGlkICYmICEkc2NvcGUub3RoZXJzVmFsaWRcclxuICAgICAgICAgICAgJiYgISRzY29wZS5pc0NvcnJlY3RGb3JtYXQgJiYgISRzY29wZS5pc1ByaW1hcnlDb3JyZWN0Rm9ybWF0ICYmICEkc2NvcGUuaXNDb3JyZWN0WmlwRm9ybWF0KSB7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuZ29vZHMsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdvb2RzU2VsZWN0ZWQucHVzaChhbmd1bGFyLmVsZW1lbnQoJyMnICsgaW5kZXgpLnZhbCgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyAkc2NvcGUuZ29vZHNTZWxlY3RlZC5wdXNoKHtvdGhlckluZm86YW5ndWxhci5lbGVtZW50KCcjb3RoZXJJbmZvJykudmFsKCl9KTtcclxuICAgICAgICAgICAgJHNjb3BlLnN1cHBsaWVyR29vZHNTZXJ2aWNlc090aGVyID0gYW5ndWxhci5lbGVtZW50KCcjb3RoZXJJbmZvJykudmFsKCk7XHJcbiAgICAgICAgICAgIGNvbXBhbnlJbmZvLmNsYWltRm9ybSA9IHtcclxuICAgICAgICAgICAgICAgICdjb21wYW55TGVnYWxOYW1lJyAgIDogJHNjb3BlLnJlZ2lzdGVyQ29tcHlJbmZvRGF0YS5sZWdhbE5hbWUsXHJcbiAgICAgICAgICAgICAgICAnZG9pbmdCdXNpbmVzc0FzJyAgICA6ICRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGEuYnVzaW5lc3NBcyxcclxuICAgICAgICAgICAgICAgICdkdW5CcmFkc3RyZWV0TnVtYmVyJzogJHNjb3BlLnJlZ2lzdGVyQ29tcHlJbmZvRGF0YS5icmFkc2hlZXROdW1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29tcGFueUluZm8ucHJpbWFyeUFkZHJlc3MgPSB7XHJcbiAgICAgICAgICAgICAgICAnb3JnQWRkcmVzcycgICAgOiAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhLm9yZ0FkZHJlc3MsXHJcbiAgICAgICAgICAgICAgICAnb3JnQ2l0eScgICAgICAgOiAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhLm9yZ0NpdHksXHJcbiAgICAgICAgICAgICAgICAnb3JnU3RhdGUnICAgICAgOiBhbmd1bGFyLmVsZW1lbnQoJyNvcmdTdGF0ZScpLnRleHQoKSxcclxuICAgICAgICAgICAgICAgICdvcmdaaXBDb2RlJyAgICA6ICRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGEub3JnWmlwLFxyXG4gICAgICAgICAgICAgICAgJ29yZ0VtYWlsJyAgICAgIDogJHNjb3BlLnJlZ2lzdGVyQ29tcHlJbmZvRGF0YS5vcmdFbWFpbCxcclxuICAgICAgICAgICAgICAgICdvcmdQaG9uZU51bWJlcic6ICRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGEub3JnUGhvbmVOdW0sXHJcbiAgICAgICAgICAgICAgICAnb3JnUGhvbmVFeHQnICAgOiAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhLm9yZ1Bob25lTnVtRXh0bixcclxuICAgICAgICAgICAgICAgICdvcmdXZWJzaXRlJyAgICA6ICRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGEub3JnV2Vic2l0ZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb21wYW55SW5mby5wcmltYXJ5Q29udGFjdCA9IHtcclxuICAgICAgICAgICAgICAgICdjb250YWN0Rmlyc3ROYW1lJyAgOiAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhLnByaW1hcnlDb250Rmlyc3RuYW1lLFxyXG4gICAgICAgICAgICAgICAgJ2NvbnRhY3RMYXN0TmFtZScgICA6ICRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGEucHJpbWFyeUNvbnRMYXN0bmFtZSxcclxuICAgICAgICAgICAgICAgICdjb250YWN0VGl0bGUnICAgICAgOiAkc2NvcGUucmVnaXN0ZXJDb21weUluZm9EYXRhLnByaW1hcnlDb250VGl0bGUsXHJcbiAgICAgICAgICAgICAgICAnY29udGFjdFBob25lTnVtYmVyJzogJHNjb3BlLnJlZ2lzdGVyQ29tcHlJbmZvRGF0YS5wcmltYXJ5Q29udFBob25lTnVtLFxyXG4gICAgICAgICAgICAgICAgJ2NvbnRhY3RQaG9uZU51bUV4dCc6ICRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGEucHJpbWFyeUNvbnRQaG9uZU51bUV4dG4sXHJcbiAgICAgICAgICAgICAgICAnY29udGFjdEVtYWlsJyAgICAgIDogJHNjb3BlLnJlZ2lzdGVyQ29tcHlJbmZvRGF0YS5wcmltYXJ5Q29udEVtYWlsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb21wYW55SW5mby5zdXBwbGllckdvb2RzU2VydmljZXMgPSAkc2NvcGUuZ29vZHNTZWxlY3RlZDtcclxuXHJcbiAgICAgICAgICAgIC8vIHN1cHBsaWVyR29vZHNTZXJ2aWNlc0RhdGEucHVzaCh7JHNjb3BlLmdvb2RzU2VsZWN0ZWR9KTtcclxuICAgICAgICAgICAgJHNjb3BlLmNvbnRpbnVlQmFjayA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWdpc3RlckNvbW1vbi5jb250aW51ZUJhY2tGb2N1cygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLmMtZXJyLWJveCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbycpLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aXNFcnJWYWwgPSBhbmd1bGFyLmVsZW1lbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLmMtZXJyLWJveCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbycpLmVxKDApLnBhcmVudCgpLm9mZnNldCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50b3A7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlckhndCA9IGFuZ3VsYXIuZWxlbWVudCgnLlRvcGhlYWRlci1sb2dvYXJlYScpLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aXNFcnJWYWwgPSAodGlzRXJyVmFsIC0gaGVhZGVySGd0KSAtIDUwO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnaHRtbCwgYm9keScpLnN0b3AoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3Njcm9sbFRvcCc6IHRpc0VyclZhbFxyXG4gICAgICAgICAgICAgICAgICAgIH0sIDYwMCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLmMtZXJyLWJveCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbycpLmVxKDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgMjAwKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdpbnZhbGlkIGZvcm0nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vICRzY29wZS5jb250aW51ZUJhY2sgPSBmYWxzZTtcclxuICAgICAgICAvLyByZWdpc3RlckNvbW1vbi5jb250aW51ZUJhY2tGb2N1cygpO1xyXG4gICAgICAgIC8vICR0aW1lb3V0KGZ1bmN0aW9uICgpIHsgY29tbW9uRnVuY3Rpb25zLmVycm9yU2Nyb2xsUG9zKCcnKTsgfSwyMDApO1xyXG4gICAgfTtcclxuICAgICRzY29wZS5iYWNrVG9Db21wYW55ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRpbnVlQmFjayA9IHRydWU7XHJcbiAgICAgICAgcmVnaXN0ZXJDb21tb24uY29udGludWVCYWNrRm9jdXMoKTtcclxuXHJcbiAgICAgICAgLy8gdGFibGVDZXJ0aWZpY2F0aW9uLmRlc3Ryb3koKTtcclxuICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyogU3RlcCAxIGZvcm0gRW5kKi9cclxuICAgIC8qIFN0ZXAgMiBmb3JtIFN0YXJ0Ki9cclxuICAgICRzY29wZS5idXNpbmVzcyA9ICcnO1xyXG4gICAgJHNjb3BlLmlzU3VibWl0Q2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLmlzb3duZXJCdXNpbmVzc0NoZWNrZWQgPSBmYWxzZTtcclxuICAgICRzY29wZS5pc2NlcnRpZmljYXRpb25DaGVja2VkID0gZmFsc2U7XHJcbiAgICAkc2NvcGUuaXNvd25lckV0aG5pY2l0aWVzT3RoZXJzQ2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLm90aGVyQnVzaW5lc3MgPSAnJztcclxuICAgICRzY29wZS5ldGhuaWNpdHlPdGhlcnMgPSAnJztcclxuICAgIGNlcnRpZmljYXRpb25DaGVja2JveGVzID0gJCgnLmNlcnRpZmljYXRpb24tY29udCBpbnB1dFt0eXBlPVxcJ2NoZWNrYm94XFwnXScpO1xyXG4gICAgYnVzaW5lc3NDaGVja2JveGVzID0gJCgnLmJ1c2luZXNzQ2hlY2sgaW5wdXRbdHlwZT1cXCdjaGVja2JveFxcJ10nKTtcclxuICAgICRzY29wZS52YWxpZGF0ZUNlcnRpZnlCdXNpbmVzcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJlZ2lzdGVyQ29tbW9uLmNlcnRpZnlCdXNpbmVzcygpO1xyXG4gICAgfTtcclxuICAgICRzY29wZS52YWxpZGF0ZU93bmVyRXRobmljaXRpZXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZWdpc3RlckNvbW1vbi5vd25lckV0aG5pY2l0aWVzKCk7XHJcbiAgICB9O1xyXG4gICAgJHNjb3BlLnZhbGlkYXRlQ2VydGlmeUNvbnRhY3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZWdpc3RlckNvbW1vbi5jZXJ0aWZ5Q29udGFjdCgpO1xyXG4gICAgfTtcclxuICAgICRzY29wZS5jbGlja1NEQkJveCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCRzY29wZS5idXNpbmVzcy5TREIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAvLyBhbmd1bGFyLmVsZW1lbnQoJy5vd25lckV0aG5pY2l0aWVzIGlucHV0JykuYXR0cigncmVxdWlyZWQnLCcnKTtcclxuICAgICAgICAgICAgJHNjb3BlLmlzU0JEQ2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJHNjb3BlLmlzU0JEQ2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAkKCcjZXRobmljaXRpZXNPdGhlcnMnKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHNjb3BlLmlzb3duZXJFdGhuaWNpdGllc090aGVyc0NoZWNrZWQgPSAkKHRoaXMpLmlzKCc6Y2hlY2tlZCcpO1xyXG4gICAgfSk7XHJcbiAgICAkKCcuYnVzaW5lc3NDaGVjayBpbnB1dFt0eXBlPVxcJ2NoZWNrYm94XFwnXScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICRzY29wZS5idXNpbmVzc0NoZWNrYm94ZXMgPSB0cnVlO1xyXG4gICAgICAgICQoJy5idXNpbmVzc0NoZWNrIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXScpLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICgkKHRoaXMpLmlzKCc6Y2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYnVzaW5lc3NDaGVja2JveGVzID0gISQodGhpcykuaXMoJzpjaGVja2VkJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vICRzY29wZS5pc293bmVyRXRobmljaXRpZXNPdGhlcnNDaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBnZXRDYXB0Y2hhRGF0YSgpIHtcclxuICAgICAgICB2YXIgbnVjYXB0Y2hhQW5zRW50ciwgbnVjYXB0Y2hhQW5zRXh0O1xyXG5cclxuICAgICAgICBpZiAoIWFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZW50ZXInKSkge1xyXG4gICAgICAgICAgICBudWNhcHRjaGFBbnNFbnRyID0gJyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRW50ciA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1hbnN3ZXItZW50ZXInKS52YWwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKSkge1xyXG4gICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSAnJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKS52YWwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHNjb3BlLnJlZ2lzdGVyU3VwcGlsZXJbJ251Y2FwdGNoYS1lcGQnXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1lcGQnKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUucmVnaXN0ZXJTdXBwaWxlclsnbnVjYXB0Y2hhLWFuc3dlciddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlcicpLnZhbCgpO1xyXG4gICAgICAgICRzY29wZS5yZWdpc3RlclN1cHBpbGVyWydudWNhcHRjaGEtYW5zd2VyLWVudGVyJ10gPSBudWNhcHRjaGFBbnNFbnRyO1xyXG4gICAgICAgICRzY29wZS5yZWdpc3RlclN1cHBpbGVyWydudWNhcHRjaGEtYW5zd2VyLWV4aXQnXSA9IG51Y2FwdGNoYUFuc0V4dDtcclxuICAgICAgICAkc2NvcGUucmVnaXN0ZXJTdXBwaWxlci5sbXN1Ym1pdHRlZCA9IGFuZ3VsYXIuZWxlbWVudCgnI2xtc3VibWl0dGVkJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLnJlZ2lzdGVyU3VwcGlsZXJbJ251Y2FwdGNoYS1pbmRleCddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWluZGV4JykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLnJlZ2lzdGVyU3VwcGlsZXJbJ251Y2FwdGNoYS1kYXRhdHlwZSddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWRhdGF0eXBlJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLnJlZ2lzdGVyU3VwcGlsZXJbJ251Y2FwdGNoYS1wdHlwZSddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLXB0eXBlJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLnJlZ2lzdGVyU3VwcGlsZXJbJ251Y2FwdGNoYS1sYW5ndWFnZSddID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWxhbmd1YWdlJykudmFsKCk7XHJcbiAgICAgICAgJHNjb3BlLnJlZ2lzdGVyU3VwcGlsZXJbJ251Y2FwdGNoYS1yZWdpb24nXSA9IGFuZ3VsYXIuZWxlbWVudCgnI251Y2FwdGNoYS1yZWdpb24nKS52YWwoKTtcclxuICAgICAgICAkc2NvcGUucmVnaXN0ZXJTdXBwaWxlclsnbnVjYXB0Y2hhLW1lZGlhLWRvd25sb2FkLXRpbWUnXSA9ICcnO1xyXG4gICAgICAgICRzY29wZS5yZWdpc3RlclN1cHBpbGVyWydudWNhcHRjaGEtYWRzZXJ2LWRvd25sb2FkLXRpbWUnXSA9ICcnO1xyXG4gICAgICAgICRzY29wZS5yZWdpc3RlclN1cHBpbGVyWydudWNhcHRjaGEtZmFsbGJhY2stdG9rZW4nXSA9ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldEZvcm1EYXRhKCkge1xyXG4gICAgICAgIGNlcnRpZmljYXRpb25JbmZvLm93bmVyc2hpcENlcnRpZmljYXRpb25TbWFsbEJ1c2luZXNzID0gJHNjb3BlLmJ1c2luZXNzLlNNIHx8ICdObyc7XHJcbiAgICAgICAgY2VydGlmaWNhdGlvbkluZm8ub3duZXJzaGlwQ2VydGlmaWNhdGlvbk90aGVyID0gJHNjb3BlLmJ1c2luZXNzLk9USEVSIHx8ICdObyc7XHJcbiAgICAgICAgY2VydGlmaWNhdGlvbkluZm8ub3duZXJzaGlwQ2VydGlmaWNhdGlvbkxnYnQgPSAkc2NvcGUuYnVzaW5lc3MuTEdCVCB8fCAnTm8nO1xyXG4gICAgICAgIGNlcnRpZmljYXRpb25JbmZvLm93bmVyc2hpcENlcnRpZmljYXRpb25IdWJ6b25lID0gJHNjb3BlLmJ1c2luZXNzLkhVQlpvbmUgfHwgJ05vJztcclxuICAgICAgICBjZXJ0aWZpY2F0aW9uSW5mby5vd25lcnNoaXBDZXJ0aWZpY2F0aW9uVm9zYiA9ICRzY29wZS5idXNpbmVzcy5WT1NCIHx8ICdObyc7XHJcbiAgICAgICAgY2VydGlmaWNhdGlvbkluZm8ub3duZXJzaGlwQ2VydGlmaWNhdGlvblNkYiA9ICRzY29wZS5idXNpbmVzcy5TREIgfHwgJ05vJztcclxuICAgICAgICBjZXJ0aWZpY2F0aW9uSW5mby5vd25lcnNoaXBDZXJ0aWZpY2F0aW9uV29zYiA9ICRzY29wZS5idXNpbmVzcy5XT1NCIHx8ICdObyc7XHJcbiAgICAgICAgY2VydGlmaWNhdGlvbkluZm8ub3duZXJzaGlwQ2VydGlmaWNhdGlvbk90aGVyVmFsdWUgPSAkc2NvcGUub3RoZXJCdXNpbmVzcztcclxuICAgICAgICAkc2NvcGUub3duZXJFdGhuaWNpdGllcyA9ICRzY29wZS5vd25lckV0aG5pY2l0aWVzIHx8ICcnO1xyXG4gICAgICAgIGNlcnRpZmljYXRpb25JbmZvLm93bmVyRXRobmljaXRpZXMucHVzaCgkc2NvcGUub3duZXJFdGhuaWNpdGllcyk7XHJcbiAgICAgICAgY2VydGlmaWNhdGlvbkluZm8ub3duZXJFdGhuaWNpdGllc090aGVyID0gJHNjb3BlLmV0aG5pY2l0eU90aGVycztcclxuXHJcbiAgICAgICAgJHNjb3BlLnJlZ2lzdGVyU3VwcGlsZXIuY29tcGFueUluZm8gPSBjb21wYW55SW5mbztcclxuICAgICAgICAkc2NvcGUucmVnaXN0ZXJTdXBwaWxlci5mb3JtRmFjdG9yID0gcmVnaXN0ZXJTdXBwbGllckZhY3RvcjtcclxuICAgICAgICAkc2NvcGUucmVnaXN0ZXJTdXBwaWxlci5jZXJ0aWZpY2F0aW9uSW5mbyA9IGNlcnRpZmljYXRpb25JbmZvO1xyXG4gICAgICAgICRzY29wZS5yZWdpc3RlclN1cHBpbGVyLnN1cHBsaWVyR29vZHNTZXJ2aWNlc090aGVyID0gJHNjb3BlLnN1cHBsaWVyR29vZHNTZXJ2aWNlc090aGVyO1xyXG4gICAgICAgICRzY29wZS5yZWdpc3RlclN1cHBpbGVyLmlkZW50aXR5ID0gJ1JFR0lTVEVSX0FTX0FfU1VQUExJRVInO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRpc3BsYXlFcnIoKSB7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IHRydWU7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGlzRXJyVmFsID0gYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykuZXEoXHJcbiAgICAgICAgICAgICAgICAgICAgMCkucGFyZW50KCkub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlckhndCA9IGFuZ3VsYXIuZWxlbWVudCgnLlRvcGhlYWRlci1sb2dvYXJlYScpLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRpc0VyclZhbCA9ICh0aXNFcnJWYWwgLSBoZWFkZXJIZ3QpIC0gNTA7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3Njcm9sbFRvcCc6IHRpc0VyclZhbFxyXG4gICAgICAgICAgICAgICAgfSwgNjAwLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5jLWVyci1ib3gsIC5jLWVyci1ib3gtbm9pbWcsIC5jLWVyci1ib3gtcmFkaW8nKS5lcSgwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMjAwKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB2YWxpZEZvcm0oKSB7XHJcbiAgICAgICAgdmFyIGlzQ2FwdGNoYUF2YWlsID0gZmFsc2UsXHJcbiAgICAgICAgICAgIGNhcGNoYVZhbDtcclxuXHJcbiAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoLXdyYXBwZXInKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGlzQ2FwdGNoYUF2YWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgY2FwY2hhVmFsID0gYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlcicpLnZhbCgpO1xyXG4gICAgICAgICAgICBpZiAoY2FwY2hhVmFsKSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2hhLWFuc3dlci1lcnJvcicpLnNob3coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZXJyTGVuZ3RoID0gYW5ndWxhci5lbGVtZW50KCcjdGFibGVDZXJ0aWZpY2F0aW9uIC5lcnItYm9yZGVyJykubGVuZ3RoLFxyXG4gICAgICAgICAgICBjZXJ0Zkxlbmd0aCA9IGFuZ3VsYXIuZWxlbWVudCgnI3RhYmxlQ2VydGlmaWNhdGlvbiAuY2VydGlmaWNhdGlvbi1jaGVja2JveDpjaGVja2VkJykubGVuZ3RoO1xyXG5cclxuICAgICAgICBpZiAoISRzY29wZS5pc293bmVyQnVzaW5lc3NDaGVja2VkICYmICEkc2NvcGUuaXNvd25lckV0aG5pY2l0aWVzT3RoZXJzQ2hlY2tlZCAmJiAhJHNjb3BlLmlzY2VydGlmaWNhdGlvbkNoZWNrZWRcclxuICAgICAgICAgICAgJiYgJHNjb3BlLnJlZ2lzdGVyU3VwcGxpZXJGb3JtLm93bmVyRXRobmljaXRpZXMuJHZhbGlkICYmICEkc2NvcGUuYnVzaW5lc3NDaGVja2JveGVzICYmICEkc2NvcGUuaXNFbXB0eU90aGVyT3duZXJzaGlwXHJcbiAgICAgICAgICAgICYmIGVyckxlbmd0aCA8PSAwICYmIChjZXJ0Zkxlbmd0aCA9PSBjZXJ0ZGF0ZUxlbmd0aCkgJiYgKChpc0NhcHRjaGFBdmFpbCAmJiBjYXBjaGFWYWwpIHx8ICFpc0NhcHRjaGFBdmFpbCkpIHtcclxuICAgICAgICAgICAgaWYgKGlzQ2FwdGNoYUF2YWlsKSB7XHJcbiAgICAgICAgICAgICAgICBnZXRDYXB0Y2hhRGF0YSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdldEZvcm1EYXRhKCk7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI3JlZnJlc2gnKS50cmlnZ2VyKCdjbGljaycpO1xyXG4gICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVyU2hvdygpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRpc3BsYXlFcnIoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghYnVzaW5lc3NDaGVja2JveGVzLmlzKCc6Y2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5idXNpbmVzc0NoZWNrYm94ZXMgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUub3RoZXJCdXNpbmVzcyA9PT0gJycgJiYgJHNjb3BlLmJ1c2luZXNzLk9USEVSID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc0VtcHR5T3RoZXJPd25lcnNoaXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUub3RoZXJCdXNpbmVzcyAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc0VtcHR5T3RoZXJPd25lcnNoaXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc0VtcHR5T3RoZXJPd25lcnNoaXAgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICRzY29wZS5idXNpbmVzc0NoZWNrYm94ZXMgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2VydGlmaWNhdGlvbkluZm8ub3duZXJzaGlwQ2VydGlmaWNhdGlvbiA9IFtdO1xyXG4gICAgICAgIGNlcnRpZmljYXRpb25JbmZvLm93bmVyRXRobmljaXRpZXMgPSBbXTtcclxuICAgICAgICBjZXJ0aWZpY2F0aW9uSW5mby5jZXJ0aWZpY2F0aW9uID0gW107XHJcbiAgICAgICAgdmFyIHJlZ2lzdGVyU3VwcGlsZXJPYmplY3QgPSB7XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5pc1N1Ym1pdENsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmNlcnRpZmljYXRlT3RoZXJJbnB1dCcpLnJlbW92ZUNsYXNzKCdlcnItYm9yZGVyJyk7XHJcblxyXG4gICAgICAgIC8vIHJlZ2lzdGVyQ29tbW9uLmNlcnRpZnlCdXNpbmVzcygpO1xyXG4gICAgICAgIHJlZ2lzdGVyQ29tbW9uLm93bmVyRXRobmljaXRpZXMoKTtcclxuICAgICAgICByZWdpc3RlckNvbW1vbi5jZXJ0aWZ5Q29udGFjdCgpO1xyXG5cclxuICAgICAgICAkc2NvcGUuc29tZVNlbGVjdGVkID0gZnVuY3Rpb24ob2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmplY3QpLnNvbWUoZnVuY3Rpb24oa2V5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0W2tleV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICh2YWxpZEZvcm0oKSkge1xyXG4gICAgICAgICAgICByZWdpc3RlclN1cHBsaWVyU2VydmljZXMucmVnaXN0ZXJTdXBwbGllclBvc3QoJHNjb3BlLCAkc2NvcGUucmVnaXN0ZXJTdXBwaWxlciwgZnVuY3Rpb24oXHJcbiAgICAgICAgICAgICAgICBkYXRhQWpheCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGFSZXNwb25jZSA9IGRhdGFBamF4LmRhdGEucmVzcG9uc2VTdGF0dXNDb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhUmVzcG9uY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3BvbmNlID09PSAnVElNRURfT1VUJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnVElNRUQgT1VUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2dldFN0YXJ0ZWQtc3VjY2Vzcy10eHQnKS5hZGRDbGFzcygnZ2V0U3RhcnRlZC1lcnJvcicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbmNlID09PSAnSU5URVJOQUxfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdJTlRFUk5BTCBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNnZXRTdGFydGVkLXN1Y2Nlc3MtdHh0JykuYWRkQ2xhc3MoJ2dldFN0YXJ0ZWQtZXJyb3InKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ0NBUFRDSEFfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdJTlZBTElEIENBUFRDSEEnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjZ2V0U3RhcnRlZC1zdWNjZXNzLXR4dCcpLmFkZENsYXNzKCdnZXRTdGFydGVkLWVycm9yJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uY2UgPT09ICdTRVJWSUNFX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnU0VSVklDRSBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNnZXRTdGFydGVkLXN1Y2Nlc3MtdHh0JykuYWRkQ2xhc3MoJ2dldFN0YXJ0ZWQtZXJyb3InKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ1NVQ0NFU1MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9IHRrc1BhZ2VVUkwgJiYgJ251bGwnICE9IHRrc1BhZ2VVUkwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24uaHJlZiA9IHRrc1BhZ2VVUkw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2dcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdTVUNDRVNTLiBUaGFuayB5b3UgZm9yIHNoYXJpbmcgeW91ciBpbmZvcm1hdGlvbi4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjbnVjYXB0Y2hhLWFuc3dlcicpLnZhbCgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVnaXN0ZXJTdXBwaWxlciA9IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZWdpc3RlckNvbXB5SW5mb0RhdGEgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ29vZHMgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYnVzaW5lc3MgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3duZXJFdGhuaWNpdGllcyA9IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jZXJ0aWZpY2F0aW9uID0ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjb3JnU3RhdGUnKS50ZXh0KCdTZWxlY3Qgc3RhdGUnKS5yZW1vdmVBdHRyKCdkYXRhLXZhbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9hY3Rpb24nOiAnZm9ybScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfbmFtZScgIDogJ1N1cHBsaWVyIERpdmVyc2l0eSBSZWdpc3RyYXRpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3R5cGUnICA6ICdzdXBwbGllcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfc3RhdHVzJzogJ2NvbXBsZXRlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRhZy5saW5rKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcubnVjYXB0Y2gtd3JhcHBlcicpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmNDbWROZXdDaGFsbGVuZ2UoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb250aW51ZUNsaWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWJtaXRDbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmJhY2tUb0NvbXBhbnkoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVySGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJCgnLnJhZGlvLWlucHV0LXdhcHBlciBpbnB1dFt0eXBlPVwicmFkaW9cIl0nKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgJCgnLmJ1c2luZXNzQ2hlY2sgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJykuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICQoJyN0YWJsZUNlcnRpZmljYXRpb24gaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJykuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICQoJyN0YWJsZUNlcnRpZmljYXRpb24gaW5wdXRbdHlwZT1cInRleHRcIl0nKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHdhcm5pbmdNc2cgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKiBTdGVwIDIgZm9ybSBFbmQqL1xyXG4gICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHRhYmxlVmFsID0gYW5ndWxhci5lbGVtZW50KCcuQXJ0aWNsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7XHJcbiAgICAgICAgdmFyIGhlYWRlckhndCA9IGFuZ3VsYXIuZWxlbWVudCgnLlRvcGhlYWRlci1sb2dvYXJlYScpLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICB0YWJsZVZhbCA9ICh0YWJsZVZhbCAtIGhlYWRlckhndCkgLSAzMDtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICdzY3JvbGxUb3AnOiB0YWJsZVZhbFxyXG4gICAgICAgIH0sIDgwMCk7XHJcbiAgICB9O1xyXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gICAgbGZnYXBwLmNvbnRyb2xsZXIoJ3NlY3VyaXR5UmVwb3J0aW5nQ29udHJsJywgc2VjdXJpdHlSZXBvcnRpbmdDb250cmwpO1xyXG4gICAgc2VjdXJpdHlSZXBvcnRpbmdDb250cmwuJGluamVjdCA9IFsnJHNjb3BlJywgJyR0aW1lb3V0JywgJ3NlY3VyaXR5UmVwb3J0aW5nU2VydmljZXMnLCAnJHdpbmRvdyddO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNlY3VyaXR5UmVwb3J0aW5nQ29udHJsKCRzY29wZSwgJHRpbWVvdXQsIHNlY3VyaXR5UmVwb3J0aW5nU2VydmljZXMsICR3aW5kb3cpIHtcclxuICAgICAgICAvKiAkKGRvY3VtZW50KS5sb2FkKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGE9eyovXHJcbiAgICAgICAgdXRhZ19kYXRhLmV2ZW50X2FjdGlvbiA9ICdmb3JtJztcclxuICAgICAgICB1dGFnX2RhdGEuZXZlbnRfbmFtZSA9ICdTZWN1cml0eSBSZXBvcnQgTm90aWZpY2F0aW9uJztcclxuICAgICAgICB1dGFnX2RhdGEuZXZlbnRfdHlwZSA9ICdzZWN1cml0eSc7XHJcbiAgICAgICAgdXRhZ19kYXRhLmV2ZW50X3N0YXR1cyA9ICdzdGFydCc7XHJcblxyXG4gICAgICAgIC8qIH1cclxuICAgICAgICB1dGFnLmxpbmsoZGF0YSk7XHJcbiAgICB9KTsqL1xyXG5cclxuICAgICAgICB2YXIgc2VjdXJpdHlSZXBvcnREYXRhRm9ybUZhY3Rvciwgd2FybmluZ01zZztcclxuXHJcbiAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5lbWFpbEZvcm1hdCA9IC9eW2Etel0rW2EtejAtOS5fXStAW2Etel0rXFwuW2Etei5dezIsNX0kLztcclxuXHJcbiAgICAgICAgJChkb2N1bWVudCkub24oJ3Jlc3BvbnNpdmU6c3RhdGVjaGFuZ2VkJywgZnVuY3Rpb24oZSwgcGFyYW0pIHtcclxuICAgICAgICAgICAgc2VjdXJpdHlSZXBvcnREYXRhRm9ybUZhY3RvciA9IHBhcmFtO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnKicpLnJlbW92ZUNsYXNzKCdub25lJyk7XHJcbiAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG5cclxuICAgICAgICAvKiAkKCdib2R5Jykub24oJ2ZvY3VzJyxcIi5mb3JtLWRhdGUtZmxkXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkKHRoaXMpLmRhdGVwaWNrZXIoe1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlTW9udGg6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VZZWFyOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgeWVhclJhbmdlOiAnLTIwMDorMCdcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0pOyAqL1xyXG4gICAgICAgIFxyXG4gICBcclxuICAgICAgICAkc2NvcGUubnVtYmVyRm9ybWF0ID0gZnVuY3Rpb24oZXZ0LCBpbnB1dFZhbHVlLCBuYW1lLCB6aXBPclBob25lKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dFZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUuc2VjdXJpdHlSZXBvcnREYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOS1dL2csICcnKTtcclxuICAgICAgICAgICAgaWYgKHppcE9yUGhvbmUgPT09ICdwaG9uZScpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwYXR0ID0gL14oXFxkezN9XFwtXFxkezN9LVxcZHs0fSkkLztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3Bob25lJykge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RQaG9uZUZvcm1hdCA9ICEocGF0dC50ZXN0KCRzY29wZS5zZWN1cml0eVJlcG9ydERhdGFbbmFtZV0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc2VjdXJpdHlSZXBvcnREYXRhW25hbWVdLmxlbmd0aCA9PT0gMyAmJiBldnQua2V5Q29kZSAhPT0gOCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWN1cml0eVJlcG9ydERhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlY3VyaXR5UmVwb3J0RGF0YVtuYW1lXSA9ICRzY29wZS5zZWN1cml0eVJlcG9ydERhdGFbbmFtZV0ucmVwbGFjZSgvKFxcZHszfSkvLCAnJDEtJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5zZWN1cml0eVJlcG9ydERhdGFbbmFtZV0ubGVuZ3RoID09PSA3ICYmIGV2dC5rZXlDb2RlICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlY3VyaXR5UmVwb3J0RGF0YVtuYW1lXSA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VjdXJpdHlSZXBvcnREYXRhW25hbWVdID0gJHNjb3BlLnNlY3VyaXR5UmVwb3J0RGF0YVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KShcXGR7M30pLyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyQxLSQyLScpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUuc2VjdXJpdHlSZXBvcnREYXRhW25hbWVdLmxlbmd0aCA9PT0gMTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VjdXJpdHlSZXBvcnREYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWN1cml0eVJlcG9ydERhdGFbbmFtZV0gPSAkc2NvcGUuc2VjdXJpdHlSZXBvcnREYXRhW25hbWVdLnJlcGxhY2UoLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUuc2VjdXJpdHlSZXBvcnREYXRhW25hbWVdLmxlbmd0aCA9PT0gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VjdXJpdHlSZXBvcnREYXRhW25hbWVdID0gJHNjb3BlLnNlY3VyaXR5UmVwb3J0RGF0YVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KShcXGR7M30pKFxcZHs0fSkvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnJDEtJDItJDMnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaXNDb3JyZWN0UGhvbmVGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNlY3VyaXR5UmVwb3J0RGF0YVtuYW1lXS5sZW5ndGggPj0gMTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9ICRzY29wZS5zZWN1cml0eVJlcG9ydERhdGFbbmFtZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VjdXJpdHlSZXBvcnREYXRhW25hbWVdID0gc3RyLnNsaWNlKDAsIDEyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFBob25lRm9ybWF0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGUsIHtcclxuICAgICAgICAgICAgJ2lzU2VjdXJpdHlSZXBvcnRpbmdDbGlja2VkJzogZmFsc2UsXHJcbiAgICAgICAgICAgICdzZWN1cml0eVJlcG9ydERhdGEnICAgICAgICAgICA6IHtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICdsYXN0U3RhdGVGbGFnJyAgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgJ3N0YXRlRmxhZycgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICAnaXNEYXRlVmFsaWQnICAgICAgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICAnaXNBZ3JlZScgICAgICAgICAgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICAndmFsaWRhdGlvbkVycm9yU2hvdyc6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldENhcHRjaGFEYXRhKCkge1xyXG4gICAgICAgICAgICB2YXIgbnVjYXB0Y2hhQW5zRW50ciwgbnVjYXB0Y2hhQW5zRXh0O1xyXG5cclxuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykpIHtcclxuICAgICAgICAgICAgICAgIG51Y2FwdGNoYUFuc0VudHIgPSAnJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG51Y2FwdGNoYUFuc0VudHIgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykudmFsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKSkge1xyXG4gICAgICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gJyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKS52YWwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUuc2VjdXJpdHlSZXBvcnREYXRhWydnUmVjYXB0Y2hhUmVzcG9uc2UnXSA9ICQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Rm9ybURhdGEoKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5zZWN1cml0eVJlcG9ydERhdGEuaWRlbnRpdHkgPSAnU0VDVVJJVFlfUkVQT1JUSU5HX0ZPUk0nO1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VjdXJpdHlSZXBvcnREYXRhLmZvcm1GYWN0b3IgPSBzZWN1cml0eVJlcG9ydERhdGFGb3JtRmFjdG9yO1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VjdXJpdHlSZXBvcnREYXRhLmZpcnN0TmFtZSA9ICRzY29wZS5zZWN1cml0eVJlcG9ydERhdGEuZmlyc3ROYW1lO1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VjdXJpdHlSZXBvcnREYXRhLmxhc3ROYW1lID0gJHNjb3BlLnNlY3VyaXR5UmVwb3J0RGF0YS5sYXN0TmFtZTtcclxuICAgICAgICAgICAgJHNjb3BlLnNlY3VyaXR5UmVwb3J0RGF0YS5waG9uZSA9ICRzY29wZS5zZWN1cml0eVJlcG9ydERhdGEucGhvbmU7XHJcbiAgICAgICAgICAgICRzY29wZS5zZWN1cml0eVJlcG9ydERhdGEuZW1haWwgPSAkc2NvcGUuc2VjdXJpdHlSZXBvcnREYXRhLmVtYWlsO1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VjdXJpdHlSZXBvcnREYXRhLmlzc3VlRGVzY3JpcHRpb24gPSAkc2NvcGUuc2VjdXJpdHlSZXBvcnREYXRhLmlzc3VlRGVzY3JpcHRpb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBkaXNwbGF5RXJyKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IHRydWU7XHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLmMtZXJyLWJveCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbycpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGlzRXJyVmFsID0gYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykuZXEoMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgpLm9mZnNldCgpLnRvcDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVySGd0ID0gYW5ndWxhci5lbGVtZW50KCcuVG9waGVhZGVyLWxvZ29hcmVhJykub3V0ZXJIZWlnaHQodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRpc0VyclZhbCA9ICh0aXNFcnJWYWwgLSBoZWFkZXJIZ3QpIC0gNTA7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCdodG1sLCBib2R5Jykuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGlzRXJyVmFsXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgNjAwLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykuZXEoMCkuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgMjAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHZhbGlkRm9ybSgpIHtcclxuICAgICAgICAgICAgdmFyIGlzQ2FwdGNoYUF2YWlsID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjYXBjaGFWYWw7XHJcblxyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcuZy1yZWNhcHRjaGEnKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpc0NhcHRjaGFBdmFpbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjYXBjaGFWYWwgPSBhbmd1bGFyLmVsZW1lbnQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhcGNoYVZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCRzY29wZS5zZWN1cml0eVJlcG9ydGluZy4kdmFsaWQgJiYgKChpc0NhcHRjaGFBdmFpbCAmJiBjYXBjaGFWYWwpIHx8ICFpc0NhcHRjaGFBdmFpbCkgJiYgISRzY29wZS5pc0NvcnJlY3RQaG9uZUZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzQ2FwdGNoYUF2YWlsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0Q2FwdGNoYURhdGEoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGdldEZvcm1EYXRhKCk7XHJcbiAgICAgICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVyU2hvdygpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZhbGlkYXRpb25FcnJvclNob3cgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkaXNwbGF5RXJyKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRzY29wZS5zdWJtaXRSZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5pc1NlY3VyaXR5UmVwb3J0aW5nQ2xpY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHN1Ym1pdENsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAodmFsaWRGb3JtKCkpIHtcclxuICAgICAgICAgICAgICAgIHNlY3VyaXR5UmVwb3J0aW5nU2VydmljZXMuc2VjdXJpdHlSZXBvcnRpbmdQb3N0KCRzY29wZSwgJHNjb3BlLnNlY3VyaXR5UmVwb3J0RGF0YSwgZnVuY3Rpb24oZGF0YUFqYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YVJlc3BvbmNlID0gZGF0YUFqYXguZGF0YS5yZXNwb25zZVN0YXR1c0NvZGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhUmVzcG9uY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzU3VjY2VzcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhUmVzcG9uY2UgPT09ICdUSU1FRF9PVVQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnVElNRUQgT1VUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ0lOVEVSTkFMX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ0lOVEVSTkFMIEVSUk9SJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ0NBUFRDSEFfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnSU5WQUxJRCBDQVBUQ0hBJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFSZXNwb25jZSA9PT0gJ1NFUlZJQ0VfRVJST1InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnU0VSVklDRSBFUlJPUic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uY2UgPT09ICdTVUNDRVNTJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHRrc1BhZ2VVUkwgJiYgJ251bGwnICE9PSB0a3NQYWdlVVJMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzU3VjY2VzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24uaHJlZiA9IHRrc1BhZ2VVUkw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdTVUNDRVNTLiBUaGFuayB5b3UgZm9yIHNoYXJpbmcgeW91ciBpbmZvcm1hdGlvbi4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sYXN0U3RhdGVGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VjdXJpdHlSZXBvcnREYXRhID0ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1NlY3VyaXR5UmVwb3J0aW5nQ2xpY2tlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9hY3Rpb24nOiAnZm9ybScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X25hbWUnICA6ICdTZWN1cml0eSBSZXBvcnQgTm90aWZpY2F0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfdHlwZScgIDogJ3NlY3VyaXR5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfc3RhdHVzJzogJ2NvbXBsZXRlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGFnLmxpbmsoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoLXdyYXBwZXInKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuY0NtZE5ld0NoYWxsZW5nZSgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdhcm5pbmdNc2cgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlXYXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgdGFibGVWYWwgPSBhbmd1bGFyLmVsZW1lbnQoJy5BcnRpY2xlQ29udGVudCcpLm9mZnNldCgpLnRvcDtcclxuICAgICAgICAgICAgdmFyIGhlYWRlckhndCA9IGFuZ3VsYXIuZWxlbWVudCgnLlRvcGhlYWRlci1sb2dvYXJlYScpLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICAgICAgdGFibGVWYWwgPSAodGFibGVWYWwgLSBoZWFkZXJIZ3QpIC0gMjA7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnaHRtbCwgYm9keScpLnN0b3AoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICdzY3JvbGxUb3AnOiB0YWJsZVZhbFxyXG4gICAgICAgICAgICB9LCA4MDApO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gICAgbGZnYXBwLmNvbnRyb2xsZXIoJ3NwYW5pc2hDb250YWN0Rm9ybUNvbnRybCcsIHNwYW5pc2hDb250YWN0Rm9ybUNvbnRybCk7XHJcbiAgICBzcGFuaXNoQ29udGFjdEZvcm1Db250cmwuJGluamVjdCA9IFsnJHNjb3BlJywgJyR0aW1lb3V0JywgJ3NwYW5pc2hDb250YWN0Rm9ybVNlcnZpY2VzJywgJyR3aW5kb3cnXTtcclxuXHJcbiAgICBmdW5jdGlvbiBzcGFuaXNoQ29udGFjdEZvcm1Db250cmwoJHNjb3BlLCAkdGltZW91dCwgc3BhbmlzaENvbnRhY3RGb3JtU2VydmljZXMsICR3aW5kb3cpIHtcclxuICAgICAgICAkc2NvcGUuaXNGaXJzdENsaWNrID0gdHJ1ZTtcclxuICAgICAgICAvKiAkKGRvY3VtZW50KS5sb2FkKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGE9eyovXHJcbiAgICAgICAgLy91dGFnX2RhdGEuZXZlbnRfYWN0aW9uID0gJ2Zvcm0nO1xyXG4gICAgICAgIC8vdXRhZ19kYXRhLmV2ZW50X25hbWUgPSAnUk9MIFNwYW5pc2ggQ29udGFjdCBGT1JNJztcclxuICAgICAgICAvL3V0YWdfZGF0YS5ldmVudF90eXBlID0gJ0NvbnRhY3QnO1xyXG4gICAgICAgIC8vdXRhZ19kYXRhLmV2ZW50X3N0YXR1cyA9ICdzdGFydCc7XHJcblxyXG4gICAgICAgIC8qIH1cclxuICAgICAgICB1dGFnLmxpbmsoZGF0YSk7XHJcbiAgICB9KTsqL1xyXG5cclxuICAgICAgICB2YXIgc3BhbmlzaENvbnRhY3RGb3JtRGF0YUZvcm1GYWN0b3IsIHdhcm5pbmdNc2c7XHJcblxyXG4gICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheVdhcm5pbmdNc2cgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuZGlzcGxheVN1Y2Nlc3NNc2cgPSBmYWxzZTtcclxuICAgICAgICAvLyRzY29wZS5lbWFpbEZvcm1hdCA9IC9eW2Etel0rW2EtejAtOS5fXStAW2Etel0rXFwuW2Etei5dezIsNX0kLztcclxuICAgICAgICAkc2NvcGUuZW1haWxGb3JtYXQgPSAvXihbYS16QS1aMC05X1xcLVxcLl0rKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLil8KChbYS16QS1aMC05XFwtXStcXC4pKykpKFthLXpBLVpdezIsNH18WzAtOV17MSwzfSkoXFxdPykkLztcclxuICAgICAgICAkc2NvcGUuZnVsbE5hbWVGb3JtYXQgPSAvXihbw4fDvMOpw6LDpMOgw6XDp8Oqw6vDqMOvw67DrMOEw4XDicOmw4bDtMO2w7LDu8O5w7/DlsOcw6HDrcOzw7rDscORYS16QS1aIFxcLVxcJ1xcLl0rKSQvO1xyXG5cclxuICAgICAgICAkKGRvY3VtZW50KS5vbigncmVzcG9uc2l2ZTpzdGF0ZWNoYW5nZWQnLCBmdW5jdGlvbihlLCBwYXJhbSkge1xyXG4gICAgICAgICAgICBzcGFuaXNoQ29udGFjdEZvcm1EYXRhRm9ybUZhY3RvciA9IHBhcmFtO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnKicpLnJlbW92ZUNsYXNzKCdub25lJyk7XHJcbiAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlckhpZGUoKTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaGEtYW5zd2VyLWVycm9yJykuaGlkZSgpO1xyXG5cclxuICAgICAgICAvKiAkKCdib2R5Jykub24oJ2ZvY3VzJyxcIi5mb3JtLWRhdGUtZmxkXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkKHRoaXMpLmRhdGVwaWNrZXIoe1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlTW9udGg6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VZZWFyOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgeWVhclJhbmdlOiAnLTIwMDorMCdcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0pOyAqL1xyXG4gICAgICAgIFxyXG4gICAgICAgICRzY29wZS5vbkZvY3VzQW5hbHl0aWNzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuaXNGaXJzdENsaWNrKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNGaXJzdENsaWNrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAnZXZlbnRfYWN0aW9uJyA6ICdmb3JtJyxcclxuICAgICAgICAgICAgICAgICAgICAnZXZlbnRfbmFtZScgICA6ICdST0wgU3BhbmlzaCBDb250YWN0IEZPUk0nLFxyXG4gICAgICAgICAgICAgICAgICAgICdldmVudF90eXBlJyAgIDogJ2NvbnRhY3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICdldmVudF9zdGF0dXMnIDogJ3N0YXJ0J1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICB1dGFnLmxpbmsoZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICBcclxuICAgICAgICAkc2NvcGUubnVtYmVyRm9ybWF0ID0gZnVuY3Rpb24oZXZ0LCBpbnB1dFZhbHVlLCBuYW1lLCB6aXBPclBob25lKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoaW5wdXRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKiBTaW5jZSBwaG9uZSBudW1iZXIgaXMgb3B0aW9uYWwganVzdCByZXR1cm4gZW1wdHkgaW4gY2FzZSBub3RoaW5nIGlzIGVudGVyZWQgKiovXHJcbiAgICAgICAgICAgIGlmICghaW5wdXRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdFBob25lRm9ybWF0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRzY29wZS5zcGFuaXNoQ29udGFjdEZvcm1EYXRhW25hbWVdID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXjAtOS1dL2csICcnKTtcclxuICAgICAgICAgICAgaWYgKHppcE9yUGhvbmUgPT09ICdwaG9uZScpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwYXR0ID0gL14oXFxkezN9XFwtXFxkezN9LVxcZHs0fSkkLztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3Bob25lJykge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RQaG9uZUZvcm1hdCA9ICEocGF0dC50ZXN0KCRzY29wZS5zcGFuaXNoQ29udGFjdEZvcm1EYXRhW25hbWVdKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNwYW5pc2hDb250YWN0Rm9ybURhdGFbbmFtZV0ubGVuZ3RoID09PSAzICYmIGV2dC5rZXlDb2RlICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNwYW5pc2hDb250YWN0Rm9ybURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNwYW5pc2hDb250YWN0Rm9ybURhdGFbbmFtZV0gPSAkc2NvcGUuc3BhbmlzaENvbnRhY3RGb3JtRGF0YVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KS8sICckMS0nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLnNwYW5pc2hDb250YWN0Rm9ybURhdGFbbmFtZV0ubGVuZ3RoID09PSA3ICYmIGV2dC5rZXlDb2RlICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNwYW5pc2hDb250YWN0Rm9ybURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNwYW5pc2hDb250YWN0Rm9ybURhdGFbbmFtZV0gPSAkc2NvcGUuc3BhbmlzaENvbnRhY3RGb3JtRGF0YVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KShcXGR7M30pLyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyQxLSQyLScpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUuc3BhbmlzaENvbnRhY3RGb3JtRGF0YVtuYW1lXS5sZW5ndGggPT09IDEyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNwYW5pc2hDb250YWN0Rm9ybURhdGFbbmFtZV0gPSBpbnB1dFZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNwYW5pc2hDb250YWN0Rm9ybURhdGFbbmFtZV0gPSAkc2NvcGUuc3BhbmlzaENvbnRhY3RGb3JtRGF0YVtuYW1lXS5yZXBsYWNlKC8oXFxkezN9KShcXGR7M30pKFxcZHs0fSkvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnJDEtJDItJDMnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLnNwYW5pc2hDb250YWN0Rm9ybURhdGFbbmFtZV0ubGVuZ3RoID09PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zcGFuaXNoQ29udGFjdEZvcm1EYXRhW25hbWVdID0gJHNjb3BlLnNwYW5pc2hDb250YWN0Rm9ybURhdGFbbmFtZV0ucmVwbGFjZSgvKFxcZHszfSkoXFxkezN9KShcXGR7NH0pLyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyQxLSQyLSQzJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmlzQ29ycmVjdFBob25lRm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5zcGFuaXNoQ29udGFjdEZvcm1EYXRhW25hbWVdLmxlbmd0aCA+PSAxMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyID0gJHNjb3BlLnNwYW5pc2hDb250YWN0Rm9ybURhdGFbbmFtZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3BhbmlzaENvbnRhY3RGb3JtRGF0YVtuYW1lXSA9IHN0ci5zbGljZSgwLCAxMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RQaG9uZUZvcm1hdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgYW5ndWxhci5leHRlbmQoJHNjb3BlLCB7XHJcbiAgICAgICAgICAgICdpc1NwYW5pc2hDb250YWN0Rm9ybUNsaWNrZWQnOiBmYWxzZSxcclxuICAgICAgICAgICAgJ3NwYW5pc2hDb250YWN0Rm9ybURhdGEnICAgICAgICAgICA6IHtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICdsb2NhdGlvbkZsYWcnICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICAndmFsaWRhdGlvbkVycm9yU2hvdyc6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGNvbW1vblJlcXVlc3QgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBjb21tb25SZXF1ZXN0TW9kdWxlID0ge1xyXG5cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkcm9wVmFsdWU7XHJcblxyXG4gICAgICAgICAgICBjb21tb25SZXF1ZXN0TW9kdWxlLmRyb3BEb3duVmFsaWRhdGlvbiA9IGZ1bmN0aW9uKGlkLCBmbGFnTmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGRyb3BWYWx1ZSA9IGFuZ3VsYXIuZWxlbWVudCgnIycgKyBpZCkudGV4dCgpO1xyXG4vLyAgICAgICAgICAgICAgICBhbGVydChcImlkOiBcIisgaWQgKyBcIiAtLSB2YWx1ZTogXCIrIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGlmIChkcm9wVmFsdWUudHJpbSgpICE9PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZVtmbGFnTmFtZV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlW2ZsYWdOYW1lXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaWQgPT09ICdsb2NhdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3BhbmlzaENvbnRhY3RGb3JtRGF0YS5sb2NhdGlvbiA9IGFuZ3VsYXIuZWxlbWVudCgnI2xvY2F0aW9uJykudGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNvbW1vblJlcXVlc3RNb2R1bGU7XHJcbiAgICAgICAgfSkoJHNjb3BlKTtcclxuXHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCd1bC5sb2NhdGlvbkxpc3QgbGknKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29tbW9uUmVxdWVzdC5kcm9wRG93blZhbGlkYXRpb24oJ2xvY2F0aW9uJywgJ2xvY2F0aW9uRmxhZycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1NlbGVjY2lvbmEgdW4gZXN0YWRvJyk7XHJcbiAgICAgICAgICAgIH0sIDIwMCk7ICAgICAgICAgICAgXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldENhcHRjaGFEYXRhKCkge1xyXG4gICAgICAgICAgICB2YXIgbnVjYXB0Y2hhQW5zRW50ciwgbnVjYXB0Y2hhQW5zRXh0O1xyXG5cclxuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykpIHtcclxuICAgICAgICAgICAgICAgIG51Y2FwdGNoYUFuc0VudHIgPSAnJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG51Y2FwdGNoYUFuc0VudHIgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWVudGVyJykudmFsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKSkge1xyXG4gICAgICAgICAgICAgICAgbnVjYXB0Y2hhQW5zRXh0ID0gJyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBudWNhcHRjaGFBbnNFeHQgPSBhbmd1bGFyLmVsZW1lbnQoJyNudWNhcHRjaGEtYW5zd2VyLWV4aXQnKS52YWwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUuc3BhbmlzaENvbnRhY3RGb3JtRGF0YVsnZ1JlY2FwdGNoYVJlc3BvbnNlJ10gPSAkKCcjZy1yZWNhcHRjaGEtcmVzcG9uc2UnKS52YWwoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEZvcm1EYXRhKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuc3BhbmlzaENvbnRhY3RGb3JtRGF0YS5pZGVudGl0eSA9ICdST0xfUkVHSVNUUkFUSU9OX0VTJztcclxuICAgICAgICAgICAgJHNjb3BlLnNwYW5pc2hDb250YWN0Rm9ybURhdGEuZm9ybUZhY3RvciA9IHNwYW5pc2hDb250YWN0Rm9ybURhdGFGb3JtRmFjdG9yO1xyXG4gICAgICAgICAgICAkc2NvcGUuc3BhbmlzaENvbnRhY3RGb3JtRGF0YS5mdWxsTmFtZSA9ICRzY29wZS5zcGFuaXNoQ29udGFjdEZvcm1EYXRhLmZ1bGxOYW1lOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAkc2NvcGUuc3BhbmlzaENvbnRhY3RGb3JtRGF0YS5waG9uZSA9ICRzY29wZS5zcGFuaXNoQ29udGFjdEZvcm1EYXRhLnBob25lO1xyXG4gICAgICAgICAgICAkc2NvcGUuc3BhbmlzaENvbnRhY3RGb3JtRGF0YS5lbWFpbElEID0gJHNjb3BlLnNwYW5pc2hDb250YWN0Rm9ybURhdGEuZW1haWxJRDtcclxuICAgICAgICAgICAgJHNjb3BlLnNwYW5pc2hDb250YWN0Rm9ybURhdGEuZmluYW5jaWFsTmVlZCA9ICRzY29wZS5zcGFuaXNoQ29udGFjdEZvcm1EYXRhLmZpbmFuY2lhbE5lZWQ7XHJcbiAgICAgICAgICAgICRzY29wZS5zcGFuaXNoQ29udGFjdEZvcm1EYXRhLmxvY2F0aW9uID0gYW5ndWxhci5lbGVtZW50KCcjbG9jYXRpb24nKS50ZXh0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBkaXNwbGF5RXJyKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUudmFsaWRhdGlvbkVycm9yU2hvdyA9IHRydWU7XHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLmMtZXJyLWJveCwgLmMtZXJyLWJveC1ub2ltZywgLmMtZXJyLWJveC1yYWRpbycpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGlzRXJyVmFsID0gYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykuZXEoMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgpLm9mZnNldCgpLnRvcDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVySGd0ID0gYW5ndWxhci5lbGVtZW50KCcuc2l0ZS1uYXZpZ2F0aW9uJykub3V0ZXJIZWlnaHQodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRpc0VyclZhbCA9ICh0aXNFcnJWYWwgLSBoZWFkZXJIZ3QpIC0gNTA7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCdodG1sLCBib2R5Jykuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGlzRXJyVmFsXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgNjAwLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuYy1lcnItYm94LCAuYy1lcnItYm94LW5vaW1nLCAuYy1lcnItYm94LXJhZGlvJykuZXEoMCkuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgMjAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHZhbGlkRm9ybSgpIHtcclxuICAgICAgICAgICAgdmFyIGlzQ2FwdGNoYUF2YWlsID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjYXBjaGFWYWw7XHJcblxyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcuZy1yZWNhcHRjaGEnKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpc0NhcHRjaGFBdmFpbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjYXBjaGFWYWwgPSBhbmd1bGFyLmVsZW1lbnQoJyNnLXJlY2FwdGNoYS1yZXNwb25zZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhcGNoYVZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLm51Y2FwdGNoYS1hbnN3ZXItZXJyb3InKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCRzY29wZS5zcGFuaXNoQ29udGFjdEZvcm0uJHZhbGlkICYmICgoaXNDYXB0Y2hhQXZhaWwgJiYgY2FwY2hhVmFsKSB8fCAhaXNDYXB0Y2hhQXZhaWwpICYmICEkc2NvcGUuaXNDb3JyZWN0UGhvbmVGb3JtYXQgJiYgISRzY29wZS5sb2NhdGlvbkZsYWcpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc0NhcHRjaGFBdmFpbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdldENhcHRjaGFEYXRhKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBnZXRGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlclNob3coKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS52YWxpZGF0aW9uRXJyb3JTaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkaXNwbGF5RXJyKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qU3BlY2lhbCBDaGFyYWN0ZXIgdmFsaWRhdGlvbiBzdGFydHMqL1xyXG4gICAgICAgICRzY29wZS5WYWxpZGF0ZVBhc3RlID0gZnVuY3Rpb24oY29udFR5cGUsIGUpIHtcclxuICAgICAgICAgICAgdmFyIGN0cmxOYW1lID0gZS50YXJnZXQuYXR0cmlidXRlcy5pZC52YWx1ZTtcclxuICAgICAgICAgICAgdmFyIHBhc3RlZERhdGEgPSBcIlwiO1xyXG4gICAgICAgICAgICBpZiAoZS50eXBlID09IFwiZHJvcFwiKSB7XHJcbiAgICAgICAgICAgICAgICBwYXN0ZWREYXRhID0gZS5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcIlRleHRcIik7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS50eXBlID09IFwicGFzdGVcIikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNsaXBEYXRhO1xyXG4gICAgICAgICAgICAgICAgY2xpcERhdGEgPSBlLmNsaXBib2FyZERhdGEgfHwgd2luZG93LmNsaXBib2FyZERhdGE7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xpcERhdGEgPT0gdW5kZWZpbmVkKSBjbGlwRGF0YSA9IGUub3JpZ2luYWxFdmVudC5jbGlwYm9hcmREYXRhO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsaXBEYXRhICE9IHVuZGVmaW5lZCkgcGFzdGVkRGF0YSA9IGNsaXBEYXRhLmdldERhdGEoJ1RleHQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY3VycmVudERhdGEgPSBQcm9jZXNzRGF0YUZvckNvcnJlY3Rpb24oY29udFR5cGUsIGN0cmxOYW1lLCBwYXN0ZWREYXRhKTtcclxuICAgICAgICAgICAgdmFyIGNoYXJMZW5ndGggPSAkKFwiI1wiK2N0cmxOYW1lKS5hdHRyKCdtYXhMZW5ndGgnKTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnREYXRhLmxlbmd0aCA+IGNoYXJMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRhID0gY3VycmVudERhdGEuc2xpY2UoMCwgY2hhckxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAkKFwiI1wiK2N0cmxOYW1lKS52YWwoY3VycmVudERhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICRzY29wZS5zcGFuaXNoQ29udGFjdEZvcm1bY3RybE5hbWVdID0gY3VycmVudERhdGE7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAkc2NvcGUuVXBkYXRlSlNPTiA9IGZ1bmN0aW9uKGNvbnRUeXBlLCBlKSB7XHJcbiAgICAgICAgICAgIHZhciBjdHJsTmFtZSA9IGUudGFyZ2V0LmF0dHJpYnV0ZXMuaWQudmFsdWU7XHJcbiAgICAgICAgICAgIHZhciBjaGFyTGVuZ3RoID0gJChcIiNcIitjdHJsTmFtZSkuYXR0cignbWF4TGVuZ3RoJyk7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9ICQoXCIjXCIrY3RybE5hbWUpLnZhbCgpO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgJChcIiNcIitjdHJsTmFtZSkudmFsKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBQcm9jZXNzRGF0YUZvckNvcnJlY3Rpb24oY29udFR5cGUsIGN0cmxOYW1lLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gY2hhckxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIjXCIrY3RybE5hbWUpLnZhbCh2YWx1ZS5zbGljZSgwLCBjaGFyTGVuZ3RoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3BhbmlzaENvbnRhY3RGb3JtW2N0cmxOYW1lXSA9ICQoXCIjXCIrY3RybE5hbWUpLnZhbCgpLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICRzY29wZVtcImludmFsaWRcIiArIGN0cmxOYW1lXSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBWYWxpZGF0ZURyb3AoY29udFR5cGUsIGN0cmxOYW1lLCBldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudERhdGEgPSAkKFwiI1wiK2N0cmxOYW1lLmlkKS52YWwoKTtcclxuICAgICAgICAgICAgdmFyIHBhc3RlZERhdGEgPSBcIlwiO1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PSBcImRyb3BcIikge1xyXG4gICAgICAgICAgICAgICAgcGFzdGVkRGF0YSA9IGV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwiVGV4dFwiKTtcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnREYXRhID0gUHJvY2Vzc0RhdGFGb3JDb3JyZWN0aW9uKGNvbnRUeXBlLCBjdHJsTmFtZS5pZCwgcGFzdGVkRGF0YSk7XHJcbiAgICAgICAgICAgIHZhciAkc2NvcGUgPSBnZXRTY29wZSgnc3BhbmlzaENvbnRhY3RGb3JtQ29udHJsJyk7XHJcbiAgICAgICAgICAgICRzY29wZS5zcGFuaXNoQ29udGFjdEZvcm1bY3RybE5hbWVdID0gY3VycmVudERhdGE7XHJcbiAgICAgICAgICAgIHZhciBjaGFyTGVuZ3RoID0gJChcIiNcIitjdHJsTmFtZS5pZCkuYXR0cignbWF4TGVuZ3RoJyk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50RGF0YS5sZW5ndGggPiBjaGFyTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0YSA9IGN1cnJlbnREYXRhLnNsaWNlKDAsIGNoYXJMZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgJChcIiNcIitjdHJsTmFtZS5pZCkudmFsKGN1cnJlbnREYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRTY29wZShjdHJsTmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgc2VsID0gJ2FydGljbGVbbmctY29udHJvbGxlcj1cIicgKyBjdHJsTmFtZSArICdcIl0nO1xyXG4gICAgICAgICAgICByZXR1cm4gYW5ndWxhci5lbGVtZW50KHNlbCkuc2NvcGUoKTtcclxuICAgICAgICB9XHJcbiAgICAvKlNwZWNpYWwgQ2hhcmFjdGVyIHZhbGlkYXRpb24gZW5kcyAqL1xyXG5cclxuICAgICAgICAkc2NvcGUuc3VibWl0UmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuaXNTcGFuaXNoQ29udGFjdEZvcm1DbGlja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgc3VibWl0Q2xpY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbW1vblJlcXVlc3QuZHJvcERvd25WYWxpZGF0aW9uKCdsb2NhdGlvbicsICdsb2NhdGlvbkZsYWcnLCAnU2VsZWNjaW9uYSB1biBlc3RhZG8nKTtcclxuICAgICAgICAgICAgaWYgKHZhbGlkRm9ybSgpKSB7XHJcbiAgICAgICAgICAgICAgICBzcGFuaXNoQ29udGFjdEZvcm1TZXJ2aWNlcy5zcGFuaXNoQ29udGFjdEZvcm1Qb3N0KCRzY29wZSwgJHNjb3BlLnNwYW5pc2hDb250YWN0Rm9ybURhdGEsIGZ1bmN0aW9uKGRhdGFBamF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFSZXNwb25zZSA9IGRhdGFBamF4LmRhdGEucmVzcG9uc2VTdGF0dXNDb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVJlc3BvbnNlID09PSAnVElNRURfT1VUJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ1RJTUVEIE9VVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uc2UgPT09ICdJTlRFUk5BTF9FUlJPUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBJbnZhbGlkRmllbGRzU3RyID0gZGF0YUFqYXguZGF0YS5zZXJ2aWNlUmVwb25zZU1lc3NhZ2UucmVwbGFjZShcIltcIiwgXCJcIikucmVwbGFjZShcIl1cIiwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgSW52YWxpZEZpZWxkcyA9IEludmFsaWRGaWVsZHNTdHIudG9TdHJpbmcoKS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGlnaGxpZ2h0IGludmFsaWQgZmllbGRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGlDbnQgPSAwOyBpQ250IDwgSW52YWxpZEZpZWxkcy5sZW5ndGg7IGlDbnQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnZhbGlkRmxhZyA9IFwiaW52YWxpZFwiICsgSW52YWxpZEZpZWxkc1tpQ250XS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlW2ludmFsaWRGbGFnXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnSU5URVJOQUwgRVJST1InO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbnNlID09PSAnQ0FQVENIQV9FUlJPUicgfHwgZGF0YVJlc3BvbnNlID09PSAnUkVDQVBUQ0hBX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ0lOVkFMSUQgQ0FQVENIQSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhUmVzcG9uc2UgPT09ICdTRVJWSUNFX0VSUk9SJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTXNnID0gJ1NFUlZJQ0UgRVJST1InO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVJlc3BvbnNlID09PSAnU1VDQ0VTUycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSB0a3NQYWdlVVJMICYmICdudWxsJyAhPT0gdGtzUGFnZVVSTCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1Y2Nlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2F0aW9uLmhyZWYgPSB0a3NQYWdlVVJMO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNc2cgPSAnU1VDQ0VTUy4gVGhhbmsgeW91IGZvciBzaGFyaW5nIHlvdXIgaW5mb3JtYXRpb24uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5U3VjY2Vzc01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9jYXRpb25GbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3BhbmlzaENvbnRhY3RGb3JtRGF0YSA9IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTcGFuaXNoQ29udGFjdEZvcm1DbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNGaXJzdENsaWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9hY3Rpb24nOiAnZm9ybScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X25hbWUnICA6ICdST0wgU3BhbmlzaCBDb250YWN0IEZPUk0nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF90eXBlJyAgOiAnY29udGFjdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3N0YXR1cyc6ICdjb21wbGV0ZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRhZy5saW5rKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJy5udWNhcHRjaC13cmFwcGVyJykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmNDbWROZXdDaGFsbGVuZ2UoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3YXJuaW5nTXNnID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlTdWNjZXNzTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5V2FybmluZ01zZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUucGFnaW5hdGVTY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHRhYmxlVmFsID0gYW5ndWxhci5lbGVtZW50KCcuQXJ0aWNsZUNvbnRlbnQnKS5vZmZzZXQoKS50b3A7XHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJIZ3QgPSBhbmd1bGFyLmVsZW1lbnQoJy5Ub3BoZWFkZXItbG9nb2FyZWEnKS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIHRhYmxlVmFsID0gKHRhYmxlVmFsIC0gaGVhZGVySGd0KSAtIDIwO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGFibGVWYWxcclxuICAgICAgICAgICAgfSwgODAwKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmxmZ2FwcC5jb250cm9sbGVyKCdBbm51aXR5U2VhcmNoRm9ybXNDb250cmwnLCBbJyRzY29wZScsICckaHR0cCcsICckdGltZW91dCcsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICR0aW1lb3V0KSB7XHJcbiAgICAkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uKGNhdGVOYW1lKSB7XHJcbiAgICAgICAgLy8gY29tbW9uRnVuY3Rpb25zLmxvYWRlclNob3coKTtcclxuICAgICAgICAkaHR0cC5wb3N0KCcvcGJsLWZvcm1zLXNlcnZpY2UtYXBwL3Jlc3QvZm9ybXMvc2VhcmNoRm9ybXMnLCB7XHJcbiAgICAgICAgICAgICdpZGVudGl0eSc6IGdsb2JhbENvbnN0YW50LmZvcm1Ub29sQ2F0ZWdvcmllc1tjYXRlTmFtZV1cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgLy8gJGh0dHAucG9zdChcImh0dHA6Ly8xNzIuMTYuMjYuNzM6OTM4MC93Y3Mtc3RhdGljL01vY2tKU09OL1wiK2NhdGVOYW1lK1wiLmpzb25cIikuXHJcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5zdGF0dXNNZXNzYWdlID09PSAnU3VjY2VzcycpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2F0ZWdvcnlGb3JtTGlzdCA9IGRhdGEuZm9ybURldGFpbExpc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmNhbGxBY2NvcmRpb24oY2F0ZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvKiAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHQkc2NvcGUuY2F0ZWdvcnlGb3JtTGlzdCA9IGdsb2JhbENvbnN0YW50W2NhdGVOYW1lXS5mb3JtRGV0YWlsTGlzdDtcclxuICAgICAgICBcdGNvbW1vbkZ1bmN0aW9ucy5jYWxsQWNjb3JkaW9uKGNhdGVOYW1lKTtcclxuICAgICAgICB9LCAzMDAwKTsgKi9cclxuICAgIH07XHJcbn1dKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5sZmdhcHAuY29udHJvbGxlcignQW5udWl0eUNsYWltc0Zvcm1zQ29udHJsJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkdGltZW91dCkge1xyXG4gICAgJHNjb3BlLmluaXQgPSBmdW5jdGlvbihjYXRlTmFtZSkge1xyXG4gICAgICAgIC8vIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJTaG93KCk7XHJcbiAgICAgICAgJGh0dHAucG9zdCgnL3BibC1mb3Jtcy1zZXJ2aWNlLWFwcC9yZXN0L2Zvcm1zL3NlYXJjaEZvcm1zJywge1xyXG4gICAgICAgICAgICAnaWRlbnRpdHknOiBnbG9iYWxDb25zdGFudC5mb3JtVG9vbENhdGVnb3JpZXNbY2F0ZU5hbWVdXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIC8vICRodHRwLnBvc3QoXCJodHRwOi8vMTcyLjE2LjI2LjczOjkzODAvd2NzLXN0YXRpYy9Nb2NrSlNPTi9cIitjYXRlTmFtZStcIi5qc29uXCIpLlxyXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuc3RhdHVzTWVzc2FnZSA9PT0gJ1N1Y2Nlc3MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhdGVnb3J5Rm9ybUxpc3QgPSBkYXRhLmZvcm1EZXRhaWxMaXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5jYWxsQWNjb3JkaW9uKGNhdGVOYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLyogJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFx0JHNjb3BlLmNhdGVnb3J5Rm9ybUxpc3QgPSBnbG9iYWxDb25zdGFudFtjYXRlTmFtZV0uZm9ybURldGFpbExpc3Q7XHJcbiAgICAgICAgfSwgMzAwMCk7ICovXHJcbiAgICB9O1xyXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmNvbnRyb2xsZXIoJ0xpZmVTZWFyY2hGb3Jtc0NvbnRybCcsIFsnJHNjb3BlJywgJyRodHRwJywgJyR0aW1lb3V0JywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCkge1xyXG4gICAgJHNjb3BlLmluaXQgPSBmdW5jdGlvbihjYXRlTmFtZSkge1xyXG4gICAgICAgIC8vIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJTaG93KCk7XHJcbiAgICAgICAgJGh0dHAucG9zdCgnL3BibC1mb3Jtcy1zZXJ2aWNlLWFwcC9yZXN0L2Zvcm1zL3NlYXJjaEZvcm1zJywge1xyXG4gICAgICAgICAgICAnaWRlbnRpdHknOiBnbG9iYWxDb25zdGFudC5mb3JtVG9vbENhdGVnb3JpZXNbY2F0ZU5hbWVdXHJcbiAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLnN0YXR1c01lc3NhZ2UgPT09ICdTdWNjZXNzJykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNhdGVnb3J5Rm9ybUxpc3QgPSBkYXRhLmZvcm1EZXRhaWxMaXN0O1xyXG4gICAgICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmNhbGxBY2NvcmRpb24oY2F0ZU5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgOiAnLCBkYXRhKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLyogJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFx0JHNjb3BlLmNhdGVnb3J5Rm9ybUxpc3QgPSBnbG9iYWxDb25zdGFudFtjYXRlTmFtZV0uZm9ybURldGFpbExpc3Q7XHJcbiAgICAgICAgfSwgMzAwMCk7ICovXHJcbiAgICB9O1xyXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmNvbnRyb2xsZXIoJ0xpZmVDbGFpbXNGb3Jtc0NvbnRybCcsIFsnJHNjb3BlJywgJyRodHRwJywgJyR0aW1lb3V0JywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCkge1xyXG4gICAgJHNjb3BlLmluaXQgPSBmdW5jdGlvbihjYXRlTmFtZSkge1xyXG4gICAgICAgIC8vIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJTaG93KCk7XHJcbiAgICAgICAgJGh0dHAucG9zdCgnL3BibC1mb3Jtcy1zZXJ2aWNlLWFwcC9yZXN0L2Zvcm1zL3NlYXJjaEZvcm1zJywge1xyXG4gICAgICAgICAgICAnaWRlbnRpdHknOiBnbG9iYWxDb25zdGFudC5mb3JtVG9vbENhdGVnb3JpZXNbY2F0ZU5hbWVdXHJcbiAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLnN0YXR1c01lc3NhZ2UgPT09ICdTdWNjZXNzJykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNhdGVnb3J5Rm9ybUxpc3QgPSBkYXRhLmZvcm1EZXRhaWxMaXN0O1xyXG4gICAgICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmNhbGxBY2NvcmRpb24oY2F0ZU5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgOiAnLCBkYXRhKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLyogJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFx0JHNjb3BlLmNhdGVnb3J5Rm9ybUxpc3QgPSBnbG9iYWxDb25zdGFudFtjYXRlTmFtZV0uZm9ybURldGFpbExpc3Q7XHJcbiAgICAgICAgfSwgMzAwMCk7ICovXHJcbiAgICB9O1xyXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmNvbnRyb2xsZXIoJ0xvbmdUZXJtQ2xhaW1zRm9ybXNDb250cmwnLCBbJyRzY29wZScsICckaHR0cCcsICckdGltZW91dCcsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHApIHtcclxuICAgICRzY29wZS5pbml0ID0gZnVuY3Rpb24oY2F0ZU5hbWUpIHtcclxuICAgICAgICAvLyBjb21tb25GdW5jdGlvbnMubG9hZGVyU2hvdygpO1xyXG4gICAgICAgICRodHRwLnBvc3QoJy9wYmwtZm9ybXMtc2VydmljZS1hcHAvcmVzdC9mb3Jtcy9zZWFyY2hGb3JtcycsIHtcclxuICAgICAgICAgICAgJ2lkZW50aXR5JzogZ2xvYmFsQ29uc3RhbnQuZm9ybVRvb2xDYXRlZ29yaWVzW2NhdGVOYW1lXVxyXG4gICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5zdGF0dXNNZXNzYWdlID09PSAnU3VjY2VzcycpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jYXRlZ29yeUZvcm1MaXN0ID0gZGF0YS5mb3JtRGV0YWlsTGlzdDtcclxuICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5jYWxsQWNjb3JkaW9uKGNhdGVOYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIDogJywgZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcdCRzY29wZS5jYXRlZ29yeUZvcm1MaXN0ID0gZ2xvYmFsQ29uc3RhbnRbY2F0ZU5hbWVdLmZvcm1EZXRhaWxMaXN0O1xyXG4gICAgICAgIH0sIDMwMDApOyAqL1xyXG4gICAgfTtcclxufV0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmxmZ2FwcC5jb250cm9sbGVyKCdmb3JtVG9vbENvbnRybCcsIFsnJHNjb3BlJywgJyRodHRwJywgJyR0aW1lb3V0JywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCkge1xyXG4gICAgJHNjb3BlLmluaXQgPSBmdW5jdGlvbihjYXRlTmFtZSkge1xyXG4gICAgICAgIC8vIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJTaG93KCk7XHJcbiAgICAgICAgJGh0dHAucG9zdCgnL3BibC1mb3Jtcy1zZXJ2aWNlLWFwcC9yZXN0L2Zvcm1zL3NlYXJjaEZvcm1zJywge1xyXG4gICAgICAgICAgICAnaWRlbnRpdHknOiBnbG9iYWxDb25zdGFudC5mb3JtVG9vbENhdGVnb3JpZXNbY2F0ZU5hbWVdXHJcbiAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLnN0YXR1c01lc3NhZ2UgPT09ICdTdWNjZXNzJykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNhdGVnb3J5Rm9ybUxpc3QgPSBkYXRhLmZvcm1EZXRhaWxMaXN0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgOiAnLCBkYXRhKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLyogJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFx0JHNjb3BlLmNhdGVnb3J5Rm9ybUxpc3QgPSBnbG9iYWxDb25zdGFudFtjYXRlTmFtZV0uZm9ybURldGFpbExpc3Q7XHJcbiAgICAgICAgfSwgMzAwMCk7ICovXHJcbiAgICB9O1xyXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmNvbnRyb2xsZXIoJ2Z1bmRzUGVyZm9ybWFuY2VUb29sQ29udHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckdGltZW91dCcsICckd2luZG93JywgZnVuY3Rpb24oJHNjb3BlLCAkcm9vdFNjb3BlLCAkdGltZW91dCwgJHdpbmRvdykge1xyXG4gICAgdmFyIHZpc2libGVQcm9kdWN0cyA9IGZhbHNlO1xyXG4gICAgdmFyIHRvZ2dsZVN1aXRlID0gdHJ1ZTtcclxuICAgICRzY29wZS5zdWl0ZUNhdCA9IFwiXCI7XHJcbiAgICAkc2NvcGUuc3VpdGVJRCA9IG51bGw7XHJcbiAgICAkc2NvcGUuc3VpdGVUaXRsZSA9IFwiXCI7XHJcbiAgICAkc2NvcGUuc3VpdGVOYW1lID0gXCJcIjtcclxuICAgICRzY29wZS5wcm9kdWN0VGl0bGUgPSBcIlwiO1xyXG4gICAgJHNjb3BlLnByb2R1Y3ROYW1lID0gXCJcIjtcclxuICAgICRzY29wZS5wcm9kdWN0TENOID0gXCJcIjtcclxuICAgICRzY29wZS5Ob3RBdmFpbGFibGVTdWl0ZSA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLnNob3dQcm9kdWN0cyA9IHRydWU7XHJcbiAgICAkc2NvcGUuc2hvd1Jlc3VsdHMgPSBmYWxzZTtcclxuICAgICRzY29wZS5hbmFseXRpY3NDb250cm9sID0gdHJ1ZTtcclxuICAgICRzY29wZS50aWxlU2l6ZSA9IDA7XHJcbiAgICB2YXIgdGFiVmFsdWVBcnIgPSBbJ3N1aXRlLW5hdicsICdwcm9kdWN0LW5hdicsICdwZXJmb3JtYW5jZS1uYXYnXTtcclxuXHJcbiAgICAvLyBEZWZpbml0aW9uXHJcbiAgICBmdW5jdGlvbiBzZXRJbnRlcnZhbExpbWl0ZWQoY2FsbGJhY2ssIGludGVydmFsLCB4KSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4OyBpKyspIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dChjYWxsYmFjaywgaSAqIGludGVydmFsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYXV0b1RhYkhlaWdodCh0YWJWYWx1ZSkge1xyXG4gICAgICAgIC8vIGF1dG8gYWRqdXN0IHRoZSBoZWlnaHQgb2YgdGFic1xyXG4gICAgICAgIHZhciBiaWdnZXN0SGVpZ2h0ID0gMDtcclxuICAgICAgICBpZiAodGFiVmFsdWUgPT09ICdwZXJmb3JtYW5jZScpIHtcclxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5mdW5kLXBlcmZvcm1hbmNlLXRvb2wnKS5oZWlnaHQoJ2F1dG8nKTtcclxuICAgICAgICAgICAgfSwgMzAwKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgdGltZU91dFZhbHVlO1xyXG4gICAgICAgICAgICBpZiAodGFiVmFsdWUgJiYgIWlzTmFOKHRhYlZhbHVlKSkgdGltZU91dFZhbHVlID0gdGFiVmFsdWU7XHJcbiAgICAgICAgICAgIGVsc2UgdGltZU91dFZhbHVlID0gMDtcclxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbExpbWl0ZWQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQoJyNmcHQtc3VpdGUtY2F0cycpLmlzKFwiOnZpc2libGVcIikpIGJpZ2dlc3RIZWlnaHQgPSAkKCcjZnB0LXN1aXRlLWNhdHMnKS5vdXRlckhlaWdodCgpICsgJCgnI2ZwdC1zdWl0ZS1jYXRzIC5VSVRhYnNldC5VSVRhYnNldC1ob2xkZXIgZGl2LmlzLWFjdGl2ZScpLm91dGVySGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoJCgnI2ZwdC1wcm9kdWN0LWNhdHMnKS5pcyhcIjp2aXNpYmxlXCIpKSBiaWdnZXN0SGVpZ2h0ID0gJCgnI2ZwdC1wcm9kdWN0LWNhdHMnKS5vdXRlckhlaWdodCgpICsgJCgnI2ZwdC1wcm9kdWN0LWNhdHMgLlVJVGFic2V0LlVJVGFic2V0LWhvbGRlciBkaXYuaXMtYWN0aXZlJykub3V0ZXJIZWlnaHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5mdW5kLXBlcmZvcm1hbmNlLXRvb2wnKS5oZWlnaHQoYmlnZ2VzdEhlaWdodCArICQoJy5mcHQtbWluaS1uYXYnKS5vdXRlckhlaWdodCgpKTtcclxuICAgICAgICAgICAgICAgIH0sIDEwLCA2MCk7XHJcbiAgICAgICAgICAgIH0sIHRpbWVPdXRWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFsdGVybmF0ZVByb2R1Y3RMaXN0Q29sb3IoKSB7XHJcbiAgICAgICAgLy8gbW9iaWxlIC0gYWx0ZXJuYXRpbmcgYmFja2dyb3VuZCBjb2xvciBmb3Igc2Vjb25kIGNvbHVtbiBub3QgYXZhaWxhYmxlIHByb2R1Y3RzXHJcbiAgICAgICAgaWYgKCQoXCIuTm90YXZhaWxhYmxlUHJvZHVjdCAuY29sbGFwc2UtZGF0YTpmaXJzdC1jaGlsZCBhXCIpLmxlbmd0aCAlIDIgIT0gMCkge1xyXG4gICAgICAgICAgICAkKFwiLk5vdGF2YWlsYWJsZVByb2R1Y3QgLmNvbGxhcHNlLWRhdGE6bGFzdC1jaGlsZFwiKS5yZW1vdmVDbGFzcygnYWx0ZXJuYXRlLWNvbG9yJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJChcIi5Ob3RhdmFpbGFibGVQcm9kdWN0IC5jb2xsYXBzZS1kYXRhOmxhc3QtY2hpbGRcIikuYWRkQ2xhc3MoJ2FsdGVybmF0ZS1jb2xvcicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAkc2NvcGUudGFiQWN0aXZlQ2hhbmdlID0gZnVuY3Rpb24odGFiVmFsdWUsIHRhYkNsaWNrVmFsdWUpIHtcclxuICAgICAgICB2YXIgc2VsZWN0SW5kZXggPSB0YWJWYWx1ZUFyci5pbmRleE9mKHRhYlZhbHVlKTtcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2godGFiVmFsdWVBcnIsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xyXG4gICAgICAgICAgICBpZiAoc2VsZWN0SW5kZXggPT0gaW5kZXggJiYgKHRhYkNsaWNrVmFsdWUgfHwgJCgnLicgKyB0YWJWYWx1ZSkuaGFzQ2xhc3MoJ2RlZmF1bHQnKSkpIHtcclxuICAgICAgICAgICAgICAgICQoJy4nICsgdGFiVmFsdWUpLnJlbW92ZUNsYXNzKCdkZWZhdWx0JykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhYlZhbHVlID09ICdzdWl0ZS1uYXYnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dSZXN1bHRzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUuc2hvd1Byb2R1Y3RzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNmcHQtc3VpdGUtY2F0cycpLnRvZ2dsZSgnc2xpZGUnLCB7IGRpcmVjdGlvbjogJ2xlZnQnIH0sIDQwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjZnB0LXByb2R1Y3QtY2F0cycpLnRvZ2dsZSgnc2xpZGUnLCB7IGRpcmVjdGlvbjogJ3JpZ2h0JyB9LCA0MDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUFuYWx5dGljcygkKCcuJyArIHRhYlZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRpbGVTaXplID0gJCgnLlVJVGFic2V0LWhvbGRlciA+IGRpdi5pcy1hY3RpdmUnKS5maW5kKCdhW2RhdGEtZXZlbnRuYW1lXScpLm5vdChcIltkYXRhLWV2ZW50bmFtZT0nJ11cIikubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9UYWJIZWlnaHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0YWJWYWx1ZSA9PSAncHJvZHVjdC1uYXYnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dSZXN1bHRzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dQcm9kdWN0cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYkNsaWNrVmFsdWUgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUFuYWx5dGljcygkKCcuJyArIHRhYlZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQod2luZG93KS50cmlnZ2VyKCdyZXNpemUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHdpbmRvdykudHJpZ2dlcigncmVzaXplJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBhdXRvVGFiSGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0SW5kZXggPiBpbmRleCAmJiB0YWJDbGlja1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuJyArIHZhbHVlKS5yZW1vdmVDbGFzcygnYWN0aXZlJykuYWRkQ2xhc3MoJ2RlZmF1bHQnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxlY3RJbmRleCA8IGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuJyArIHZhbHVlKS5yZW1vdmVDbGFzcygnYWN0aXZlIGRlZmF1bHQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBwcm9kdWN0Q3VzdG9tQW5hbHl0aWNzKCkge1xyXG4gICAgICAgIGlmICgkKCcjZnB0LXByb2R1Y3QtY2F0cycpLmlzKFwiOnZpc2libGVcIikpIHtcclxuICAgICAgICAgICAgdmFyIGFjdGl2ZVRhYlBhbmVsID0gJCgnZGl2W3JvbGU9XCJ0YWJwYW5lbFwiXVtkYXRhLXN1aXRlLWlkPVwiJyArICRzY29wZS5zdWl0ZUlEICsgJ1wiXS5pcy1hY3RpdmUnKTtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KGFjdGl2ZVRhYlBhbmVsKS5maW5kKCcucHJvZHVjdC1saXN0JykuYXR0cignZGF0YS1ldmVudHZlcnNpb24nLCAkc2NvcGUuc3VpdGVOYW1lLnJlcGxhY2UoL1xccysvZywgXCIgXCIpLnRyaW0oKSArICcgJyArIGFjdGl2ZVRhYlBhbmVsLmF0dHIoJ2RhdGEtc3RhdGUtdGFiJykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAkc2NvcGUub25jbGlja1N1aXRlID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNmcHQtc3VpdGUtY2F0cycpLnRvZ2dsZSgnc2xpZGUnLCB7IGRpcmVjdGlvbjogJ2xlZnQnIH0sIDQwMCk7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjZnB0LXByb2R1Y3QtY2F0cycpLnRvZ2dsZSgnc2xpZGUnLCB7IGRpcmVjdGlvbjogJ3JpZ2h0JyB9LCA0MDApO1xyXG5cclxuICAgICAgICAkc2NvcGUudGFiQWN0aXZlQ2hhbmdlKCdwcm9kdWN0LW5hdicsICdhY3RpdmUnKTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5wcm9kdWN0LWxpc3QnKS5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5Ob3RhdmFpbGFibGVQcm9kdWN0IC5jb2xsYXBzZScpLnJlbW92ZUNsYXNzKCdoaWRlLXRvZ2dsZScpO1xyXG4gICAgICAgIHZpc2libGVQcm9kdWN0cyA9IGZhbHNlO1xyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLk5vdGF2YWlsYWJsZVByb2R1Y3QgLmNvbGxhcHNlIGEgc3BhbicpLnRleHQoXCJEaWRuJ3QgZmluZCB5b3VyIHByb2R1Y3Q/ICBWaWV3IG5vIGxvbmdlciBmb3Igc2FsZSBwcm9kdWN0c1wiKTtcclxuXHJcbiAgICAgICAgLy9yZWFkIHN1aXRlIHRpbGVcclxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmF0dHJpYnV0ZXNbXCJkYXRhLXN1aXRlaWRcIl0pIHtcclxuICAgICAgICAgICAgdmFyIHN1aXRlVGlsZSA9IGFuZ3VsYXIuZWxlbWVudChldmVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwic3VpdGVUaWxlXCIsIHN1aXRlVGlsZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHN1aXRlVGlsZSA9IGFuZ3VsYXIuZWxlbWVudChldmVudC50YXJnZXQpLnBhcmVudHMoXCJkaXZbZGF0YS1zdWl0ZWlkXVwiKTtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInN1aXRlVGlsZVwiLCBzdWl0ZVRpbGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUuc3VpdGVDYXQgPSBzdWl0ZVRpbGUucGFyZW50cyhcImFbZGF0YS1ldmVudHZlcnNpb25dXCIpLmF0dHIoXCJkYXRhLWV2ZW50dmVyc2lvblwiKTtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKFwic3VpdGVDYXRcIiwgJHNjb3BlLnN1aXRlQ2F0KTtcclxuXHJcbiAgICAgICAgaWYgKHN1aXRlVGlsZS5oYXNDbGFzcygnbm90LWF2YWlsYWJsZScpKSB7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ05vdCBBdmFpbGFibGUgU3VpdGUnKTtcclxuICAgICAgICAgICAgJHNjb3BlLk5vdEF2YWlsYWJsZVN1aXRlID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkc2NvcGUuTm90QXZhaWxhYmxlU3VpdGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgkc2NvcGUuTm90QXZhaWxhYmxlU3VpdGUpIHtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuY29sbGFwc2UtZGF0YS1jb2x1bW4nKS5zaG93KCk7XHJcbiAgICAgICAgICAgIC8vJHNjb3BlLnNvcnROb3RBdmFpbGFibGVTdWl0ZUxpc3QoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5jb2xsYXBzZS1kYXRhLWNvbHVtbicpLmhpZGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vZmlsdGVyIHByb2R1Y3QgdGFic1xyXG4gICAgICAgICRzY29wZS5zdWl0ZUlEID0gYW5ndWxhci5lbGVtZW50KHN1aXRlVGlsZSkuYXR0cihcImRhdGEtc3VpdGVpZFwiKTtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKFwic3VpdGVJRDpcIiwgJHNjb3BlLnN1aXRlSUQpO1xyXG4gICAgICAgIGlmICgkc2NvcGUuc3VpdGVJRCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuc3VpdGVUaXRsZSA9ICQoc3VpdGVUaWxlKS5maW5kKCcudGlsZS10aXRsZScpLmh0bWwoKTtcclxuICAgICAgICAgICAgJHNjb3BlLnN1aXRlTmFtZSA9ICQoc3VpdGVUaWxlKS5maW5kKCcudGlsZS10aXRsZScpLnRleHQoKTtcclxuICAgICAgICAgICAgJHNjb3BlLmFuYWx5dGljc0NvbnRyb2wgPSBmYWxzZTtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjZnB0LXByb2R1Y3QtY2F0cyBsaS5pbnRlcm5hbC10YWJzZXQtdGFiW2RhdGEtc3VpdGUtaWQ9XCInICsgJHNjb3BlLnN1aXRlSUQgKyAnXCJdJylbMF0uY2xpY2soKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkKHdpbmRvdykudHJpZ2dlcigncmVzaXplJyk7XHJcbiAgICAgICAgfSwgNDAwKTtcclxuXHJcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHByb2R1Y3RDdXN0b21BbmFseXRpY3MoKTtcclxuICAgICAgICAgICAgJChcIltkYXRhLWV2ZW50YWN0aW9uPSd0aWxlJ11cIikuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICQodGhpcykuYXR0cihcImRhdGEtZXZlbnRuYW1lXCIsICQodGhpcykuZmluZCgnLnRpbGUtdGl0bGUnKS50ZXh0KCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LCA1MDApO1xyXG5cclxuICAgICAgICAkc2NvcGUudGlsZVNpemUgPSAkKCcuVUlUYWJzZXQtaG9sZGVyID4gZGl2LmlzLWFjdGl2ZScpLmZpbmQoJ2FbZGF0YS1ldmVudG5hbWVdJykubm90KFwiW2RhdGEtZXZlbnRuYW1lPScnXVwiKS5sZW5ndGg7XHJcbiAgICAgICAgYXV0b1RhYkhlaWdodCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyoqQURBIC0gVE9ETzogYWRkIGtleWJvYXJkIHN1cHBvcnQgKEVOVEVSL1NQQUNFPylcclxuICAgIGFuZ3VsYXIuZWxlbWVudCgnLlRpbGVXaXRoQmx1cmIgLnRvZ2dsZS1pY29uLCAuVGlsZVdpdGhCbHVyYiAuY2xvc2UtaWNvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB0aWxlUGFyID0gJCh0aGlzKS5wYXJlbnRzKCcuVGlsZVdpdGhCbHVyYicpO1xyXG4gICAgICAgIGlmICh0aWxlUGFyLmhhc0NsYXNzKCdpY29uLXRvZ2dsZWQnKSkge1xyXG4gICAgICAgICAgICB0aWxlUGFyLnJlbW92ZUNsYXNzKCdpY29uLXRvZ2dsZWQnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aWxlUGFyLmFkZENsYXNzKCdpY29uLXRvZ2dsZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXV0b1RhYkhlaWdodCgpO1xyXG4gICAgICAgIC8vdG9nZ2xlU3VpdGUgPSBmYWxzZTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHByb2R1Y3RDbGlja2VkKCkge1xyXG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnZnVuZFBlcmZvcm1hbmNlSW5pdCcpO1xyXG4gICAgICAgICRzY29wZS5hbmFseXRpY3NDb250cm9sID0gZmFsc2U7XHJcbiAgICAgICAgY29tbW9uRnVuY3Rpb25zLmxvYWRlclNob3coKTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnNob3dQcm9kdWN0cyA9IGZhbHNlOyAvL3RpZSB0byBhamF4IHJlc3BvbnNlPz9cclxuICAgICAgICAkc2NvcGUuc2hvd1Jlc3VsdHMgPSB0cnVlOyAvL3RpZSB0byBhamF4IHJlc3BvbnNlPz9cclxuXHJcbiAgICAgICAgJHNjb3BlLnRhYkFjdGl2ZUNoYW5nZSgncGVyZm9ybWFuY2UtbmF2JywgJ2FjdGl2ZScpO1xyXG4gICAgICAgIGF1dG9UYWJIZWlnaHQoJ3BlcmZvcm1hbmNlJyk7XHJcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICQoJyNmcHQtcHJvZHVjdHMtcmVzdWx0cycpLmRhdGEoXCJldmVudHZlcnNpb25cIiwgJCgnI2ZwdC1wcm9kdWN0cy1yZXN1bHRzJykuYXR0cihcImRhdGEtZXZlbnR2ZXJzaW9uXCIpKTtcclxuICAgICAgICAgICAgJCgnI2ZwdC1wcm9kdWN0cy1yZXN1bHRzIGxpLmludGVybmFsLXRhYnNldC10YWJbZGF0YS1ldmVudG5hbWU9XCJwZXJmb3JtYW5jZVwiXScpLmNsaWNrKCk7XHJcbiAgICAgICAgfSwgMjAwKTtcclxuICAgIH1cclxuXHJcbiAgICAkc2NvcGUub25BdmFpbFByb2R1Y3RDbGljayA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudChldmVudC50YXJnZXQpLmF0dHIoJ2RhdGEtcHJvZHVjdGlkJykpIHtcclxuICAgICAgICAgICAgdmFyIHByb2R1Y3RUaWxlID0gYW5ndWxhci5lbGVtZW50KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHByb2R1Y3RUaWxlID0gYW5ndWxhci5lbGVtZW50KGV2ZW50LnRhcmdldCkucGFyZW50cygnZGl2W2RhdGEtcHJvZHVjdGlkXScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2NvbnNvbGUubG9nKFwiY29kZTpcIixwcm9kdWN0VGlsZS5hdHRyKCdkYXRhLXByb2R1Y3RpZCcpKTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnByb2R1Y3RUaXRsZSA9ICQocHJvZHVjdFRpbGUpLmZpbmQoJy50aWxlLXRpdGxlJykuaHRtbCgpO1xyXG4gICAgICAgICRzY29wZS5wcm9kdWN0TmFtZSA9ICQocHJvZHVjdFRpbGUpLmZpbmQoJy50aWxlLXRpdGxlJykudGV4dCgpO1xyXG4gICAgICAgIHdpbmRvdy52YWx1ZSA9IHByb2R1Y3RUaWxlLmF0dHIoJ2RhdGEtcHJvZHVjdGlkJyk7XHJcbiAgICAgICAgJHNjb3BlLnByb2R1Y3RMQ04gPSBwcm9kdWN0VGlsZS5hdHRyKCdkYXRhLWxjbicpO1xyXG5cclxuICAgICAgICBwcm9kdWN0Q2xpY2tlZCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUub25Ob3RBdmFpbFByb2R1Y3RDbGljayA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudChldmVudC50YXJnZXQpLmF0dHIoJ2RhdGEtcHJvZHVjdGlkJykpIHtcclxuICAgICAgICAgICAgdmFyIHByb2R1Y3RMaW5rID0gYW5ndWxhci5lbGVtZW50KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHByb2R1Y3RMaW5rID0gYW5ndWxhci5lbGVtZW50KGV2ZW50LnRhcmdldCkucGFyZW50cygnYVtkYXRhLXByb2R1Y3RpZF0nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRzY29wZS5wcm9kdWN0VGl0bGUgPSAkKHByb2R1Y3RMaW5rKS5odG1sKCk7XHJcbiAgICAgICAgJHNjb3BlLnByb2R1Y3ROYW1lID0gJChwcm9kdWN0TGluaykudGV4dCgpO1xyXG4gICAgICAgIHdpbmRvdy52YWx1ZSA9IHByb2R1Y3RMaW5rLmF0dHIoJ2RhdGEtcHJvZHVjdGlkJyk7XHJcbiAgICAgICAgJHNjb3BlLnByb2R1Y3RMQ04gPSBwcm9kdWN0TGluay5hdHRyKCdkYXRhLWxjbicpO1xyXG5cclxuICAgICAgICBwcm9kdWN0Q2xpY2tlZCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUubm90QXZhaWxhYmxlUHJvZHVjdHMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyB0b2dnbGUgbm90IGF2YWlsYWJsZSBwcm9kdWN0c1xyXG4gICAgICAgIGlmICh2aXNpYmxlUHJvZHVjdHMpIHtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuTm90YXZhaWxhYmxlUHJvZHVjdCAuY29sbGFwc2UnKS5yZW1vdmVDbGFzcygnaGlkZS10b2dnbGUnKTtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuY29sbGFwc2UtZGF0YS1jb2x1bW4nKS50b2dnbGUoKTtcclxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7IGFuZ3VsYXIuZWxlbWVudCgnLk5vdGF2YWlsYWJsZVByb2R1Y3QgLmNvbGxhcHNlIGEgc3BhbicpLnRleHQoXCJEaWRuJ3QgZmluZCB5b3VyIHByb2R1Y3Q/ICBWaWV3IG5vIGxvbmdlciBmb3Igc2FsZSBwcm9kdWN0c1wiKTsgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuTm90YXZhaWxhYmxlUHJvZHVjdCAuY29sbGFwc2UnKS5hZGRDbGFzcygnaGlkZS10b2dnbGUnKTtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuY29sbGFwc2UtZGF0YS1jb2x1bW4nKS5zbGlkZVRvZ2dsZSg1MDApO1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHsgYW5ndWxhci5lbGVtZW50KCcuTm90YXZhaWxhYmxlUHJvZHVjdCAuY29sbGFwc2UgYSBzcGFuJykudGV4dCgnSGlkZSBub3QgYXZhaWxhYmxlIGZvciBuZXcgc2FsZXMnKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLnByb2R1Y3QtbGlzdCcpLnNsaWRlVG9nZ2xlKDUwMCk7XHJcbiAgICAgICAgYXV0b1RhYkhlaWdodCgzMDApO1xyXG4gICAgICAgIGFsdGVybmF0ZVByb2R1Y3RMaXN0Q29sb3IoKTtcclxuICAgICAgICB2aXNpYmxlUHJvZHVjdHMgPSAhdmlzaWJsZVByb2R1Y3RzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyoqQURBIC0gVE9ETzogYWRkIGtleWJvYXJkIHN1cHBvcnQgKEVOVEVSL1NQQUNFPylcclxuICAgIGFuZ3VsYXIuZWxlbWVudCgndWxbZGF0YS10YXJnZXQ9XCJzdWl0ZS10YWItc2V0XCJdIGxpLmludGVybmFsLXRhYnNldC10YWIsIHVsW2RhdGEtdGFyZ2V0PVwicHJvZHVjdC10YWJcIl0gbGkuaW50ZXJuYWwtdGFic2V0LXRhYicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB0aWxlU2l6ZVZhbHVlID0gJCgnLlVJVGFic2V0LWhvbGRlciA+IGRpdi5pcy1hY3RpdmUnKS5maW5kKCdhW2RhdGEtZXZlbnRuYW1lXScpLm5vdChcIltkYXRhLWV2ZW50bmFtZT0nJ11cIikubGVuZ3RoO1xyXG4gICAgICAgIGlmICgkc2NvcGUudGlsZVNpemUgPCB0aWxlU2l6ZVZhbHVlKSBhdXRvVGFiSGVpZ2h0KDM1MCk7XHJcbiAgICAgICAgZWxzZSBhdXRvVGFiSGVpZ2h0KCk7XHJcbiAgICAgICAgJHNjb3BlLnRpbGVTaXplID0gdGlsZVNpemVWYWx1ZTtcclxuICAgICAgICBpZiAoJHNjb3BlLmFuYWx5dGljc0NvbnRyb2wpIHVwZGF0ZUFuYWx5dGljcygkKHRoaXMpKTtcclxuICAgICAgICAkc2NvcGUuYW5hbHl0aWNzQ29udHJvbCA9IHRydWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyoqQURBIC0gVE9ETzogYWRkIGtleWJvYXJkIHN1cHBvcnQgKEVOVEVSL1NQQUNFPylcclxuICAgICQoJ3VsW2RhdGEtdGFyZ2V0PVwibXktdGFiLXNldFwiXSA+IGxpJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCRzY29wZS5hbmFseXRpY3NDb250cm9sKSB1cGRhdGVBbmFseXRpY3MoJCh0aGlzKSk7XHJcbiAgICAgICAgJHNjb3BlLmFuYWx5dGljc0NvbnRyb2wgPSB0cnVlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuICAgICAgICBhdXRvVGFiSGVpZ2h0KCk7XHJcbiAgICAgICAgJHNjb3BlLnRpbGVTaXplID0gJCgnLlVJVGFic2V0LWhvbGRlciA+IGRpdi5pcy1hY3RpdmUnKS5maW5kKCdhW2RhdGEtZXZlbnRuYW1lXScpLm5vdChcIltkYXRhLWV2ZW50bmFtZT0nJ11cIikubGVuZ3RoO1xyXG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkKFwiW2RhdGEtZXZlbnRhY3Rpb249J3RpbGUnXVwiKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKFwiZGF0YS1ldmVudG5hbWVcIiwgJCh0aGlzKS5maW5kKCcudGlsZS10aXRsZScpLnRleHQoKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sIDUwMCk7XHJcbiAgICAgICAgLy9hZGQgcmlnaHQtYWxpZ24gY2xhc3MgaW4gZmFuY3lib3ggYW5kIGFkanVzdCB0YWIgY29udGVudCB3aWR0aCBpbmNhc2Ugbm90IGFkZGVkIG9uIHBhZ2UgbG9hZFxyXG4gICAgICAgICQoJy5mdW5kLXBlcmZvcm1hbmNlLXRvb2wnKS5wYXJlbnRzKCcuTWFpbkNvbnRlbnQnKS5maW5kKCdoMSArIGEuZmFuY3lib3gnKS5hZGRDbGFzcygncmlnaHQtYWxpZ24nKTtcclxuICAgICAgICAkKCcjZnB0LXByb2R1Y3QtY2F0cyAuVUlUYWJzZXQtaG9sZGVyID4gZGl2LCAjZnB0LXN1aXRlLWNhdHMgLlVJVGFic2V0LWhvbGRlciA+IGRpdicpLndpZHRoKCQoJy5VSVRhYnNldC1uYXY6dmlzaWJsZScpLm91dGVyV2lkdGgoKSk7XHJcblxyXG4gICAgICAgIC8vYWN0aXZhdGUgTm90IEF2YWlsYWJsZSBQcm9kdWN0c1xyXG4gICAgICAgIC8vKipBREEgLSBUT0RPOiBhZGQga2V5Ym9hcmQgc3VwcG9ydCAoRU5URVIvU1BBQ0U/KVxyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLk5vdGF2YWlsYWJsZVByb2R1Y3QgYVtkYXRhLXByb2R1Y3RpZF0nKS5vbignY2xpY2snLCBmdW5jdGlvbigkZXZlbnQpIHtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIk5BIGxpbmsgY2xpY2tlZFwiKTtcclxuICAgICAgICAgICAgJHNjb3BlLm9uTm90QXZhaWxQcm9kdWN0Q2xpY2soJGV2ZW50KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vYWRkIHJpZ2h0LWFsaWduIGNsYXNzIGluIGZhbmN5Ym94IGFuZCBhZGp1c3QgdGFiIGNvbnRlbnQgd2lkdGggb24gcGFnZSBsb2FkIC0gKipyZXBsYWNpbmcgd2l0aCBDTVMgc3R5bGUqKlxyXG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJCgnLmZ1bmQtcGVyZm9ybWFuY2UtdG9vbCcpLnBhcmVudHMoJy5NYWluQ29udGVudCcpLmZpbmQoJ2gxICsgYS5mYW5jeWJveCcpLmFkZENsYXNzKCdyaWdodC1hbGlnbicpO1xyXG4gICAgICAgICQoJyNmcHQtcHJvZHVjdC1jYXRzIC5VSVRhYnNldC1ob2xkZXIgPiBkaXYsICNmcHQtc3VpdGUtY2F0cyAuVUlUYWJzZXQtaG9sZGVyID4gZGl2Jykud2lkdGgoJCgnLlVJVGFic2V0LW5hdjp2aXNpYmxlJykub3V0ZXJXaWR0aCgpKTtcclxuICAgIH0sIDIwMCk7XHJcblxyXG4gICAgLy8qKkFEQSAtIFRPRE86IGFkZCBrZXlib2FyZCBzdXBwb3J0IChFTlRFUi9TUEFDRT8pXHJcbiAgICBhbmd1bGFyLmVsZW1lbnQoJ2xpLmludGVybmFsLXRhYnNldC10YWInKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5Ob3RBdmFpbGFibGVTdWl0ZSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNvcnROb3RBdmFpbGFibGVTdWl0ZUxpc3QoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwcm9kdWN0Q3VzdG9tQW5hbHl0aWNzKCk7XHJcbiAgICAgICAgfSwgMTUwKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vQURBOiBUQUIga2V5IHN1cHBvcnQgZm9yIHRpbGVzXHJcbiAgICBhbmd1bGFyLmVsZW1lbnQoJ2FbZGF0YS1ldmVudGFjdGlvbj1cInRpbGVcIl0nKS5vbignZm9jdXMnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAkKHRoaXMpLmZpbmQoJ2Rpdi5UaWxlV2l0aEJsdXJiLCBkaXYuVGlsZVdpdGhXaGl0ZUJHJykuYWRkQ2xhc3MoJ2ZvY3VzJyk7XHJcbiAgICB9KTtcclxuICAgIGFuZ3VsYXIuZWxlbWVudCgnYVtkYXRhLWV2ZW50YWN0aW9uPVwidGlsZVwiXScpLm9uKCdibHVyJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJCh0aGlzKS5maW5kKCdkaXYuVGlsZVdpdGhCbHVyYiwgZGl2LlRpbGVXaXRoV2hpdGVCRycpLnJlbW92ZUNsYXNzKCdmb2N1cycpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLnNvcnROb3RBdmFpbGFibGVTdWl0ZUxpc3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgYWN0aXZlVGFiUGFuZWxGb3JDYXRlZ29yeSA9ICQoJ2Rpdltyb2xlPVwidGFicGFuZWxcIl1bZGF0YS1zdWl0ZS1pZD1cIicgKyAkc2NvcGUuc3VpdGVJRCArICdcIl0uaXMtYWN0aXZlJyk7XHJcbiAgICAgICAgdmFyIGFjdGl2ZU5vdEF2YWlsU2VjdGlvbiA9IGFjdGl2ZVRhYlBhbmVsRm9yQ2F0ZWdvcnkuZmluZCgnc2VjdGlvbi5jb2xsYXBzZS1kYXRhLWNvbHVtbicpOyAvL2dldCBhY3RpdmUgdGFiLXBhbmVsIGZvciB0aGUgTkEgc3VpdGVcclxuICAgICAgICAvL2NvbnNvbGUubG9nKFwiYWN0aXZlTm90QXZhaWxTZWN0aW9uOlwiLCBhY3RpdmVOb3RBdmFpbFNlY3Rpb24pO1xyXG5cclxuICAgICAgICBpZiAoIWFjdGl2ZU5vdEF2YWlsU2VjdGlvbi5oYXNDbGFzcyhcInNvcnRlZFwiKSkge1xyXG4gICAgICAgICAgICB2YXIgYWN0aXZlTm90QXZhaWxEYXRhQ29sdW1ucyA9IGFjdGl2ZU5vdEF2YWlsU2VjdGlvbi5maW5kKCcuY29sbGFwc2UtZGF0YS0tbm8tY29sbGFwc2UnKTtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImFjdGl2ZU5vdEF2YWlsRGF0YUNvbHVtbnM6XCIsIGFjdGl2ZU5vdEF2YWlsRGF0YUNvbHVtbnMpO1xyXG5cclxuICAgICAgICAgICAgdmFyIG5vdEF2YWlsUHJvZHMgPSB7fTtcclxuICAgICAgICAgICAgdmFyIG5vdEF2YWlsS2V5cyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgTmF0aW9uYWxOb3RBdmFpbGFibGVMaW5rcyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgTllOb3RBdmFpbGFibGVMaW5rcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgJCgnZGl2W3JvbGU9XCJ0YWJwYW5lbFwiXScpLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGFiUGFuZWwgPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlbGF0ZWRTdWl0ZSA9ICQoJ2RpdltkYXRhLXN1aXRlaWQ9JyArIHRhYlBhbmVsLmF0dHIoXCJkYXRhLXN1aXRlLWlkXCIpICsgJ10nKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZWxhdGVkU3VpdGUucGFyZW50cyhcImFbZGF0YS1ldmVudHZlcnNpb25dXCIpLmF0dHIoXCJkYXRhLWV2ZW50dmVyc2lvblwiKSA9PSAkc2NvcGUuc3VpdGVDYXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJQYW5lbC5maW5kKCdzZWN0aW9uLk5vdGF2YWlsYWJsZVByb2R1Y3Qgc2VjdGlvbi5jb2xsYXBzZS1kYXRhIGEnKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFiUGFuZWwuYXR0cihcImRhdGEtc3RhdGUtdGFiXCIpLnRvTG93ZXJDYXNlKCkgPT0gXCJuZXcgeW9ya1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOWU5vdEF2YWlsYWJsZUxpbmtzLnB1c2goJCh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYlBhbmVsLmF0dHIoXCJkYXRhLXN0YXRlLXRhYlwiKS50b0xvd2VyQ2FzZSgpID09IFwibmF0aW9ud2lkZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYXRpb25hbE5vdEF2YWlsYWJsZUxpbmtzLnB1c2goJCh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJOWU5vdEF2YWlsYWJsZUxpbmtzOlwiLCBOWU5vdEF2YWlsYWJsZUxpbmtzKTtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIk5hdGlvbmFsTm90QXZhaWxhYmxlTGlua3M6XCIsIE5hdGlvbmFsTm90QXZhaWxhYmxlTGlua3MpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFjdGl2ZVRhYlBhbmVsRm9yQ2F0ZWdvcnkuYXR0cihcImRhdGEtc3RhdGUtdGFiXCIpLnRvTG93ZXJDYXNlKCkgPT0gXCJuZXcgeW9ya1wiKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlua3NMaXN0ID0gTllOb3RBdmFpbGFibGVMaW5rcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYWN0aXZlVGFiUGFuZWxGb3JDYXRlZ29yeS5hdHRyKFwiZGF0YS1zdGF0ZS10YWJcIikudG9Mb3dlckNhc2UoKSA9PSBcIm5hdGlvbndpZGVcIikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxpbmtzTGlzdCA9IE5hdGlvbmFsTm90QXZhaWxhYmxlTGlua3M7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICQobGlua3NMaXN0KS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxpbmtUZXh0ID0gJCh0aGlzKS50ZXh0KCkucmVwbGFjZSgvXFxXL2csIFwiXCIpLnJlcGxhY2UoJCh0aGlzKS50ZXh0KClbMF0sICQodGhpcykudGV4dCgpWzBdLnRvVXBwZXJDYXNlKCkpO1xyXG4gICAgICAgICAgICAgICAgbm90QXZhaWxQcm9kc1tsaW5rVGV4dF0gPSAkKHRoaXMpOyAvL1swXS5vdXRlckhUTUw7XHJcbiAgICAgICAgICAgICAgICBub3RBdmFpbEtleXMucHVzaChsaW5rVGV4dCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBub3RBdmFpbEtleXMuc29ydCgpO1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKG5vdEF2YWlsUHJvZHMsIG5vdEF2YWlsS2V5cyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgbGFzdFByb2RDb2RlID0gXCJcIjtcclxuICAgICAgICAgICAgZm9yIChrID0gMDsgbm90QXZhaWxLZXlzLmxlbmd0aCA+IGs7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRoaXNMaW5rID0gbm90QXZhaWxQcm9kc1tub3RBdmFpbEtleXNba11dO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXNMaW5rLmF0dHIoJ2RhdGEtcHJvZHVjdGlkJykgPT09IGxhc3RQcm9kQ29kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vdEF2YWlsS2V5cy5zcGxpY2UoaywgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygncmVtb3ZlZCBkdXA6JywgdGhpc0xpbmsudGV4dCgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxhc3RQcm9kQ29kZSA9IHRoaXNMaW5rLmF0dHIoJ2RhdGEtcHJvZHVjdGlkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIm5ldyBmaWx0ZXJlZCBub3RBdmFpbEtleXM6XCIsIG5vdEF2YWlsS2V5cyk7XHJcblxyXG4gICAgICAgICAgICBhY3RpdmVOb3RBdmFpbERhdGFDb2x1bW5zLmVtcHR5KCk7XHJcbiAgICAgICAgICAgIGlmIChub3RBdmFpbEtleXMubGVuZ3RoID4gMSAmJiBhY3RpdmVOb3RBdmFpbERhdGFDb2x1bW5zLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICAgICAgICAgICQoYWN0aXZlTm90QXZhaWxEYXRhQ29sdW1uc1swXSkuYWZ0ZXIoYWN0aXZlTm90QXZhaWxEYXRhQ29sdW1uc1swXS5vdXRlckhUTUwpO1xyXG4gICAgICAgICAgICAgICAgLyoqKiBVUERBVEUgYWN0aXZlTm90QXZhaWxEYXRhQ29sdW1ucyB3LyBuZXdseSBjcmVhdGVkIHNlY3Rpb24gKioqL1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlTm90QXZhaWxEYXRhQ29sdW1ucyA9IGFjdGl2ZU5vdEF2YWlsU2VjdGlvbi5maW5kKCcuY29sbGFwc2UtZGF0YS0tbm8tY29sbGFwc2UnKTsgLy8gLSB0ZXN0IHRoaXNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY29sdW1uU3BsaXRMZW5ndGggPSBNYXRoLmNlaWwobm90QXZhaWxLZXlzLmxlbmd0aCAvIDIpO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBub3RBdmFpbEtleXMubGVuZ3RoID4gaTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uU3BsaXRMZW5ndGggPiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChhY3RpdmVOb3RBdmFpbERhdGFDb2x1bW5zWzBdKS5hcHBlbmQobm90QXZhaWxQcm9kc1tub3RBdmFpbEtleXNbaV1dWzBdLm91dGVySFRNTCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICQoYWN0aXZlTm90QXZhaWxEYXRhQ29sdW1uc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpLmFwcGVuZChub3RBdmFpbFByb2RzW25vdEF2YWlsS2V5c1tpXV1bMF0ub3V0ZXJIVE1MKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhY3RpdmVOb3RBdmFpbFNlY3Rpb24uYWRkQ2xhc3MoJ3NvcnRlZCcpO1xyXG5cclxuICAgICAgICAgICAgLy8qKkFEQSAtIFRPRE86IGFkZCBrZXlib2FyZCBzdXBwb3J0IChFTlRFUi9TUEFDRT8pXHJcbiAgICAgICAgICAgIGFjdGl2ZU5vdEF2YWlsRGF0YUNvbHVtbnMuZmluZCgnYVtkYXRhLXByb2R1Y3RpZF0nKS5vbignY2xpY2snLCBmdW5jdGlvbigkZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5vbk5vdEF2YWlsUHJvZHVjdENsaWNrKCRldmVudCk7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVBbmFseXRpY3MoJCh0aGlzKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLmJpbmQoJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghJHNjb3BlLnNob3dSZXN1bHRzKSBhdXRvVGFiSGVpZ2h0KCk7XHJcbiAgICAgICAgJCgnI2ZwdC1wcm9kdWN0LWNhdHMgLlVJVGFic2V0LWhvbGRlciA+IGRpdiwgI2ZwdC1zdWl0ZS1jYXRzIC5VSVRhYnNldC1ob2xkZXIgPiBkaXYnKS53aWR0aCgkKCcuVUlUYWJzZXQtbmF2OnZpc2libGUnKS5vdXRlcldpZHRoKCkpO1xyXG4gICAgICAgIGFsdGVybmF0ZVByb2R1Y3RMaXN0Q29sb3IoKTtcclxuICAgIH0pO1xyXG5cclxufV0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmxmZ2FwcC5jb250cm9sbGVyKCdtYWluQ29udHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICdwZXJmb3JtYW5jZVNlcnZpY2UnLCBmdW5jdGlvbigkc2NvcGUsICRyb290U2NvcGUsXHJcbiAgICBwZXJmb3JtYW5jZVNlcnZpY2UpIHtcclxuICAgIC8vIHZhciBfY29kZTEgPSAnb3ZlcnZpZXcvTjAwNTYzLmpzb24/X2RjPTE0MjgzMDMwMDIwMjMnLCBfY29kZTIgPSAncGVyZm9ybWFuY2UvTjAwNTYzLmpzb24/X2RjPTE0MjgzMjIzNDA3OTQnO1xyXG4gICAgdmFyIGpzb25Db2RlcyA9IHtcclxuXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb3VudCA9IDAsXHJcbiAgICAgICAgY291bnRVbml0ID0gMDtcclxuXHJcbiAgICAkc2NvcGUudGFiTmFtZSA9ICdwZXJmb3JtYW5jZSc7XHJcbiAgICBjb21tb25GdW5jdGlvbnMubG9hZGVySGlkZSgpO1xyXG5cclxuICAgIC8vIGFuZ3VsYXIuZWxlbWVudCgnI3RhYjEnKS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XHJcbiAgICAkKCcudGFiLXNlY3Rpb24gbGknKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgdGlzSW5kZXggPSAkKCcudGFiLXNlY3Rpb24gbGknKS5pbmRleCh0aGlzKTtcclxuXHJcbiAgICAgICAgJCgnLnRhYi1zZWN0aW9uIGxpJykucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG4gICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG4gICAgICAgICQoJy50YWItc2VjdGlvbi1zdWItY29udCcpLmhpZGUoKS5lcSh0aXNJbmRleCkuc2hvdygpO1xyXG4gICAgfSk7XHJcbiAgICB2YXIgZnVuZFBlcmZvcm1hbmNlVXRpbCA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgZnVuZFBlcmZvcm1hbmNlTW9kdWxlID0ge1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5kUGVyZm9ybWFuY2VNb2R1bGUucGVyZm9ybWFuY2VTZXJ2aWNlQ2FsbCA9IGZ1bmN0aW9uKGNvZGUpIHtcclxuICAgICAgICAgICAgcGVyZm9ybWFuY2VTZXJ2aWNlLnBlcmZvcm1hbmNlRGF0YSgkc2NvcGUsIGNvZGUsIGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5wZXJmb3JtYW5jZVRhYmxlRGF0YSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2Z1bmRQZXJmb3JtYW5jZXRhYmxlRGF0YScsICRzY29wZS5wZXJmb3JtYW5jZVRhYmxlRGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7ICRyb290U2NvcGUuJGJyb2FkY2FzdCgnZGF0YVRhYmxlc1Jlc3BvbnNpdmUnKTsgfSwgMzAwKTtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnX3VuaXR2YWx1ZXNUYWJsZURhdGEnLCAkc2NvcGUucGVyZm9ybWFuY2VUYWJsZURhdGEpO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdfcHJvc3BlY3R1c1RhYmxlRGF0YScsICRzY29wZS5wZXJmb3JtYW5jZVRhYmxlRGF0YSk7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9LCAzMDApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZ1bmRQZXJmb3JtYW5jZU1vZHVsZS5jYWxjdWxhdGVUaW1lID0gZnVuY3Rpb24oY29kZSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygndmFsdWU+ID4gPicsdmFsdWUpO1xyXG4gICAgICAgICAgICBqc29uQ29kZXMuX2NvZGUxID0gJ292ZXJ2aWV3Lyc7XHJcbiAgICAgICAgICAgIGpzb25Db2Rlcy5fY29kZTIgPSAncGVyZm9ybWFuY2UvJztcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG4gICAgICAgICAgICBqc29uQ29kZXMuX2NvZGUxID0ganNvbkNvZGVzLl9jb2RlMSArICcnICsgY29kZSArICcuanNvbj9fZGM9JyArIGN1cnJlbnRUaW1lO1xyXG4gICAgICAgICAgICBqc29uQ29kZXMuX2NvZGUyID0ganNvbkNvZGVzLl9jb2RlMiArICcnICsgY29kZSArICcuanNvbj9fZGM9JyArIGN1cnJlbnRUaW1lO1xyXG4gICAgICAgICAgICBmdW5kUGVyZm9ybWFuY2VNb2R1bGUucGVyZm9ybWFuY2VTZXJ2aWNlQ2FsbChqc29uQ29kZXMuX2NvZGUyKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gZnVuZFBlcmZvcm1hbmNlTW9kdWxlO1xyXG4gICAgfSkoJHNjb3BlKTtcclxuXHJcbiAgICAvLyBpZiAoIXZhbHVlKSB7dmFsdWUgPSAnTjAwNTYzJzt9IC8vJ0gzMEo3NCdcclxuICAgIC8vIHZhciBzaG93RHluYW1pY1Byb2R1Y3RzID0gJ1llcyc7XHJcbiAgICB2YXIgZnVuZFBlcmZvcm1hbmNlSW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSAnbnVsbCcgJiYgc2hvd0R5bmFtaWNQcm9kdWN0cyA9PT0gJ1llcycpIHtcclxuICAgICAgICAgICAgZnVuZFBlcmZvcm1hbmNlVXRpbC5jYWxjdWxhdGVUaW1lKHZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGZ1bmRQZXJmb3JtYW5jZVV0aWwucGVyZm9ybWFuY2VTZXJ2aWNlQ2FsbChqc29uQ29kZXMuX2NvZGUyKTtcclxuICAgICAgICAgICAgLy8gZnVuZFBlcmZvcm1hbmNlVXRpbC5zY3JvbGxUb3BJbnRhaWxMb2FkKCk7XHJcbiAgICAgICAgICAgICRzY29wZS53YXJuaW5nSWNvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUucmlkZXJWYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBwZXJmb3JtYW5jZVNlcnZpY2UucGVyZm9ybWFuY2VEYXRhKCRzY29wZSwganNvbkNvZGVzLl9jb2RlMSwgZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnRvcE5hdnRhYnNEYXRhID0ge1xyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIHdhcm5pbmcgaWNvblxyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGdsb2JhbENvbnN0YW50LnByb2R1Y3RUeXBlLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLndhcm5pbmdJY29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS53YXJuaW5nSWNvbiA9IChkYXRhLmRhdGEubmF2aWdhdGlvbkl0ZW0ucHJvZHVjdFR5cGUgPT09IHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5kYXRhLm5hdmlnYXRpb25JdGVtLnByb2R1Y3RUeXBlID09PSAnVmFyaWFibGUgQW5udWl0eScpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNWYXJpYWJsZUFubnVpdHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmRhdGEubmF2aWdhdGlvbkl0ZW0ucmlkZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG9wTmF2dGFic0RhdGEgPSBkYXRhLmRhdGEubmF2aWdhdGlvbkl0ZW0ucmlkZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZ3VsYXIuZWxlbWVudCgnLmN1c3RvbS1zZWxlY3Rib3gnKS52YWwoJHNjb3BlLnRvcE5hdnRhYnNEYXRhWzBdLnByb2R1Y3ROYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAkc2NvcGUuYmluZFNoYXJlTmFtZSA9ICRzY29wZS50b3BOYXZ0YWJzRGF0YVswXS5wcm9kdWN0TmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygkc2NvcGUudG9wTmF2dGFic0RhdGFbMF0ucHJvZHVjdE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICRyb290U2NvcGUuJGJyb2FkY2FzdCgncHJvZHVjdF9jb2RlX25hbWUnLCAkc2NvcGUudG9wTmF2dGFic0RhdGFbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUudG9wTmF2dGFic0RhdGEsIGZ1bmN0aW9uKG9iaiwga2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoucHJvZHVjdENvZGUgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3Byb2R1Y3RfY29kZV9uYW1lJywgJHNjb3BlLnRvcE5hdnRhYnNEYXRhW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmJpbmRTaGFyZU5hbWUgPSBvYmoucHJvZHVjdE5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmlkZXJWYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG9wTmF2dGFic0RhdGEgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYmluZFNoYXJlTmFtZSA9IGRhdGEuZGF0YS5uYXZpZ2F0aW9uSXRlbS5wcm9kdWN0TmFtZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9wTmF2RGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3Byb2R1Y3RDb2RlJzogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdwcm9kdWN0TmFtZSc6IGRhdGEuZGF0YS5uYXZpZ2F0aW9uSXRlbS5wcm9kdWN0TmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgncHJvZHVjdF9jb2RlX25hbWUnLCB0b3BOYXZEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmlkZXJWYWx1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyogYW5ndWxhci5lbGVtZW50KCcjbGFuZGluZy1oZXJvLXB1bGxkb3duJykuYXBwZW5kKCcnKTtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUudG9wTmF2dGFic0RhdGEuZHJvcERvd25WYWx1ZXMsIGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlWydwcm9kdWN0TmFtZV8nK2luZGV4XSA9IHZhbHVlLnByb2R1Y3ROYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2xhbmRpbmctaGVyby1wdWxsZG93bicpLmFwcGVuZCgnPGxpPjxhIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKTsnIG5nLWJpbmQtaHRtbD0nJyt2YWx1ZS5wcm9kdWN0TmFtZSsnJyBuZy1jbGljaz0nYlNoYXJlU2VsZWN0KCcrdmFsdWUucHJvZHVjdENvZGUrJyknPjwvYT48L2xpPicpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlWydwcm9kdWN0Q29kZV8nK2luZGV4XSA9IHZhbHVlLnByb2R1Y3RDb2RlO1xyXG4gICAgICAgICAgICAgICAgfSk7ICovXHJcbiAgICAgICAgICAgICAgICAvKiAkc2NvcGUuJHdhdGNoKCckbGFzdCcsZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBpbml0RGF0YURyaXZlbkVsZW1lbnRzKCk7XHJcbiAgICAgICAgICAgICAgICB9KTsqL1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGlmIG5vIHN0YXRpYyB0YWJzLCBtYWtlIHBlcmZvcm1hbmNlIHRhYiBhcyBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzU3RhdGljVGFic0F2YWlsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNsaWNrZWRUYWIoJ3BlcmZvcm1hbmNlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLiRvbignZnVuZFBlcmZvcm1hbmNlSW5pdCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGZ1bmRQZXJmb3JtYW5jZUluaXQoKTtcclxuICAgICAgICAvL2NvdW50ID0gMDtcclxuICAgICAgICAvL2NvdW50VW5pdCA9IDA7XHJcbiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdyZXNldFVuaXRUYWJsZXNSZXNwb25zaXZlJyk7XHJcbiAgICB9KTtcclxuICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnZnVuZFBlcmZvcm1hbmNlSW5pdCcpO1xyXG5cclxuICAgICRzY29wZS5jbGlja2VkVGFiID0gZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgICRzY29wZS50YWJOYW1lID0gbmFtZTtcclxuICAgICAgICBpZiAoJHNjb3BlLnBlcmZvcm1hbmNlVGFibGVEYXRhID09PSB1bmRlZmluZWQgJiYgbmFtZSAhPT0gJ292ZXJ2aWV3Jykge1xyXG4gICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVyU2hvdygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY291bnQgPT09IDAgJiYgbmFtZSA9PT0gJ3BlcmZvcm1hbmNlJykge1xyXG4gICAgICAgICAgICBjb3VudCsrO1xyXG5cclxuICAgICAgICAgICAgLy8gY29tbW9uRnVuY3Rpb25zLmxvYWRlclNob3coKTtcclxuICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdkYXRhVGFibGVzUmVzcG9uc2l2ZScsIGNvdW50KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGNvdW50VW5pdCA9PT0gMCAmJiBuYW1lID09PSAndW5pdHZhbHVlcycpIHtcclxuICAgICAgICAgICAgY291bnRVbml0Kys7XHJcbiAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnZGF0YVVuaXRUYWJsZXNSZXNwb25zaXZlJywgY291bnRVbml0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgobmFtZSA9PT0gJ292ZXJ2aWV3JykpIHtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuTW9yZUluZm9CbG9jaywgLmNvbnRlbnQtd3JhcHBlciAuZGlzY2xhaW1lcicpLmNzcygnZGlzcGxheScsICdibG9jaycpO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5VSVRhYnNldC1ob2xkZXIgLnBlcmZvcm1hbmNlLWRpc2NsYWltZXInKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoKG5hbWUgPT09ICdwZXJmb3JtYW5jZScpIHx8IChuYW1lID09PSAndW5pdHZhbHVlcycpKSB7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLk1vcmVJbmZvQmxvY2ssIC5jb250ZW50LXdyYXBwZXIgLmRpc2NsYWltZXInKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5VSVRhYnNldC1ob2xkZXIgLnBlcmZvcm1hbmNlLWRpc2NsYWltZXInKS5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcclxuICAgICAgICAgICAgLy8kKCcjbGZnLXBlcmZvcm1hbmNlLXZhbHVlcyAuc29ydGluZycpLnNob3coKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwcm9zcGVjdHVzJykge1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5Nb3JlSW5mb0Jsb2NrLCAuY29udGVudC13cmFwcGVyIC5kaXNjbGFpbWVyJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuVUlUYWJzZXQtaG9sZGVyIC5wZXJmb3JtYW5jZS1kaXNjbGFpbWVyJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qIGlmKG5hbWUgPT09ICdvdmVydmlldycpe1xyXG4gICAgICAgIFx0YW5ndWxhci5lbGVtZW50KCcuTW9yZUluZm9CbG9jaycpLmNzcygnZGlzcGxheScsJ2Jsb2NrJyk7XHJcbiAgICAgICAgXHRhbmd1bGFyLmVsZW1lbnQoJy5kaXNjbGFpbWVyJykucHJldignLmhyLW9ubHknKS5jc3MoJ2Rpc3BsYXknLCdub25lJyk7XHJcbiAgICAgICAgfWVsc2UgaWYoKG5hbWUgPT09ICdwZXJmb3JtYW5jZScpIHx8IChuYW1lID09PSAncHJvc3BlY3R1cycpIHx8IChuYW1lID09PSAndW5pdHZhbHVlcycpKXtcclxuICAgICAgICBcdGFuZ3VsYXIuZWxlbWVudCgnLk1vcmVJbmZvQmxvY2snKS5jc3MoJ2Rpc3BsYXknLCdub25lJyk7XHJcbiAgICAgICAgXHRhbmd1bGFyLmVsZW1lbnQoJy5kaXNjbGFpbWVyJykucHJldignLmhyLW9ubHknKS5jc3MoJ2Rpc3BsYXknLCdub25lJyk7XHJcblxyXG4gICAgICAgIH0qL1xyXG5cclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5tYXRjaEhlaWdodC1ob2xkZXIgLmJsb2NrJykuaGVpZ2h0KCdhdXRvJyk7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubWF0Y2hIZWlnaHQtaG9sZGVyIC5pdGVtJykuaGVpZ2h0KCdhdXRvJyk7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJCh3aW5kb3cpLnRyaWdnZXIoJ3Jlc2l6ZScpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuYlNoYXJlU2VsZWN0ID0gZnVuY3Rpb24oY29kZSkge1xyXG4gICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJTaG93KCk7XHJcbiAgICAgICAgY291bnQgPSAwLCBjb3VudFVuaXQgPSAwO1xyXG4gICAgICAgICRzY29wZS5iaW5kU2hhcmVOYW1lID0gY29kZS5wcm9kdWN0TmFtZTtcclxuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3Byb2R1Y3RfY29kZV9uYW1lJywgY29kZSk7XHJcbiAgICAgICAgLy8kcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3Jlc2V0VW5pdFRhYmxlc1Jlc3BvbnNpdmUnKTtcclxuICAgICAgICBmdW5kUGVyZm9ybWFuY2VVdGlsLmNhbGN1bGF0ZVRpbWUoY29kZS5wcm9kdWN0Q29kZSk7XHJcbiAgICAgICAgLy8gZnVuZFBlcmZvcm1hbmNlVXRpbC5wZXJmb3JtYW5jZVNlcnZpY2VDYWxsKGpzb25Db2Rlcy5fY29kZTIpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyAkc2NvcGUuJG9uKCdfcmVxdWVzdFBlcmZvcm1hbmNlVGFibGVEYXRhJywgZnVuY3Rpb24gKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAvLyB9KTtcclxufV0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmxmZ2FwcC5jb250cm9sbGVyKCdwZXJmb3JtYW5jZUNvbnRybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGNvbXBpbGUnLCBmdW5jdGlvbigkc2NvcGUsICRyb290U2NvcGUsICRjb21waWxlKSB7XHJcbiAgdmFyIGNvbXBhcmVPYmogPSB7XHJcblxyXG4gICAgfSxcclxuICAgIHBlcmZvcm1EYXRhLCBwZXJmb3JtQ29tbW9uLCBwZXJmb3JtUGRmLCBwZXJmb3JtUk1QZGYsIHBlcmZvcm1FeGNlbCwgcGVyZm9ybVJNRXhjZWwsIHRibENvbHVtbixcclxuICAgIHRibERhdGEsXHJcbiAgICBwZXJmVGJsQ291bnQxID0gMCxcclxuICAgIHBlcmZUYmxDb3VudDIgPSAwLFxyXG4gICAgcGVyZlRibENvdW50MyA9IDAsXHJcbiAgICBjb21wbGlhbmNlVG9wTXNnO1xyXG5cclxuICAkc2NvcGUubmV3T2JqZWN0ID0ge1xyXG5cclxuICB9O1xyXG4gICRzY29wZS5pc1Blcm1mQXNzZXRDYXRlZ29yeSA9IGZhbHNlO1xyXG4gICRzY29wZS5pc0dyb3VwZWQgPSB0cnVlO1xyXG4gICRzY29wZS5odG1scmVnZXggPSAvKDwoW14+XSspPikvaWc7XHJcbiAgcGVyZm9ybUNvbW1vbiA9IChmdW5jdGlvbigpIHtcclxuICAgIHZhciBwZXJmb3JtTW9kdWxlID0ge1xyXG5cclxuICAgIH07XHJcbiAgICBwZXJmb3JtTW9kdWxlLnJlc2V0VmFsdWVzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGNvbXBhcmVPYmoubW9udGhseVBlcmZvcm0gPSBbXTtcclxuICAgICAgY29tcGFyZU9iai5tb250aGx5UGVyZm9ybVN1cnJlbmRlciA9IFtdO1xyXG4gICAgICBjb21wYXJlT2JqLnF1YXJ0ZXJseVBlcmZvcm0gPSBbXTtcclxuICAgICAgY29tcGFyZU9iai52aWV3UGVyZm9ybSA9IFtdO1xyXG4gICAgICBjb21wYXJlT2JqLmZpbHRlckhlYWRlciA9IFtdO1xyXG4gICAgICBjb21wYXJlT2JqLnJpZGVyTmFtZTtcclxuICAgICAgY29tcGFyZU9iai5jb21wYXJlUGRmO1xyXG4gICAgICBjb21wYXJlT2JqLmNvbXBhcmVXaXRoVmlldztcclxuICAgIH07XHJcbiAgICBwZXJmb3JtTW9kdWxlLnNlbGVjdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAkc2NvcGUuc2VsZWN0aW9uID0gW107XHJcbiAgICB9O1xyXG4gICAgcGVyZm9ybU1vZHVsZS5kYXRhVGFibGVNZXRob2RzID0gZnVuY3Rpb24odGJsSWQsIHRibENvbHVtbiwgdGJsRGF0YSwgY3VzdG9tQ29sdW1uRGVmcykge1xyXG4gICAgICAkKCcjJyArIHRibElkKS5EYXRhVGFibGUoe1xyXG4gICAgICAgIC8qIGNvbHVtbkRlZnM6IFtcclxuICAgICAgICBcdHsgd2lkdGg6ICcwJywgdGFyZ2V0czogMCB9XHJcbiAgICAgICAgXSwgKi9cclxuICAgICAgICAnc2Nyb2xsWScgICAgICAgOiA0NTAsXHJcbiAgICAgICAgJ3Njcm9sbFgnICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAnc2Nyb2xsQ29sbGFwc2UnOiB0cnVlLFxyXG4gICAgICAgICdkZXN0cm95JyAgICAgICA6IHRydWUsXHJcbiAgICAgICAgJ2RhdGEnICAgICAgICAgIDogdGJsRGF0YSxcclxuICAgICAgICAnY29sdW1ucycgICAgICAgOiB0YmxDb2x1bW4sXHJcbiAgICAgICAgJ2NvbHVtbkRlZnMnICAgIDogY3VzdG9tQ29sdW1uRGVmcyxcclxuICAgICAgICAnZm5Sb3dDYWxsYmFjaycgOiBmdW5jdGlvbihuUm93LCB0YmxEYXRhLCBpRGlzcGxheUluZGV4KSB7XHJcbiAgICAgICAgICB2YXIgYW5jaCwgY29tcGlsZUFuY2gsIGVsZW0sIGludmVzdE5hbWU7XHJcblx0XHRcdFxyXG4gICAgICAgICAgJCgnIycgKyB0YmxJZCkucmVtb3ZlQXR0cigncm9sZScpO1xyXG4gICAgICAgICAgaWYgKHRibElkID09PSBnbG9iYWxDb25zdGFudC50YWJsZTMpIHtcclxuICAgICAgICAgICAgaW52ZXN0TmFtZSA9IHRibERhdGEuaW52ZXN0bWVudE9wdGlvbjtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGludmVzdE5hbWUgPSB0YmxEYXRhLnN1YkFjY05hbWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBhbmNoXHJcbiAgICAgICAgICAgID0gJzxkaXYgY2xhc3M9XCJjdXN0b20tY2hlY2tib3ggaW52ZXNjb2NoZWNrYm94XCI+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwibmV3T2JqZWN0WydcclxuICAgICAgICAgICAgKyBpRGlzcGxheUluZGV4ICsgJ11cIiBpZD1cIicgKyB0YmxJZCArIGlEaXNwbGF5SW5kZXhcclxuICAgICAgICAgICAgKyAnXCIgdmFsdWU9XCInICsgdGJsRGF0YS5wZmxJZFxyXG4gICAgICAgICAgICArICdcIiBuZy1jbGljaz1cImNoZWNrZWRGdW5kSWQoKVwiLz48bGFiZWwgZm9yPVwiJyArIHRibElkXHJcbiAgICAgICAgICAgICsgaURpc3BsYXlJbmRleFxyXG4gICAgICAgICAgICArICdcIj48L2xhYmVsPjwvZGl2PiA8ZGl2IGNsYXNzPVwiaW52ZXNjb25hbWVcIj48YSBocmVmPVwiamF2YXNjcmlwdDo7XCIgaWQ9J1xyXG4gICAgICAgICAgICArIHRibERhdGEucGZsSWQgKyAnIG5nLWNsaWNrPVwic2hvd0luZGl2KFxcJycgKyB0YmxEYXRhLnBmbElkXHJcbiAgICAgICAgICAgICsgJ1xcJylcIj4nICsgaW52ZXN0TmFtZSArICc8L2E+PC9kaXY+JztcclxuICAgICAgICAgIGNvbXBpbGVBbmNoID0gJGNvbXBpbGUoYW5jaCk7XHJcbiAgICAgICAgICBlbGVtID0gY29tcGlsZUFuY2goJHNjb3BlKTtcclxuICAgICAgICAgICQoJ3RkOmVxKDApJywgblJvdykuaHRtbChlbGVtKTtcclxuXHJcbiAgICAgICAgICAvKiBjaGsgPSAnPGRpdiBjbGFzcz1cImN1c3RvbS1jaGVja2JveFwiPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cIm5ld09iamVjdFsnK2lEaXNwbGF5SW5kZXgrJ11cIiBpZD1cIicrdGJsSWQraURpc3BsYXlJbmRleCsnXCIgdmFsdWU9XCInK3RibERhdGEucGZsSWQrJ1wiIG5nLWNsaWNrPVwiY2hlY2tlZEZ1bmRJZCgpXCIvPjxsYWJlbCBmb3I9XCInK3RibElkK2lEaXNwbGF5SW5kZXgrJ1wiXCI+PC9sYWJlbD48L2Rpdj4nO1xyXG4gICAgICAgICAgY29tcGlsZUNoayA9ICRjb21waWxlKGNoayk7XHJcbiAgICAgICAgICBjaGtFbGVtID0gY29tcGlsZUNoaygkc2NvcGUpO1xyXG4gICAgICAgICAgJCgndGQ6ZXEoMCknLCBuUm93KS5odG1sKGNoa0VsZW0pOyovXHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInJpZGVyVmFsdWU6XCIsICRzY29wZS5yaWRlclZhbHVlKTtcclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwidGJsSWQ6XCIsIHRibElkKTtcclxuXHJcbiAgICAgICAgICBpZiAoJHNjb3BlLnJpZGVyVmFsdWUpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmlzR3JvdXBlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkKCd0ZDplcSgxKScsIG5Sb3cpLmhpZGUoKTtcclxuICAgICAgICAgICAgJCgnLicgKyB0YmxJZCArICcgdGhlYWQgdGg6ZXEoMSknKS5oaWRlKCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkc2NvcGUuaXNHcm91cGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgJCgnLicgKyB0YmxJZCArICcgdGhlYWQgdGg6ZXEoMSknKS5zaG93KCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIG5Sb3c7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAnb3JkZXInOiBbXHJcbiAgICAgICAgICBbMiwgJ2FzYyddXHJcbiAgICAgICAgXSxcclxuICAgICAgICAnYlBhZ2luYXRlJyAgIDogZmFsc2UsXHJcbiAgICAgICAgJ2JGaWx0ZXInICAgICA6IGZhbHNlLFxyXG4gICAgICAgICdiSW5mbycgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAnZHJhd0NhbGxiYWNrJzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLm5ld09iamVjdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XHJcbiAgICAgICAgICAgICRzY29wZS5uZXdPYmplY3RbaW5kZXhdID0gZmFsc2U7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGlmICghJHNjb3BlLmdyb3VwaW5nVW5pdCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuZ3JvdXBpbmdVbml0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdmFyIGFwaSA9IHRoaXMuYXBpKCksXHJcbiAgICAgICAgICAgICAgcm93cyA9ICcnLFxyXG4gICAgICAgICAgICAgIGNvbHMsXHJcbiAgICAgICAgICAgICAgbGFzdCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAodGJsSWQgPT09IGdsb2JhbENvbnN0YW50LnRhYmxlMykge1xyXG4gICAgICAgICAgICAgIGNvbHMgPSAnNyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgY29scyA9ICcxNCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcm93cyA9IGFwaS5yb3dzKHtcclxuICAgICAgICAgICAgICAncGFnZSc6ICdjdXJyZW50J1xyXG4gICAgICAgICAgICB9KS5ub2RlcygpO1xyXG4gICAgICAgICAgICBhcGkuY29sdW1uKDEsIHtcclxuICAgICAgICAgICAgICAncGFnZSc6ICdjdXJyZW50J1xyXG4gICAgICAgICAgICB9KS5kYXRhKCkuZWFjaChmdW5jdGlvbihncm91cCwgaSkge1xyXG4gICAgICAgICAgICAgIGlmIChncm91cCAhPSAnTkEnKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNQZXJtZkFzc2V0Q2F0ZWdvcnkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnBlcmZvcm1hbmNlUGRmID0gcGVyZm9ybVJNUGRmLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgIC97e3ZpZXdJZH19L2csICRzY29wZS52aWV3SWQpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnBlcmZvcm1hbmNlRXhjZWwgPSBwZXJmb3JtUk1FeGNlbC5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAve3t2aWV3SWR9fS9nLCAkc2NvcGUudmlld0lkKTtcclxuICAgICAgICAgICAgICAgIGlmIChsYXN0ICE9PSBncm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAkKHJvd3MpLmVxKGkpLmJlZm9yZShcclxuICAgICAgICAgICAgICAgICAgICAnPHRyIGNsYXNzPVwiZ3JvdXBcIj48dGQgY29sc3Bhbj0nXHJcbiAgICAgICAgICAgICAgICAgICAgKyBjb2xzXHJcbiAgICAgICAgICAgICAgICAgICAgKyAnIGNsYXNzPVwibGZnLXV0YWJsZS1zdWJcIj4nXHJcbiAgICAgICAgICAgICAgICAgICAgKyBncm91cCArICcgPHNwYW4+JyArIGdyb3VwLm1hdGNoKFxyXG4gICAgICAgICAgICAgICAgICAgICAgL1tBLVpdL2cpLmpvaW4oJycpXHJcbiAgICAgICAgICAgICAgICAgICAgKyAnPC9zcGFuPjwvdGQ+PC90cj4nXHJcbiAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgIGxhc3QgPSBncm91cDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnBlcmZvcm1hbmNlUGRmID0gcGVyZm9ybVBkZi5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAve3t2aWV3SWR9fS9nLCAkc2NvcGUudmlld0lkKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5wZXJmb3JtYW5jZUV4Y2VsID0gcGVyZm9ybUV4Y2VsLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgIC97e3ZpZXdJZH19L2csICRzY29wZS52aWV3SWQpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkc2NvcGUucGVyZm9ybWFuY2VQZGYgPSBwZXJmb3JtUGRmLnJlcGxhY2UoL3t7dmlld0lkfX0vZyxcclxuICAgICAgICAgICAgICAkc2NvcGUudmlld0lkKTtcclxuICAgICAgICAgICAgJHNjb3BlLnBlcmZvcm1hbmNlRXhjZWwgPSBwZXJmb3JtRXhjZWwucmVwbGFjZShcclxuICAgICAgICAgICAgICAve3t2aWV3SWR9fS9nLCAkc2NvcGUudmlld0lkKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICAkKCcjJyArIHRibElkKS5maW5kKCd0aCcpLmVxKDApLmFkZENsYXNzKCdzb3J0aW5nX2FzYycpO1xyXG4gICAgICAkKCcjbGZnLXBlcmZvcm1hbmNlLXZhbHVlcyB0ZCcpLmF0dHIoJ3RhYmluZGV4JywgJzAnKTtcclxuICAgICAgJCgnI2xmZy1wZXJmb3JtYW5jZS12YWx1ZXMtcXVhcnRlcmx5IHRkJykuYXR0cigndGFiaW5kZXgnLCAnMCcpO1xyXG4gICAgICAkKCcjbGZnLXBlcmZvcm1hbmNlLXZhbHVlcy1zdXJyZW5kZXJfd3JhcHBlciB0ZCcpLmF0dHIoJ3RhYmluZGV4JywgJzAnKTtcclxuICAgICAgJCgnI2xmZy11bml0LXZhbHVlcyB0ZCcpLmF0dHIoJ3RhYmluZGV4JywgJzAnKTtcclxuICAgIH07XHJcblxyXG4gICAgcGVyZm9ybU1vZHVsZS5vdmVybGF5UG9zaXRpb24gPSBmdW5jdGlvbihpZCkge1xyXG4gICAgICB2YXIgYm9keUhndCA9IGFuZ3VsYXIuZWxlbWVudCh3aW5kb3cpLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgYW5ndWxhci5lbGVtZW50KCcjZmFkZScpLmhlaWdodChib2R5SGd0KTtcclxuICAgICAgYW5ndWxhci5lbGVtZW50KCcjJyArIGlkKS5jc3MoJ3RvcCcsICcwcHgnKTtcclxuICAgICAgaWYgKGlkKSB7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCdodG1sLCBib2R5JykuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAnc2Nyb2xsVG9wJzogMFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2ZhZGUnKS5zaG93KCk7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjJyArIGlkKS5zaG93KCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcjZmFkZScpLmlzKCc6dmlzaWJsZScpKSB7XHJcbiAgICAgICAgcGVyZm9ybU1vZHVsZS5vdmVybGF5UG9zaXRpb24oKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBwZXJmb3JtTW9kdWxlLm1vbnRobHlUYWJsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0YmxDb2x1bW4gPSBbXHJcbiAgICAgICAgLy8ge1wiZGF0YVwiOlwicGZsSWRcIn0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgJ2RhdGEnOiAnc3ViQWNjTmFtZSdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICdkYXRhJzogJ3Jpc2tWYWx1ZSdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICdkYXRhJzogJ3Jpc2tPcmRlcidcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICdkYXRhJzogJ2Z1bmRJbmNEdCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICdkYXRhJzogJ2NoYW5nZUZybVByZXZEYXlQZXJmb3JtYW5jZSdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICdkYXRhJzogJ3BlcmZWYWx1ZVl0ZDEnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAnZGF0YSc6ICdwZXJmVmFsdWVZdGQyJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgJ2RhdGEnOiAncGVyZlZhbHVlT25lTW9udGgnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAnZGF0YSc6ICdwZXJmVmFsdWVUaHJlZU1vbnRoJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgJ2RhdGEnOiAncGVyZlZhbHVlT25lWWVhcidcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICdkYXRhJzogJ3BlcmZWYWx1ZVRocmVlWWVhcidcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICdkYXRhJzogJ3BlcmZWYWx1ZUZpdmVZZWFyJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgJ2RhdGEnOiAncGVyZlZhbHVlVGVuWWVhcidcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICdkYXRhJzogJ3BlcmZWYWx1ZVNpbmNlSW5jZXB0aW9uJ1xyXG4gICAgICAgIH1cclxuICAgICAgXTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHBlcmZvcm1Nb2R1bGU7XHJcbiAgfSkoJHNjb3BlKTtcclxuICAkc2NvcGUuJG9uKCdwcm9kdWN0X2NvZGVfbmFtZScsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICBwZXJmb3JtQ29tbW9uLnNlbGVjdGlvbigpO1xyXG4gICAgY29tcGFyZU9iai5wcm9kdWN0SWQgPSBkYXRhLnByb2R1Y3RDb2RlO1xyXG4gICAgY29tcGFyZU9iai5yaWRlck5hbWUgPSBkYXRhLnByb2R1Y3ROYW1lO1xyXG4gICAgcGVyZm9ybVBkZiA9IGdsb2JhbENvbnN0YW50LnBlcmZvcm1QZGY7XHJcbiAgICBwZXJmb3JtUGRmID0gcGVyZm9ybVBkZi5yZXBsYWNlKCd7e2pzb25JZH19JywgY29tcGFyZU9iai5wcm9kdWN0SWQpO1xyXG4gICAgcGVyZm9ybVJNUGRmID0gZ2xvYmFsQ29uc3RhbnQucGVyZm9ybVJNUGRmO1xyXG4gICAgcGVyZm9ybVJNUGRmID0gcGVyZm9ybVJNUGRmLnJlcGxhY2UoJ3t7anNvbklkfX0nLCBjb21wYXJlT2JqLnByb2R1Y3RJZCk7XHJcbiAgICBwZXJmb3JtRXhjZWwgPSBnbG9iYWxDb25zdGFudC5wZXJmb3JtRXhjZWw7XHJcbiAgICBwZXJmb3JtRXhjZWwgPSBwZXJmb3JtRXhjZWwucmVwbGFjZSgne3tqc29uSWR9fScsIGNvbXBhcmVPYmoucHJvZHVjdElkKTtcclxuICAgIHBlcmZvcm1STUV4Y2VsID0gZ2xvYmFsQ29uc3RhbnQucGVyZm9ybVJNRXhjZWw7XHJcbiAgICBwZXJmb3JtUk1FeGNlbCA9IHBlcmZvcm1STUV4Y2VsLnJlcGxhY2UoJ3t7anNvbklkfX0nLCBjb21wYXJlT2JqLnByb2R1Y3RJZCk7XHJcbiAgfSk7XHJcbiAgJHNjb3BlLiRvbignZGF0YVRhYmxlc1Jlc3BvbnNpdmUnLCBmdW5jdGlvbihldnQsIGNvdW50KSB7XHJcbiAgICAkc2NvcGUucGVyZl9jb3VudCA9IGNvdW50O1xyXG4gICAgaWYgKCRzY29wZS5wZXJmRGF0YSkge1xyXG4gICAgICAkc2NvcGUuY2hhbmdlUGVyZm9ybSgkc2NvcGUuaGVhZGVyQXJyYXlbMF0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gICRzY29wZS5wcm9zcGVjdHVzTGluayA9ICdqYXZhc2NyaXB0OjsnO1xyXG4gICRzY29wZS4kb24oJ2Z1bmRQZXJmb3JtYW5jZXRhYmxlRGF0YScsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICBwZXJmVGJsQ291bnQxID0gMCwgcGVyZlRibENvdW50MiA9IDAsIHBlcmZUYmxDb3VudDMgPSAwO1xyXG4gICAgcGVyZm9ybURhdGEgPSBkYXRhLmRhdGE7XHJcbiAgICAkc2NvcGUuJHdhdGNoKCckbGFzdCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICBhbmd1bGFyLmVsZW1lbnQoJyNsYW5kaW5nLWhlcm8tcHVsbGRvd24xJykubGlzdFB1bGxkb3duKCk7XHJcbiAgICB9KTtcclxuICAgICRzY29wZS5pc1RhYmxlU2hvdyA9IDE7XHJcbiAgICAkc2NvcGUucHJvZHVjdFBlcmZvcm1hbmNlID0gZGF0YS5kYXRhLnByb2R1Y3RQZXJmb3JtYW5jZTtcclxuICAgIGlmIChkYXRhLmRhdGEucHJvZHVjdFBlcmZvcm1hbmNlLmNvbXBsaWFuY2VUb3ApIHtcclxuICAgICAgY29tcGxpYW5jZVRvcE1zZyA9IGRhdGEuZGF0YS5wcm9kdWN0UGVyZm9ybWFuY2UuY29tcGxpYW5jZVRvcC5yZXBsYWNlKFxyXG4gICAgICAgIC8oPGJbXj5dKz8+fDxiPnw8XFwvYj58PHBcXC8+KS9pbWcsICcnKTtcclxuICAgICAgY29tcGxpYW5jZVRvcE1zZyA9IGNvbXBsaWFuY2VUb3BNc2cucmVwbGFjZSgvKDxwW14+XSs/Pnw8cD4pL2ltZywgJzxwIHRhYmluZGV4PVxcJzBcXCc+Jyk7XHJcbiAgICAgICQoJy5jb21wbGlhbmNlVG9wLW1zZy1hZGQtanMgcCcpLnJlbW92ZSgpO1xyXG4gICAgICBhbmd1bGFyLmVsZW1lbnQoY29tcGxpYW5jZVRvcE1zZykuYXBwZW5kVG8oJy5jb21wbGlhbmNlVG9wLW1zZy1hZGQtanMnKTtcclxuICAgIH1cclxuXHJcbiAgICAkc2NvcGUucGVyZm9ybWFuY2VWYWx1ZXMgPSBkYXRhLmRhdGEucHJvZHVjdFBlcmZvcm1hbmNlLm1vbnRobHlQZXJmb3JtYW5jZTtcclxuICAgICRzY29wZS50YmxJZCA9IGdsb2JhbENvbnN0YW50LnRhYmxlMTtcclxuICAgICRzY29wZS55dGQxID0gJHNjb3BlLnByb2R1Y3RQZXJmb3JtYW5jZS5sYXN0RGFpbHlQZXJmRGF0ZTtcclxuICAgICRzY29wZS55dGQyID0gJHNjb3BlLnByb2R1Y3RQZXJmb3JtYW5jZS5tb250aGx5UGVyZm9ybWFuY2VZdGQyRGF0ZTtcclxuICAgIGlmICgkc2NvcGUucmlkZXJWYWx1ZSkge1xyXG4gICAgICAkc2NvcGUuaGVhZGVyQXJyYXkgPSBbe1xyXG4gICAgICAgICduYW1lJyA6IGRhdGEuZGF0YS5wcm9kdWN0UGVyZm9ybWFuY2UubW9udGhseVBlcmZIZWFkZXIsXHJcbiAgICAgICAgJ3ZhbHVlJzogJzEnXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICAnbmFtZScgOiBkYXRhLmRhdGEucHJvZHVjdFBlcmZvcm1hbmNlLm1vbnRobHlQZXJmU3VycmVuZGVySGVhZGVyLFxyXG4gICAgICAgICd2YWx1ZSc6ICcyJ1xyXG4gICAgICB9XHJcbiAgICAgIF07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAkc2NvcGUuaGVhZGVyQXJyYXkgPSBbe1xyXG4gICAgICAgICduYW1lJyA6IGRhdGEuZGF0YS5wcm9kdWN0UGVyZm9ybWFuY2UubW9udGhseVBlcmZIZWFkZXIsXHJcbiAgICAgICAgJ3ZhbHVlJzogJzEnXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICAnbmFtZScgOiBkYXRhLmRhdGEucHJvZHVjdFBlcmZvcm1hbmNlLm1vbnRobHlQZXJmU3VycmVuZGVySGVhZGVyLFxyXG4gICAgICAgICd2YWx1ZSc6ICcyJ1xyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgJ25hbWUnIDogZGF0YS5kYXRhLnByb2R1Y3RQZXJmb3JtYW5jZS5zdGFuZGFyZGl6ZWRQZXJmSGVhZGVyLFxyXG4gICAgICAgICd2YWx1ZSc6ICczJ1xyXG4gICAgICB9XHJcbiAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gJHNjb3BlLmNoYW5nZVBlcmZvcm0oJHNjb3BlLmhlYWRlckFycmF5WzBdKTtcclxuICAgICRzY29wZS5uZXdPYmplY3QgPSAnJztcclxuICAgIHBlcmZvcm1Db21tb24ubW9udGhseVRhYmxlKCk7XHJcbiAgICB0YmxEYXRhID0gJHNjb3BlLnBlcmZvcm1hbmNlVmFsdWVzO1xyXG4gICAgYW5ndWxhci5lbGVtZW50KCcjbGFuZGluZy1oZXJvLXB1bGxkb3duNCBsaScpLmVhY2goZnVuY3Rpb24oaWR4KSB7XHJcbiAgICAgIGlmIChpZHggPT09IDEpIHtcclxuICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdpcy1hY3RpdmUnKTtcclxuICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdpcy1jdXJyZW50Jyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XHJcbiAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnaXMtY3VycmVudCcpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGFuZ3VsYXIuZWxlbWVudCgnI2xhbmRpbmctaGVyby1wdWxsZG93bjQgbGkubGlzdC10aXRsZScpLmZpbmQoJ2EnKS5odG1sKGRhdGEuZGF0YS5wcm9kdWN0UGVyZm9ybWFuY2VcclxuICAgICAgLm1vbnRobHlQZXJmSGVhZGVyKTtcclxuICAgIGFuZ3VsYXIuZWxlbWVudCgnI2xhbmRpbmctaGVyby1wdWxsZG93bjQgbGkubGlzdC10aXRsZScpLmF0dHIoJ2FyaWEtbGFiZWwnLCBkYXRhLmRhdGEucHJvZHVjdFBlcmZvcm1hbmNlXHJcbiAgICAgIC5tb250aGx5UGVyZkhlYWRlcik7XHJcbiAgICAkc2NvcGUuJHdhdGNoKCckbGFzdCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICBhbmd1bGFyLmVsZW1lbnQoJyNsYW5kaW5nLWhlcm8tcHVsbGRvd240JykubGlzdFB1bGxkb3duKCk7XHJcbiAgICB9KTtcclxuICAgICRzY29wZS5maWx0ZXJIZWFkZXIgPSAkc2NvcGUuaGVhZGVyQXJyYXlbMF07XHJcbiAgICAkc2NvcGUuZnVuZERpc2Nsb3N1cmVzID0gZGF0YS5kYXRhLnByb2R1Y3RQZXJmb3JtYW5jZS5mdW5kRGlzY2xvc3VyZXM7XHJcbiAgICBpZiAoZGF0YS5kYXRhLnByb2R1Y3RQZXJmb3JtYW5jZS5wcm9kdWN0RGlzY2xvc3VyZXMgIT09ICcnKSB7XHJcbiAgICAgICRzY29wZS5wcm9kdWN0RGlzY2xvc3VyZXMgPSBkYXRhLmRhdGEucHJvZHVjdFBlcmZvcm1hbmNlLnByb2R1Y3REaXNjbG9zdXJlcztcclxuICAgIH1cclxuICAgICRzY29wZS5wZXJmRGF0YSA9IHRydWU7XHJcbiAgICBpZiAoJHNjb3BlLnBlcmZfY291bnQgIT09IDAgJiYgJHNjb3BlLnBlcmZfY291bnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAkc2NvcGUuY2hhbmdlUGVyZm9ybSgkc2NvcGUuaGVhZGVyQXJyYXlbMF0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHBlcmZvcm1Db21tb24uc2VsZWN0aW9uKCk7XHJcbiAgJHNjb3BlLmNoZWNrZWRGdW5kSWQgPSBmdW5jdGlvbigpIHtcclxuICAgIHBlcmZvcm1Db21tb24uc2VsZWN0aW9uKCk7XHJcbiAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLm5ld09iamVjdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XHJcbiAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICRzY29wZS5zZWxlY3Rpb24ucHVzaChhbmd1bGFyLmVsZW1lbnQoJyMnICsgJHNjb3BlLnRibElkICsgaW5kZXgpLnZhbCgpKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuICAkc2NvcGUuY2hhbmdlUGVyZm9ybSA9IGZ1bmN0aW9uKGRhdGEsIGNvdW50KSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImNoYW5nZVBlcmZvcm0gZGF0YTpcIiwgZGF0YSk7XHJcblxyXG4gICAgJHNjb3BlLnBlcmZfcHJvZHVjdE5hbWUgPSAkc2NvcGUucHJvZHVjdFBlcmZvcm1hbmNlLnByb2R1Y3ROYW1lO1xyXG4gICAgJHNjb3BlLmdyb3VwaW5nVW5pdCA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLm5ld09iamVjdCA9ICcnO1xyXG4gICAgcGVyZm9ybUNvbW1vbi5zZWxlY3Rpb24oKTtcclxuXHJcbiAgICAvKiBpZiAocGVyZlRibENvdW50MSAhPT0gMCkge1xyXG4gICAgXHRjb21tb25GdW5jdGlvbnMubG9hZGVyU2hvdygpO1xyXG4gICAgfSovXHJcbiAgICBpZiAoZGF0YS52YWx1ZSA9PT0gJzEnKSB7XHJcbiAgICAgIHZhciB0YmwzV2lkdGggPSAnMTUwcHgnO1xyXG4gICAgICAkc2NvcGUuZm9vdGVyVGV4dCA9ICRzY29wZS5wcm9kdWN0UGVyZm9ybWFuY2UubW9udGhseVBlcmZGb290ZXI7XHJcblxyXG4gICAgICB2YXIgY29sdW1uRGVmczEgPSBbe1xyXG4gICAgICAgICdjbGFzcyc6ICdkZXRhaWxzLWNvbnRyb2wnLFxyXG5cclxuICAgICAgICAvLyBvcmRlcmFibGU6IGZhbHNlLFxyXG4gICAgICAgICdkYXRhJyAgICAgICAgICA6IG51bGwsXHJcbiAgICAgICAgJ2RlZmF1bHRDb250ZW50JzogJycsXHJcbiAgICAgICAgJ3RhcmdldHMnICAgICAgIDogMFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgJ3RhcmdldHMnOiAwLFxyXG4gICAgICAgICd3aWR0aCcgIDogdGJsM1dpZHRoXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICAndHlwZScgICA6ICduYXR1cmFsJyxcclxuICAgICAgICAndGFyZ2V0cyc6IFs0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxM11cclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgICd0YXJnZXRzJzogMyxcclxuXHQgICAgXHRcImRhdGFcIjogXCJmdW5kSW5jRHRcIixcdFx0XHJcblx0ICAgIFx0J3R5cGUnIDogJ2RhdGUnLFxyXG4gICAgICAgJ2NyZWF0ZWRDZWxsJzogZnVuY3Rpb24gKHRkLCBjZWxsRGF0YSwgcm93RGF0YSwgcm93LCBjb2wpIHtcclxuICAgICAgICAgdmFyIHQgPSBuZXcgRGF0ZShjZWxsRGF0YSk7XHJcbiAgICAgICAgICQodGQpLmF0dHIoXCJkYXRhLW9yZGVyXCIsIHQuZ2V0VGltZSgpKTtcclxuICAgICAgICAgJCh0ZCkuYXR0cihcImRhdGEtc29ydFwiLCB0LmdldFRpbWUoKSk7XHJcbiAgICAgICB9XHJcbiAgICAgfVxyXG4gICAgICBdO1xyXG5cclxuICAgICAgJHNjb3BlLnBlcmZvcm1hbmNlVmFsdWVzID0gJHNjb3BlLnByb2R1Y3RQZXJmb3JtYW5jZS5tb250aGx5UGVyZm9ybWFuY2U7XHJcbiAgICAgICRzY29wZS55dGQyID0gJHNjb3BlLnByb2R1Y3RQZXJmb3JtYW5jZS5tb250aGx5UGVyZm9ybWFuY2VZdGQyRGF0ZTtcclxuICAgICAgJHNjb3BlLnRvdGFsUmV0dXJuID0gJHNjb3BlLnByb2R1Y3RQZXJmb3JtYW5jZS5tb250aGx5UGVyZkNvbHVtbkhlYWRlci5yZXBsYWNlKCRzY29wZS5odG1scmVnZXgsXHJcbiAgICAgICAgJyAnKTtcclxuICAgICAgJHNjb3BlLnRibElkID0gZ2xvYmFsQ29uc3RhbnQudGFibGUxO1xyXG4gICAgICAkc2NvcGUudmlld0lkID0gZ2xvYmFsQ29uc3RhbnQubW9udGhseVBkZjtcclxuICAgICAgcGVyZm9ybUNvbW1vbi5tb250aGx5VGFibGUoKTtcclxuICAgICAgdGJsRGF0YSA9ICRzY29wZS5wZXJmb3JtYW5jZVZhbHVlcztcclxuICAgICAgaWYgKHBlcmZUYmxDb3VudDEgPT09IDApIHtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcGVyZm9ybUNvbW1vbi5kYXRhVGFibGVNZXRob2RzKCRzY29wZS50YmxJZCwgdGJsQ29sdW1uLCB0YmxEYXRhLFxyXG4gICAgICAgICAgICBjb2x1bW5EZWZzMSk7XHJcbiAgICAgICAgfSwgNTApO1xyXG5cclxuICAgICAgICAvLyBpZiAoY291bnQgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcGVyZlRibENvdW50MSsrO1xyXG5cclxuICAgICAgICAvLyB9XHJcbiAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmlzR3JvdXBlZCkge1xyXG4gICAgICAgICRzY29wZS5wZXJmb3JtYW5jZURlZmF1bHRWaWV3KCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoZGF0YS52YWx1ZSA9PT0gJzInKSB7XHJcbiAgICAgIHZhciB0YmwzV2lkdGggPSAnMTUwcHgnO1xyXG4gICAgICAkc2NvcGUuZm9vdGVyVGV4dCA9ICRzY29wZS5wcm9kdWN0UGVyZm9ybWFuY2UubW9udGhseVBlcmZTdXJyZW5kZXJGb290ZXI7XHJcbiAgICAgIHZhciBjb2x1bW5EZWZzMiA9IFt7XHJcbiAgICAgICAgJ2NsYXNzJzogJ2RldGFpbHMtY29udHJvbCcsXHJcblxyXG4gICAgICAgIC8vIG9yZGVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgJ2RhdGEnICAgICAgICAgIDogbnVsbCxcclxuICAgICAgICAnZGVmYXVsdENvbnRlbnQnOiAnJyxcclxuICAgICAgICAndGFyZ2V0cycgICAgICAgOiAwXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICAndGFyZ2V0cyc6IDAsXHJcbiAgICAgICAgJ3dpZHRoJyAgOiB0YmwzV2lkdGhcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgICd0eXBlJyAgIDogJ25hdHVyYWwnLFxyXG4gICAgICAgICd0YXJnZXRzJzogWzQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzXVxyXG4gICAgICB9LFxyXG5cdCAge1xyXG4gICAgICAndGFyZ2V0cyc6IDMsXHJcblx0XHRcImRhdGFcIjogXCJmdW5kSW5jRHRcIixcdFx0XHJcblx0XHQndHlwZScgOiAnZGF0ZScsXHJcbiAgICAgICAgJ2NyZWF0ZWRDZWxsJzogZnVuY3Rpb24gKHRkLCBjZWxsRGF0YSwgcm93RGF0YSwgcm93LCBjb2wpIHtcclxuICAgICAgICAgdmFyIHQgPSBuZXcgRGF0ZShjZWxsRGF0YSk7XHJcbiAgICAgICAgICQodGQpLmF0dHIoXCJkYXRhLW9yZGVyXCIsIHQuZ2V0VGltZSgpKTtcclxuICAgICAgICAgJCh0ZCkuYXR0cihcImRhdGEtc29ydFwiLCB0LmdldFRpbWUoKSk7XHJcbiAgICAgICB9XHJcbiAgICAgfVxyXG4gICAgICBdO1xyXG5cclxuICAgICAgJHNjb3BlLnBlcmZvcm1hbmNlVmFsdWVzU3VycmVuZGVyID0gJHNjb3BlLnByb2R1Y3RQZXJmb3JtYW5jZS5tb250aGx5UGVyZm9ybWFuY2VTdXJyZW5kZXI7XHJcbiAgICAgICRzY29wZS55dGQyID0gJHNjb3BlLnByb2R1Y3RQZXJmb3JtYW5jZS5tb250aGx5UGVyZm9ybWFuY2VTdXJyZW5kZXJZdGQyRGF0ZTtcclxuICAgICAgJHNjb3BlLnRvdGFsUmV0dXJuID0gJHNjb3BlLnByb2R1Y3RQZXJmb3JtYW5jZS5tb250aGx5UGVyZlN1cnJlbmRlckNvbHVtbkhlYWRlci5yZXBsYWNlKFxyXG4gICAgICAgICRzY29wZS5odG1scmVnZXgsICcgJyk7XHJcbiAgICAgICRzY29wZS50YmxJZCA9IGdsb2JhbENvbnN0YW50LnRhYmxlMjtcclxuICAgICAgJHNjb3BlLnZpZXdJZCA9IGdsb2JhbENvbnN0YW50Lm1vbnRobHlTdXJyUGRmO1xyXG4gICAgICBwZXJmb3JtQ29tbW9uLm1vbnRobHlUYWJsZSgpO1xyXG4gICAgICB0YmxEYXRhID0gJHNjb3BlLnBlcmZvcm1hbmNlVmFsdWVzU3VycmVuZGVyO1xyXG4gICAgICBpZiAocGVyZlRibENvdW50MiA9PT0gMCkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBwZXJmb3JtQ29tbW9uLmRhdGFUYWJsZU1ldGhvZHMoJHNjb3BlLnRibElkLCB0YmxDb2x1bW4sIHRibERhdGEsXHJcbiAgICAgICAgICAgIGNvbHVtbkRlZnMyKTtcclxuICAgICAgICB9LCA1MCk7XHJcbiAgICAgICAgcGVyZlRibENvdW50MisrO1xyXG4gICAgICB9IGVsc2UgaWYgKCRzY29wZS5pc0dyb3VwZWQpIHtcclxuICAgICAgICAkc2NvcGUucGVyZm9ybWFuY2VEZWZhdWx0VmlldygpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGRhdGEudmFsdWUgPT09ICczJykge1xyXG4gICAgICB2YXIgdGJsM1dpZHRoID0gJzIwMHB4JztcclxuICAgICAgJHNjb3BlLmZvb3RlclRleHQgPSAkc2NvcGUucHJvZHVjdFBlcmZvcm1hbmNlLnN0YW5kYXJkaXplZFBlcmZGb290ZXI7XHJcbiAgICAgIHZhciBjb2x1bW5EZWZzMyA9IFt7XHJcbiAgICAgICAgJ2NsYXNzJzogJ2RldGFpbHMtY29udHJvbCcsXHJcblxyXG4gICAgICAgIC8vIG9yZGVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgJ2RhdGEnICAgICAgICAgIDogbnVsbCxcclxuICAgICAgICAnZGVmYXVsdENvbnRlbnQnOiAnJyxcclxuICAgICAgICAndGFyZ2V0cycgICAgICAgOiAwXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICAndGFyZ2V0cyc6IDAsXHJcbiAgICAgICAgJ3dpZHRoJyAgOiB0YmwzV2lkdGhcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgICd0eXBlJyAgIDogJ25hdHVyYWwnLFxyXG4gICAgICAgICd0YXJnZXRzJzogWzQsIDUsIDZdXHJcbiAgICAgIH0sXHJcblx0ICB7XHJcbiAgICAgICd0YXJnZXRzJzogMyxcclxuXHRcdCAgXCJkYXRhXCI6IFwiZnVuZEluY0R0XCIsXHRcdFxyXG5cdFx0ICAndHlwZScgOiAnZGF0ZScsXHJcbiAgICAgICAnY3JlYXRlZENlbGwnOiBmdW5jdGlvbiAodGQsIGNlbGxEYXRhLCByb3dEYXRhLCByb3csIGNvbCkge1xyXG4gICAgICAgICB2YXIgdCA9IG5ldyBEYXRlKGNlbGxEYXRhKTtcclxuICAgICAgICAgJCh0ZCkuYXR0cihcImRhdGEtb3JkZXJcIiwgdC5nZXRUaW1lKCkpO1xyXG4gICAgICAgICAkKHRkKS5hdHRyKFwiZGF0YS1zb3J0XCIsIHQuZ2V0VGltZSgpKTtcclxuICAgICAgIH1cclxuICAgICB9XHJcbiAgICAgIF07XHJcblxyXG4gICAgICAkc2NvcGUucGVyZm9ybWFuY2VWYWx1ZXNRdWF0ZXJseSA9ICRzY29wZS5wcm9kdWN0UGVyZm9ybWFuY2UucXVhcnRlcmx5U3RhbmRhcmRQZXJmb3JtYW5jZTtcclxuICAgICAgJHNjb3BlLnl0ZDIgPSAkc2NvcGUucHJvZHVjdFBlcmZvcm1hbmNlLm1vbnRobHlQZXJmb3JtYW5jZVl0ZDJEYXRlO1xyXG4gICAgICAkc2NvcGUudG90YWxSZXR1cm4gPSAkc2NvcGUucHJvZHVjdFBlcmZvcm1hbmNlLnN0YW5kYXJkaXplZFBlcmZDb2x1bW5IZWFkZXIucmVwbGFjZSgkc2NvcGUuaHRtbHJlZ2V4LFxyXG4gICAgICAgICcgJyk7XHJcbiAgICAgICRzY29wZS50YmxJZCA9IGdsb2JhbENvbnN0YW50LnRhYmxlMztcclxuICAgICAgJHNjb3BlLnZpZXdJZCA9IGdsb2JhbENvbnN0YW50Lm1vbnRobHlRdWFyUGRmO1xyXG4gICAgICB0YmxDb2x1bW4gPSBbXHJcbiAgICAgICAgLyoge1xyXG4gICAgICAgICAgICAgICAgXHRkYXRhOiAgIFwicGZsSWRcIixcclxuICAgICAgICAgICAgICAgIFx0XCJvcmRlcmFibGVcIjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9LFx0Ki9cclxuICAgICAgICB7XHJcbiAgICAgICAgICAnZGF0YSc6ICdpbnZlc3RtZW50T3B0aW9uJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgJ2RhdGEnOiAncmlza1ZhbHVlJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgJ2RhdGEnOiAncmlza09yZGVyJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgJ2RhdGEnOiAnZnVuZEluY0R0J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgJ2RhdGEnOiAncGVyZlZhbHVlT25lWWVhcidcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICdkYXRhJzogJ3BlcmZWYWx1ZUZpdmVZZWFyJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgJ2RhdGEnOiAncGVyZlZhbHVlVGVuWWVhclNpbmNlSW5jZXB0aW9uJ1xyXG4gICAgICAgIH1cclxuICAgICAgXTtcclxuICAgICAgdGJsRGF0YSA9ICRzY29wZS5wZXJmb3JtYW5jZVZhbHVlc1F1YXRlcmx5O1xyXG4gICAgICBpZiAocGVyZlRibENvdW50MyA9PT0gMCkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBwZXJmb3JtQ29tbW9uLmRhdGFUYWJsZU1ldGhvZHMoJHNjb3BlLnRibElkLCB0YmxDb2x1bW4sIHRibERhdGEsXHJcbiAgICAgICAgICAgIGNvbHVtbkRlZnMzKTtcclxuICAgICAgICB9LCAzMDApO1xyXG4gICAgICAgIHBlcmZUYmxDb3VudDMrKztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAkc2NvcGUucGVyZm9ybWFuY2VEZWZhdWx0VmlldygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJHNjb3BlLmlzVGFibGVTaG93ID0gZGF0YS52YWx1ZTtcclxuICAgICRzY29wZS5maWx0ZXJIZWFkZXIgPSBkYXRhO1xyXG4gIH07XHJcbiAgJHNjb3BlLnNob3dJbmRpdiA9IGZ1bmN0aW9uKHBmbElkKSB7XHJcbiAgICB2YXIgcGVyZkRhdGEgPSB7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBwZXJmRGF0YS5mdWxscGVyZkRhdGEgPSBwZXJmb3JtRGF0YTtcclxuICAgIHBlcmZEYXRhLnByb2ZpbGVJZCA9IHBmbElkO1xyXG4gICAgcGVyZkRhdGEuZHJvcGRvd25OdW0gPSAkc2NvcGUuaXNUYWJsZVNob3c7XHJcbiAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2ludmVzY29PdmVybGF5RGF0YScsIHBlcmZEYXRhKTtcclxuICAgIHBlcmZvcm1Db21tb24ub3ZlcmxheVBvc2l0aW9uKCdsaWdodDEnKTtcclxuICB9O1xyXG4gICRzY29wZS5wZXJmb3JtYW5jZURlZmF1bHRWaWV3ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkc2NvcGUuZ3JvdXBpbmdVbml0ID0gZmFsc2U7XHJcbiAgICB2YXIgcGVyZl90YmwgPSAkKCcjJyArICRzY29wZS50YmxJZCkuZGF0YVRhYmxlKCk7XHJcblxyXG4gICAgcGVyZl90YmwuZm5Tb3J0TmV1dHJhbCgpO1xyXG4gIH07XHJcbiAgJHNjb3BlLmNvbXBhcmVQZXJmb3JtID0gZnVuY3Rpb24oc2VsZWN0aW9uKSB7XHJcbiAgICBpZiAoc2VsZWN0aW9uLmxlbmd0aCA8PSAxKSB7XHJcbiAgICAgIGFsZXJ0KGdsb2JhbENvbnN0YW50Lm1vcmVUaGFuT25lKTtcclxuXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uLmxlbmd0aCA+IDUpIHtcclxuICAgICAgYWxlcnQoZ2xvYmFsQ29uc3RhbnQubGVzc1RoYW5GaXZlKTtcclxuXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHBlcmZvcm1Db21tb24ucmVzZXRWYWx1ZXMoKTtcclxuICAgIGlmIChzZWxlY3Rpb24ubGVuZ3RoID49IDIgJiYgc2VsZWN0aW9uLmxlbmd0aCA8IDYpIHtcclxuICAgICAgcGVyZm9ybUNvbW1vbi5vdmVybGF5UG9zaXRpb24oJ2xpZ2h0Jyk7XHJcbiAgICAgIHZhciBjb21wYXJlUGRmLCBpLFxyXG4gICAgICAgIHNlbFZhbCA9IFtdLFxyXG4gICAgICAgIHBkZkhlYWRlciwgY29tcGFyZVdpdGhWaWV3LCBmdW5kQ29tcGFyaXNvblBkZjtcclxuXHJcbiAgICAgIGZ1bmRDb21wYXJpc29uUGRmID0gZ2xvYmFsQ29uc3RhbnQuZnVuZENvbXBhcmlzb25QZGY7XHJcbiAgICAgIGZvciAoaSA9IDA7IGkgPCA1OyBpKyspIHtcclxuICAgICAgICBpZiAoc2VsZWN0aW9uW2ldKSB7XHJcbiAgICAgICAgICBzZWxWYWwucHVzaChzZWxlY3Rpb25baV0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzZWxWYWwucHVzaCgnTkEnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCRzY29wZS5maWx0ZXJIZWFkZXIudmFsdWUgPT09ICcxJykge1xyXG4gICAgICAgIHBkZkhlYWRlciA9IGdsb2JhbENvbnN0YW50Lm1vbnRobHlQZGY7XHJcbiAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmZpbHRlckhlYWRlci52YWx1ZSA9PT0gJzInKSB7XHJcbiAgICAgICAgcGRmSGVhZGVyID0gZ2xvYmFsQ29uc3RhbnQubW9udGhseVN1cnJQZGY7XHJcbiAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmZpbHRlckhlYWRlci52YWx1ZSA9PT0gJzMnKSB7XHJcbiAgICAgICAgcGRmSGVhZGVyID0gZ2xvYmFsQ29uc3RhbnQubW9udGhseVF1YXJQZGY7XHJcbiAgICAgIH1cclxuICAgICAgY29tcGFyZVBkZiA9IGZ1bmRDb21wYXJpc29uUGRmO1xyXG4gICAgICBjb21wYXJlUGRmID0gY29tcGFyZVBkZi5yZXBsYWNlKCd7e2pzb25JZH19JywgY29tcGFyZU9iai5wcm9kdWN0SWQpO1xyXG4gICAgICBjb21wYXJlV2l0aFZpZXcgPSBjb21wYXJlUGRmLnJlcGxhY2UoJ3t7ZnVuZElkfX0nLCBzZWxWYWwuam9pbignLycpKTtcclxuICAgICAgY29tcGFyZU9iai5jb21wYXJlUGRmID0gY29tcGFyZVdpdGhWaWV3LnJlcGxhY2UoJ3t7dmlld0lkfX0nLCBwZGZIZWFkZXIpO1xyXG4gICAgICBjb21wYXJlT2JqLnZpZXdQZXJmb3JtID0gJHNjb3BlLmhlYWRlckFycmF5O1xyXG4gICAgICBjb21wYXJlT2JqLmZpbHRlckhlYWRlciA9ICRzY29wZS5maWx0ZXJIZWFkZXI7XHJcbiAgICAgIGNvbXBhcmVPYmoubGFzdFBlcmZEYXRlID0gcGVyZm9ybURhdGEucHJvZHVjdFBlcmZvcm1hbmNlLmxhc3REYWlseVBlcmZEYXRlO1xyXG4gICAgICBjb21wYXJlT2JqLmNvbXBhcmVXaXRoVmlldyA9IGNvbXBhcmVXaXRoVmlldztcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKHNlbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2gocGVyZm9ybURhdGEucHJvZHVjdFBlcmZvcm1hbmNlLm1vbnRobHlQZXJmb3JtYW5jZSwgZnVuY3Rpb24oXHJcbiAgICAgICAgICBtb250aGx5UGVyZm9ybVZhbHVlKSB7XHJcbiAgICAgICAgICBpZiAobW9udGhseVBlcmZvcm1WYWx1ZS5wZmxJZCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgY29tcGFyZU9iai5tb250aGx5UGVyZm9ybS5wdXNoKG1vbnRobHlQZXJmb3JtVmFsdWUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChwZXJmb3JtRGF0YS5wcm9kdWN0UGVyZm9ybWFuY2UubW9udGhseVBlcmZvcm1hbmNlU3VycmVuZGVyLFxyXG4gICAgICAgICAgZnVuY3Rpb24obW9udGhseVN1clZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChtb250aGx5U3VyVmFsdWUucGZsSWQgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgY29tcGFyZU9iai5tb250aGx5UGVyZm9ybVN1cnJlbmRlci5wdXNoKG1vbnRobHlTdXJWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChwZXJmb3JtRGF0YS5wcm9kdWN0UGVyZm9ybWFuY2UucXVhcnRlcmx5U3RhbmRhcmRQZXJmb3JtYW5jZSxcclxuICAgICAgICAgIGZ1bmN0aW9uKHF1YXJ0ZXJseVZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChxdWFydGVybHlWYWx1ZS5wZmxJZCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICBjb21wYXJlT2JqLnF1YXJ0ZXJseVBlcmZvcm0ucHVzaChxdWFydGVybHlWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdjb21wYXJlT3ZlcmxheURhdGEnLCBjb21wYXJlT2JqKTtcclxuICAgIH1cclxuICB9O1xyXG4gIGFuZ3VsYXIuZWxlbWVudCgnLmxmZy1jbG9zZS1wYWdlJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICBhbmd1bGFyLmVsZW1lbnQoJyNsaWdodCwgI2xpZ2h0MScpLmhpZGUoKTtcclxuICAgIGFuZ3VsYXIuZWxlbWVudCgnI2ZhZGUnKS5oaWRlKCk7XHJcbiAgfSk7XHJcbn1dKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5sZmdhcHAuY29udHJvbGxlcigncHJvc3BlY3R1c0NvbnRybCcsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XHJcbiAgICAkc2NvcGUuY3JlYXRlUHJvZHVjdFByb3NwZWN0dXNWaWV3ID0gZnVuY3Rpb24ocHJvZHVjdFByb3NwZWN0dXMpIHtcclxuICAgICAgICB2YXIgcHJvc3BlY3R1c1Byb2RQcm9zID0gJycsXHJcbiAgICAgICAgICAgIHByb3NwZWN0dXNQcm9kUHJvc1N1cHMgPSAnJyxcclxuICAgICAgICAgICAgcHJvc3BlY3R1c1NBSXMgPSAnJyxcclxuICAgICAgICAgICAgcHJvc3BlY3R1c1NBSVN1cHMgPSAnJyxcclxuICAgICAgICAgICAgcHJvc3BlY3R1c0ZuZFByb3MgPSAnJyxcclxuICAgICAgICAgICAgcHJvc3BlY3R1c0ZuZFByb3NTdXBzID0gJycsXHJcbiAgICAgICAgICAgIHByb3NwZWN0dXNTZW0gPSAnJyxcclxuICAgICAgICAgICAgcHJvc3BlY3R1c0FuID0gJycsXHJcbiAgICAgICAgICAgIHByb3NwZWN0dXNmdW5kRmVlRXhwID0gJycsXHJcblxyXG4gICAgICAgICAgICAvKiBwcm9zcGVjdHVzUGFuZWwgPSBudWxsLCovXHJcbiAgICAgICAgICAgIHByb2R1Y3RTdGF0ZW1lbnRQYW5lbCA9IG51bGwsXHJcblxyXG4gICAgICAgICAgICAvKiBmdW5kUHJvc3BlY3R1c1BhbmVsID0gbnVsbCwqL1xyXG4gICAgICAgICAgICByZXBvcnRzUGFuZWwgPSBudWxsLFxyXG4gICAgICAgICAgICBmdW5kUHJvc3BlY3R1c1BhbmVsTGlua3MsXHJcbiAgICAgICAgICAgIHByb2R1Y3RTdGF0ZW1lbnRQYW5lbExpbmtzLFxyXG4gICAgICAgICAgICBmdW5kRmVlRXhwbExpbmtzLFxyXG4gICAgICAgICAgICBwcm9kdWN0UHJvc3BlY3R1c1BhbmVsTGlua3M7XHJcblxyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChwcm9kdWN0UHJvc3BlY3R1cywgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAocHJvZHVjdFByb3NwZWN0dXNbaW5kZXhdLnVzYWdlVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnMSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvc3BlY3R1c1NBSXMgPSBwcm9zcGVjdHVzU0FJcyArICc8bGkgID48YSBocmVmPVwiJyArIGdsb2JhbENvbnN0YW50LnJlcG9ydHNMaW5rXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgcHJvZHVjdFByb3NwZWN0dXNbaW5kZXhdLmxpbmsgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCIgPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBwcm9kdWN0UHJvc3BlY3R1c1tpbmRleF0uZGlzcGxheVRleHQgKyAnPC9hPjwvbGk+JztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJzInOlxyXG4gICAgICAgICAgICAgICAgICAgIHByb3NwZWN0dXNQcm9kUHJvcyA9IHByb3NwZWN0dXNQcm9kUHJvcyArICc8bGkgID48YSBocmVmPVwiJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICArIGdsb2JhbENvbnN0YW50LnJlcG9ydHNMaW5rICsgcHJvZHVjdFByb3NwZWN0dXNbaW5kZXhdLmxpbmtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCIgPicgKyBwcm9kdWN0UHJvc3BlY3R1c1tpbmRleF0uZGlzcGxheVRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC9hPjwvbGk+JztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJzMnOlxyXG4gICAgICAgICAgICAgICAgICAgIHByb3NwZWN0dXNGbmRQcm9zID0gcHJvc3BlY3R1c0ZuZFByb3MgKyAnPGxpICA+PGEgaHJlZj1cIicgKyBnbG9iYWxDb25zdGFudC5yZXBvcnRzTGlua1xyXG4gICAgICAgICAgICAgICAgICAgICAgICArIHByb2R1Y3RQcm9zcGVjdHVzW2luZGV4XS5saW5rICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBwcm9kdWN0UHJvc3BlY3R1c1tpbmRleF0uZGlzcGxheVRleHQgKyAnPC9hPjwvbGk+JztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJzQnOlxyXG4gICAgICAgICAgICAgICAgICAgIHByb3NwZWN0dXNQcm9kUHJvc1N1cHMgPSBwcm9zcGVjdHVzUHJvZFByb3NTdXBzICsgJzxsaSAgPjxhIGhyZWY9XCInXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgZ2xvYmFsQ29uc3RhbnQucmVwb3J0c0xpbmsgKyBwcm9kdWN0UHJvc3BlY3R1c1tpbmRleF0ubGlua1xyXG4gICAgICAgICAgICAgICAgICAgICAgICArICdcIiB0YXJnZXQ9XCJfYmxhbmtcIj4nICsgcHJvZHVjdFByb3NwZWN0dXNbaW5kZXhdLmRpc3BsYXlUZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJzwvYT48L2xpPic7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICc1JzpcclxuICAgICAgICAgICAgICAgICAgICBwcm9zcGVjdHVzRm5kUHJvc1N1cHMgPSBwcm9zcGVjdHVzRm5kUHJvc1N1cHMgKyAnPGxpICA+PGEgaHJlZj1cIidcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBnbG9iYWxDb25zdGFudC5yZXBvcnRzTGluayArIHByb2R1Y3RQcm9zcGVjdHVzW2luZGV4XS5saW5rXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiPicgKyBwcm9kdWN0UHJvc3BlY3R1c1tpbmRleF0uZGlzcGxheVRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC9hPjwvbGk+JztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJzYnOlxyXG4gICAgICAgICAgICAgICAgICAgIHByb3NwZWN0dXNTZW0gPSBwcm9zcGVjdHVzU2VtICsgJzxsaSA+PGEgaHJlZj1cIicgKyBnbG9iYWxDb25zdGFudC5yZXBvcnRzTGlua1xyXG4gICAgICAgICAgICAgICAgICAgICAgICArIHByb2R1Y3RQcm9zcGVjdHVzW2luZGV4XS5saW5rICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBwcm9kdWN0UHJvc3BlY3R1c1tpbmRleF0uZGlzcGxheVRleHQgKyAnPC9hPjwvbGk+JztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJzcnOlxyXG4gICAgICAgICAgICAgICAgICAgIHByb3NwZWN0dXNBbiA9IHByb3NwZWN0dXNBblxyXG4gICAgICAgICAgICAgICAgICAgICAgICArICc8bGkgY2xhc3M9XCJwcm9zTGlua0Nsc0FubnVhbEFuZFNlbWlBblwiID48YSBocmVmPVwiJyArIGdsb2JhbENvbnN0YW50LnJlcG9ydHNMaW5rXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgcHJvZHVjdFByb3NwZWN0dXNbaW5kZXhdLmxpbmsgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICArIHByb2R1Y3RQcm9zcGVjdHVzW2luZGV4XS5kaXNwbGF5VGV4dCArICc8L2E+PC9saT4nO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnOCc6XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvc3BlY3R1c1NBSVN1cHMgPSBwcm9zcGVjdHVzU0FJU3VwcyArICc8bGkgID48YSBocmVmPVwiJyArIGdsb2JhbENvbnN0YW50LnJlcG9ydHNMaW5rXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgcHJvZHVjdFByb3NwZWN0dXNbaW5kZXhdLmxpbmsgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCIgPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBwcm9kdWN0UHJvc3BlY3R1c1tpbmRleF0uZGlzcGxheVRleHQgKyAnPC9hPjwvbGk+JztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJzknOlxyXG4gICAgICAgICAgICAgICAgICAgIHByb3NwZWN0dXNmdW5kRmVlRXhwID0gcHJvc3BlY3R1c2Z1bmRGZWVFeHAgKyAnPGxpICA+PGEgaHJlZj1cIidcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBnbG9iYWxDb25zdGFudC5yZXBvcnRzTGluayArIHByb2R1Y3RQcm9zcGVjdHVzW2luZGV4XS5saW5rXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiPicgKyBwcm9kdWN0UHJvc3BlY3R1c1tpbmRleF0uZGlzcGxheVRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC9hPjwvbGk+JztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChwcm9zcGVjdHVzU0FJcyAhPT0gJycgfHwgcHJvc3BlY3R1c1NBSVN1cHMgIT09ICcnIHx8IHByb3NwZWN0dXNQcm9kUHJvc1N1cHMgIT09ICcnXHJcbiAgICAgICAgICAgIHx8IHByb3NwZWN0dXNQcm9kUHJvcyAhPT0gJycgfHwgcHJvc3BlY3R1c0ZuZFByb3NTdXBzICE9PSAnJyB8fCBwcm9zcGVjdHVzRm5kUHJvcyAhPT0gJydcclxuICAgICAgICAgICAgfHwgcHJvc3BlY3R1c2Z1bmRGZWVFeHAgIT09ICcnKSB7XHJcbiAgICAgICAgICAgIHByb2R1Y3RQcm9zcGVjdHVzUGFuZWxMaW5rcyA9IHByb3NwZWN0dXNQcm9kUHJvcztcclxuICAgICAgICAgICAgaWYgKHByb3NwZWN0dXNQcm9kUHJvc1N1cHMgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9kdWN0UHJvc3BlY3R1c1BhbmVsTGlua3MgPSAnPGFydGljbGU+PHVsIGNsYXNzPVwiVUlMaXN0IFVJTGlzdC0tZmlsZXNcIj4nXHJcbiAgICAgICAgICAgICAgICAgICAgKyBwcm9kdWN0UHJvc3BlY3R1c1BhbmVsTGlua3MgKyAnPC91bD4nXHJcbiAgICAgICAgICAgICAgICAgICAgKyAnPGgzPiBTdXBwbGVtZW50czwvaDM+PHVsIGNsYXNzPVwiVUlMaXN0IFVJTGlzdC0tZmlsZXNcIj4nICsgcHJvc3BlY3R1c1Byb2RQcm9zU3Vwc1xyXG4gICAgICAgICAgICAgICAgICAgICsgJzwvdWw+PC9hcnRpY2xlPic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHByb3NwZWN0dXNQcm9kUHJvc1N1cHMgIT09ICcnIHx8IHByb3NwZWN0dXNQcm9kUHJvcyAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHByb2R1Y3RQcm9zcGVjdHVzUGFuZWxMaW5rcyA9ICc8c2VjdGlvbj48aGVhZGVyPlByb3NwZWN0dXM8L2hlYWRlcj4nXHJcbiAgICAgICAgICAgICAgICAgICAgKyAnPGFydGljbGUgPjx1bCBjbGFzcz1cIlVJTGlzdCBVSUxpc3QtLWZpbGVzXCI+JyArIHByb2R1Y3RQcm9zcGVjdHVzUGFuZWxMaW5rcyArICcnXHJcbiAgICAgICAgICAgICAgICAgICAgKyAnPC91bD48L2FydGljbGUgPjwvc2VjdGlvbj4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmRQcm9zcGVjdHVzUGFuZWxMaW5rcyA9IHByb3NwZWN0dXNGbmRQcm9zO1xyXG4gICAgICAgICAgICBpZiAocHJvc3BlY3R1c0ZuZFByb3NTdXBzICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgZnVuZFByb3NwZWN0dXNQYW5lbExpbmtzID0gJzxhcnRpY2xlPjx1bCBjbGFzcz1cIlVJTGlzdCBVSUxpc3QtLWZpbGVzXCI+J1xyXG4gICAgICAgICAgICAgICAgICAgICsgZnVuZFByb3NwZWN0dXNQYW5lbExpbmtzICsgJzwvdWw+J1xyXG4gICAgICAgICAgICAgICAgICAgICsgJzxoMz4gU3VwcGxlbWVudHM8L2gzPjx1bCBjbGFzcz1cIlVJTGlzdCBVSUxpc3QtLWZpbGVzXCI+JyArIHByb3NwZWN0dXNGbmRQcm9zU3Vwc1xyXG4gICAgICAgICAgICAgICAgICAgICsgJzwvdWw+PC9hcnRpY2xlPic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHByb3NwZWN0dXNGbmRQcm9zU3VwcyAhPT0gJycgfHwgcHJvc3BlY3R1c0ZuZFByb3MgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5kUHJvc3BlY3R1c1BhbmVsTGlua3MgPSAnPHNlY3Rpb24+PGhlYWRlcj5GdW5kIFByb3NwZWN0dXM8L2hlYWRlcj4nXHJcbiAgICAgICAgICAgICAgICAgICAgKyAnPGFydGljbGUgPjx1bCBjbGFzcz1cIlVJTGlzdCBVSUxpc3QtLWZpbGVzXCI+JyArIGZ1bmRQcm9zcGVjdHVzUGFuZWxMaW5rcyArICcnXHJcbiAgICAgICAgICAgICAgICAgICAgKyAnPC91bD48L2FydGljbGUgPjwvc2VjdGlvbj4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByb2R1Y3RTdGF0ZW1lbnRQYW5lbExpbmtzID0gcHJvc3BlY3R1c1NBSXM7XHJcbiAgICAgICAgICAgIGlmIChwcm9zcGVjdHVzU0FJU3VwcyAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHByb2R1Y3RTdGF0ZW1lbnRQYW5lbExpbmtzID0gJzxhcnRpY2xlPjx1bCBjbGFzcz1cIlVJTGlzdCBVSUxpc3QtLWZpbGVzXCI+J1xyXG4gICAgICAgICAgICAgICAgICAgICsgcHJvc3BlY3R1c1NBSXMgKyAnPC91bD4nXHJcbiAgICAgICAgICAgICAgICAgICAgKyAnPGgzPjxicj4gU3VwcGxlbWVudHM8L2gzPjx1bCBjbGFzcz1cIlVJTGlzdCBVSUxpc3QtLWZpbGVzXCI+JyArIHByb3NwZWN0dXNTQUlTdXBzXHJcbiAgICAgICAgICAgICAgICAgICAgKyAnPC91bD48L2FydGljbGU+JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocHJvc3BlY3R1c1NBSVN1cHMgIT09ICcnIHx8IHByb3NwZWN0dXNTQUlzICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgcHJvZHVjdFN0YXRlbWVudFBhbmVsTGlua3NcclxuICAgICAgICAgICAgICAgICAgICA9ICc8c2VjdGlvbj48aGVhZGVyPlByb2R1Y3QgU3RhdGVtZW50IE9mIEFkZGl0aW9uYWwgSW5mb3JtYXRpb248L2hlYWRlcj4nXHJcbiAgICAgICAgICAgICAgICAgICAgKyAnPGFydGljbGUgPjx1bCBjbGFzcz1cIlVJTGlzdCBVSUxpc3QtLWZpbGVzXCI+JyArIHByb2R1Y3RTdGF0ZW1lbnRQYW5lbExpbmtzICsgJydcclxuICAgICAgICAgICAgICAgICAgICArICc8L3VsPjwvYXJ0aWNsZSA+PC9zZWN0aW9uPic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuZEZlZUV4cGxMaW5rcyA9IHByb3NwZWN0dXNmdW5kRmVlRXhwO1xyXG4gICAgICAgICAgICBpZiAocHJvc3BlY3R1c2Z1bmRGZWVFeHAgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5kRmVlRXhwbExpbmtzXHJcbiAgICAgICAgICAgICAgICAgICAgPSAnPHNlY3Rpb24+PGhlYWRlcj5SZXBvcnRzPC9oZWFkZXI+PGFydGljbGUgPjx1bCBjbGFzcz1cIlVJTGlzdCBVSUxpc3QtLWZpbGVzXCI+J1xyXG4gICAgICAgICAgICAgICAgICAgICsgcHJvc3BlY3R1c2Z1bmRGZWVFeHAgKyAnPC91bD48L2FydGljbGUgPjwvc2VjdGlvbj4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByb2R1Y3RTdGF0ZW1lbnRQYW5lbCA9IHByb2R1Y3RQcm9zcGVjdHVzUGFuZWxMaW5rcyArIGZ1bmRQcm9zcGVjdHVzUGFuZWxMaW5rc1xyXG4gICAgICAgICAgICAgICAgKyBwcm9kdWN0U3RhdGVtZW50UGFuZWxMaW5rcyArIGZ1bmRGZWVFeHBsTGlua3M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcm9zcGVjdHVzU2VtICE9PSAnJyB8fCBwcm9zcGVjdHVzQW4gIT09ICcnKSB7XHJcbiAgICAgICAgICAgIHZhciB0b3BSZXBvcnRUeHRcclxuICAgICAgICAgICAgICAgID0gJzxkaXY+QXZhaWxhYmlsaXR5IG9mIGZ1bmRzIG1heSB2YXJ5IGJ5IHByb2R1Y3QuIFBsZWFzZSByZWZlciB0byB5b3VyIFByb2R1Y3QgUHJvc3BlY3R1cy48L2Rpdj48L2JyPicsXHJcbiAgICAgICAgICAgICAgICBzZW1pQW51UmVwID0gJycsXHJcbiAgICAgICAgICAgICAgICBhbm51YWxSZXBvcnRzID0gJyc7XHJcblxyXG4gICAgICAgICAgICBpZiAocHJvc3BlY3R1c1NlbSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHNlbWlBbnVSZXBcclxuICAgICAgICAgICAgICAgICAgICA9ICc8YnIvPjxoMz4gU2VtaS1Bbm51YWwgUmVwb3J0PC9oMz48YXJ0aWNsZSA+PHVsIGNsYXNzPVwiVUlMaXN0IFVJTGlzdC0tZmlsZXNcIj4nXHJcbiAgICAgICAgICAgICAgICAgICAgKyBwcm9zcGVjdHVzU2VtICsgJzwvdWw+PC9hcnRpY2xlID4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwcm9zcGVjdHVzQW4gIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBhbm51YWxSZXBvcnRzID0gJzxoMz4gQW5udWFsIFJlcG9ydDwvaDM+PGFydGljbGUgPjx1bCBjbGFzcz1cIlVJTGlzdCBVSUxpc3QtLWZpbGVzXCI+J1xyXG4gICAgICAgICAgICAgICAgICAgICsgcHJvc3BlY3R1c0FuICsgJzwvdWw+PC9hcnRpY2xlID4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlcG9ydHNQYW5lbCA9IHByb2R1Y3RTdGF0ZW1lbnRQYW5lbFxyXG4gICAgICAgICAgICAgICAgKyAnPHNlY3Rpb24+PGhlYWRlcj5SZXBvcnRzPC9oZWFkZXI+PGFydGljbGUgPjx1bCBjbGFzcz1cIlVJTGlzdCBVSUxpc3QtLWZpbGVzXCI+J1xyXG4gICAgICAgICAgICAgICAgKyB0b3BSZXBvcnRUeHQgKyBhbm51YWxSZXBvcnRzICsgc2VtaUFudVJlcCArICc8L3VsPjwvYXJ0aWNsZSA+PC9zZWN0aW9uPic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICQoJy5hY2MtcmVwb3J0cycpLmh0bWwocmVwb3J0c1BhbmVsKS51SUFjY29yZGlvbigpO1xyXG4gICAgfTtcclxuICAgICRzY29wZS4kb24oJ19wcm9zcGVjdHVzVGFibGVEYXRhJywgZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICBpZiAoZGF0YS5kYXRhLnByb2R1Y3RQZXJmb3JtYW5jZS5wcm9kdWN0UHJvc3BlY3R1c0xpbmsubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmRhdGEucHJvZHVjdFBlcmZvcm1hbmNlLnByb2R1Y3RQcm9zcGVjdHVzTGlua1swXS5saW5rKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucHJvc3BlY3R1c0xpbmsgPSBkYXRhLmRhdGEucHJvZHVjdFBlcmZvcm1hbmNlLnByb2R1Y3RQcm9zcGVjdHVzTGlua1swXS5saW5rO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRzY29wZS5jcmVhdGVQcm9kdWN0UHJvc3BlY3R1c1ZpZXcoZGF0YS5kYXRhLnByb2R1Y3RQZXJmb3JtYW5jZS5wcm9kdWN0UHJvc3BlY3R1c0xpbmspO1xyXG4gICAgICAgICRzY29wZS4kd2F0Y2goJyRsYXN0JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2xhbmRpbmctaGVyby1wdWxsZG93bjMnKS5saXN0UHVsbGRvd24oKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmNvbnRyb2xsZXIoJ3VuaXRWYWx1ZXNDb250cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRjb21waWxlJywgZnVuY3Rpb24oJHNjb3BlLCAkcm9vdFNjb3BlLCAkY29tcGlsZSkge1xyXG4gIHZhciBwZXJmb3JtRGF0YSwgdW5pdFZhbHVlc0NvbW1vbiwgcHJvZElkO1xyXG5cclxuICAkc2NvcGUuZ3JvdXBpbmdVbml0ID0gZmFsc2U7XHJcbiAgJCgnI2lzVW5pdFZhbHVlc0Fzc2V0Q2F0ZWdvcnknKS5oaWRlKCk7XHJcbiAgdW5pdFZhbHVlc0NvbW1vbiA9IChmdW5jdGlvbigpIHtcclxuICAgIHZhciB1bml0VmFsdWVzTW9kdWxlID0ge1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgdW5pdFZhbHVlc01vZHVsZS5kYXRhVGFibGVzID0gZnVuY3Rpb24odGJsRGF0YSkge1xyXG4gICAgICAkKCcjbGZnLXVuaXQtdmFsdWVzJykuRGF0YVRhYmxlKHtcclxuICAgICAgICAnc2Nyb2xsWScgICAgICAgOiA0NTAsXHJcbiAgICAgICAgJ3Njcm9sbFgnICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAnc2Nyb2xsQ29sbGFwc2UnOiB0cnVlLFxyXG4gICAgICAgICdkZXN0cm95JyAgICAgICA6IHRydWUsXHJcbiAgICAgICAgJ2RhdGEnICAgICAgICAgIDogdGJsRGF0YSxcclxuICAgICAgICAnY29sdW1ucycgICAgICAgOiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgICdkYXRhJzogJ2Z1bmROYW1lJ1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgJ2RhdGEnOiAncmlza1ZhbHVlJ1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgJ2RhdGEnOiAncmlza09yZGVyJ1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgJ2RhdGEnOiAndXZJbmNlcHRpb25EYXRlJ1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgJ2RhdGEnOiAndW5pdFZhbHVlTGFzdFllYXInXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICAnZGF0YSc6ICd1bml0VmFsdWVZZXN0ZXJkYXknXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgXSxcclxuICAgICAgICAnY29sdW1uRGVmcyc6IFt7XHJcbiAgICAgICAgICAnY2xhc3MnOiAnZGV0YWlscy1jb250cm9sJyxcclxuXHJcbiAgICAgICAgICAvLyBvcmRlcmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgJ2RhdGEnICAgICAgICAgIDogbnVsbCxcclxuICAgICAgICAgICdkZWZhdWx0Q29udGVudCc6ICcnLFxyXG4gICAgICAgICAgJ3RhcmdldHMnICAgICAgIDogMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgJ3RhcmdldHMnOiAwLFxyXG4gICAgICAgICAgJ3dpZHRoJyAgOiAnMzUwcHgnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAndGFyZ2V0cyc6IDEsXHJcbiAgICAgICAgICAnd2lkdGgnICA6ICcxMDBweCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICd0eXBlJyAgIDogJ25hdHVyYWwnLFxyXG4gICAgICAgICAgJ3RhcmdldHMnOiBbNCwgNV1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAndGFyZ2V0cyc6IDMsXHJcblx0ICAgIFx0XCJkYXRhXCI6IFwidXZJbmNlcHRpb25EYXRlXCIsXHRcdFxyXG5cdCAgICBcdCd0eXBlJyA6ICdkYXRlJyxcclxuICAgICAgICdjcmVhdGVkQ2VsbCc6IGZ1bmN0aW9uICh0ZCwgY2VsbERhdGEsIHJvd0RhdGEsIHJvdywgY29sKSB7XHJcbiAgICAgICAgIHZhciB0ID0gbmV3IERhdGUoY2VsbERhdGEpO1xyXG4gICAgICAgICAkKHRkKS5hdHRyKFwiZGF0YS1vcmRlclwiLCB0LmdldFRpbWUoKSk7XHJcbiAgICAgICAgICQodGQpLmF0dHIoXCJkYXRhLXNvcnRcIiwgdC5nZXRUaW1lKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB9XSxcclxuICAgICAgICAnZm5Sb3dDYWxsYmFjayc6IGZ1bmN0aW9uKG5Sb3csIHRibERhdGEsIGlEaXNwbGF5SW5kZXgpIHtcclxuICAgICAgICAgIHZhciBhbmNoLCBjb21waWxlQW5jaCwgZWxlbTtcclxuXHJcbiAgICAgICAgICAkKCcjbGZnLXVuaXQtdmFsdWVzJykucmVtb3ZlQXR0cigncm9sZScpO1xyXG4gICAgICAgICAgYW5jaCA9ICc8YSBocmVmPVwiamF2YXNjcmlwdDo7XCIgaWQ9JyArIHRibERhdGEuZnVuZElkXHJcbiAgICAgICAgICAgICsgJyBuZy1jbGljaz1cInNob3dJbmRpdihcXCcnICsgdGJsRGF0YS5mdW5kSWQgKyAnXFwnKVwiPidcclxuICAgICAgICAgICAgKyB0YmxEYXRhLmZ1bmROYW1lICsgJzwvYT4nO1xyXG4gICAgICAgICAgY29tcGlsZUFuY2ggPSAkY29tcGlsZShhbmNoKTtcclxuICAgICAgICAgIGVsZW0gPSBjb21waWxlQW5jaCgkc2NvcGUpO1xyXG4gICAgICAgICAgJCgndGQ6ZXEoMCknLCBuUm93KS5odG1sKGVsZW0pO1xyXG4gICAgICAgICAgaWYgKCRzY29wZS5yaWRlclZhbHVlKSB7XHJcbiAgICAgICAgICAgICQoJ3RkOmVxKDEpJywgblJvdykuaGlkZSgpO1xyXG4gICAgICAgICAgICAkKCcubGZnLXVuaXQtdmFsdWVzIHRoZWFkIHRoOmVxKDEpJykuaGlkZSgpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnLmxmZy11bml0LXZhbHVlcyB0aGVhZCB0aDplcSgxKScpLnNob3coKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gblJvdztcclxuICAgICAgICB9LFxyXG4gICAgICAgICdyZXNwb25zaXZlJyAgOiBmYWxzZSxcclxuICAgICAgICAnb3JkZXInICAgICAgIDogW1syLCAnYXNjJ11dLFxyXG4gICAgICAgICdiUGFnaW5hdGUnICAgOiBmYWxzZSxcclxuICAgICAgICAnYkZpbHRlcicgICAgIDogZmFsc2UsXHJcbiAgICAgICAgJ2JJbmZvJyAgICAgICA6IGZhbHNlLFxyXG4gICAgICAgICdiRGVzdHJveScgICAgOiB0cnVlLFxyXG4gICAgICAgICdkcmF3Q2FsbGJhY2snOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGlmICghJHNjb3BlLmdyb3VwaW5nVW5pdCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuZ3JvdXBpbmdVbml0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdmFyIGFwaSA9IHRoaXMuYXBpKCksXHJcbiAgICAgICAgICAgICAgcm93cyxcclxuICAgICAgICAgICAgICBsYXN0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdpbml0aWFsIGxhc3QnICsgbGFzdCk7XHJcblxyXG4gICAgICAgICAgICByb3dzID0gYXBpLnJvd3Moe1xyXG4gICAgICAgICAgICAgICdwYWdlJzogJ2N1cnJlbnQnXHJcbiAgICAgICAgICAgIH0pLm5vZGVzKCk7XHJcbiAgICAgICAgICAgIGFwaS5jb2x1bW4oMSwge1xyXG4gICAgICAgICAgICAgICdwYWdlJzogJ2N1cnJlbnQnXHJcbiAgICAgICAgICAgIH0pLmRhdGEoKS5lYWNoKGZ1bmN0aW9uKGdyb3VwLCBpKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcjaXNVbml0VmFsdWVzQXNzZXRDYXRlZ29yeScpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICQoJyN1bml0VmFsdWVzUGRmJykuYXR0cignaHJlZicsXHJcbiAgICAgICAgICAgICAgICAgIGdsb2JhbENvbnN0YW50LnVuaXRWYWx1ZXNSTVBkZi5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgICd7e2pzb25JZH19JywgcHJvZElkKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobGFzdCAhPT0gZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgJChyb3dzKS5lcShpKS5iZWZvcmUoXHJcbiAgICAgICAgICAgICAgICAgICAgJzx0ciBjbGFzcz1cImdyb3VwXCI+PHRkIGNvbHNwYW49XCI1XCIgY2xhc3M9XCJsZmctdXRhYmxlLXN1YlwiPidcclxuICAgICAgICAgICAgICAgICAgICArIGdyb3VwICsgJyA8c3Bhbj4nICsgZ3JvdXAubWF0Y2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAvW0EtWl0vZykuam9pbignJylcclxuICAgICAgICAgICAgICAgICAgICArICc8L3NwYW4+PC90ZD48L3RyPidcclxuICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgbGFzdCA9IGdyb3VwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkKCcjdW5pdFZhbHVlc1BkZicpLmF0dHIoJ2hyZWYnLFxyXG4gICAgICAgICAgICAgICAgICBnbG9iYWxDb25zdGFudC51bml0VmFsdWVzUGRmLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgJ3t7anNvbklkfX0nLCBwcm9kSWQpKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnI3VuaXRWYWx1ZXNQZGYnKS5hdHRyKCdocmVmJywgZ2xvYmFsQ29uc3RhbnQudW5pdFZhbHVlc1BkZlxyXG4gICAgICAgICAgICAgIC5yZXBsYWNlKCd7e2pzb25JZH19JywgcHJvZElkKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgJCgnI2xmZy11bml0LXZhbHVlcycpLmZpbmQoJ3RoJykuZXEoMSkuYWRkQ2xhc3MoJ3NvcnRpbmdfYXNjJyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiB1bml0VmFsdWVzTW9kdWxlO1xyXG4gIH0pKCRzY29wZSk7XHJcbiAgJHNjb3BlLiRvbignZGF0YVVuaXRUYWJsZXNSZXNwb25zaXZlJywgZnVuY3Rpb24oZXZudCwgY291bnRVbml0KSB7XHJcbiAgICAkc2NvcGUudW5pdHZhbHVlc19jb3VudCA9IGNvdW50VW5pdDtcclxuICAgIGlmICgkc2NvcGUudW5pdFZhbHVlc0RhdGEpIHtcclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICB1bml0VmFsdWVzQ29tbW9uLmRhdGFUYWJsZXMoJHNjb3BlLnVuaXRWYWx1ZXMpO1xyXG4gICAgICB9LCA1MCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgJHNjb3BlLiRvbigncmVzZXRVbml0VGFibGVzUmVzcG9uc2l2ZScsIGZ1bmN0aW9uKGV2bnQsIGNvdW50VW5pdCkge1xyXG4gICAgJHNjb3BlLmdyb3VwaW5nVW5pdCA9IGZhbHNlO1xyXG4gIH0pO1xyXG4gICRzY29wZS5wcm9zcGVjdHVzTGluayA9ICdqYXZhc2NyaXB0OjsnO1xyXG4gICRzY29wZS4kb24oJ191bml0dmFsdWVzVGFibGVEYXRhJywgZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcclxuICAgIHBlcmZvcm1EYXRhID0gZGF0YS5kYXRhO1xyXG4gICAgJHNjb3BlLiR3YXRjaCgnJGxhc3QnLCBmdW5jdGlvbigpIHtcclxuICAgICAgYW5ndWxhci5lbGVtZW50KCcjbGFuZGluZy1oZXJvLXB1bGxkb3duMicpLmxpc3RQdWxsZG93bigpO1xyXG4gICAgfSk7XHJcbiAgICAkc2NvcGUudW5pdFZhbF9wcm9kdWN0TmFtZSA9IGRhdGEuZGF0YS5wcm9kdWN0UGVyZm9ybWFuY2UucHJvZHVjdE5hbWU7XHJcbiAgICAkc2NvcGUuZnVuZERpc2Nsb3N1cmVzID0gZGF0YS5kYXRhLnByb2R1Y3RQZXJmb3JtYW5jZS5mdW5kRGlzY2xvc3VyZXM7XHJcbiAgICAkc2NvcGUucHJvZHVjdERpc2Nsb3N1cmVzID0gZGF0YS5kYXRhLnByb2R1Y3RQZXJmb3JtYW5jZS5wcm9kdWN0RGlzY2xvc3VyZXM7XHJcbiAgICAkc2NvcGUudW5pdFZhbHVlcyA9IGRhdGEuZGF0YS5wcm9kdWN0UGVyZm9ybWFuY2UuZnVuZERldGFpbDtcclxuICAgICRzY29wZS55ZWFyRW5kRGF0ZSA9IGRhdGEuZGF0YS5wcm9kdWN0UGVyZm9ybWFuY2UubGFzdFVuaXRWYWx1ZVllYXJEYXRlO1xyXG4gICAgJHNjb3BlLmRhaWx5RGF0ZSA9IGRhdGEuZGF0YS5wcm9kdWN0UGVyZm9ybWFuY2UubGFzdFVuaXRWYWx1ZURhdGU7XHJcbiAgICAkc2NvcGUudW5pdFZhbHVlc0RhdGEgPSB0cnVlO1xyXG4gICAgaWYgKCRzY29wZS51bml0dmFsdWVzX2NvdW50ICE9PSAwICYmICRzY29wZS51bml0dmFsdWVzX2NvdW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICB1bml0VmFsdWVzQ29tbW9uLmRhdGFUYWJsZXMoJHNjb3BlLnVuaXRWYWx1ZXMpO1xyXG4gICAgICB9LCA1MCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgJHNjb3BlLnVuaXRWYWx1ZXNEZWZhdWx0VmlldyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHNjb3BlLmdyb3VwaW5nVW5pdCA9IGZhbHNlO1xyXG4gICAgdmFyIHVuaXRfdmFsdWVzX3RibCA9ICQoJyNsZmctdW5pdC12YWx1ZXMnKS5kYXRhVGFibGUoKTtcclxuXHJcbiAgICB1bml0X3ZhbHVlc190YmwuZm5Tb3J0TmV1dHJhbCgpO1xyXG4gIH07XHJcbiAgJHNjb3BlLiRvbigncHJvZHVjdF9jb2RlX25hbWUnLCBmdW5jdGlvbihldmVudCwgZGF0YSkge1xyXG4gICAgcHJvZElkID0gZGF0YS5wcm9kdWN0Q29kZTtcclxuICB9KTtcclxuICAkc2NvcGUuc2hvd0luZGl2ID0gZnVuY3Rpb24ocGZsSWQpIHtcclxuICAgIHZhciBwZXJmRGF0YSA9IHtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIHBlcmZEYXRhLmZ1bGxwZXJmRGF0YSA9IHBlcmZvcm1EYXRhO1xyXG4gICAgcGVyZkRhdGEucHJvZmlsZUlkID0gcGZsSWQ7XHJcbiAgICBwZXJmRGF0YS5kcm9wZG93bk51bSA9ICcxJztcclxuICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnaW52ZXNjb092ZXJsYXlEYXRhJywgcGVyZkRhdGEpO1xyXG4gICAgYW5ndWxhci5lbGVtZW50KCcjZmFkZScpLmhlaWdodChhbmd1bGFyLmVsZW1lbnQoJ2JvZHknKS5vdXRlckhlaWdodCh0cnVlKSk7XHJcbiAgICBhbmd1bGFyLmVsZW1lbnQoJyNsaWdodDEnKS5jc3MoJ3RvcCcsICcwcHgnKTtcclxuICAgIGFuZ3VsYXIuZWxlbWVudCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xyXG4gICAgICAnc2Nyb2xsVG9wJzogMFxyXG4gICAgfSk7XHJcbiAgICBhbmd1bGFyLmVsZW1lbnQoJyNmYWRlJykuc2hvdygpO1xyXG4gICAgYW5ndWxhci5lbGVtZW50KCcjbGlnaHQxJykuc2hvdygpO1xyXG4gIH07XHJcbn1dKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnbGZnYXBwJykuY29udHJvbGxlcignZ2xvc3NhcnlDdHJsJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcclxuICAgICRzY29wZS5nbG9zc2FyeSA9IHtcclxuXHJcbiAgICB9O1xyXG4gICAgJHNjb3BlLmdsb3NzYXJ5LmluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoZGF0YUF2YWlsTGV0dGVycyAhPT0gdW5kZWZpbmVkICYmIGRhdGFBdmFpbExldHRlcnMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdmFyIGFscGhhUGFnZXJhcnJheSA9IGRhdGFBdmFpbExldHRlcnMuc3BsaXQoJy0nKTtcclxuXHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmFscGhhLXBhZ2VyIGxpJykuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChhbHBoYVBhZ2VyYXJyYXksIGZ1bmN0aW9uKHZhbHVlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuYWxwaGEtcGFnZXIgbGkuJyArIGFscGhhUGFnZXJhcnJheVtpXSkucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcucGRmLWdsb3NzYXJ5LWNvbnRhaW5lcicpLmh0bWwoKSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImZpcnN0IGZpbHRlcjpcIiwgYW5ndWxhci5lbGVtZW50KCcuYWxwaGEtcGFnZXIgbGk6bm90KFwiLmRpc2FibGVkXCIpIGEnKVswXSk7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmFscGhhLXBhZ2VyIGxpOm5vdChcIi5kaXNhYmxlZFwiKSBhJylbMF0uY2xpY2soKTtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuYWxwaGEtcGFnZXIgbGk6bm90KFwiLmRpc2FibGVkXCIpIGE6Zmlyc3QnKS5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgYW5ndWxhci5lbGVtZW50KCcuYWxwaGEtcGFnZXIgbGkgYScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmFscGhhLXBhZ2VyIGxpIGEnKS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKTtcclxuICAgICAgICB2YXIgcGFyZW50RWxlID0gYW5ndWxhci5lbGVtZW50KHRoaXMpLnBhcmVudCgpO1xyXG5cclxuICAgICAgICBpZiAoIXBhcmVudEVsZS5oYXNDbGFzcygnZGlzYWJsZWQnKSkge1xyXG4gICAgICAgICAgICB2YXIgdGVybUNsYXNzID0gJy4nICsgcGFyZW50RWxlLmF0dHIoJ2NsYXNzJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBoYW5kbGUgYWNjb3JkaWFuLWJhc2VkIGdsb3NzYXJ5XHJcblxyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcuZ2xvc2FycnktYWNjb3JkaWFuLWpzJykuaHRtbCgpKSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5nbG9zYXJyeS1hY2NvcmRpYW4tanMgc2VjdGlvbicpLmNzcygnZGlzcGxheScsICdub25lJyk7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5nbG9zYXJyeS1hY2NvcmRpYW4tanMgJyArIHRlcm1DbGFzcykuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGhhbmRsZSBQREYtYmFzZWQgZ2xvc3NhcnlcclxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnLnBkZi1nbG9zc2FyeS1jb250YWluZXInKS5odG1sKCkpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLnBkZi1nbG9zc2FyeS1jb250YWluZXIgc2VjdGlvbjpub3QoJyArIHRlcm1DbGFzcyArICcpJykuY3NzKFxyXG4gICAgICAgICAgICAgICAgICAgICdkaXNwbGF5JywgJ25vbmUnKTtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLnBkZi1nbG9zc2FyeS1jb250YWluZXIgc2VjdGlvbicgKyB0ZXJtQ2xhc3MpLmNzcygnZGlzcGxheScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2Jsb2NrJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufV0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmxmZ2FwcC5jb250cm9sbGVyKCdoaXN0b3JpY2FsUHJpY2VzQ29udHJsJywgWyckc2NvcGUnLCAnaGlzdG9yaWNhbFByaWNlc1NlcnZpY2UnLCBmdW5jdGlvbigkc2NvcGUsXHJcbiAgICBoaXN0b3JpY2FsUHJpY2VzU2VydmljZSkge1xyXG4gICAgJCgnI2hpc3RvcnlEYXRlJykuZGF0ZXBpY2tlcih7XHJcbiAgICAgICAgJ21heERhdGUnOiBuZXcgRGF0ZSgpXHJcbiAgICB9KTtcclxuICAgIHZhciBoaXN0b3JpY2FsQ29tbW9uID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBoaXN0b3JpY2FsTW9kdWxlID0ge1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBoaXN0b3JpY2FsTW9kdWxlLmRhdGFUYWJsZXMgPSBmdW5jdGlvbihoaXN0b3J5ZGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgaGlzdG9yeURhdCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGhpc3RvcnlkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBoaXN0b3J5RGF0LnB1c2goaGlzdG9yeWRhdGEpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2hpc3RvcmljYWwtdGFibGUnKS5kYXRhVGFibGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICdkZXN0cm95JzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAnZGF0YScgICA6IGhpc3RvcnlEYXQsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2NvbHVtbnMnOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhJzogJ09QRU4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhJzogJ0hJR0gnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhJzogJ09QRU4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhJzogJ0xPVydcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEnOiAnQ0xPU0UnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhJzogJ1ZPTFVNRSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgJ2ZuUm93Q2FsbGJhY2snOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2hpc3RvcmljYWwtdGFibGUnKS5yZW1vdmVBdHRyKCdyb2xlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAncmVzcG9uc2l2ZScgICA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2JMZW5ndGhDaGFuZ2UnOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAnYlNvcnQnICAgICAgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICdiRmlsdGVyJyAgICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3BhZ2luZycgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAnaW5mbycgICAgICAgICA6IGZhbHNlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8qICdkaXNwbGF5TGVuZ3RoJzogMjAsXHJcbiAgICAgICAgICAgICAgICAgICAgJ29MYW5ndWFnZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICdvUGFnaW5hdGUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgXHQnc05leHQnOiAnTmV4dCAyMCA+JyxcclxuICAgICAgICAgICAgICAgICAgICBcdCdzUHJldmlvdXMnOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gKi9cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJCgnI2hpc3RvcmljYWwtdGFibGUnKS5kYXRhVGFibGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICdjb2x1bW5zJzogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YSc6ICdPUEVOJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YSc6ICdISUdIJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YSc6ICdPUEVOJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YSc6ICdMT1cnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhJzogJ0NMT1NFJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YSc6ICdWT0xVTUUnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICdmblJvd0NhbGxiYWNrJzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNoaXN0b3JpY2FsLXRhYmxlJykucmVtb3ZlQXR0cigncm9sZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgJ3Jlc3BvbnNpdmUnICAgOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICdiTGVuZ3RoQ2hhbmdlJzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2JTb3J0JyAgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAnYkZpbHRlcicgICAgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICdwYWdpbmcnICAgICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2luZm8nICAgICAgICAgOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGhpc3RvcmljYWxNb2R1bGUuZ2V0TGFzdFdvcmtpbmdEYXkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGUsIGRhdGVGb3JtYXQ7XHJcblxyXG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgKGRhdGUuZ2V0RGF5KCkgIT09IDEpID8gZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gMSkgOiBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKClcclxuICAgICAgICAgICAgICAgIC0gMyk7XHJcbiAgICAgICAgICAgIGRhdGVGb3JtYXQgPSAkLmRhdGVwaWNrZXIuZm9ybWF0RGF0ZSgnbW0vZGQveXknLCBkYXRlKTtcclxuICAgICAgICAgICAgJCgnI2hpc3RvcnlEYXRlJykudmFsKGRhdGVGb3JtYXQpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBoaXN0b3JpY2FsTW9kdWxlO1xyXG4gICAgfSkoKTtcclxuXHJcbiAgICBoaXN0b3JpY2FsQ29tbW9uLmdldExhc3RXb3JraW5nRGF5KCk7XHJcbiAgICAkc2NvcGUudXBkYXRlUHJpY2VzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRkYXRlID0gYW5ndWxhci5lbGVtZW50KCcjaGlzdG9yeURhdGUnKS52YWwoKTtcclxuXHJcbiAgICAgICAgaGlzdG9yaWNhbFByaWNlc1NlcnZpY2UuaGlzdG9yaWNhbFByaWNlc0RhdGEoY3VycmVudGRhdGUsIGZ1bmN0aW9uKHhtbCkge1xyXG4gICAgICAgICAgICB2YXIgaGlzdG9yaWNhbGRhdGEgPSB4bWw7XHJcblxyXG4gICAgICAgICAgICBpZiAoJC5pc0VtcHR5T2JqZWN0KGhpc3RvcmljYWxkYXRhLkhJU1RPUklDU1RPQ0tRVU9URS5SRVNVTFQpKSB7XHJcbiAgICAgICAgICAgICAgICBoaXN0b3JpY2FsQ29tbW9uLmRhdGFUYWJsZXMoJycpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGhpc3RvcmljYWxkYXRhLkhJU1RPUklDU1RPQ0tRVU9URS5SRVNVTFQuUk9XLCBmdW5jdGlvbih2YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnQ0xPU0UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpc3RvcmljYWxkYXRhLkhJU1RPUklDU1RPQ0tRVU9URS5SRVNVTFQuUk9XLkNMT1NFID0gJyQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIHZhbHVlLnRvRml4ZWQoMik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdISUdIJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3JpY2FsZGF0YS5ISVNUT1JJQ1NUT0NLUVVPVEUuUkVTVUxULlJPVy5ISUdIID0gJyQnICsgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0ZpeGVkKDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnTE9XJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3JpY2FsZGF0YS5ISVNUT1JJQ1NUT0NLUVVPVEUuUkVTVUxULlJPVy5MT1cgPSAnJCcgKyB2YWx1ZS50b0ZpeGVkKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdPUEVOJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3JpY2FsZGF0YS5ISVNUT1JJQ1NUT0NLUVVPVEUuUkVTVUxULlJPVy5PUEVOID0gJyQnICsgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0ZpeGVkKDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnVk9MVU1FJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyID0gaGlzdG9yaWNhbGRhdGEuSElTVE9SSUNTVE9DS1FVT1RFLlJFU1VMVC5ST1cuVk9MVU1FXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csICcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpc3RvcmljYWxkYXRhLkhJU1RPUklDU1RPQ0tRVU9URS5SRVNVTFQuUk9XLlZPTFVNRSA9IHN0cjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGhpc3RvcmljYWxDb21tb24uZGF0YVRhYmxlcyhoaXN0b3JpY2FsZGF0YS5ISVNUT1JJQ1NUT0NLUVVPVEUuUkVTVUxULlJPVyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAkc2NvcGUudXBkYXRlUHJpY2VzKCk7XHJcbn1dKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5sZmdhcHAuY29udHJvbGxlcignSW5QYWdlUm90YXRlQmFubmVyQ29udHJsJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkdGltZW91dCkge1xyXG4gICAgdmFyIHByZXZCdXR0b24gPSAnLmxwUHJldic7XHJcbiAgICB2YXIgbmV4dENvdW50ID0gMDtcclxuICAgIHZhciBzZXRTbGlkZXNIZWlnaHQgPSAwO1xyXG4gICAgdmFyIHNldE1pbkhlaWdodCA9IDA7XHJcbiAgICB2YXIgc2V0TWluU2xvZ2FuSGVpZ2h0ID0gMDtcclxuXHJcbiAgICAkKCcuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGVyLWNvbnRhaW5lcicpLndpZHRoKCh0b3RhbEJhbm5lcnMpKjEwMCArIFwiJVwiKTtcclxuICAgIC8vdmFyIGZpcnN0U2xpZGUgPSAkKFwiLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXJcIikuZmluZCgnLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlJykuZmlyc3QoKS5jbG9uZSgpO1xyXG4gICAgLy8kKFwiLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXJcIikuYXBwZW5kKGZpcnN0U2xpZGUpO1xyXG4gICAgJHNjb3BlLmNhbkNsaWNrTmV4dCA9IHRydWU7XHJcbiAgICAkc2NvcGUuY2FuQ2xpY2tQcmV2ID0gdHJ1ZTtcclxuXHJcbiAgICBpZiAoJChcIi5JblBhZ2VSb3RhdGVCYW5uZXIgLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXJcIikubGVuZ3RoKSB7XHJcbiAgICAgICAgcmVzaXplV2luZG93Q2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlc2l6ZVdpbmRvd0NoYW5nZXMoKSB7XHJcbiAgICAgICAgc2V0U2xpZGVzSGVpZ2h0ID0gMDtcclxuICAgICAgICBzZXRNaW5TbG9nYW5IZWlnaHQgPSAwO1xyXG4gICAgICAgICQoXCIuSW5QYWdlUm90YXRlQmFubmVyIC5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyIC51LWdsb2JhbC1jb250YWluZXJcIikuY3NzKHtcclxuICAgICAgICAgICAgaGVpZ2h0OiBcIlwiLFxyXG4gICAgICAgICAgICBcIm1pbi1oZWlnaHRcIjogXCJcIlxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLyokKFwiLkluUGFnZVJvdGF0ZUJhbm5lciAuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGVyLWNvbnRhaW5lciAuSGVyby0tbGFuZGluZyAudS1nbG9iYWwtY29udGFpbmVyIC5IZXJvLXNsb2dhblwiKS5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICQodGhpcykuY3NzKFwiaGVpZ2h0XCIsIFwiXCIpO1xyXG4gICAgICAgIH0pOyovXHJcbiAgICAgICAgJChcIi5JblBhZ2VSb3RhdGVCYW5uZXIgLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXIgLkhlcm8tLWxhbmRpbmcgLnUtZ2xvYmFsLWNvbnRhaW5lciAuSGVyby1zbG9nYW5cIikucmVtb3ZlQXR0cihcInN0eWxlXCIpO1xyXG5cclxuICAgICAgICBpZiAod2luZG93LmlubmVyV2lkdGggPiA5OTkpIHtcclxuICAgICAgICAgICAgLy8gR2V0IG1heCBvZiBvcmlnaW5hbCBoZWlnaHQgb2YgdGhlIGltYWdlIGZyb20gYWxsIHRoZSBzbGlkZXJzIGFuZCBzZXQgbWluLWhlaWdodCBmb3IgdGhlIGltYWdlIGFuZCBzbGlkZXNcclxuICAgICAgICAgICAgJChcIi5JblBhZ2VSb3RhdGVCYW5uZXIgLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXIgLkhlcm8tLWxhbmRpbmcgLkhlcm8taW1hZ2UtaG9sZGVyIC51LWltYWdlLXJlc3BvbnNpdmVcIikuZWFjaChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdmFyIGltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgICAgICAgICBpbWFnZS5zcmMgPSAkKHRoaXMpLmF0dHIoXCJzcmNcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHRoaXNNaW5IZWlnaHQgPSBpbWFnZS5uYXR1cmFsSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgaWYgKHNldE1pbkhlaWdodCA8IHRoaXNNaW5IZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRNaW5IZWlnaHQgPSB0aGlzTWluSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJChcIi5JblBhZ2VSb3RhdGVCYW5uZXIgLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXIgLkhlcm8tLWxhbmRpbmcgLnUtZ2xvYmFsLWNvbnRhaW5lclwiKS5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZhciB0aGlzSGVpZ2h0ID0gJCh0aGlzKS5oZWlnaHQoKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc2V0U2xpZGVzSGVpZ2h0ICsgXCIsIFwiICsgdGhpc0hlaWdodCk7XHJcbiAgICAgICAgICAgIGlmKCBzZXRTbGlkZXNIZWlnaHQgPCB0aGlzSGVpZ2h0KXtcclxuICAgICAgICAgICAgICAgIHNldFNsaWRlc0hlaWdodCA9IHRoaXNIZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAod2luZG93LmlubmVyV2lkdGggPiA5OTkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjaGVjayAtLS0gXCIrc2V0U2xpZGVzSGVpZ2h0ICsgXCIsIFwiICsgc2V0TWluSGVpZ2h0KTtcclxuICAgICAgICAgICAgaWYgKHNldE1pbkhlaWdodCA+IHNldFNsaWRlc0hlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgc2V0U2xpZGVzSGVpZ2h0ID0gc2V0TWluSGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICQoXCIuSW5QYWdlUm90YXRlQmFubmVyIC5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyIC5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZVwiKS5jc3Moe1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBzZXRTbGlkZXNIZWlnaHQrXCJweFwiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICQoXCIuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGVyLWNvbnRhaW5lclwiKS5jc3Moe1xyXG4gICAgICAgICAgICAgICAgbGVmdDogLW5leHRDb3VudCokKFwiLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXJcIikuZmluZCgnLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlJykud2lkdGgoKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgJChcIi5JblBhZ2VSb3RhdGVCYW5uZXIgLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXIgLkhlcm8uSGVyby0tbGFuZGluZyAudS1nbG9iYWwtY29udGFpbmVyIC5IZXJvLXNsb2dhblwiKS5jc3MoXCJoZWlnaHRcIiwgc2V0U2xpZGVzSGVpZ2h0K1wicHhcIik7XHJcbiAgICAgICAgICAgIC8vICQoXCIuSW5QYWdlUm90YXRlQmFubmVyIC5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyIC51LWltYWdlLXJlc3BvbnNpdmVcIikuY3NzKFwiaGVpZ2h0XCIsIHNldFNsaWRlc0hlaWdodCtcInB4XCIpO1xyXG4gICAgICAgICAgICAvLyAkKFwiLkluUGFnZVJvdGF0ZUJhbm5lciAuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGVyLWNvbnRhaW5lciAudS1pbWFnZS1yZXNwb25zaXZlXCIpLmNzcyhcIm1pbi1oZWlnaHRcIiwgc2V0TWluSGVpZ2h0K1wicHhcIik7XHJcbiAgICAgICAgICAgICQoXCIuSW5QYWdlUm90YXRlQmFubmVyIC5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyIC5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZVwiKS5jc3MoXCJtaW4taGVpZ2h0XCIsIHNldFNsaWRlc0hlaWdodCtcInB4XCIpO1xyXG4gICAgICAgICAgICAkKFwiLkluUGFnZVJvdGF0ZUJhbm5lciAuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGVyLWNvbnRhaW5lciAuSGVyby5IZXJvLS1sYW5kaW5nIC51LWdsb2JhbC1jb250YWluZXIgLkhlcm8tc2xvZ2FuXCIpLmNzcyhcIm1pbi1oZWlnaHRcIiwgc2V0U2xpZGVzSGVpZ2h0K1wicHhcIik7XHJcbiAgICAgICAgICAgICQoXCIuSW5QYWdlUm90YXRlQmFubmVyIC5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyIC5IZXJvLkhlcm8tLWxhbmRpbmcgLkhlcm8taW1hZ2UtaG9sZGVyXCIpLmNzcyhcIm1heC13aWR0aFwiLCBcIjM5JVwiKTtcclxuICAgICAgICAgICAgJChcIi5JblBhZ2VSb3RhdGVCYW5uZXIgLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXIgLkhlcm8uSGVyby0tbGFuZGluZyAuSW5QYWdlUm90YXRlQmFubmVyX19zbGlkZS1udW1iZXJcIikuY3NzKFwidG9wXCIsIFwiMHB4XCIpO1xyXG4gICAgICAgICAgICB2YXIgc2xpZGVIZ3QgPSAkKFwiLkluUGFnZVJvdGF0ZUJhbm5lciAuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGVyLWNvbnRhaW5lclwiKS5oZWlnaHQoKTtcclxuICAgICAgICAgICAgdmFyIGFycm93SGd0ID0gJChcIi5JblBhZ2VSb3RhdGVCYW5uZXIgLk5hdkNvbnRyb2xzLS1yb3RhdGVCYW5uZXJkIGFcIikuaGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIHZhciBhcnJvd1RvcCA9IChzbGlkZUhndCAtIGFycm93SGd0KSAvIDI7XHJcbiAgICAgICAgICAgICQoXCIuSW5QYWdlUm90YXRlQmFubmVyIC5OYXZDb250cm9scy0tcm90YXRlQmFubmVyZCBhXCIpLmNzcyhcInRvcFwiLCBhcnJvd1RvcCArIFwicHhcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyQoXCIuSW5QYWdlUm90YXRlQmFubmVyIC5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyIC5IZXJvLkhlcm8tLWxhbmRpbmcgLnUtZ2xvYmFsLWNvbnRhaW5lclwiKS5oZWlnaHQoc2V0TWluU2xvZ2FuSGVpZ2h0ICsgXCJweFwiKTtcclxuICAgICAgICAgICAgJChcIi5JblBhZ2VSb3RhdGVCYW5uZXIgLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXIgLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlXCIpLmhlaWdodChcImF1dG9cIik7XHJcbiAgICAgICAgICAgICQoXCIuSW5QYWdlUm90YXRlQmFubmVyIC5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyIC5IZXJvLkhlcm8tLWxhbmRpbmcgLkhlcm8taW1hZ2UtaG9sZGVyXCIpLmNzcyhcIm1heC13aWR0aFwiLCBcIjEwMCVcIik7XHJcbiAgICAgICAgICAgIC8vJChcIi5JblBhZ2VSb3RhdGVCYW5uZXIgLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXIgLnUtaW1hZ2UtcmVzcG9uc2l2ZVwiKS5jc3MoXCJoZWlnaHRcIiwgXCJhdXRvXCIpO1xyXG4gICAgICAgICAgICAvLyQoXCIuSW5QYWdlUm90YXRlQmFubmVyIC5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyIC51LWltYWdlLXJlc3BvbnNpdmVcIikuY3NzKFwibWluLWhlaWdodFwiLCBcImF1dG9cIik7XHJcbiAgICAgICAgICAgICQoXCIuSW5QYWdlUm90YXRlQmFubmVyIC5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyIC5IZXJvLkhlcm8tLWxhbmRpbmcgLnUtZ2xvYmFsLWNvbnRhaW5lciAuSGVyby1zbG9nYW5cIikuY3NzKFwibWluLWhlaWdodFwiLCBcImF1dG9cIik7XHJcbiAgICAgICAgICAgICQoXCIuSW5QYWdlUm90YXRlQmFubmVyIC5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyIC5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZVwiKS5jc3MoXCJtaW4taGVpZ2h0XCIsIFwiYXV0b1wiKTtcclxuICAgICAgICAgICAgJChcIi5JblBhZ2VSb3RhdGVCYW5uZXIgLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXIgLkhlcm8uSGVyby0tbGFuZGluZyAudS1nbG9iYWwtY29udGFpbmVyXCIpLmNzcyhcImhlaWdodFwiLCBzZXRTbGlkZXNIZWlnaHQgKyBcInB4XCIpO1xyXG4gICAgICAgICAgICB2YXIgc2xpZGVOdW1iZXJUb3AgPSAkKFwiLkluUGFnZVJvdGF0ZUJhbm5lciAuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGVyLWNvbnRhaW5lciAuSGVyby5IZXJvLS1sYW5kaW5nIC5IZXJvLWltYWdlLWhvbGRlclwiKS5oZWlnaHQoKTtcclxuICAgICAgICAgICAgJChcIi5JblBhZ2VSb3RhdGVCYW5uZXIgLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXIgLkhlcm8uSGVyby0tbGFuZGluZyAuSW5QYWdlUm90YXRlQmFubmVyX19zbGlkZS1udW1iZXJcIikuY3NzKFwidG9wXCIsIHNsaWRlTnVtYmVyVG9wICsgXCJweFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJCggd2luZG93ICkucmVzaXplKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICgkKFwiLkluUGFnZVJvdGF0ZUJhbm5lciAuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGVyLWNvbnRhaW5lclwiKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGlzIHRvIHJlYWxpZ24gc2xpZGVyXHJcbiAgICAgICAgICAgIHJlc2l6ZVdpbmRvd0NoYW5nZXMoKTtcclxuICAgICAgICAgICAgJChcIi5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyXCIpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICBsZWZ0OiAtbmV4dENvdW50KiQoXCIuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGVyLWNvbnRhaW5lclwiKS5maW5kKCcuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGUnKS53aWR0aCgpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJChcIi5iYW5uZXItc2xpZGVyLW5leHRcIikuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCRzY29wZS5jYW5DbGlja05leHQpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmNhbkNsaWNrTmV4dCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jYW5DbGlja05leHQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9LCA1MDApO1xyXG4gICAgICAgICAgICBuZXh0Q291bnQrKztcclxuICAgICAgICAgICAgJChcIi5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyXCIpLmZpbmlzaCgpO1xyXG4gICAgICAgICAgICAkKFwiLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXJcIikuZmluZCgnLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlJykuY3NzKCdvcGFjaXR5JywgJzEnKTtcclxuICAgICAgICAgICAgaWYobmV4dENvdW50ID09IHRvdGFsQmFubmVycy0xKXtcclxuICAgICAgICAgICAgICAgIHZhciBmaXJzdFNsaWRlID0gJChcIi5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyXCIpLmZpbmQoJy5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZScpLmZpcnN0KCkuZGV0YWNoKCk7XHJcbiAgICAgICAgICAgICAgICAkKFwiLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXJcIikuYXBwZW5kKGZpcnN0U2xpZGUpO1xyXG4gICAgICAgICAgICAgICAgbmV4dENvdW50ID0gbmV4dENvdW50LTI7XHJcbiAgICAgICAgICAgICAgICAkKFwiLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXJcIikuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAtbmV4dENvdW50KiQoXCIuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGVyLWNvbnRhaW5lclwiKS5maW5kKCcuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGUnKS53aWR0aCgpXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICBuZXh0Q291bnQgKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJChcIi5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyXCIpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgbGVmdDogLW5leHRDb3VudCokKFwiLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXJcIikuZmluZCgnLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlJykud2lkdGgoKVxyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgJChcIi5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyXCIpLmZpbmQoJy5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZScpLmNzcygnb3BhY2l0eScsICcwJyk7XHJcbiAgICAgICAgICAgICAgICBpZihuZXh0Q291bnQgPT0gdG90YWxCYW5uZXJzICkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHRDb3VudCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIi5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyXCIpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICcwcHgnXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAkKFwiLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXJcIikuZmluZCgnLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlJykuZXEobmV4dENvdW50KS5jc3MoJ29wYWNpdHknLCAnMScpOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDwgMTAwMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlTnVtYmVyVG9wID0gJChcIi5JblBhZ2VSb3RhdGVCYW5uZXIgLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXIgLkhlcm8uSGVyby0tbGFuZGluZyAuSGVyby1pbWFnZS1ob2xkZXJcIikuaGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICAkKFwiLkluUGFnZVJvdGF0ZUJhbm5lciAuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGVyLWNvbnRhaW5lciAuSGVyby5IZXJvLS1sYW5kaW5nIC5JblBhZ2VSb3RhdGVCYW5uZXJfX3NsaWRlLW51bWJlclwiKS5jc3MoXCJ0b3BcIiwgc2xpZGVOdW1iZXJUb3AgKyBcInB4XCIpOyAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgJChcIi5iYW5uZXItc2xpZGVyLXByZXZcIikuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCRzY29wZS5jYW5DbGlja1ByZXYpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmNhbkNsaWNrUHJldiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jYW5DbGlja1ByZXYgPSB0cnVlO1xyXG4gICAgICAgICAgICB9LCA1MDApO1xyXG4gICAgICAgICAgICBuZXh0Q291bnQtLTtcclxuICAgICAgICAgICAgJChcIi5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyXCIpLmZpbmQoJy5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZScpLmNzcygnb3BhY2l0eScsICcxJyk7XHJcbiAgICAgICAgICAgIGlmKG5leHRDb3VudCA8IDApe1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0U2xpZGUgPSAkKFwiLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXJcIikuZmluZCgnLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlJykubGFzdCgpLmRldGFjaCgpO1xyXG4gICAgICAgICAgICAgICAgJChcIi5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyXCIpLnByZXBlbmQoZmlyc3RTbGlkZSk7XHJcbiAgICAgICAgICAgICAgICBuZXh0Q291bnQgPSBuZXh0Q291bnQrMjtcclxuICAgICAgICAgICAgICAgICQoXCIuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGVyLWNvbnRhaW5lclwiKS5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IC1uZXh0Q291bnQqJChcIi5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyXCIpLmZpbmQoJy5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZScpLndpZHRoKClcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgIG5leHRDb3VudCAtLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkKFwiLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXJcIikuZmluaXNoKCk7XHJcbiAgICAgICAgICAgICQoXCIuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGVyLWNvbnRhaW5lclwiKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgIGxlZnQ6IC1uZXh0Q291bnQqJChcIi5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyXCIpLmZpbmQoJy5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZScpLndpZHRoKClcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlci1jb250YWluZXJcIikuZmluZCgnLkluUGFnZVJvdGF0ZUJhbm5lcl9fYmFubmVyLXNsaWRlJykuY3NzKCdvcGFjaXR5JywgJzAnKTtcclxuICAgICAgICAgICAgICAgICQoXCIuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGVyLWNvbnRhaW5lclwiKS5maW5kKCcuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGUnKS5lcShuZXh0Q291bnQpLmNzcygnb3BhY2l0eScsICcxJyk7ICAgXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAod2luZG93LmlubmVyV2lkdGggPCAxMDAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGVOdW1iZXJUb3AgPSAkKFwiLkluUGFnZVJvdGF0ZUJhbm5lciAuSW5QYWdlUm90YXRlQmFubmVyX19iYW5uZXItc2xpZGVyLWNvbnRhaW5lciAuSGVyby5IZXJvLS1sYW5kaW5nIC5IZXJvLWltYWdlLWhvbGRlclwiKS5oZWlnaHQoKTtcclxuICAgICAgICAgICAgICAgICQoXCIuSW5QYWdlUm90YXRlQmFubmVyIC5JblBhZ2VSb3RhdGVCYW5uZXJfX2Jhbm5lci1zbGlkZXItY29udGFpbmVyIC5IZXJvLkhlcm8tLWxhbmRpbmcgLkluUGFnZVJvdGF0ZUJhbm5lcl9fc2xpZGUtbnVtYmVyXCIpLmNzcyhcInRvcFwiLCBzbGlkZU51bWJlclRvcCArIFwicHhcIik7ICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1dKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5sZmdhcHAuY29udHJvbGxlcignaW5zaWRlclRyYWRpbmdDb250cmwnLCBbJyRzY29wZScsICdpbnNpZGVyVHJhZGluZ1NlcnZpY2UnLCBmdW5jdGlvbigkc2NvcGUsIGluc2lkZXJUcmFkaW5nU2VydmljZSkge1xyXG4gICAgdmFyIGluc2lkZXJDb21tb24gPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGluc2lkZXJNb2R1bGUgPSB7XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgdGFibGVWYWwgPSBhbmd1bGFyLmVsZW1lbnQoJyNpbnNpZGUtdHJhZGVfd3JhcHBlcicpLm9mZnNldCgpLnRvcDtcclxuICAgICAgICAgICAgdmFyIGhlYWRlckhndCA9IGFuZ3VsYXIuZWxlbWVudCgnLlRvcGhlYWRlci1sb2dvYXJlYScpLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICAgICAgdGFibGVWYWwgPSAodGFibGVWYWwgLSBoZWFkZXJIZ3QpIC0gNDA7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnaHRtbCwgYm9keScpLnN0b3AoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICdzY3JvbGxUb3AnOiB0YWJsZVZhbFxyXG4gICAgICAgICAgICB9LCA4MDApO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5wYWdpbmF0ZV9idXR0b24nKS51bmJpbmQoJ2NsaWNrJywgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKTtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcucGFnaW5hdGVfYnV0dG9uJykuYmluZCgnY2xpY2snLCAkc2NvcGUucGFnaW5hdGVTY3JvbGwpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGluc2lkZXJNb2R1bGUuZGF0YVRhYmxlcyA9IGZ1bmN0aW9uKGluc2lkZXJkYXRhKSB7XHJcbiAgICAgICAgICAgICQoJyNpbnNpZGUtdHJhZGUnKS5kYXRhVGFibGUoe1xyXG4gICAgICAgICAgICAgICAgJ2RhdGEnICAgOiBpbnNpZGVyZGF0YSxcclxuICAgICAgICAgICAgICAgICdjb2x1bW5zJzogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEnOiAnRE9DVFlQRSdcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEnOiAnREVTQ1JJUFRJT04nXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhJzogJ1JFQ0VJVkVEREFURSdcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEnOiAnU0laRSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBdLFxyXG5cclxuICAgICAgICAgICAgICAgIC8qICdmblJvd0NhbGxiYWNrJzogZnVuY3Rpb24oIG5Sb3csIGluc2lkZXJkYXRhLCBpRGlzcGxheUluZGV4ICkge1xyXG4gICAgICAgICAgICAgICAgXHQkKCcjaW5zaWRlLXRyYWRlJykucmVtb3ZlQXR0cigncm9sZScpO1xyXG4gICAgICAgICAgICAgICAgXHQkKCd0ZDplcSgyKScsIG5Sb3cpLmh0bWwoZ2xvYmFsQ29uc3RhbnQuZm9ybWF0RGF0ZShpbnNpZGVyZGF0YS5SRUNFSVZFRERBVEUsICctJykpO1xyXG4gICAgICAgICAgICAgICAgXHQkKCd0ZDplcSgzKScsIG5Sb3cpLmh0bWwoZ2xvYmFsQ29uc3RhbnQuYnl0ZXNUb1NpemUoaW5zaWRlcmRhdGEuU0laRSkpO1xyXG4gICAgICAgICAgICAgICAgXHRyZXR1cm4gblJvdztcclxuICAgICAgICAgICAgICAgIH0sKi9cclxuICAgICAgICAgICAgICAgICdyZXNwb25zaXZlJyAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICdiTGVuZ3RoQ2hhbmdlJzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAnYlNvcnQnICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAnYkZpbHRlcicgICAgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgJ2F1dG9XaWR0aCcgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICdjb2x1bW5EZWZzJyAgIDogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdkYXRhVGFibGVzX25vd3JhcCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXRzJyAgOiBbMl1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgJ2Rpc3BsYXlMZW5ndGgnOiAyMCxcclxuICAgICAgICAgICAgICAgICdvTGFuZ3VhZ2UnICAgIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICdvUGFnaW5hdGUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdzTmV4dCcgICAgOiAnTmV4dCAyMCA8aSBjbGFzcz1cXCdmYSBmYS1jaGV2cm9uLXJpZ2h0XFwnPjwvaT4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc1ByZXZpb3VzJzogJydcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICdzSW5mbyc6ICdTaG93aW5nIF9TVEFSVF8tX0VORF8gb2YgX1RPVEFMXydcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5wYWdpbmF0ZV9idXR0b24nKS51bmJpbmQoJ2NsaWNrJywgJHNjb3BlLnBhZ2luYXRlU2Nyb2xsKTtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcucGFnaW5hdGVfYnV0dG9uJykuYmluZCgnY2xpY2snLCAkc2NvcGUucGFnaW5hdGVTY3JvbGwpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGluc2lkZXJNb2R1bGUuY3VzdG9tU2VhcmNoID0gZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgZGF0YSwgZHRhYmxlO1xyXG5cclxuICAgICAgICAgICAgZGF0YSA9IGRhdGEudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgZHRhYmxlID0gJCgnI2luc2lkZS10cmFkZScpLmRhdGFUYWJsZSh7XHJcbiAgICAgICAgICAgICAgICAnZGVzdHJveScgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAnYkxlbmd0aENoYW5nZSc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgJ3Jlc3BvbnNpdmUnICAgOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgJ2Rpc3BsYXlMZW5ndGgnOiAyMCxcclxuICAgICAgICAgICAgICAgICdvTGFuZ3VhZ2UnICAgIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICdvUGFnaW5hdGUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdzTmV4dCcgICAgOiAnTmV4dCAyMCA8aSBjbGFzcz1cXCdmYSBmYS1jaGV2cm9uLXJpZ2h0XFwnPjwvaT4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc1ByZXZpb3VzJzogJydcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICdzSW5mbyc6ICdTaG93aW5nIF9TVEFSVF8tX0VORF8gb2YgX1RPVEFMXydcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICQoJyNpbnNpZGUtdHJhZGVfZmlsdGVyJykuaGlkZSgpO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5pbmRleE9mKCdhbmQnKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBkdGFibGUuZm5GaWx0ZXIoZGF0YS5yZXBsYWNlKCdhbmQnLCAnJykpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuaW5kZXhPZignb3InKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YVNwbGl0ID0gZGF0YS5zcGxpdCgnb3InKTtcclxuXHJcbiAgICAgICAgICAgICAgICBkdGFibGUuZm5GaWx0ZXIoZGF0YVNwbGl0WzBdKTtcclxuICAgICAgICAgICAgICAgIGlmIChkdGFibGUuZm5TZXR0aW5ncygpLmZuUmVjb3Jkc0Rpc3BsYXkoKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGR0YWJsZS5mbkZpbHRlcihkYXRhU3BsaXRbMV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZHRhYmxlLmZuRmlsdGVyKGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyogaW5zaWRlck1vZHVsZS5pbnNpZGVyQ2Fyb3VzZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHQvKnZhciAkY2Fyb3VzZWxDb250V2lkID0gJChcIi5jYXJvdXNlbC1jb250XCIpLnBhcmVudCgpLCBjb3VudCA9IDAsIG1vYmlsZVdpZCA9IDc2NywgdGFibGV0V2lkID0gMTAyMywgc2hvd0xpc3QsIHVwZGF0ZWRXaWQsICRjYXJvdXNlbENvbnRXaWRMaXN0ID0gJCgnLmNhcm91c2VsLWNvbnQgbGknKS5lcSgwKTtcclxuICAgICAgICBcdGNhcm91c2VscmVzaXplKCk7XHJcbiAgICAgICAgXHQkKCcuY2Fyb3VzZWwtY291bnQnKS52YWwoMCk7XHJcbiAgICAgICAgXHQkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgXHRcdGNhcm91c2VscmVzaXplKCk7XHJcbiAgICAgICAgXHR9KTtcclxuICAgICAgICBcdCQoJy5jYXJvdXNlbC1yaWdodC1hcnJvdycpLm9uKCdjbGljaycsZnVuY3Rpb24oKXtcclxuICAgICAgICBcdFx0dmFyICR0b3RhbENhcm91c2VsTGlzdCA9ICQodGhpcykuY2xvc2VzdCgnLmJpb1NsaWRlcicpLmZpbmQoJy5jYXJvdXNlbC1jb250IGxpJyk7XHJcbiAgICAgICAgXHRcdGNvdW50ID0gcGFyc2VJbnQoJCh0aGlzKS5jbG9zZXN0KCdzcGFuJykuZmluZCgnaW5wdXQnKS52YWwoKSk7XHJcbiAgICAgICAgXHRcdGlmKChjb3VudCA+PSAwKSAmJiBjb3VudCA8ICgoJHRvdGFsQ2Fyb3VzZWxMaXN0Lmxlbmd0aC1zaG93TGlzdCkpKVxyXG4gICAgICAgIFx0XHR7XHJcbiAgICAgICAgXHRcdFx0Y291bnQgPSBwYXJzZUludCgkKHRoaXMpLmNsb3Nlc3QoJ3NwYW4nKS5maW5kKCdpbnB1dCcpLnZhbCgpKSsxO1xyXG4gICAgICAgIFx0XHRcdCQodGhpcykuY2xvc2VzdCgnc3BhbicpLmZpbmQoJ2lucHV0JykudmFsKGNvdW50KTtcclxuICAgICAgICBcdFx0XHR2YXIgbGVmdFZhbCA9IChjb3VudCAqIHVwZGF0ZWRXaWQpKyhjb3VudCpwYXJzZUludCgkY2Fyb3VzZWxDb250V2lkTGlzdC5jc3MoJ21hcmdpbi1yaWdodCcpKSkrKGNvdW50KnBhcnNlSW50KCRjYXJvdXNlbENvbnRXaWRMaXN0LmNzcygnbWFyZ2luLWxlZnQnKSkpO1xyXG4gICAgICAgIFx0XHRcdCQodGhpcykuY2xvc2VzdCgnLmJpb1NsaWRlcicpLmZpbmQoJy5jYXJvdXNlbC1jb250Jykuc3RvcCgpLmFuaW1hdGUoe2xlZnQ6LWxlZnRWYWwrJ3B4J30pO1xyXG4gICAgICAgIFx0XHRcdCQodGhpcykucHJldigpLmFkZENsYXNzKCdjYXJvdXNlbC1sZWZ0LWFycm93Jyk7XHJcbiAgICAgICAgXHRcdFx0aWYoY291bnQgPj0gKCgkdG90YWxDYXJvdXNlbExpc3QubGVuZ3RoLXNob3dMaXN0KSkpe1xyXG4gICAgICAgIFx0XHRcdFx0JCh0aGlzKS5yZW1vdmVDbGFzcygnY2Fyb3VzZWwtcmlnaHQtYXJyb3cnKTtcclxuICAgICAgICBcdFx0XHR9XHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdH0pO1xyXG4gICAgICAgIFx0JCgnLmNhcm91c2VsLWxlZnQtYXJyb3cnKS5vbignY2xpY2snLGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgXHRcdGNvdW50ID0gcGFyc2VJbnQoJCh0aGlzKS5jbG9zZXN0KCdzcGFuJykuZmluZCgnaW5wdXQnKS52YWwoKSk7XHJcbiAgICAgICAgXHRcdHZhciAkdG90YWxDYXJvdXNlbExpc3QgPSAkKHRoaXMpLmNsb3Nlc3QoJy5iaW9TbGlkZXInKS5maW5kKCcuY2Fyb3VzZWwtY29udCBsaScpO1xyXG4gICAgICAgIFx0XHRpZigoY291bnQgPiAwKSAmJiBjb3VudCA8PSAoJHRvdGFsQ2Fyb3VzZWxMaXN0Lmxlbmd0aC1zaG93TGlzdCkpXHJcbiAgICAgICAgXHRcdHtcclxuICAgICAgICBcdFx0XHRjb3VudCA9IHBhcnNlSW50KCQodGhpcykuY2xvc2VzdCgnc3BhbicpLmZpbmQoJ2lucHV0JykudmFsKCkpLTE7XHJcbiAgICAgICAgXHRcdFx0JCh0aGlzKS5jbG9zZXN0KCdzcGFuJykuZmluZCgnaW5wdXQnKS52YWwoY291bnQpO1xyXG4gICAgICAgIFx0XHRcdHZhciBsZWZ0VmFsID0gKGNvdW50ICogdXBkYXRlZFdpZCkrKGNvdW50KnBhcnNlSW50KCRjYXJvdXNlbENvbnRXaWRMaXN0LmNzcygnbWFyZ2luLXJpZ2h0JykpKSsoY291bnQqcGFyc2VJbnQoJGNhcm91c2VsQ29udFdpZExpc3QuY3NzKCdtYXJnaW4tbGVmdCcpKSk7XHJcbiAgICAgICAgXHRcdFx0JCh0aGlzKS5jbG9zZXN0KCcuYmlvU2xpZGVyJykuZmluZChcIi5jYXJvdXNlbC1jb250XCIpLnN0b3AodHJ1ZSxmYWxzZSkuYW5pbWF0ZSh7bGVmdDotbGVmdFZhbCsncHgnfSk7XHJcbiAgICAgICAgXHRcdFx0JCh0aGlzKS5uZXh0KCkuYWRkQ2xhc3MoJ2Nhcm91c2VsLXJpZ2h0LWFycm93Jyk7XHJcbiAgICAgICAgXHRcdFx0aWYoY291bnQgPD0gMCl7XHJcbiAgICAgICAgXHRcdFx0XHQkKHRoaXMpLnJlbW92ZUNsYXNzKCdjYXJvdXNlbC1sZWZ0LWFycm93Jyk7XHJcbiAgICAgICAgXHRcdFx0fVxyXG5cclxuICAgICAgICBcdFx0fVxyXG4gICAgICAgIFx0fSk7XHJcbiAgICAgICAgXHRmdW5jdGlvbiBjYXJvdXNlbHJlc2l6ZSgpe1xyXG4gICAgICAgIFx0XHQkKCcubGVmdC5jYXJvdXNlbC1jb250cm9sJykucmVtb3ZlQ2xhc3MoJ2Nhcm91c2VsLWxlZnQtYXJyb3cnKTtcclxuICAgICAgICBcdFx0JCgnLmNhcm91c2VsLWNvbnQnKS5jc3MoJ2xlZnQnLCcwJyk7XHJcbiAgICAgICAgXHRcdGNvdW50PTA7XHJcbiAgICAgICAgXHRcdHZhciB3aW5kV2lkID0gJCh3aW5kb3cpLndpZHRoKCksIGxpc3RNYXJnaW4gPSBwYXJzZUludCgkY2Fyb3VzZWxDb250V2lkTGlzdC5jc3MoJ21hcmdpbi1yaWdodCcpKTtcclxuICAgICAgICBcdFx0JCgnLmxlZnQuY2Fyb3VzZWwtY29udHJvbCcpLnJlbW92ZUNsYXNzKCdjYXJvdXNlbC1sZWZ0LWFycm93Jyk7XHJcbiAgICAgICAgXHRcdCQoJy5yaWdodC5jYXJvdXNlbC1jb250cm9sJykuYWRkQ2xhc3MoJ2Nhcm91c2VsLXJpZ2h0LWFycm93Jyk7XHJcbiAgICAgICAgXHRcdGlmKHdpbmRXaWQgPD0gbW9iaWxlV2lkKXtcclxuICAgICAgICBcdFx0XHRzaG93TGlzdCA9IDI7XHJcbiAgICAgICAgXHRcdFx0dXBkYXRlZFdpZCA9ICRjYXJvdXNlbENvbnRXaWQud2lkdGgoKS9zaG93TGlzdDtcclxuICAgICAgICBcdFx0XHR1cGRhdGVkV2lkID0gdXBkYXRlZFdpZC1saXN0TWFyZ2luO1xyXG4gICAgICAgIFx0XHRcdHVwZGF0ZWRXaWQgPSB1cGRhdGVkV2lkKzEwO1xyXG4gICAgICAgIFx0XHR9XHJcbiAgICAgICAgXHRcdGVsc2UgaWYod2luZFdpZCA8PSB0YWJsZXRXaWQpe1xyXG4gICAgICAgIFx0XHRcdHNob3dMaXN0ID0gNDtcclxuICAgICAgICBcdFx0XHR1cGRhdGVkV2lkID0gJGNhcm91c2VsQ29udFdpZC53aWR0aCgpL3Nob3dMaXN0O1xyXG4gICAgICAgIFx0XHRcdHVwZGF0ZWRXaWQgPSB1cGRhdGVkV2lkLShsaXN0TWFyZ2luKTtcclxuICAgICAgICBcdFx0XHR1cGRhdGVkV2lkID0gdXBkYXRlZFdpZCsxMDtcclxuICAgICAgICBcdFx0fVxyXG4gICAgICAgIFx0XHRlbHNle1xyXG4gICAgICAgIFx0XHRcdHNob3dMaXN0ID0gNTtcclxuICAgICAgICBcdFx0XHR1cGRhdGVkV2lkID0gJGNhcm91c2VsQ29udFdpZC53aWR0aCgpL3Nob3dMaXN0O1xyXG4gICAgICAgIFx0XHRcdHVwZGF0ZWRXaWQgPSB1cGRhdGVkV2lkLWxpc3RNYXJnaW47XHJcbiAgICAgICAgXHRcdFx0dXBkYXRlZFdpZCA9IHVwZGF0ZWRXaWQrNTtcclxuICAgICAgICBcdFx0fVxyXG4gICAgICAgIFx0XHQkKCcuY2Fyb3VzZWwtY29udCBsaScpLmNzcygnd2lkdGgnLHVwZGF0ZWRXaWQrJ3B4Jyk7XHJcblxyXG4gICAgICAgIFx0fSovXHJcbiAgICAgICAgLy8gfTtcclxuICAgICAgICByZXR1cm4gaW5zaWRlck1vZHVsZTtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgJCgnLmluc2lkZXJUcmFkaW5nJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaW5zaWRlckNvbW1vbi5jdXN0b21TZWFyY2goJCgnI2luc2lkZXJUcmFkaW5nJykudmFsKCkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnI2luc2lkZXJUcmFkaW5nJykub24oJ2tleXVwJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMTMpIHtcclxuICAgICAgICAgICAgJCgnLmluc2lkZXJUcmFkaW5nJykudHJpZ2dlcignY2xpY2snKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpbnNpZGVyVHJhZGluZ1NlcnZpY2UuaW5zaWRlclRyYWRpbmdEYXRhKCRzY29wZSwgZnVuY3Rpb24oeG1sKSB7XHJcbiAgICAgICAgdmFyIGluc2lkZXJkYXRhID0gW107XHJcblxyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh4bWwuRURHQVJSVExJU1QuUkVTVUxULlJPVywgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgaW5zaWRlcmRhdGEucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAnRE9DVFlQRScgICAgIDogdmFsdWUuRE9DVFlQRSxcclxuICAgICAgICAgICAgICAgICdERVNDUklQVElPTicgOiB2YWx1ZS5ERVNDUklQVElPTixcclxuICAgICAgICAgICAgICAgICdSRUNFSVZFRERBVEUnOiBnbG9iYWxDb25zdGFudC5mb3JtYXREYXRlKHZhbHVlLlJFQ0VJVkVEREFURSwgJy0nKSxcclxuICAgICAgICAgICAgICAgICdTSVpFJyAgICAgICAgOiBnbG9iYWxDb25zdGFudC5ieXRlc1RvU2l6ZSh2YWx1ZS5TSVpFKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpbnNpZGVyQ29tbW9uLmRhdGFUYWJsZXMoaW5zaWRlcmRhdGEpO1xyXG5cclxuICAgICAgICAvLyBpbnNpZGVyQ29tbW9uLmluc2lkZXJDYXJvdXNlbCgpO1xyXG4gICAgfSk7XHJcbn1dKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgIGFuZ3VsYXIubW9kdWxlKFwibGZnYXBwXCIpLmNvbnRyb2xsZXIoJ2xpc0NvbnRyb2xsZXInLCBbJyRzY29wZScsICckdGltZW91dCcsICckaHR0cCcsICckc2NlJywgZnVuY3Rpb24gKCRzY29wZSwgJHRpbWVvdXQsICRodHRwLCAkc2NlKSB7XG5cbiAgICAgICAgdmFyIGxpc1ZNID0gdGhpcztcbiAgICAgICAgdmFyIGxpc01hcHBpbmcgPSB7XG4gICAgICAgICAgICBcIk5vd1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiaTRMSUZFXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTWF4IDZcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctRG93blwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiaTRMSUZFXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTm93LURvd24tWWVzXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJpNExJRkVcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctRG93bi1ZZXMtU3Ryb25nXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIk5vdy1Eb3duLVllcy1SZWxpYWJsZVwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcImk0TElGRVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTm93LURvd24tWWVzLUludmVzdG1lbnRcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJpNExJRkVcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIk5vdy1Eb3duLU5vXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIEVkZ2VcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctRG93bi1Oby1TYXZpbmdzXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIk5vdy1Eb3duLU5vLVN0cm9uZ1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctRG93bi1Tb21lXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIEVkZ2VcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctRG93bi1Tb21lLVN0cm9uZ1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctRG93bi1Tb21lLVJlbGlhYmxlXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctRG93bi1Tb21lLVNhdmluZ3NcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIEVkZ2VcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIk5vdy1GbGF0XCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiaTRMSUZFXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIEVkZ2VcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctRmxhdC1ZZXNcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJpNExJRkVcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIDIuMFwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIk5vdy1GbGF0LVllcy1JbnZlc3RtZW50XCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiaTRMSUZFXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIk5vdy1GbGF0LVllcy1TdHJvbmdcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIDIuMFwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTm93LUZsYXQtWWVzLVJlbGlhYmxlXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIk5vdy1GbGF0LU5vXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctRmxhdC1Oby1TYXZpbmdzXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIk5vdy1GbGF0LU5vLVN0cm9uZ1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctRmxhdC1Tb21lXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJpNExJRkVcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctRmxhdC1Tb21lLVN0cm9uZ1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctRmxhdC1Tb21lLVJlbGlhYmxlXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiaTRMSUZFXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctRmxhdC1Tb21lLUludmVzdG1lbnRcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJpNExJRkVcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIk5vdy1VcFwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcImk0TElGRVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1heCA2XCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctVXAtWWVzXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiaTRMSUZFXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTWF4IDZcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctVXAtWWVzLUludmVzdG1lbnRcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJpNExJRkVcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNYXggNlwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTm93LVVwLVllcy1SZXRpcmVtZW50XCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTWF4IDZcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIk5vdy1VcC1ZZXMtUmVsaWFibGVcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNYXggNlwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTm93LVVwLU5vXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctVXAtTm8tU2F2aW5nc1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgRWRnZVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctVXAtTm8tU3Ryb25nXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIEVkZ2VcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIk5vdy1VcC1Tb21lXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiaTRMSUZFXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctVXAtU29tZS1JbnZlc3RtZW50XCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiaTRMSUZFXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctVXAtU29tZS1SZWxpYWJsZVwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJOb3ctVXAtU29tZS1TdHJvbmdcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIDIuMFwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXI1XCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTWF4IDZcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIDIuMFwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgRWRnZVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyNS1Eb3duXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTWF4IDZcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIDIuMFwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgRWRnZVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyNS1Eb3duLVllc1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1heCA2XCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjUtRG93bi1ZZXMtUmV0aXJlbWVudFwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1heCA2XCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyNS1Eb3duLVllcy1TdHJvbmdcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIDIuMFwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXI1LURvd24tWWVzLVJlbGlhYmxlXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyNS1Eb3duLU5vXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjUtRG93bi1Oby1TYXZpbmdzXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyNS1Eb3duLU5vLVN0cm9uZ1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjUtRG93bi1Tb21lXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNYXggNlwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyNS1Eb3duLVNvbWUtU3Ryb25nXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyNS1Eb3duLVNvbWUtUmVsaWFibGVcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNYXggNlwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXI1LURvd24tU29tZS1SZXRpcmVtZW50XCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTWF4IDZcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyNS1GbGF0XCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTWF4IDZcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIDIuMFwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgRWRnZVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyNS1GbGF0LVllc1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1heCA2XCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjUtRmxhdC1ZZXMtUmV0aXJlbWVudFwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1heCA2XCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjUtRmxhdC1ZZXMtUmVsaWFibGVcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIDIuMFwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXI1LUZsYXQtWWVzLVN0cm9uZ1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjUtRmxhdC1Ob1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgRWRnZVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXI1LUZsYXQtTm8tU2F2aW5nc1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgRWRnZVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjUtRmxhdC1Oby1TdHJvbmdcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIDIuMFwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgRWRnZVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXI1LUZsYXQtU29tZVwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1heCA2XCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjUtRmxhdC1Tb21lLVJldGlyZW1lbnRcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNYXggNlwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjUtRmxhdC1Tb21lLVN0cm9uZ1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjUtRmxhdC1Tb21lLVJlbGlhYmxlXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyNS1VcFwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1heCA2XCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIEVkZ2VcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjUtVXAtWWVzXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTWF4IDZcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIDIuMFwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyNS1VcC1ZZXMtUmV0aXJlbWVudFwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1heCA2XCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjUtVXAtWWVzLVJlbGlhYmxlXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyNS1VcC1ZZXMtU3Ryb25nXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyNS1VcC1Ob1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgRWRnZVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXI1LVVwLU5vLVNhdmluZ3NcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIEVkZ2VcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIDIuMFwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXI1LVVwLU5vLVN0cm9uZ1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjUtVXAtU29tZVwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1heCA2XCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjUtVXAtU29tZS1SZXRpcmVtZW50XCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTWF4IDZcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyNS1VcC1Tb21lLVJlbGlhYmxlXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyNS1VcC1Tb21lLVN0cm9uZ1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjEwXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTElBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIEVkZ2VcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNYXggNlwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyMTAtRG93blwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxJQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXIxMC1Eb3duLVllc1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxJQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXIxMC1Eb3duLVllcy1SZWxpYWJsZVwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxJQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXIxMC1Eb3duLVllcy1GbGV4aWJpbGl0eVwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxJQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjEwLURvd24tWWVzLVN0cm9uZ1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTElBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjEwLURvd24tTm9cIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIDIuMFwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgRWRnZVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyMTAtRG93bi1Oby1TYXZpbmdzXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyMTAtRG93bi1Oby1TdHJvbmdcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIDIuMFwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgRWRnZVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXIxMC1Eb3duLVNvbWVcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIDIuMFwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxJQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyMTAtRG93bi1Tb21lLVJlbGlhYmxlXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyMTAtRG93bi1Tb21lLVN0cm9uZ1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTElBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjEwLURvd24tU29tZS1GbGV4aWJpbGl0eVwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxJQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjEwLUZsYXRcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMSUFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNYXggNlwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgRWRnZVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXIxMC1GbGF0LVllc1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxJQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1heCA2XCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXIxMC1GbGF0LVllcy1SZWxpYWJsZVwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxJQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXIxMC1GbGF0LVllcy1GbGV4aWJpbGl0eVwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxJQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1heCA2XCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjEwLUZsYXQtWWVzLVJldGlyZW1lbnRcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNYXggNlwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxJQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXIxMC1GbGF0LU5vXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjEwLUZsYXQtTm8tU2F2aW5nc1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgRWRnZVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjEwLUZsYXQtTm8tU3Ryb25nXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIEVkZ2VcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyMTAtRmxhdC1Tb21lXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTElBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJMYXRlcjEwLUZsYXQtU29tZS1GbGV4aWJpbGl0eVwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxJQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXIxMC1GbGF0LVNvbWUtUmVsaWFibGVcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIDIuMFwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXIxMC1GbGF0LVNvbWUtU3Ryb25nXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyMTAtVXBcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMSUFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNYXggNlwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgRWRnZVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXIxMC1VcC1ZZXNcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMSUFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNYXggNlwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyMTAtVXAtWWVzLUZsZXhpYmlsaXR5XCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTElBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTWF4IDZcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyMTAtVXAtWWVzLVJldGlyZW1lbnRcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNYXggNlwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXIxMC1VcC1ZZXMtUmVsaWFibGVcIjogW3tcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNU0FcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJNYXggNlwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlY29uZGFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXIxMC1VcC1Ob1wiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgRWRnZVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxpbmMgMi4wXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXIxMC1VcC1Oby1TYXZpbmdzXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyBFZGdlXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyMTAtVXAtTm8tU3Ryb25nXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTGluYyAyLjBcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMaW5jIEVkZ2VcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyMTAtVXAtU29tZVwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1TQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1heCA2XCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTElBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFwiTGF0ZXIxMC1VcC1Tb21lLVJlbGlhYmxlXCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTVNBXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTWF4IDZcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyMTAtVXAtU29tZS1SZXRpcmVtZW50XCI6IFt7XG4gICAgICAgICAgICAgICAgXCJjb2RlXCI6IFwiTWF4IDZcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwcmltYXJ5XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogXCJMSUFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIkxhdGVyMTAtVXAtU29tZS1GbGV4aWJpbGl0eVwiOiBbe1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIkxJQVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiY29kZVwiOiBcIk1heCA2XCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgICAgIHZhciBodG1sUmVnZXggPSAvKDwoW14+XSspPikvaWc7XG4gICAgICAgIHZhciB0cmFkZU1hcmtSZWdleCA9IC9bJ1wiXFx1MDA0MFxcdTAwMjZcXHUyMTIyXFx1MDBhZV0vZztcblxuICAgICAgICBsaXNWTS5jdXJyU2xpZGUgPSAxO1xuICAgICAgICBsaXNWTS5kaXJlY3Rpb24gPSAncmlnaHQnO1xuICAgICAgICBsaXNWTS5jYXRlZ29yeU5hbWUgPSAnJztcblxuICAgICAgICBsaXNWTS5maWx0ZXJlZFJlc3VsdHMgPSBbXTtcbiAgICAgICAgbGlzVk0uc3RlcFZhbGlkYXRpb24gPSB7fTtcbiAgICAgICAgbGlzVk0uc2VsUXVlc3Rpb25PcHRpb25zID0ge307XG4gICAgICAgIGxpc1ZNLmxpc0RhdGEgPSB7fTtcbiAgICAgICAgbGlzVk0uYW5udWl0aWVzID0gZmFsc2U7XG5cbiAgICAgICAgbGlzVk0uaW5pdCA9IGZ1bmN0aW9uIChub09mU2xpZGVzKSB7XG5cbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQoJyNzbGlkZTEgLnF1ZXN0aW9uLXNpbmdsZS1zZWxlY3QtdHJhbnNwYXJlbnQnKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBsaXNWTS5hbm51aXRpZXMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsaXNWTS5ub09mU2xpZGVzID0gbm9PZlNsaWRlcztcbiAgICAgICAgICAgIGlmICh0b3RhbFJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICBsaXNWTS5maWx0ZXJlZFJlc3VsdHMgPSB0b3RhbFJlc3VsdHMuc2xpY2UoMCwgdG90YWxSZXN1bHRzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgbGlzVk0udG90YWxSZXN1bHRzID0gdG90YWxSZXN1bHRzLnNsaWNlKDAsIHRvdGFsUmVzdWx0cy5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRvdGFsUmVzdWx0c0NvZGUpIHtcbiAgICAgICAgICAgICAgICBsaXNWTS5maWx0ZXJlZFJlc3VsdHNDb2RlID0gdG90YWxSZXN1bHRzQ29kZS5zbGljZSgwLCB0b3RhbFJlc3VsdHNDb2RlLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgbGlzVk0udG90YWxSZXN1bHRzQ29kZSA9IHRvdGFsUmVzdWx0c0NvZGUuc2xpY2UoMCwgdG90YWxSZXN1bHRzQ29kZS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGlzVk0ubmV4dFNsaWRlID0gZnVuY3Rpb24gKHRyaWdnZXIpIHtcbiAgICAgICAgICAgIGlmICh0cmlnZ2VyID09PSAnbmV4dCcpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVBbmFseXRpY3MoJ3Rvb2wnLCAnTmV4dCcsICdsaWZldGltZSBpbmNvbWUgc2VsZWN0b3InLCAnc3RlcCAnICsgKGxpc1ZNLmN1cnJTbGlkZSAtIDEpICsgJyAnICsgYW5ndWxhci5lbGVtZW50KCcjc2xpZGUnICsgbGlzVk0uY3VyclNsaWRlKS5maW5kKCdpbnB1dCcpLmRhdGEoJ2NhdGVnb3J5bmFtZScpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlQW5hbHl0aWNzKCd0b29sJywgJ2NvbnRpbnVlJywgJ2xpZmV0aW1lIGluY29tZSBzZWxlY3RvcicsICdzdGVwICcgKyAobGlzVk0uY3VyclNsaWRlIC0gMSkgKyAnICcgKyBhbmd1bGFyLmVsZW1lbnQoJyNzbGlkZScgKyBsaXNWTS5jdXJyU2xpZGUpLmZpbmQoJ2lucHV0JykuZGF0YSgnY2F0ZWdvcnluYW1lJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxpc1ZNLmN1cnJTbGlkZSA8IGxpc1ZNLm5vT2ZTbGlkZXMpIHtcbiAgICAgICAgICAgICAgICBsaXNWTS5kaXJlY3Rpb24gPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzVk0uY3VyclNsaWRlICs9IDE7XG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoXCIuY2Fyb3VzZWwtY29udGFpbmVyXCIpLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsaXNWTS5wcmV2U2xpZGUgPSBmdW5jdGlvbiAodHJpZ2dlcikge1xuICAgICAgICAgICAgaWYgKHRyaWdnZXIgPT09ICdwcmV2Jykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUFuYWx5dGljcygndG9vbCcsICdCYWNrJywgJ2xpZmV0aW1lIGluY29tZSBzZWxlY3RvcicsICdzdGVwICcgKyAobGlzVk0uY3VyclNsaWRlIC0gMSkgKyAnICcgKyBhbmd1bGFyLmVsZW1lbnQoJyNzbGlkZScgKyBsaXNWTS5jdXJyU2xpZGUpLmZpbmQoJ2lucHV0JykuZGF0YSgnY2F0ZWdvcnluYW1lJykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVBbmFseXRpY3MoJ3Rvb2wnLCAnY29udGludWUnLCAnbGlmZXRpbWUgaW5jb21lIHNlbGVjdG9yJywgJ3N0ZXAgJyArIChsaXNWTS5jdXJyU2xpZGUgLSAxKSArICcgJyArIGFuZ3VsYXIuZWxlbWVudCgnI3NsaWRlJyArIGxpc1ZNLmN1cnJTbGlkZSkuZmluZCgnaW5wdXQnKS5kYXRhKCdjYXRlZ29yeW5hbWUnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGlzVk0uY3VyclNsaWRlID4gMSkge1xuICAgICAgICAgICAgICAgIGxpc1ZNLmRpcmVjdGlvbiA9ICdsZWZ0JztcbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc1ZNLmN1cnJTbGlkZSAtPSAxO1xuICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KFwiLmNhcm91c2VsLWNvbnRhaW5lclwiKS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGlzVk0ucHJldktleURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PSAxMykge1xuICAgICAgICAgICAgICAgIGxpc1ZNLnByZXZTbGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGlzVk0ubmV4dEtleURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PSAxMykge1xuICAgICAgICAgICAgICAgIGlmIChsaXNWTS5jdXJyU2xpZGUgPT09IGxpc1ZNLm5vT2ZTbGlkZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UmVzdWx0cyhsaXNWTS5maWx0ZXJlZFJlc3VsdHMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc1ZNLm5leHRTbGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUFuYWx5dGljcyhldmVudF9hY3Rpb24sIGV2ZW50X25hbWUsIGV2ZW50X3R5cGUsIGV2ZW50X3ZlcnNpb24sIGV2ZW50X3N0YXR1cywgcHJvZHVjdF9uYW1lKSB7XG4gICAgICAgICAgICBpZiAodXRhZykge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAnZXZlbnRfYWN0aW9uJzogZXZlbnRfYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAnZXZlbnRfbmFtZSc6IGV2ZW50X25hbWUsXG4gICAgICAgICAgICAgICAgICAgICdldmVudF90eXBlJzogZXZlbnRfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X3ZlcnNpb24nOiBldmVudF92ZXJzaW9uXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRfc3RhdHVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5ldmVudF9zdGF0dXMgPSBldmVudF9zdGF0dXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcm9kdWN0X25hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnByb2R1Y3RfbmFtZSA9IHByb2R1Y3RfbmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdXRhZy5saW5rKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuY2Fyb3VzZWwtY29udGFpbmVyIC5zaG93LW5leHQnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIC8vIERldGVybWluZSB3aGV0aGVyIHRvIHNob3cvaGlkZSB0aGUgY2Fyb3VzZWwgbmF2XG4gICAgICAgICAgICBsaXNWTS5zdGVwVmFsaWRhdGlvblsnc3RlcCcgKyBsaXNWTS5jdXJyU2xpZGVdID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChsaXNWTS5jdXJyU2xpZGUgPCBsaXNWTS5ub09mU2xpZGVzKSB7XG4gICAgICAgICAgICAgICAgbGlzVk0uZGlyZWN0aW9uID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc1ZNLmN1cnJTbGlkZSArPSAxO1xuICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KFwiLmNhcm91c2VsLWNvbnRhaW5lclwiKS5mb2N1cygpO1xuICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZUFuYWx5dGljcygndG9vbCcsICdjb250aW51ZScsICdsaWZldGltZSBpbmNvbWUgc2VsZWN0b3InLCAnYW5udWl0aWVzIGludHJvZHVjdGlvbicsICdzdGFydCcpO1xuICAgICAgICB9KTtcblxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5xdWVzdGlvbi1zaW5nbGUtc2VsZWN0LXRyYW5zcGFyZW50IGlucHV0W3R5cGU9cmFkaW9dJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgd2hldGhlciB0byBzaG93L2hpZGUgdGhlIGNhcm91c2VsIG5hdlxuICAgICAgICAgICAgbGlzVk0uc3RlcFZhbGlkYXRpb25bJ3N0ZXAnICsgbGlzVk0uY3VyclNsaWRlXSA9IHRydWU7XG5cbiAgICAgICAgICAgIC8vIEdldCB0aGUgc2VsZWN0ZWQgaW5wdXQgb3B0aW9uIGZyb20gdGhlIGFuc3dlcmVkIHF1ZXN0aW9uXG4gICAgICAgICAgICBsaXNWTS5saXNEYXRhW2FuZ3VsYXIuZWxlbWVudCh0aGlzKS5kYXRhKCdjYXRlZ29yeW5hbWUnKV0gPSBhbmd1bGFyLmVsZW1lbnQodGhpcykuZGF0YSgndGV4dCcpO1xuXG4gICAgICAgICAgICAvLyBLZWVwIHRyYWNrIG9mIHNlbGVjdGVkIGlucHV0IG9wdGlvbnMgZm9yIGVhY2ggcXVlc3Rpb25zXG4gICAgICAgICAgICBsaXNWTS5zZWxRdWVzdGlvbk9wdGlvbnNbXCJzdGVwXCIgKyBsaXNWTS5jdXJyU2xpZGVdID0gYW5ndWxhci5lbGVtZW50KHRoaXMpWzBdLnZhbHVlO1xuXG4gICAgICAgICAgICB2YXIgZmlsdGVyS2V5ID0gJyc7XG5cbiAgICAgICAgICAgIC8vIEZpbHRlciB0aGUgcmVzdWx0cyBiYXNlZCBvbiB0aGUgaW5wdXQgb3B0aW9ucyBzZWxlY3RlZFxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGxpc1ZNLnNlbFF1ZXN0aW9uT3B0aW9ucywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyS2V5ICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJLZXkgPSBmaWx0ZXJLZXkgKyAnLScgKyB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJLZXkgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIHRlbXBGaWx0ZXJLZXkgPSBudWxsO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gbGlzVk0ubm9PZlNsaWRlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnI3NsaWRlJyArIGkgKyAnIC5xdWVzdGlvbi1zaW5nbGUtc2VsZWN0LXRyYW5zcGFyZW50JykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobGlzVk0uc3RlcFZhbGlkYXRpb25bJ3N0ZXAnICsgaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wRmlsdGVyS2V5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHluYW1pY1F1ZXN0aW9uQ2hlY2soaSwgdGVtcEZpbHRlcktleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEZpbHRlcktleSA9IHRlbXBGaWx0ZXJLZXkgKyAnLScgKyBsaXNWTS5zZWxRdWVzdGlvbk9wdGlvbnNbXCJzdGVwXCIgKyBpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEZpbHRlcktleSA9IGxpc1ZNLnNlbFF1ZXN0aW9uT3B0aW9uc1tcInN0ZXBcIiArIGldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHluYW1pY1F1ZXN0aW9uQ2hlY2soaSwgdGVtcEZpbHRlcktleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbWFwUmVzdWx0cyA9IGxpc01hcHBpbmdbZmlsdGVyS2V5XTtcbiAgICAgICAgICAgIHZhciBtYXBSZXN1bHRzQ29kZSA9IFtdO1xuXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gobWFwUmVzdWx0cywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgbWFwUmVzdWx0c0NvZGUucHVzaCh2YWx1ZS5jb2RlKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gbGlzVk0udG90YWxSZXN1bHRzW2xpc1ZNLnRvdGFsUmVzdWx0c0NvZGUuaW5kZXhPZih2YWx1ZS5jb2RlKV07XG4gICAgICAgICAgICAgICAgdmFsdWUudGl0bGUgPSByZXN1bHQudGl0bGU7XG4gICAgICAgICAgICAgICAgdmFsdWUudXJsID0gcmVzdWx0LnVybDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgZmlsdGVyZWRSZXN1bHRzVGVtcCA9IGxpc1ZNLmZpbHRlcmVkUmVzdWx0cy5zbGljZSgwLCBsaXNWTS5maWx0ZXJlZFJlc3VsdHMubGVuZ3RoKTtcblxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGZpbHRlcmVkUmVzdWx0c1RlbXAsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChtYXBSZXN1bHRzQ29kZS5pbmRleE9mKHZhbHVlLmNvZGUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBsaXNWTS5maWx0ZXJlZFJlc3VsdHNDb2RlLmluZGV4T2YodmFsdWUuY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIGxpc1ZNLmZpbHRlcmVkUmVzdWx0cy5zcGxpY2UobGlzVk0uZmlsdGVyZWRSZXN1bHRzQ29kZS5pbmRleE9mKHZhbHVlLmNvZGUpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgbGlzVk0uZmlsdGVyZWRSZXN1bHRzQ29kZS5zcGxpY2UobGlzVk0uZmlsdGVyZWRSZXN1bHRzQ29kZS5pbmRleE9mKHZhbHVlLmNvZGUpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKG1hcFJlc3VsdHNDb2RlLCBmdW5jdGlvbiAoY29kZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAobGlzVk0uZmlsdGVyZWRSZXN1bHRzQ29kZS5pbmRleE9mKGNvZGUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBsaXNWTS5maWx0ZXJlZFJlc3VsdHNDb2RlLnB1c2goY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIGxpc1ZNLmZpbHRlcmVkUmVzdWx0cy5wdXNoKG1hcFJlc3VsdHNbaW5kZXhdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFwUmVzdWx0ID0gbWFwUmVzdWx0c1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZFJlc3VsdCA9IGxpc1ZNLmZpbHRlcmVkUmVzdWx0c1tsaXNWTS5maWx0ZXJlZFJlc3VsdHNDb2RlLmluZGV4T2YoY29kZSldO1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZFJlc3VsdC50eXBlID0gbWFwUmVzdWx0LnR5cGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChsaXNWTS5jdXJyU2xpZGUgPT09IGxpc1ZNLm5vT2ZTbGlkZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoKGxpc1ZNLmV2ZW50VHJpZ2dlciA9PT0gXCJjbGlja1wiKSAmJiBsaXNWTS5maWx0ZXJlZFJlc3VsdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRSZXN1bHRzKGxpc1ZNLmZpbHRlcmVkUmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KFwiLmNhcm91c2VsLW5leHRcIikuYXR0cigndGl0bGUnLCAnU3VibWl0Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVwZGF0ZUFuYWx5dGljcygndG9vbCcsICdzZWxlY3Qgc29sdXRpb24nLCAnbGlmZXRpbWUgaW5jb21lIHNlbGVjdG9yJywgJ3N0ZXAgJyArIChsaXNWTS5jdXJyU2xpZGUgLSAxKSArICcgJyArIGFuZ3VsYXIuZWxlbWVudCgnI3NsaWRlJyArIGxpc1ZNLmN1cnJTbGlkZSkuZmluZCgnaW5wdXQnKS5kYXRhKCdjYXRlZ29yeW5hbWUnKSwgJ2NvbXBsZXRlJywgbGlzVk0uZmlsdGVyZWRSZXN1bHRzQ29kZS5qb2luKCcsJykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAobGlzVk0uZXZlbnRUcmlnZ2VyID09PSBcImNsaWNrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzVk0ubmV4dFNsaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsaXNWTS5ldmVudFRyaWdnZXIgPSBcIlwiO1xuXG4gICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gZHluYW1pY1F1ZXN0aW9uQ2hlY2socXVlc3Rpb25ObywgZmlsdGVyS2V5KSB7XG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goYW5ndWxhci5lbGVtZW50KCcjc2xpZGUnICsgcXVlc3Rpb25ObyArICcgbGknKSwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSBhbmd1bGFyLmVsZW1lbnQoaXRlbSkuZmluZCgnaW5wdXRbdHlwZT1yYWRpb10nKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgJiYgaW5wdXQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBhbmd1bGFyLmVsZW1lbnQoaW5wdXQpWzBdLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcEZpbHRlcktleSA9IGZpbHRlcktleSArICctJyArIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGlzTWFwcGluZ1t0ZW1wRmlsdGVyS2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnN0eWxlLmRpc3BsYXkgPSAnbGlzdC1pdGVtJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcucXVlc3Rpb24tc2luZ2xlLXNlbGVjdC10cmFuc3BhcmVudCBsYWJlbCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxpc1ZNLmV2ZW50VHJpZ2dlciA9IFwiY2xpY2tcIjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0UmVzdWx0cyhmaWx0ZXJlZFJlc3VsdHMpIHtcbiAgICAgICAgICAgIGZpbHRlcmVkUmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLnR5cGUgPT09ICdwcmltYXJ5Jykge1xuICAgICAgICAgICAgICAgICAgICBsaXNWTS5saXNEYXRhLnByaW1hcnlCZW5lZml0ID0gdmFsdWUudGl0bGU7XG4gICAgICAgICAgICAgICAgICAgIGxpc1ZNLmxpc0RhdGEucHJpbWFyeUJlbmVmaXQgPSBsaXNWTS5saXNEYXRhLnByaW1hcnlCZW5lZml0LnJlcGxhY2UoaHRtbFJlZ2V4LCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGxpc1ZNLmxpc0RhdGEucHJpbWFyeUJlbmVmaXQgPSBsaXNWTS5saXNEYXRhLnByaW1hcnlCZW5lZml0LnJlcGxhY2UodHJhZGVNYXJrUmVnZXgsICcnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsaXNWTS5saXNEYXRhLnNlY29uZGFyeUJlbmVmaXQgPSB2YWx1ZS50aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgbGlzVk0ubGlzRGF0YS5zZWNvbmRhcnlCZW5lZml0ID0gbGlzVk0ubGlzRGF0YS5zZWNvbmRhcnlCZW5lZml0LnJlcGxhY2UoaHRtbFJlZ2V4LCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGxpc1ZNLmxpc0RhdGEuc2Vjb25kYXJ5QmVuZWZpdCA9IGxpc1ZNLmxpc0RhdGEuc2Vjb25kYXJ5QmVuZWZpdC5yZXBsYWNlKHRyYWRlTWFya1JlZ2V4LCAnJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJGh0dHAoe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHZhbHVlLnVybCArIFwiJmQ9ZGVza3RvcFwiXG4gICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLnR5cGUgPT09ICdwcmltYXJ5Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzVk0ucHJpbWFyeVJlc3VsdCA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBCaW5kaW5nIGFuYWx5dGljcyBldmVudCB0byBkeW5hbWljYWxseSBhZGRlZCBjb21wb25lbnQgbGlua3NcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rQW5hbHl0aWNzKCQoJy5yZXN1bHRzLWNvbnRhaW5lci1yZXN1bHQtcHJpbWFyeSBhJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc1ZNLnNlY29uZGFyeVJlc3VsdCA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBCaW5kaW5nIGFuYWx5dGljcyBldmVudCB0byBkeW5hbWljYWxseSBhZGRlZCBjb21wb25lbnQgbGlua3NcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rQW5hbHl0aWNzKCQoJy5yZXN1bHRzLWNvbnRhaW5lci1yZXN1bHQtc2Vjb25kYXJ5IGEnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxpc1ZNLnJlc3VsdHNNb2RlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvclwiKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gU2V0dGluZyBzZXNzaW9uIGRhdGFcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ0xJU0RhdGEnLCBKU09OLnN0cmluZ2lmeShsaXNWTS5saXNEYXRhKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsaXNWTS5zaG93UG9wdXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2JvZHknKS5jc3Moe1xuICAgICAgICAgICAgICAgICdvdmVyZmxvdyc6ICdoaWRkZW4nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxpc1ZNLnN0YXJ0T3ZlciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBsaXNWTS5jbG9zZVBvcHVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCdib2R5JykuY3NzKHtcbiAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOiAnYXV0bydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGlzVk0uc3RhcnRPdmVyID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBsaXNWTS5yZXN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdXBkYXRlQW5hbHl0aWNzKCd0b29sJywgJ3Jlc3RhcnQnLCAnbGlmZXRpbWUgaW5jb21lIHNlbGVjdG9yJyk7XG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2JvZHknKS5jc3Moe1xuICAgICAgICAgICAgICAgICdvdmVyZmxvdyc6ICdhdXRvJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsaXNWTS5jdXJyU2xpZGUgPSAxO1xuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KFwiLnF1ZXN0aW9ubmFpcmUtY29tcG9uZW50XCIpLmZpbmQoXCJpbnB1dFt0eXBlPXJhZGlvXVwiKS5yZW1vdmVBdHRyKFwiY2hlY2tlZFwiKTtcbiAgICAgICAgICAgIGxpc1ZNLmZpbHRlcmVkUmVzdWx0cyA9IHRvdGFsUmVzdWx0cy5zbGljZSgwLCB0b3RhbFJlc3VsdHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGxpc1ZNLnRvdGFsUmVzdWx0cyA9IHRvdGFsUmVzdWx0cy5zbGljZSgwLCB0b3RhbFJlc3VsdHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGxpc1ZNLmZpbHRlcmVkUmVzdWx0c0NvZGUgPSB0b3RhbFJlc3VsdHNDb2RlLnNsaWNlKDAsIHRvdGFsUmVzdWx0c0NvZGUubGVuZ3RoKTtcbiAgICAgICAgICAgIGxpc1ZNLnRvdGFsUmVzdWx0c0NvZGUgPSB0b3RhbFJlc3VsdHNDb2RlLnNsaWNlKDAsIHRvdGFsUmVzdWx0c0NvZGUubGVuZ3RoKTtcbiAgICAgICAgICAgIGxpc1ZNLnNlbFF1ZXN0aW9uT3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgbGlzVk0uZGlyZWN0aW9uID0gJ3JpZ2h0JztcbiAgICAgICAgICAgIGxpc1ZNLnN0ZXBWYWxpZGF0aW9uID0ge307XG4gICAgICAgICAgICBsaXNWTS5zdGFydE92ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIGxpc1ZNLnJlc3VsdHNNb2RlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgIH1dKTtcbn0pKCk7XG4iLCIvKiBnbG9iYWwgbHRjU3RhdGVTZWxlY3RvcnMsIGN1cnJlbnRQYWdlSWQgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24oKSB7XG4gICAgYW5ndWxhci5tb2R1bGUoJ2xmZ2FwcCcpLmNvbnRyb2xsZXIoJ2x0Y1N0YXRlU2VsZWN0b3JDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgdmFyIGx0Y1ZNID0gdGhpcztcblxuICAgICAgICBsdGNWTS5zZWxlY3RlZFN0YXRlID0gJ05vbmUnO1xuICAgICAgICBsdGNWTS5zaG93TW9kYWwgPSBmYWxzZTtcbiAgICAgICAgbHRjVk0uc3RhdGVzTkEgPSBbJ1B1ZXJ0byBSaWNvJywgJ1ZpcmdpbiBJc2xhbmRzJ107XG4gICAgICAgIGx0Y1ZNLmRpc2FibGVNb2RhbENsb3NlID0gZmFsc2U7XG5cbiAgICAgICAgbHRjVk0uaW5pdCA9IGZ1bmN0aW9uKHBhcmVudFBhZ2VJZCkge1xuICAgICAgICAgICAgLy8gY2hlY2sgc2VsZWN0ZWQgc3RhdGVcbiAgICAgICAgICAgIHZhciBzdGF0ZUNvb2tpZSA9IGdldENvb2tpZSgnU2VsZWN0ZWRTdGF0ZScpO1xuXG4gICAgICAgICAgICBsdGNWTS5wYXJlbnRQYWdlSWQgPSBwYXJlbnRQYWdlSWQ7XG5cbiAgICAgICAgICAgIC8vIFNldHRpbmcgY3VycmVudCBwYWdlXG4gICAgICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnRQYWdlSWQgIT09ICd1bmRlZmluZWQnICYmIGN1cnJlbnRQYWdlSWQgIT09IHVuZGVmaW5lZCAmJiBjdXJyZW50UGFnZUlkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxpbmtTZWxlY3RlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc3RhdGVTZWxlY3RvciBpbiBsdGNTdGF0ZVNlbGVjdG9ycykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGx0Y1N0YXRlU2VsZWN0b3JzW3N0YXRlU2VsZWN0b3JdLnJlbGF0ZWRJbnRlcm5hbExpbmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGluayA9IGx0Y1N0YXRlU2VsZWN0b3JzW3N0YXRlU2VsZWN0b3JdLnJlbGF0ZWRJbnRlcm5hbExpbmtzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmtJZCA9ICcnICsgbGluay5pZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmtJZCAmJiBsaW5rSWQgPT09IGN1cnJlbnRQYWdlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsdGNWTS5jdXJyUGFnZSA9IHN0YXRlU2VsZWN0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua1NlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobGlua1NlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6aW5nIHN0YXRlIHNlbGVjdG9yIG1hcFxuICAgICAgICAgICAgaWYgKCQoJyN1c2EtbWFwJykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICQoJyN1c2EtbWFwJykuTEdNYXAoe1xuICAgICAgICAgICAgICAgICAgICAnbWFwJzogJ3VzYScsXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gJ21hcEZvbGRlcic6ICcuLi8uLi8uLi8uLi92ZW5kb3IvanNtYXBzL21hcHMvJyxcblxuICAgICAgICAgICAgICAgICAgICAnbWFwRm9sZGVyJzogJy9zdGF0aWMvd2NzL2xmZy9zY3JpcHRzL2pzbWFwcy1jb25maWcvJyxcbiAgICAgICAgICAgICAgICAgICAgJ29uUmVhZHknICA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlQ29va2llICE9PSB1bmRlZmluZWQgJiYgc3RhdGVDb29raWUgIT09IG51bGwgJiYgc3RhdGVDb29raWUgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGx0Y1ZNLnN0YXRlc05BLmluZGV4T2Yoc3RhdGVDb29raWUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjdXNhLW1hcCcpLnRyaWdnZXIoJ3N0YXRlQ2xpY2snLCBzdGF0ZUNvb2tpZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbHRjVk0udXBkYXRlU2VsZWN0ZWRTdGF0ZShzdGF0ZUNvb2tpZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnb25TdGF0ZUNsaWNrJzogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGx0Y1ZNLnVuc2VsZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnIycgKyAkKHRoaXMpWzBdWzBdLmlkKS5jc3MoJ2ZpbGwnLCAnI2YyZjJmMicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGx0Y1ZNLnVuc2VsZWN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGx0Y1ZNLnVwZGF0ZVNlbGVjdGVkU3RhdGUoZGF0YS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3RhdGVDb29raWUgPT09IHVuZGVmaW5lZCB8fCBzdGF0ZUNvb2tpZSA9PT0gbnVsbCB8fCBzdGF0ZUNvb2tpZSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBsdGNWTS5zZWxlY3RlZFN0YXRlVGV4dCA9ICdTZWxlY3QnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsdGNWTS5zZWxlY3RlZFN0YXRlVGV4dCA9ICdDaGFuZ2UnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobHRjVk0ucGFyZW50UGFnZUlkICE9PSBjdXJyZW50UGFnZUlkICYmIChzdGF0ZUNvb2tpZSA9PT0gdW5kZWZpbmVkIHx8IHN0YXRlQ29va2llID09PSBudWxsIHx8IHN0YXRlQ29va2llID09PSAnJykpIHtcbiAgICAgICAgICAgICAgICBsdGNWTS5kaXNhYmxlTW9kYWxDbG9zZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgbHRjVk0uc2hvd01vZGFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzaG93TWFwKGx0Y1ZNLnNob3dNb2RhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgbHRjVk0udXBkYXRlU2VsZWN0ZWRTdGF0ZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICAgICAgICBzZXRDb29raWUoJ1NlbGVjdGVkU3RhdGUnLCBzdGF0ZSwgMzY1KTtcbiAgICAgICAgICAgIGx0Y1ZNLnNlbGVjdGVkU3RhdGVUZXh0ID0gJ0NoYW5nZSc7XG4gICAgICAgICAgICBsdGNWTS5zZWxlY3RlZFN0YXRlID0gc3RhdGU7XG4gICAgICAgICAgICBsdGNWTS5zaG93TW9kYWwgPSBmYWxzZTtcbiAgICAgICAgICAgIGx0Y1ZNLmRpc2FibGVNb2RhbENsb3NlID0gZmFsc2U7XG4gICAgICAgICAgICBzaG93TWFwKGx0Y1ZNLnNob3dNb2RhbCk7XG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5zdGF0ZS1zZWxlY3Rvci1kcm9wZG93biAuY3VzdG9tLXNlbGVjdGJveCcpLmh0bWwoc3RhdGUpO1xuXG4gICAgICAgICAgICBpZiAobHRjVk0ubGlua1NlbGVjdCAmJiBsdGNWTS5wYXJlbnRQYWdlSWQgPT09IGN1cnJlbnRQYWdlSWQpIHtcbiAgICAgICAgICAgICAgICBsdGNWTS5saW5rU2VsZWN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbHRjVk0uc2VsZWN0TGluayhsdGNWTS5zZWxlY3RlZExpbmspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIExpbmsgY2xpY2sgZXZlbnRcbiAgICAgICAgbHRjVk0uc2VsZWN0TGluayA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgbHRjVk0uc2VsZWN0ZWRMaW5rID0ga2V5O1xuICAgICAgICAgICAgbHRjVk0ubGlua1NlbGVjdCA9IHRydWU7XG4gICAgICAgICAgICBpZiAobHRjU3RhdGVTZWxlY3RvcnMgIT09IHVuZGVmaW5lZCAmJiBsdGNTdGF0ZVNlbGVjdG9ycyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChsdGNTdGF0ZVNlbGVjdG9yc1trZXldICE9PSB1bmRlZmluZWQgJiYgbHRjU3RhdGVTZWxlY3RvcnNba2V5XSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobHRjVk0uc2VsZWN0ZWRTdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGx0Y1ZNLnNlbGVjdGVkU3RhdGUgIT09IG51bGwgJiYgbHRjVk0uc2VsZWN0ZWRTdGF0ZSAhPT0gJycgJiYgbHRjVk0uc2VsZWN0ZWRTdGF0ZSAhPT0gJ05vbmUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsdGNTdGF0ZVNlbGVjdG9yc1trZXldLk9wdGlvbkFzc29jLmZvckVhY2goZnVuY3Rpb24oc3RhdGVTZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZVNlbGVjdG9yLkRpc3BsYXlWYWx1ZS50cmltKCkgPT09IGx0Y1ZNLnNlbGVjdGVkU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlU2VsZWN0b3IuUGFnZUFzc29jICYmIHN0YXRlU2VsZWN0b3IuUGFnZUFzc29jLl9saW5rXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBzdGF0ZVNlbGVjdG9yLlBhZ2VBc3NvYy5fbGlua187XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGx0Y1ZNLnNob3dNb2RhbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93TWFwKGx0Y1ZNLnNob3dNb2RhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gc2hvd01hcChmbGFnKSB7XG4gICAgICAgICAgICBpZiAoZmxhZykge1xuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnYm9keScpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdyc6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOiAnZml4ZWQnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlQ29va2llID0gZ2V0Q29va2llKCdTZWxlY3RlZFN0YXRlJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdGVDb29raWUgPT09IHVuZGVmaW5lZCB8fCBzdGF0ZUNvb2tpZSA9PT0gbnVsbCB8fCBzdGF0ZUNvb2tpZSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuY3VzdG9tLXNlbGVjdGJveCcpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjbHRjLW1hcC1jbG9zZScpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2JvZHknKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6ICdzdGF0aWMnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGFuZ2Ugc3RhdGUgY2xpY2sgZXZlbnRcbiAgICAgICAgbHRjVk0uY2hhbmdlU3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGx0Y1ZNLnNob3dNb2RhbCA9IHRydWU7XG4gICAgICAgICAgICBzaG93TWFwKGx0Y1ZNLnNob3dNb2RhbCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gU3RhdGUgc2VsZWN0b3IgZHJvcGRvd24gY2xpY2sgZXZlbnRcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuc3RhdGUtc2VsZWN0b3ItZHJvcGRvd24gLmN1c3RvbS1zZWxlY3Rib3gtbGlzdC1jb250IGxpJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGV4dCA9IGFuZ3VsYXIuZWxlbWVudCh0aGlzKS50ZXh0KCk7XG5cbiAgICAgICAgICAgIGlmIChsdGNWTS5zdGF0ZXNOQS5pbmRleE9mKHRleHQpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICQoJyN1c2EtbWFwJykudHJpZ2dlcignc3RhdGVDbGljaycsIHRleHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGVDb29raWUgPSBnZXRDb29raWUoJ1NlbGVjdGVkU3RhdGUnKTtcblxuICAgICAgICAgICAgICAgIGx0Y1ZNLnVuc2VsZWN0ID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIC8vIFVuc2VsZWN0IHN0YXRlXG4gICAgICAgICAgICAgICAgJCgnI3VzYS1tYXAnKS50cmlnZ2VyKCdzdGF0ZUNsaWNrJywgc3RhdGVDb29raWUpO1xuICAgICAgICAgICAgICAgIGx0Y1ZNLnVwZGF0ZVNlbGVjdGVkU3RhdGUodGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEhpZGUgc3RhdGUgc2VsZWN0b3IgbW9kYWxcbiAgICAgICAgbHRjVk0uY2xvc2VQb3B1cCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbHRjVk0uc2hvd01vZGFsID0gZmFsc2U7XG4gICAgICAgICAgICBzaG93TWFwKGx0Y1ZNLnNob3dNb2RhbCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gRXZlbnQgbGlzdGVuZXJcbiAgICAgICAgJHNjb3BlLiRvbignc2VsZWN0ZWRTdGF0ZScsIGZ1bmN0aW9uKGV2ZW50LCBzdGF0ZSkge1xuICAgICAgICAgICAgbHRjVk0udXBkYXRlU2VsZWN0ZWRTdGF0ZShzdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgIH1dKTtcbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gICAgbGZnYXBwLmNvbnRyb2xsZXIoJ2xpZmVFeHBlY3RhbmN5Q2FsY0NvbnRybCcsIFsnJHNjb3BlJywgJyR0aW1lb3V0JywgJ2xpZmVFeHBlY3RhbmN5Q2FsY1NlcnZpY2UnLFxyXG4gICAgICAgIGxpZmVFeHBlY3RhbmN5Q2FsY0NvbnRybF0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIGxpZmVFeHBlY3RhbmN5Q2FsY0NvbnRybCgkc2NvcGUsICR0aW1lb3V0LCBsaWZlRXhwZWN0YW5jeUNhbGNTZXJ2aWNlKSB7XHJcbiAgICAgICAgdmFyIGxpZmVDYWxjVk0gPSB0aGlzO1xyXG5cclxuICAgICAgICBsaWZlQ2FsY1ZNLmRpc3BsYXlFcnJvciA9IGZhbHNlO1xyXG5cclxuICAgICAgICBsaWZlQ2FsY1ZNLmluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gU2V0dGluZyB1cCB0aGUgZGVmYXVsdCBvcHRpb25zIGZvciBjdXN0b20gc2xpZGVyXHJcbiAgICAgICAgICAgICRzY29wZS5jdXN0b21TbGlkZXIgPSB7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuY3VzdG9tU2xpZGVyLm9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICAnbWluUmFuZ2UnIDogNDUsXHJcbiAgICAgICAgICAgICAgICAnbWF4UmFuZ2UnIDogMCxcclxuICAgICAgICAgICAgICAgICdtaW5WYWx1ZScgOiAwLFxyXG4gICAgICAgICAgICAgICAgJ21heFZhbHVlJyA6IDEwMCxcclxuICAgICAgICAgICAgICAgICd2YWx1ZScgICAgOiAwLFxyXG4gICAgICAgICAgICAgICAgJ3ZhbHVlVGV4dCc6ICdZb3VyIGxpZmUgZXhwZWN0YW5jeScsXHJcbiAgICAgICAgICAgICAgICAncmFuZ2VUZXh0JzogJ0xpa2VseSBsaWZlIGV4cGVjdGFuY3kgYWdlIHJhbmdlJ1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlcXVlc3RCb2R5ID0ge1xyXG5cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIEdldHRpbmcgdGhlIHNlc3Npb24gc3RvcmFnZSByZXF1ZXN0IGJvZHlcclxuXHJcbiAgICAgICAgICAgIHJlcXVlc3RCb2R5ID0gSlNPTi5wYXJzZShzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdsaWZlRXhwZWN0YW5jeVNlcnZpY2VEYXRhJykpO1xyXG4gICAgICAgICAgICBpZiAocmVxdWVzdEJvZHkgIT09IHVuZGVmaW5lZCAmJiByZXF1ZXN0Qm9keSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlcXVlc3RCb2R5LmFnZSAhPT0gdW5kZWZpbmVkICYmIHJlcXVlc3RCb2R5LmFnZSAhPT0gbnVsbCAmJiByZXF1ZXN0Qm9keS5nZW5kZXJcclxuICAgICAgICAgICAgICAgICAgICAhPT0gdW5kZWZpbmVkICYmIHJlcXVlc3RCb2R5LmdlbmRlciAhPT0gbnVsbCAmJiByZXF1ZXN0Qm9keS5tb3J0YWxpdHkgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgICYmIHJlcXVlc3RCb2R5Lm1vcnRhbGl0eSAhPT0gbnVsbCAmJiByZXF1ZXN0Qm9keS5zbW9raW5nICE9PSB1bmRlZmluZWQgJiYgcmVxdWVzdEJvZHkuc21va2luZ1xyXG4gICAgICAgICAgICAgICAgICAgICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0Q2FsTGlmZUV4cGVjdGFuY3kocmVxdWVzdEJvZHkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsaWZlQ2FsY1ZNLmRpc3BsYXlFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsaWZlQ2FsY1ZNLmRpc3BsYXlFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRDYWxMaWZlRXhwZWN0YW5jeShyZXF1ZXN0Qm9keSkge1xyXG4gICAgICAgICAgICBsaWZlRXhwZWN0YW5jeUNhbGNTZXJ2aWNlLmxpZmVFeHBlY3RhbmN5Q2FsY1NlcnZpY2UoJHNjb3BlLCByZXF1ZXN0Qm9keSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhICE9PSB1bmRlZmluZWQgJiYgcmVzcG9uc2UuZGF0YSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmxpZmVFeHBlY3RhbmN5ICE9PSB1bmRlZmluZWQgJiYgcmVzcG9uc2UuZGF0YS5saWZlRXhwZWN0YW5jeSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaWZlQ2FsY1ZNLmNhbGN1bGF0ZWREYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmN1c3RvbVNsaWRlci5vcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21pblJhbmdlJyA6IDQ1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21heFJhbmdlJyA6IDEwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtaW5WYWx1ZScgOiBsaWZlQ2FsY1ZNLmNhbGN1bGF0ZWREYXRhLmxpZmVFeHBlY3RhbmN5LmxlTG93ZXJBZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWF4VmFsdWUnIDogbGlmZUNhbGNWTS5jYWxjdWxhdGVkRGF0YS5saWZlRXhwZWN0YW5jeS5sZVVwcGVyQWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJyAgICA6IE1hdGgucm91bmQobGlmZUNhbGNWTS5jYWxjdWxhdGVkRGF0YS5saWZlRXhwZWN0YW5jeS5sZUFnZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndmFsdWVUZXh0JzogJ1lvdXIgbGlmZSBleHBlY3RhbmN5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyYW5nZVRleHQnOiAnTGlrZWx5IGxpZmUgZXhwZWN0YW5jeSBhZ2UgcmFuZ2UnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlmZUNhbGNWTS5kaXNwbGF5RXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlmZUNhbGNWTS5kaXNwbGF5RXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7IiwiLyogZ2xvYmFsIGx0Y1N0YXRlU2VsZWN0b3JzTGluayBjdXJyZW50UGFnZUlkICovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnbGZnYXBwJykuY29udHJvbGxlcignbHRjU3RhdGVTZWxlY3RvckxpbmtDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCRzY29wZSwgJHJvb3RTY29wZSkge1xyXG4gICAgICAgIHZhciBsdGNMaW5rVk0gPSB0aGlzO1xyXG5cclxuICAgICAgICBsdGNMaW5rVk0uc2hvd01vZGFsID0gZmFsc2U7XHJcbiAgICAgICAgbHRjTGlua1ZNLnN0YXRlc05BID0gWydQdWVydG8gUmljbycsICdWaXJnaW4gSXNsYW5kcyddO1xyXG5cclxuICAgICAgICBsdGNMaW5rVk0uaW5pdCA9IGZ1bmN0aW9uKG1hcElkKSB7XHJcbiAgICAgICAgICAgIGx0Y0xpbmtWTS5tYXBJZCA9IG1hcElkO1xyXG5cclxuICAgICAgICAgICAgbHRjTGlua1ZNLmx0Y1N0YXRlU2VsZWN0b3JzTGluayA9IGx0Y1N0YXRlU2VsZWN0b3JzTGlua1ttYXBJZF07XHJcblxyXG4gICAgICAgICAgICAvLyBjaGVjayBzZWxlY3RlZCBzdGF0ZVxyXG4gICAgICAgICAgICB2YXIgc3RhdGVDb29raWUgPSBnZXRDb29raWUoJ1NlbGVjdGVkU3RhdGUnKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemluZyBzdGF0ZSBzZWxlY3RvciBtYXBcclxuICAgICAgICAgICAgaWYgKCQoJyN1c2EtbWFwJyArIGx0Y0xpbmtWTS5tYXBJZCkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgJCgnI3VzYS1tYXAnICsgbHRjTGlua1ZNLm1hcElkKS5MR01hcCh7XHJcbiAgICAgICAgICAgICAgICAgICAgJ21hcCc6ICd1c2EnLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyAnbWFwRm9sZGVyJzogJy4uLy4uLy4uLy4uL3ZlbmRvci9qc21hcHMvbWFwcy8nLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAnbWFwRm9sZGVyJzogJy9zdGF0aWMvd2NzL2xmZy9zY3JpcHRzL2pzbWFwcy1jb25maWcvJyxcclxuICAgICAgICAgICAgICAgICAgICAnb25SZWFkeScgIDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZUNvb2tpZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlQ29va2llICE9PSBudWxsICYmIHN0YXRlQ29va2llICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGx0Y0xpbmtWTS5zdGF0ZXNOQS5pbmRleE9mKHN0YXRlQ29va2llKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjdXNhLW1hcCcpLnRyaWdnZXIoJ3N0YXRlQ2xpY2snLCBzdGF0ZUNvb2tpZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGx0Y0xpbmtWTS51cGRhdGVTZWxlY3RlZFN0YXRlKHN0YXRlQ29va2llKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgJ29uU3RhdGVDbGljayc6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGx0Y0xpbmtWTS51bnNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnIycgKyAkKHRoaXMpWzBdWzBdLmlkKS5jc3MoJ2ZpbGwnLCAnI2YyZjJmMicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbHRjTGlua1ZNLnVuc2VsZWN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsdGNMaW5rVk0udXBkYXRlU2VsZWN0ZWRTdGF0ZShkYXRhLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBsdGNMaW5rVk0udXBkYXRlU2VsZWN0ZWRTdGF0ZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XHJcbiAgICAgICAgICAgIHNldENvb2tpZSgnU2VsZWN0ZWRTdGF0ZScsIHN0YXRlLCAzNjUpO1xyXG4gICAgICAgICAgICBsdGNMaW5rVk0uc2VsZWN0ZWRTdGF0ZVRleHQgPSAnQ2hhbmdlJztcclxuICAgICAgICAgICAgbHRjTGlua1ZNLnNlbGVjdGVkU3RhdGUgPSBzdGF0ZTtcclxuICAgICAgICAgICAgbHRjTGlua1ZNLnNob3dNb2RhbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsdGNMaW5rVk0uZGlzYWJsZU1vZGFsQ2xvc2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgc2hvd01hcChsdGNMaW5rVk0uc2hvd01vZGFsKTtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuc3RhdGUtc2VsZWN0b3ItZHJvcGRvd24gLmN1c3RvbS1zZWxlY3Rib3gnKS5odG1sKHN0YXRlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChsdGNMaW5rVk0ubGlua1NlbGVjdCAmJiBsdGNMaW5rVk0ucGFyZW50UGFnZUlkID09PSBjdXJyZW50UGFnZUlkKSB7XHJcbiAgICAgICAgICAgICAgICBsdGNMaW5rVk0ubGlua1NlbGVjdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgbHRjTGlua1ZNLnNlbGVjdExpbmsobHRjTGlua1ZNLnNlbGVjdGVkTGluayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdzZWxlY3RlZFN0YXRlJywgc3RhdGUpO1xyXG4gICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICAgIGx0Y0xpbmtWTS5zZWxlY3RMaW5rKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gTGluayBjbGljayBldmVudFxyXG4gICAgICAgIGx0Y0xpbmtWTS5zZWxlY3RMaW5rID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZUNvb2tpZSA9IGdldENvb2tpZSgnU2VsZWN0ZWRTdGF0ZScpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGx0Y0xpbmtWTS5sdGNTdGF0ZVNlbGVjdG9yc0xpbmsgIT09IHVuZGVmaW5lZCAmJiBsdGNMaW5rVk0ubHRjU3RhdGVTZWxlY3RvcnNMaW5rICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGVDb29raWUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZUNvb2tpZSAhPT0gbnVsbCAmJiBzdGF0ZUNvb2tpZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBsdGNMaW5rVk0ubHRjU3RhdGVTZWxlY3RvcnNMaW5rLk9wdGlvbkFzc29jLmZvckVhY2goZnVuY3Rpb24oc3RhdGVTZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGVTZWxlY3Rvci5EaXNwbGF5VmFsdWUudHJpbSgpID09PSBzdGF0ZUNvb2tpZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlU2VsZWN0b3IuUGFnZUFzc29jICYmIHN0YXRlU2VsZWN0b3IuUGFnZUFzc29jLl9saW5rXykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gc3RhdGVTZWxlY3Rvci5QYWdlQXNzb2MuX2xpbmtfO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGx0Y0xpbmtWTS5zaG93TW9kYWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3dNYXAobHRjTGlua1ZNLnNob3dNb2RhbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzaG93TWFwKGZsYWcpIHtcclxuICAgICAgICAgICAgaWYgKGZsYWcpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnYm9keScpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93JzogJ2hpZGRlbicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzogJ2ZpeGVkJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGVDb29raWUgPSBnZXRDb29raWUoJ1NlbGVjdGVkU3RhdGUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGVDb29raWUgPT09IHVuZGVmaW5lZCB8fCBzdGF0ZUNvb2tpZSA9PT0gbnVsbCB8fCBzdGF0ZUNvb2tpZSA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5jdXN0b20tc2VsZWN0Ym94JykuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjbHRjLW1hcC1jbG9zZScpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2JvZHknKS5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdyc6ICdhdXRvJyxcclxuICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOiAnc3RhdGljJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENoYW5nZSBzdGF0ZSBjbGljayBldmVudFxyXG4gICAgICAgIGx0Y0xpbmtWTS5jaGFuZ2VTdGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBsdGNMaW5rVk0uc2hvd01vZGFsID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2hvd01hcChsdGNMaW5rVk0uc2hvd01vZGFsKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBTdGF0ZSBzZWxlY3RvciBkcm9wZG93biBjbGljayBldmVudFxyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLnN0YXRlLXNlbGVjdG9yLWRyb3Bkb3duIC5jdXN0b20tc2VsZWN0Ym94LWxpc3QtY29udCBsaScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgdGV4dCA9IGFuZ3VsYXIuZWxlbWVudCh0aGlzKS50ZXh0KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAobHRjTGlua1ZNLnN0YXRlc05BLmluZGV4T2YodGV4dCkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcjdXNhLW1hcCcgKyBsdGNMaW5rVk0ubWFwSWQpLnRyaWdnZXIoJ3N0YXRlQ2xpY2snLCB0ZXh0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdGF0ZUNvb2tpZSA9IGdldENvb2tpZSgnU2VsZWN0ZWRTdGF0ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIGx0Y0xpbmtWTS51bnNlbGVjdCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVW5zZWxlY3Qgc3RhdGVcclxuICAgICAgICAgICAgICAgICQoJyN1c2EtbWFwJyArIGx0Y0xpbmtWTS5tYXBJZCkudHJpZ2dlcignc3RhdGVDbGljaycsIHN0YXRlQ29va2llKTtcclxuICAgICAgICAgICAgICAgIGx0Y0xpbmtWTS51cGRhdGVTZWxlY3RlZFN0YXRlKHRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEhpZGUgc3RhdGUgc2VsZWN0b3IgbW9kYWxcclxuICAgICAgICBsdGNMaW5rVk0uY2xvc2VQb3B1cCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBsdGNMaW5rVk0uc2hvd01vZGFsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNob3dNYXAobHRjTGlua1ZNLnNob3dNb2RhbCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxufSkoKTsiLCIndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbigpIHtcbiAgICBhbmd1bGFyLm1vZHVsZSgnbGZnYXBwJykuY29udHJvbGxlcignbXVsdGlTbGlkZUNvbnRyb2xsZXInLCBbZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtdWx0aVNsaWRlVk0gPSB0aGlzO1xuXG4gICAgICAgIC8vIEluaXQgZnVuY3Rpb25cbiAgICAgICAgbXVsdGlTbGlkZVZNLm11bHRpU2xpZGVJbml0ID0gZnVuY3Rpb24obm9PZlNsaWRlcykge1xuICAgICAgICAgICAgbXVsdGlTbGlkZVZNLm5vT2ZTbGlkZXMgPSBub09mU2xpZGVzO1xuICAgICAgICAgICAgbXVsdGlTbGlkZVZNLmN1cnJTbGlkZSA9IDE7XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlQW5hbHl0aWNzKHR5cGUsIHNsaWRlKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAnZXZlbnRfYWN0aW9uJzogJ3Rvb2wnLFxuICAgICAgICAgICAgICAgICdldmVudF9uYW1lJyAgOiB0eXBlLFxuICAgICAgICAgICAgICAgICdldmVudF90eXBlJyAgOiB1dGFnLmRhdGEuZXZlbnRfdHlwZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZGF0YS5ldmVudF9zdGF0dXMgPSAnU3RlcCAnICsgc2xpZGU7XG4gICAgICAgICAgICB1dGFnLmxpbmsoZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBtdWx0aVNsaWRlVk0ubmV4dFNsaWRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodXRhZykge1xuICAgICAgICAgICAgICAgIChtdWx0aVNsaWRlVk0uY3VyclNsaWRlICE9PSBtdWx0aVNsaWRlVk0ubm9PZlNsaWRlcykgPyAobXVsdGlTbGlkZVZNLmN1cnJTbGlkZVxuICAgICAgICAgICAgICAgICAgICA9IG11bHRpU2xpZGVWTS5jdXJyU2xpZGUgKyAxKSA6IChtdWx0aVNsaWRlVk0uY3VyclNsaWRlID0gMSk7XG4gICAgICAgICAgICAgICAgdXBkYXRlQW5hbHl0aWNzKCdOZXh0JywgbXVsdGlTbGlkZVZNLmN1cnJTbGlkZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIChtdWx0aVNsaWRlVk0uY3VyclNsaWRlICE9PSBtdWx0aVNsaWRlVk0ubm9PZlNsaWRlcykgPyAobXVsdGlTbGlkZVZNLmN1cnJTbGlkZVxuICAgICAgICAgICAgICAgICAgICA9IG11bHRpU2xpZGVWTS5jdXJyU2xpZGUgKyAxKSA6IChtdWx0aVNsaWRlVk0uY3VyclNsaWRlID0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgbXVsdGlTbGlkZVZNLnByZXZTbGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHV0YWcpIHtcbiAgICAgICAgICAgICAgICAobXVsdGlTbGlkZVZNLmN1cnJTbGlkZSAhPT0gMSkgPyAobXVsdGlTbGlkZVZNLmN1cnJTbGlkZSA9IG11bHRpU2xpZGVWTS5jdXJyU2xpZGVcbiAgICAgICAgICAgICAgICAgICAgLSAxKSA6IChtdWx0aVNsaWRlVk0uY3VyclNsaWRlID0gbXVsdGlTbGlkZVZNLm5vT2ZTbGlkZXMpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZUFuYWx5dGljcygnQmFjaycsIG11bHRpU2xpZGVWTS5jdXJyU2xpZGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAobXVsdGlTbGlkZVZNLmN1cnJTbGlkZSAhPT0gMSkgPyAobXVsdGlTbGlkZVZNLmN1cnJTbGlkZSA9IG11bHRpU2xpZGVWTS5jdXJyU2xpZGVcbiAgICAgICAgICAgICAgICAgICAgLSAxKSA6IChtdWx0aVNsaWRlVk0uY3VyclNsaWRlID0gbXVsdGlTbGlkZVZNLm5vT2ZTbGlkZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIG11bHRpU2xpZGVWTS5lbGxpcHNlU2xpZGUgPSBmdW5jdGlvbihzbGlkZSkge1xuICAgICAgICAgICAgaWYgKHV0YWcpIHtcbiAgICAgICAgICAgICAgICBtdWx0aVNsaWRlVk0uY3VyclNsaWRlID0gc2xpZGU7XG4gICAgICAgICAgICAgICAgdXBkYXRlQW5hbHl0aWNzKCdFbGxpcHNlJywgbXVsdGlTbGlkZVZNLmN1cnJTbGlkZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG11bHRpU2xpZGVWTS5jdXJyU2xpZGUgPSBzbGlkZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XSk7XG59KSgpOyIsIi8qIGdsb2JhbCBxRXZlbnRUeXBlLCBkZWZhdWx0RERPcHRpb25zLCBub09mU3RlcHMsIHNsaWRlcnMsIGZvcm1VUkxSZWRpcmVjdCAqL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2xmZ2FwcCcpLmNvbnRyb2xsZXIoJ3F1ZXN0aW9ubmFpcmVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckcGFyc2UnLCAnJGh0dHAnLFxyXG4gICAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJHJvb3RTY29wZSwgJHBhcnNlLCAkaHR0cCkge1xyXG4gICAgICAgICAgICB2YXIgcGFyYW1TdGF0ZTtcclxuICAgICAgICAgICAgdmFyIGZpbmFsUG9pbnRzID0gMTtcclxuICAgICAgICAgICAgdmFyIGJtaVBvaW50ID0gMDtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5xdWVzdGlvbm5haXJlID0ge1xyXG5cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHNjb3BlLnF1ZXN0aW9ubmFpcmUuQk1JID0ge1xyXG5cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHNjb3BlLnF1ZXN0aW9ubmFpcmUuc2VydmljZURhdGEgPSB7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUucXVlc3Rpb25uYWlyZS5xdWVzdGlvblBvaW50cyA9IHtcclxuXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5xdWVzdGlvbm5haXJlLmVuZ2FnZURhdGEgPSB7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUucXVlc3Rpb25uYWlyZS5zbGlkZXJzID0ge1xyXG5cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHNjb3BlLnF1ZXN0aW9ubmFpcmUudmFsaWRhdGlvbiA9IHtcclxuXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5xdWVzdGlvbm5haXJlLm5vT2ZTdGVwcyA9IG5vT2ZTdGVwcztcclxuICAgICAgICAgICAgJHNjb3BlLnF1ZXN0aW9ubmFpcmUuY3VyclN0ZXAgPSAxO1xyXG5cclxuICAgICAgICAgICAgJChkb2N1bWVudCkub24oJ3Jlc3BvbnNpdmU6c3RhdGVjaGFuZ2VkJywgZnVuY3Rpb24oZSwgcGFyYW0pIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtU3RhdGUgPSBwYXJhbTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBjYWxjdWxhdGVQb2ludHMoKSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLnF1ZXN0aW9ubmFpcmUucXVlc3Rpb25Qb2ludHMsIGZ1bmN0aW9uKHBvaW50cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsUG9pbnRzID0gZmluYWxQb2ludHMgKyBwYXJzZUZsb2F0KHBvaW50cyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYm1pUG9pbnQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmluYWxQb2ludHMgPSBmaW5hbFBvaW50cyArIGJtaVBvaW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGZpbmFsUG9pbnRzIDwgMC43NSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsUG9pbnRzID0gMC43NTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmluYWxQb2ludHMgPiA1LjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmluYWxQb2ludHMgPSA1LjAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFJvdW5kIHVwIHRoZSBmaW5hbCB2YWx1ZS5cclxuICAgICAgICAgICAgICAgIGZpbmFsUG9pbnRzID0gZmluYWxQb2ludHMudG9GaXhlZCgyKTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVNlcnZpY2UoJ21vcnRhbGl0eScsIGZpbmFsUG9pbnRzLCAnJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZUJNSVBvaW50cygpIHtcclxuICAgICAgICAgICAgICAgIHZhciBibWkgPSBwYXJzZUZsb2F0KCRzY29wZS5xdWVzdGlvbm5haXJlLkJNSS5ibWkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChibWkgPCAxOC4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm1pUG9pbnQgPSAwLjI1O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChibWkgPiAxOC4wICYmIGJtaSA8IDI5LjkpIHtcclxuICAgICAgICAgICAgICAgICAgICBibWlQb2ludCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJtaSA+IDMwLjAgJiYgYm1pIDwgNDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJtaVBvaW50ID0gMC4yNTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYm1pID4gNDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJtaVBvaW50ID0gMC41MDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gY2FsY3VsYXRlQk1JKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5xdWVzdGlvbm5haXJlLkJNSS5oZWlnaHQgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUucXVlc3Rpb25uYWlyZS5CTUkuaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgIT09IG51bGwgJiYgJHNjb3BlLnF1ZXN0aW9ubmFpcmUuQk1JLndlaWdodCAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5xdWVzdGlvbm5haXJlLkJNSS53ZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5xdWVzdGlvbm5haXJlLkJNSS5ibWkgPSAocGFyc2VGbG9hdCgkc2NvcGUucXVlc3Rpb25uYWlyZS5CTUkud2VpZ2h0ICogMC40NSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8gTWF0aC5wb3coKHBhcnNlRmxvYXQoJHNjb3BlLnF1ZXN0aW9ubmFpcmUuQk1JLmhlaWdodCAqIDAuMDI1KSksIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZUJNSVBvaW50cygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVFbmdhZ2UobmFtZSwgdGV4dCkge1xyXG4gICAgICAgICAgICAgICAgLy8gV3JpdGUgaXQgdG8gRW5nYWdlIG9ubHkgd2hlbiB2aXNpdG9yIGF0dHJpYnV0ZSBpcyBhdmFpbGFibGVcclxuICAgICAgICAgICAgICAgIGlmIChuYW1lICE9PSB1bmRlZmluZWQgJiYgbmFtZSAhPT0gbnVsbCAmJiBuYW1lICE9PSAnbnVsbCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucXVlc3Rpb25uYWlyZS5lbmdhZ2VEYXRhW25hbWVdID0gdGV4dDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlUG9pbnRzKG5hbWUsIHBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQgIT09IHVuZGVmaW5lZCAmJiBwb2ludCAhPT0gbnVsbCAmJiBwb2ludCAhPT0gJ251bGwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnF1ZXN0aW9ubmFpcmUucXVlc3Rpb25Qb2ludHNbbmFtZV0gPSBwb2ludDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlICRzY29wZS5xdWVzdGlvbm5haXJlLnF1ZXN0aW9uUG9pbnRzW25hbWVdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVTZXJ2aWNlKHR5cGUsIHZhbHVlLCB0ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZSAhPT0gdW5kZWZpbmVkICYmIHR5cGUgIT09IG51bGwgJiYgdHlwZSAhPT0gJ251bGwnICYmIHR5cGUudG9Mb2NhbGVMb3dlckNhc2UoKVxyXG4gICAgICAgICAgICAgICAgICAgICE9PSAnaGVpZ2h0JyAmJiB0eXBlLnRvTG9jYWxlTG93ZXJDYXNlKCkgIT09ICd3ZWlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09ICdudWxsJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucXVlc3Rpb25uYWlyZS5zZXJ2aWNlRGF0YVt0eXBlXSA9ICcnICsgdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnF1ZXN0aW9ubmFpcmUuc2VydmljZURhdGFbdHlwZV0gPSAnJyArIHRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVBbmFseXRpY3MoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB1dGFnICE9PSAndW5kZWZpbmVkJyAmJiB1dGFnICE9PSB1bmRlZmluZWQgJiYgdXRhZyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcUV2ZW50VHlwZSAhPT0gJ3VuZGVmaW5lZCcgJiYgcUV2ZW50VHlwZSAhPT0gdW5kZWZpbmVkICYmIHFFdmVudFR5cGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5ldmVudF90eXBlID0gcUV2ZW50VHlwZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmV2ZW50X3R5cGUgPSAnTmVlZHMgQW5hbHlzaXMnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB1dGFnLmxpbmsoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRzY29wZS5xdWVzdGlvbm5haXJlLmluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBmb3JtIHNlbGVjdGlvblxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3FGb3JtJykucmVzZXQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDbGVhciBhbGwgaGlkZGVuIGlucHV0IHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcucXVlc3Rpb24tbXVsdGktc2VsZWN0JykuZmluZCgnW3R5cGU9aGlkZGVuXScpLnZhbCgnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU2V0IHVwIGRlZmF1bHQgZHJvcGRvd24gdmFsdWVzXHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdERET3B0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZGVmYXVsdERET3B0aW9ucywgZnVuY3Rpb24oZGF0YSwgY2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc3BsYXkgdGhlIGRlZmF1bHQgb3B0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI3RleHRfJyArIGRhdGEuY2lkKS50ZXh0KGRhdGEudGV4dCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBFbmdhZ2UgRGF0YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVFbmdhZ2UoZGF0YS52aXNpdG9yQXR0ciwgZGF0YS50ZXh0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBvaW50cyBDYWxjdWxhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVQb2ludHMoY2lkLCBkYXRhLnBvaW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlYnNlcnZpY2UgRGF0YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVTZXJ2aWNlKGRhdGEudHlwZSwgZGF0YS52YWx1ZSwgZGF0YS50ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IG5vT2ZTdGVwczsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ZXAgPSBhbmd1bGFyLmVsZW1lbnQoJyNzdGVwJyArIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3RhbFF0bnMgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNpbmdsZVNlbGVjdFF0bnMgPSBzdGVwLmZpbmQoJy5xdWVzdGlvbi1zaW5nbGUtc2VsZWN0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc1NTID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzaW5nbGVTZWxlY3RRdG5zLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNTUyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaWQgPSBhbmd1bGFyLmVsZW1lbnQodmFsdWUpLmRhdGEoJ2NpZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxRdG5zW2NpZF0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbXVsdGlTZWxlY3RRdG5zID0gc3RlcC5maW5kKCcucXVlc3Rpb24tbXVsdGktc2VsZWN0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc01TID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChtdWx0aVNlbGVjdFF0bnMsIGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc01TID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNpZCA9IGFuZ3VsYXIuZWxlbWVudCh2YWx1ZSkuZGF0YSgnY2lkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFF0bnNbY2lkXSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNTUyB8fCBoYXNNUykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucXVlc3Rpb25uYWlyZS52YWxpZGF0aW9uWydzdGVwJyArIGldID0gdG90YWxRdG5zO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucXVlc3Rpb25uYWlyZS52YWxpZGF0aW9uLnN0ZXAxICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNuZXh0QnRuJykuYWRkQ2xhc3MoJ2Rpc2FibGUnKTtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNmaW5pc2hCdG4nKS5hZGRDbGFzcygnZGlzYWJsZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgZm9yIHNsaWRlciBvcHRpb25zXHJcbiAgICAgICAgICAgICAgICAvLyBcInNsaWRlcnNcIiBnbG9iYWwgdmFyaWFibGUgY3JlYXRlZCBieSBRdWVzdGlvblNsaWRlciBvciBRdWVzdGlvbk51bWVyaWNTbGlkZXIgdGVtcGxhdGVcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2xpZGVycyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc2xpZGVycywgZnVuY3Rpb24oc2xpZGVyR2xvYmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzbGlkZXIgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyLm9wdGlvbnMgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyLm9wdGlvbnMub25DaGFuZ2UgPSBmdW5jdGlvbihpZCwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdhdGhlcmluZyBkYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZXJzW2lkXS50eXBlICE9PSB1bmRlZmluZWQgJiYgc2xpZGVyc1tpZF0udHlwZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSBzbGlkZXJzW2lkXS50eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuZ2FnZSBEYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVFbmdhZ2Uoc2xpZGVyc1tpZF0udmlzaXRvckF0dHIsIHZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNsaWRlcnNbaWRdLmlzTnVtZXJpYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb2ludCA9IHNsaWRlcnNbaWRdLm9wdGlvblBvaW50c1t2YWx1ZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBvaW50cyBDYWxjdWxhdGlvblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVQb2ludHMobmFtZSwgcG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlICE9PSB1bmRlZmluZWQgJiYgdHlwZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09ICdoZWlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5xdWVzdGlvbm5haXJlLkJNSS5oZWlnaHQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUudG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gJ3dlaWdodCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnF1ZXN0aW9ubmFpcmUuQk1JLndlaWdodCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxjdWxhdGVCTUkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZWJzZXJ2aWNlIERhdGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVNlcnZpY2UodHlwZSwgdmFsdWUsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyLm9wdGlvbnMudHJhbnNsYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXR0aW5nIGNvbW1vbiBwcm9wZXJ0aWVzIGZvciBib3RoIHNsaWRlciAmIG51bWVyaWMgc2xpZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlci5vcHRpb25zLmlkID0gc2xpZGVyR2xvYmFsLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2xpZGVyR2xvYmFsLmlzTnVtZXJpYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyLm9wdGlvbnMuc2hvd1RpY2tzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXIub3B0aW9ucy5mbG9vciA9IHBhcnNlRmxvYXQoc2xpZGVyR2xvYmFsLnN0YXJ0VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyLm9wdGlvbnMuY2VpbCA9IHBhcnNlRmxvYXQoc2xpZGVyR2xvYmFsLmVuZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlci5vcHRpb25zLnN0ZXAgPSBwYXJzZUZsb2F0KHNsaWRlckdsb2JhbC5pbmNyZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyLm9wdGlvbnMucHJlY2lzaW9uID0gMjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgc3RhcnQgdmFsdWUgYXMgZGVmYXVsdCB2YWx1ZSBpZiB0aGVyZSBpcyBubyBkZWZhdWx0IHZhbHVlIHByb3ZpZGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2xpZGVyR2xvYmFsLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgc2xpZGVyR2xvYmFsLnZhbHVlICE9PSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgc2xpZGVyR2xvYmFsLnZhbHVlICE9PSAnbnVsbCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXIudmFsdWUgPSBwYXJzZUZsb2F0KHNsaWRlckdsb2JhbC52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlci52YWx1ZSA9IHBhcnNlRmxvYXQoc2xpZGVyR2xvYmFsLnN0YXJ0VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZXJHbG9iYWwudHlwZSAhPT0gdW5kZWZpbmVkICYmIHNsaWRlckdsb2JhbC50eXBlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlckdsb2JhbC50eXBlLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09ICdoZWlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5xdWVzdGlvbm5haXJlLkJNSS5oZWlnaHQgPSBzbGlkZXIudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZXJHbG9iYWwudHlwZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSAnd2VpZ2h0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucXVlc3Rpb25uYWlyZS5CTUkud2VpZ2h0ID0gc2xpZGVyLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZUJNSSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyLm9wdGlvbnMuc2hvd1RpY2tzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlci5vcHRpb25zLnN0ZXBzQXJyYXkgPSBzbGlkZXJHbG9iYWwuc3RlcHNBcnJheTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlci52YWx1ZSA9IHNsaWRlckdsb2JhbC52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgcG9pbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVQb2ludHMoc2xpZGVyR2xvYmFsLmlkLCBzbGlkZXJHbG9iYWwub3B0aW9uUG9pbnRzW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlckdsb2JhbC52YWx1ZV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZWJzZXJ2aWNlIERhdGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlU2VydmljZShzbGlkZXJHbG9iYWwudHlwZSwgc2xpZGVyLnZhbHVlLCBudWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuZ2FnZSBEYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUVuZ2FnZShzbGlkZXJHbG9iYWwudmlzaXRvckF0dHIsIHNsaWRlci52YWx1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucXVlc3Rpb25uYWlyZS5zbGlkZXJzW3NsaWRlckdsb2JhbC5pZF0gPSBzbGlkZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCdidXR0b25WYWxpZGF0aW9uJywgZnVuY3Rpb24oZXZlbnQsIGlucHV0T2JqKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnF1ZXN0aW9ubmFpcmUudmFsaWRhdGlvblsnc3RlcCcgKyAkc2NvcGUucXVlc3Rpb25uYWlyZS5jdXJyU3RlcF1cclxuICAgICAgICAgICAgICAgICAgICAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ZXAgPSAkc2NvcGUucXVlc3Rpb25uYWlyZS52YWxpZGF0aW9uWydzdGVwJyArICRzY29wZS5xdWVzdGlvbm5haXJlLmN1cnJTdGVwXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0T2JqICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcFtpbnB1dE9iai5uYW1lXSA9IGlucHV0T2JqLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZGF0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc3RlcCwgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZGF0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoKCRzY29wZS5xdWVzdGlvbm5haXJlLm5vT2ZTdGVwcyA9PT0gJHNjb3BlLnF1ZXN0aW9ubmFpcmUuY3VyclN0ZXApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIGlzVmFsaWRhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2ZpbmlzaEJ0bicpLnJlbW92ZUNsYXNzKCdkaXNhYmxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjZmluaXNoQnRuJykuYWRkQ2xhc3MoJ2Rpc2FibGUnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoJHNjb3BlLnF1ZXN0aW9ubmFpcmUubm9PZlN0ZXBzICE9PSAkc2NvcGUucXVlc3Rpb25uYWlyZS5jdXJyU3RlcClcclxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgaXNWYWxpZGF0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjbmV4dEJ0bicpLnJlbW92ZUNsYXNzKCdkaXNhYmxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjbmV4dEJ0bicpLmFkZENsYXNzKCdkaXNhYmxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUucXVlc3Rpb25uYWlyZS5ub09mU3RlcHMgPT09ICRzY29wZS5xdWVzdGlvbm5haXJlLmN1cnJTdGVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjZmluaXNoQnRuJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGUnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjbmV4dEJ0bicpLnJlbW92ZUNsYXNzKCdkaXNhYmxlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLnF1ZXN0aW9ubmFpcmUuZm9ybVN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY2FsY3VsYXRlUG9pbnRzKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAnZXZlbnRfYWN0aW9uJzogJ3Rvb2wnLFxyXG4gICAgICAgICAgICAgICAgICAgICdldmVudF9uYW1lJyAgOiAnRmluaXNoJyxcclxuICAgICAgICAgICAgICAgICAgICAnZXZlbnRfdmVyc2lvbic6ICcyJyxcclxuICAgICAgICAgICAgICAgICAgICAnZXZlbnRfc3RhdHVzJzogJ2NvbXBsZXRlJ1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVBbmFseXRpY3MoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuZWxlbWVudCgnI2ZpbmlzaEJ0bicpLmhhc0NsYXNzKCdkaXNhYmxlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBzdG9yZSBzZXJ2aWNlIGRhdGEgaW4gc2Vzc2lvbiBzdG9yYWdlIHRvIGFjY2VzcyBpdCBmcm9tIHJlc3VsdHMgcGFnZS5cclxuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdsaWZlRXhwZWN0YW5jeVNlcnZpY2VEYXRhJywgSlNPTi5zdHJpbmdpZnkoJHNjb3BlLnF1ZXN0aW9ubmFpcmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNlcnZpY2VEYXRhKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmb3JtVVJMID0gYW5ndWxhci5lbGVtZW50KCcjcUZvcm0nKS5hdHRyKCdhY3Rpb24nKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaGFzRW5nYWdlRGF0YSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLnF1ZXN0aW9ubmFpcmUuZW5nYWdlRGF0YSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNFbmdhZ2VEYXRhID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1VUkwuaW5kZXhPZignPycpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybVVSTCA9IGZvcm1VUkwgKyAnJicgKyBrZXkgKyAnPScgKyB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1VUkwgPSBmb3JtVVJMICsgJz8nICsga2V5ICsgJz0nICsgdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtVVJMID0gZm9ybVVSTCArICcmZD1EZXNrdG9wJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsbCBFbmdhZ2Ugb25seSB3aGVuIGRhdGEgaXMgYXZhaWxhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0VuZ2FnZURhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21ldGhvZCc6ICdHRVQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VybCcgICA6IGZvcm1VUkxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2soKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGZvcm1VUkxSZWRpcmVjdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjaygpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZm9ybVVSTFJlZGlyZWN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGZvcm1VUkxSZWRpcmVjdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUucXVlc3Rpb25uYWlyZS5uYXZTdGVwcyA9IGZ1bmN0aW9uKHBhcmFtKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHBhcmFtID09PSAnTmV4dCcgJiYgIWFuZ3VsYXIuZWxlbWVudCgnI25leHRCdG4nKS5oYXNDbGFzcygnZGlzYWJsZScpKSB8fCBwYXJhbVxyXG4gICAgICAgICAgICAgICAgICAgICE9PSAnTmV4dCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnF1ZXN0aW9ubmFpcmUuY3VyclN0ZXAgPj0gMSAmJiAkc2NvcGUucXVlc3Rpb25uYWlyZS5jdXJyU3RlcCA8PSAkc2NvcGUucXVlc3Rpb25uYWlyZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAubm9PZlN0ZXBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI3N0ZXAnICsgJHNjb3BlLnF1ZXN0aW9ubmFpcmUuY3VyclN0ZXApLnJlbW92ZUNsYXNzKCdzaG93Jyk7XHJcblx0XHRcdFx0XHRcdGlmICggYW5ndWxhci5lbGVtZW50KCcjc3RlcC1pbWFnZScgKyAkc2NvcGUucXVlc3Rpb25uYWlyZS5jdXJyU3RlcCkubGVuZ3RoICkge1xyXG5cdFx0XHRcdFx0XHRcdGFuZ3VsYXIuZWxlbWVudCgnI3N0ZXAtaW1hZ2UnICsgJHNjb3BlLnF1ZXN0aW9ubmFpcmUuY3VyclN0ZXApLnJlbW92ZUNsYXNzKCdzaG93Jyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbSA9PT0gJ05leHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNzdGVwLXNwYW4nICsgJHNjb3BlLnF1ZXN0aW9ubmFpcmUuY3VyclN0ZXApLnJlbW92ZUNsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjdXJyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNzdGVwLXNwYW4nICsgJHNjb3BlLnF1ZXN0aW9ubmFpcmUuY3VyclN0ZXApLmFkZENsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwcmV2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucXVlc3Rpb25uYWlyZS5jdXJyU3RlcCA9ICRzY29wZS5xdWVzdGlvbm5haXJlLmN1cnJTdGVwICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI3N0ZXAtc3BhbicgKyAkc2NvcGUucXVlc3Rpb25uYWlyZS5jdXJyU3RlcCkucmVtb3ZlQ2xhc3MoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25leHQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI3N0ZXAtc3BhbicgKyAkc2NvcGUucXVlc3Rpb25uYWlyZS5jdXJyU3RlcCkuYWRkQ2xhc3MoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2N1cnInKTtcdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjc3RlcC1zcGFuJyArICRzY29wZS5xdWVzdGlvbm5haXJlLmN1cnJTdGVwKS5yZW1vdmVDbGFzcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY3VycicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjc3RlcC1zcGFuJyArICRzY29wZS5xdWVzdGlvbm5haXJlLmN1cnJTdGVwKS5hZGRDbGFzcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbmV4dCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnF1ZXN0aW9ubmFpcmUuY3VyclN0ZXAgPSAkc2NvcGUucXVlc3Rpb25uYWlyZS5jdXJyU3RlcCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNzdGVwLXNwYW4nICsgJHNjb3BlLnF1ZXN0aW9ubmFpcmUuY3VyclN0ZXApLnJlbW92ZUNsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwcmV2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNzdGVwLXNwYW4nICsgJHNjb3BlLnF1ZXN0aW9ubmFpcmUuY3VyclN0ZXApLmFkZENsYXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjdXJyJyk7XHRcdFx0XHRcdFx0XHRcdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNzdGVwJyArICRzY29wZS5xdWVzdGlvbm5haXJlLmN1cnJTdGVwKS5hZGRDbGFzcygnc2hvdycpO1xyXG5cdFx0XHRcdFx0XHRpZiAoIGFuZ3VsYXIuZWxlbWVudCgnI3N0ZXAtaW1hZ2UnICsgJHNjb3BlLnF1ZXN0aW9ubmFpcmUuY3VyclN0ZXApLmxlbmd0aCApIHtcclxuXHRcdFx0XHRcdFx0XHRhbmd1bGFyLmVsZW1lbnQoJyNzdGVwLWltYWdlJyArICRzY29wZS5xdWVzdGlvbm5haXJlLmN1cnJTdGVwKS5hZGRDbGFzcygnc2hvdycpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3JjZSByZW5kZXJpbmcgdGhlIHNsaWRlciBzaW5jZSBpbml0aWFsIGRpc3BsYXkgbm9uZSBzdG9wcyB0aGUgc2xpZGVyIGluaXRpYWxpemF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdyelNsaWRlckZvcmNlUmVuZGVyJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGRlZCBmb3IgQURBXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI3N0ZXAnICsgJHNjb3BlLnF1ZXN0aW9ubmFpcmUuY3VyclN0ZXApLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5xdWVzdGlvbm5haXJlLmN1cnJTdGVwID09PSAkc2NvcGUucXVlc3Rpb25uYWlyZS5ub09mU3RlcHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbic6ICd0b29sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfbmFtZScgIDogJ05leHQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZXZlbnRfc3RhdHVzID0gJ1N0ZXAgJyArICRzY29wZS5xdWVzdGlvbm5haXJlLmN1cnJTdGVwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQW5hbHl0aWNzKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjYmFja0J0bicpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI25leHRCdG4nKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNmaW5pc2hCdG4nKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLnF1ZXN0aW9ubmFpcmUuY3VyclN0ZXAgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbic6ICd0b29sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfbmFtZScgIDogJ0JhY2snLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9zdGF0dXMnOiAnU3RlcCAxJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVBbmFseXRpY3MoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNiYWNrQnRuJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjbmV4dEJ0bicpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2ZpbmlzaEJ0bicpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50X2FjdGlvbic6ICd0b29sJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmV2ZW50X3N0YXR1cyA9ICdTdGVwICcgKyAkc2NvcGUucXVlc3Rpb25uYWlyZS5jdXJyU3RlcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbSA9PT0gJ05leHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5ldmVudF9uYW1lID0gJ05leHQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmV2ZW50X25hbWUgPSAnQmFjayc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjYmFja0J0bicpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI25leHRCdG4nKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNmaW5pc2hCdG4nKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVBbmFseXRpY3MoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpYXNibGUgdGhlIGJ1dHRvbiB1bnRpbCB1c2VyIGFuc3dlcnMgYWxsIHRoZSBxdWVzdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdidXR0b25WYWxpZGF0aW9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxUcFZhbCwgYm9keTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRwVmFsID0gJCgnLnF1ZXN0aW9ubmFpcmUnKS5vZmZzZXQoKS50b3A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgPSAkKCdodG1sLCBib2R5Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbVN0YXRlID09PSAnbW9iaWxlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYm9keS5zY3JvbGxUb3Aoc2Nyb2xsVHBWYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Njcm9sbFRvcCc6IHNjcm9sbFRwVmFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3F1ZXVlJyAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Vhc2luZycgIDogJ3N3aW5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZHVyYXRpb24nOiA1MDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVHBWYWwgPSAoc2Nyb2xsVHBWYWwgLSAxMCkgLSAkKCcuVG9waGVhZGVyJykuaGVpZ2h0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYm9keS5zY3JvbGxUb3Aoc2Nyb2xsVHBWYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Njcm9sbFRvcCc6IHNjcm9sbFRwVmFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3F1ZXVlJyAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Vhc2luZycgIDogJ3N3aW5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZHVyYXRpb24nOiA1MDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMjAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIERyb3Bkb3duIGNoYW5nZSBldmVudFxyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5xdWVzdGlvbi1kcm9wZG93biAuY3VzdG9tLXNlbGVjdGJveC1saXN0LWNvbnQgbGknKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIC8vIEdhdGhlcmluZyBkYXRhXHJcbiAgICAgICAgICAgICAgICB2YXIgdmlzaXRvckF0dHIgPSBhbmd1bGFyLmVsZW1lbnQodGhpcykuZGF0YSgndmlzaXRvcmF0dHInKTtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGFuZ3VsYXIuZWxlbWVudCh0aGlzKS5hdHRyKCd2YWx1ZScpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRleHQgPSBhbmd1bGFyLmVsZW1lbnQodGhpcykuZGF0YSgndGV4dCcpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHBvaW50ID0gYW5ndWxhci5lbGVtZW50KHRoaXMpLmRhdGEoJ3BvaW50Jyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IGFuZ3VsYXIuZWxlbWVudCh0aGlzKS5kYXRhKCd0eXBlJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2lkID0gYW5ndWxhci5lbGVtZW50KHRoaXMpLmRhdGEoJ2NpZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEVuZ2FnZSBEYXRhXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVFbmdhZ2UodmlzaXRvckF0dHIsIHRleHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFBvaW50cyBDYWxjdWxhdGlvblxyXG4gICAgICAgICAgICAgICAgdXBkYXRlUG9pbnRzKGNpZCwgcG9pbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFdlYnNlcnZpY2UgRGF0YVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlU2VydmljZSh0eXBlLCB2YWx1ZSwgdGV4dCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gUmFkaW8gYnV0dG9uIGNsaWNrIGV2ZW50XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLnF1ZXN0aW9uLXNpbmdsZS1zZWxlY3QgaW5wdXQ6cmFkaW8nKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIC8vIEdhdGhlcmluZyBkYXRhXHJcbiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IGFuZ3VsYXIuZWxlbWVudCh0aGlzKS5kYXRhKCd0ZXh0Jyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBhbmd1bGFyLmVsZW1lbnQodGhpcykuYXR0cigndmFsdWUnKTtcclxuICAgICAgICAgICAgICAgIHZhciB2aXNpdG9yQXR0ciA9IGFuZ3VsYXIuZWxlbWVudCh0aGlzKS5kYXRhKCd2aXNpdG9yYXR0cicpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHBvaW50ID0gYW5ndWxhci5lbGVtZW50KHRoaXMpLmRhdGEoJ3BvaW50Jyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IGFuZ3VsYXIuZWxlbWVudCh0aGlzKS5kYXRhKCd0eXBlJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2lkID0gYW5ndWxhci5lbGVtZW50KHRoaXMpLmRhdGEoJ2NpZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEVuZ2FnZSBEYXRhXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVFbmdhZ2UodmlzaXRvckF0dHIsIHRleHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFBvaW50cyBDYWxjdWxhdGlvblxyXG4gICAgICAgICAgICAgICAgdXBkYXRlUG9pbnRzKGNpZCwgcG9pbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFdlYnNlcnZpY2UgRGF0YVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlU2VydmljZSh0eXBlLCB2YWx1ZSwgdGV4dCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGFOYW1lID0ge1xyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgZGF0YU5hbWUubmFtZSA9IGNpZDtcclxuICAgICAgICAgICAgICAgIGRhdGFOYW1lLnZhbHVlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnYnV0dG9uVmFsaWRhdGlvbicsIGRhdGFOYW1lKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVja2JveCBjbGljayBldmVudFxyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5xdWVzdGlvbi1tdWx0aS1zZWxlY3QgaW5wdXQ6Y2hlY2tib3gnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2aXNpdG9yQXR0ciA9IGFuZ3VsYXIuZWxlbWVudCh0aGlzKS5kYXRhKCd2aXNpdG9yYXR0cicpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsZUlkID0gYW5ndWxhci5lbGVtZW50KHRoaXMpLmRhdGEoJ2lkJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBhbmd1bGFyLmVsZW1lbnQodGhpcykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YU5hbWUgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBkYXRhTmFtZS5uYW1lID0gZWxlSWQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGlkZGVuSW5wdXRWYWw7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCh0aGlzKS5wcm9wKCdjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBoaWRkZW5JbnB1dFZhbCA9IGFuZ3VsYXIuZWxlbWVudCgnIycgKyBlbGVJZCkudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoaWRkZW5JbnB1dFZhbCAhPT0gbnVsbCAmJiBoaWRkZW5JbnB1dFZhbCAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuSW5wdXRWYWwgPSBoaWRkZW5JbnB1dFZhbCArICd8JyArIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbklucHV0VmFsID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnIycgKyBlbGVJZCkudmFsKGhpZGRlbklucHV0VmFsKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGlkZGVuSW5wdXRWYWwgPSBhbmd1bGFyLmVsZW1lbnQoJyMnICsgZWxlSWQpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGhpZGRlbklucHV0VmFsLmluZGV4T2YodmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuSW5wdXRWYWwgPSBoaWRkZW5JbnB1dFZhbC5yZXBsYWNlKHZhbHVlICsgJ3wnLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuSW5wdXRWYWwgPSBoaWRkZW5JbnB1dFZhbC5yZXBsYWNlKCd8JyArIHZhbHVlLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGhpZGRlbklucHV0VmFsID0gaGlkZGVuSW5wdXRWYWwucmVwbGFjZSh2YWx1ZSwgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnIycgKyBlbGVJZCkudmFsKGhpZGRlbklucHV0VmFsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgRW5nYWdlIGRhdGFcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUVuZ2FnZSh2aXNpdG9yQXR0ciwgYW5ndWxhci5lbGVtZW50KCcjJyArIGVsZUlkKS52YWwoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGxpRWxlID0gYW5ndWxhci5lbGVtZW50KHRoaXMpLnBhcmVudCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHVsRWxlID0gbGlFbGUucGFyZW50KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hlY2tDb3VudCA9IGFuZ3VsYXIuZWxlbWVudCgnIycgKyBlbGVJZCkudmFsKCkuc3BsaXQoJ3wnKS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrQ291bnQgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2godWxFbGUuY2hpbGRyZW4oKSwgZnVuY3Rpb24oZWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGVja2JveEVsZSA9IGFuZ3VsYXIuZWxlbWVudChlbGUpLmNoaWxkcmVuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0NoZWNrZWQgPSBhbmd1bGFyLmVsZW1lbnQoY2hlY2tib3hFbGVbMF0pLnByb3AoJ2NoZWNrZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNDaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoY2hlY2tib3hFbGUpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YU5hbWUudmFsdWUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnYnV0dG9uVmFsaWRhdGlvbicsIGRhdGFOYW1lKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHVsRWxlLmNoaWxkcmVuKCksIGZ1bmN0aW9uKGVsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hlY2tib3hFbGUgPSBhbmd1bGFyLmVsZW1lbnQoZWxlKS5jaGlsZHJlbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNDaGVja2VkID0gYW5ndWxhci5lbGVtZW50KGNoZWNrYm94RWxlWzBdKS5wcm9wKCdjaGVja2VkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzQ2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KGNoZWNrYm94RWxlKS5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFOYW1lLnZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdidXR0b25WYWxpZGF0aW9uJywgZGF0YU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XSk7XHJcbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2xmZ2FwcCcpLmNvbnRyb2xsZXIoJ3F1aWNrUG9sbENvbnRyb2xsZXInLCBbJyRzY29wZScsICckaHR0cCcsICckdGltZW91dCcsICckaW50ZXJ2YWwnLFxyXG4gICAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICR0aW1lb3V0LCAkaW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgdmFyIHF1aWNrUG9sbENvbnRyb2xsZXJWTSA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBwb2xsQW5pbVN0b3A7XHJcbiAgICAgICAgICAgIHZhciBwb2xsT3B0aW9uQ291bnQgPSAwO1xyXG4gICAgICAgICAgICB2YXIgcG9sbE9wdGlvblRlbXBDb3VudCA9IDA7XHJcbiAgICAgICAgICAgIHZhciBwb2xsT3B0TWF0Y2ggPSB7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcXVpY2tQb2xsQ29udHJvbGxlclZNLmluaXQgPSBmdW5jdGlvbihjaWQsIHJlY29yZFBvbGxVUkwsIGdldFBvbGxSZXN1bHRzbFVSTCkge1xyXG4gICAgICAgICAgICAgICAgcXVpY2tQb2xsQ29udHJvbGxlclZNLmNpZCA9IGNpZDtcclxuICAgICAgICAgICAgICAgIHF1aWNrUG9sbENvbnRyb2xsZXJWTS5yZWNvcmRQb2xsVVJMID0gcmVjb3JkUG9sbFVSTDtcclxuICAgICAgICAgICAgICAgIHF1aWNrUG9sbENvbnRyb2xsZXJWTS5nZXRQb2xsUmVzdWx0c2xVUkwgPSBnZXRQb2xsUmVzdWx0c2xVUkw7XHJcbiAgICAgICAgICAgICAgICBxdWlja1BvbGxDb250cm9sbGVyVk0ucmVjb3JkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHF1aWNrUG9sbENvbnRyb2xsZXJWTS5wb2xsRGF0YSA9IHtcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcXVpY2tQb2xsQ29udHJvbGxlclZNLm9wdGlvbkxpbmtzID0ge1xyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBxdWlja1BvbGxDb250cm9sbGVyVk0uYmFyU3R5bGUgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHF1aWNrUG9sbENvbnRyb2xsZXJWTS5wb2xsT3B0aW9uID0gZ2V0Q29va2llKCdRUF8nICsgcXVpY2tQb2xsQ29udHJvbGxlclZNLmNpZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHF1aWNrUG9sbENvbnRyb2xsZXJWTS5wb2xsT3B0aW9uICE9PSB1bmRlZmluZWQgJiYgcXVpY2tQb2xsQ29udHJvbGxlclZNLnBvbGxPcHRpb25cclxuICAgICAgICAgICAgICAgICAgICAhPT0gbnVsbCAmJiBxdWlja1BvbGxDb250cm9sbGVyVk0ucG9sbE9wdGlvbiAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBxdWlja1BvbGxDb250cm9sbGVyVk0uZ2V0UG9sbFJlc3VsdHMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHF1aWNrUG9sbENvbnRyb2xsZXJWTS5wb2xsUmVzdWx0c0FuaW0gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHBvbGxBbmltU3RvcCA9ICRpbnRlcnZhbChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocXVpY2tQb2xsQ29udHJvbGxlclZNLnJlc3BvbnNlRGF0YSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVpY2tQb2xsQ29udHJvbGxlclZNLnJlc3BvbnNlRGF0YVtrZXldXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhPT0gcXVpY2tQb2xsQ29udHJvbGxlclZNLnBvbGxEYXRhW2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1aWNrUG9sbENvbnRyb2xsZXJWTS5wb2xsRGF0YVtrZXldKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXBvbGxPcHRNYXRjaFtrZXldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2xsT3B0TWF0Y2hba2V5XSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2xsT3B0aW9uVGVtcENvdW50Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocG9sbE9wdGlvblRlbXBDb3VudCA9PT0gcG9sbE9wdGlvbkNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocG9sbEFuaW1TdG9wKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjcXBfcmVzdWx0c18nICsgcXVpY2tQb2xsQ29udHJvbGxlclZNLmNpZCkuYXR0cihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIDI1KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHF1aWNrUG9sbENvbnRyb2xsZXJWTS5zdWJtaXRWb3RlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocXVpY2tQb2xsQ29udHJvbGxlclZNLnBvbGxPcHRpb24gIT09IHVuZGVmaW5lZCAmJiBxdWlja1BvbGxDb250cm9sbGVyVk0ucG9sbE9wdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICE9PSBudWxsICYmIHF1aWNrUG9sbENvbnRyb2xsZXJWTS5wb2xsT3B0aW9uICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1aWNrUG9sbENvbnRyb2xsZXJWTS5yZWNvcmRQb2xsVVJMID0gcXVpY2tQb2xsQ29udHJvbGxlclZNLnJlY29yZFBvbGxVUkxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBxdWlja1BvbGxDb250cm9sbGVyVk0ucG9sbE9wdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWV0aG9kJzogJ0dFVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICd1cmwnICAgOiBxdWlja1BvbGxDb250cm9sbGVyVk0ucmVjb3JkUG9sbFVSTFxyXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZWNvcmQgU3VjY2VzcyA6ICcsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSAhPT0gdW5kZWZpbmVkICYmIHJlc3BvbnNlLmRhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN0YXR1cyA9PT0gJ3N1Y2Nlc3MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q29va2llKCdRUF8nICsgcXVpY2tQb2xsQ29udHJvbGxlclZNLmNpZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVpY2tQb2xsQ29udHJvbGxlclZNLnBvbGxPcHRpb24sIDMwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWlja1BvbGxDb250cm9sbGVyVk0uZ2V0UG9sbFJlc3VsdHMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2soKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGYWlsdXJlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBxdWlja1BvbGxDb250cm9sbGVyVk0uZ2V0UG9sbFJlc3VsdHMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgICAgICAgICAnbWV0aG9kJzogJ0dFVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3VybCcgICA6IHF1aWNrUG9sbENvbnRyb2xsZXJWTS5nZXRQb2xsUmVzdWx0c2xVUkxcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEgIT09IHVuZGVmaW5lZCAmJiByZXNwb25zZS5kYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1aWNrUG9sbENvbnRyb2xsZXJWTS5yZWNvcmQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvdGFsUG9sbENvdW50ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1aWNrUG9sbENvbnRyb2xsZXJWTS5yZXNwb25zZURhdGEgPSByZXNwb25zZS5kYXRhO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHF1aWNrUG9sbENvbnRyb2xsZXJWTS5yZXNwb25zZURhdGEsIGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFBvbGxDb3VudCA9IHRvdGFsUG9sbENvdW50ICsgcGFyc2VJbnQodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHF1aWNrUG9sbENvbnRyb2xsZXJWTS5yZXNwb25zZURhdGEsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1aWNrUG9sbENvbnRyb2xsZXJWTS5yZXNwb25zZURhdGFba2V5XSA9IE1hdGgucm91bmQoKChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludCh2YWx1ZSkgLyB0b3RhbFBvbGxDb3VudCkgKiAxMDApKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1aWNrUG9sbENvbnRyb2xsZXJWTS5wb2xsRGF0YVtrZXldID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvbGxPcHRpb25Db3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVpY2tQb2xsQ29udHJvbGxlclZNLnBvbGxSZXN1bHRzQW5pbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWlja1BvbGxDb250cm9sbGVyVk0ub3B0aW9uTGlua3NbJ2xpbmtfJyArIHF1aWNrUG9sbENvbnRyb2xsZXJWTS5wb2xsT3B0aW9uXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocXVpY2tQb2xsQ29udHJvbGxlclZNLnJlc3BvbnNlRGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1aWNrUG9sbENvbnRyb2xsZXJWTS5iYXJTdHlsZVtrZXldID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcic6ICcycHggc29saWQgIzRiYzIyYicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd2lkdGgnIDogdmFsdWUgKyAnJSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0ZhaWx1cmUnLCByZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XSkuZmlsdGVyKCdwb2xsUmVzdWx0UGVyY250JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSB1bmRlZmluZWQgfHwgaW5wdXQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzAlJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQgKyAnJSc7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmNvbnRyb2xsZXIoJ3F1b3Rlc0NoYXJ0c0NvbnRybCcsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XHJcbiAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvKGlQb2R8aVBob25lfGlQYWQpLykpIHtcclxuICAgICAgICAkc2NvcGUuc2Nyb2xsaW5nVmFsdWUgPSAnbm8nO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAkc2NvcGUuc2Nyb2xsaW5nVmFsdWUgPSAnYXV0byc7XHJcbiAgICB9XHJcbn1dKTsiLCIvKiBnbG9iYWwgbm9PZlN0ZXBzICovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnbGZnYXBwJykuY29udHJvbGxlcignUXVlc3Rpb25uYWlyZVByb2dyZXNzQmFyQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XHJcbiAgICB2YXIgcXBiVk0gPSB0aGlzO1xyXG5cclxuICAgIHFwYlZNLm5vT2ZTdGVwcyA9IG5vT2ZTdGVwcztcclxuICAgIHFwYlZNLmN1cnJTdGVwID0gMTtcclxuICAgIHFwYlZNLmdyYWRpZW50UGVyY3QgPSAxMDAgLyAocXBiVk0ubm9PZlN0ZXBzIC0gMSk7XHJcblxyXG4gICAgYW5ndWxhci5lbGVtZW50KCcucXVlc3Rpb24tYnV0dG9uIC5VSUJ1dHRvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBocmVmID0gYW5ndWxhci5lbGVtZW50KHRoaXMpLmF0dHIoJ2hyZWYnKTtcclxuXHJcbiAgICAgICAgaWYgKGhyZWYgPT09IHVuZGVmaW5lZCB8fCBocmVmID09PSAnJyB8fCBocmVmID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmVsZW1lbnQodGhpcykuZGF0YSgnbmV4dHN0ZXAnKSkge1xyXG4gICAgICAgICAgICAgICAgcXBiVk0uY3VyclN0ZXAgPSBhbmd1bGFyLmVsZW1lbnQodGhpcykuZGF0YSgnbmV4dHN0ZXAnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChxcGJWTS5jdXJyU3RlcCA8IHFwYlZNLm5vT2ZTdGVwcykge1xyXG4gICAgICAgICAgICAgICAgcXBiVk0uY3VyclN0ZXAgPSBxcGJWTS5jdXJyU3RlcCArIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXBwbHlHcmFkaWVudCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gYXBwbHlHcmFkaWVudCgpIHtcclxuICAgICAgICBxcGJWTS5wcm9ncmVzcyA9IHtcclxuICAgICAgICAgICAgJ2JhY2tncm91bmQnOiAnbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjODhCMjNGIDAsICM4OEIyM0YgJ1xyXG4gICAgICAgICAgICArICgocXBiVk0uY3VyclN0ZXAgLSAxKSAqIHFwYlZNLmdyYWRpZW50UGVyY3QpICsgJyUsICNDQ0NDQ0MgJ1xyXG4gICAgICAgICAgICArICgocXBiVk0uY3VyclN0ZXAgLSAxKSAqIHFwYlZNLmdyYWRpZW50UGVyY3QpICsgJyUsICNDQ0NDQ0MgMTAwJSknXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBxcGJWTS5iYWNrID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHFwYlZNLmN1cnJTdGVwID4gMSkge1xyXG4gICAgICAgICAgICBxcGJWTS5jdXJyU3RlcCA9IHFwYlZNLmN1cnJTdGVwIC0gMTtcclxuICAgICAgICAgICAgYXBwbHlHcmFkaWVudCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1dKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5sZmdhcHAuY29udHJvbGxlcigncmVnaXN0ZXJDb250cmwnLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xyXG4gICAgdmFyIGFyciA9IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgICdhcnRNYXhTdHlsZSc6ICdpbmRpdmlkdWFsJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAnYXJ0TWF4U3R5bGUnOiAnZW1wbG95ZXInXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgICdhcnRNYXhTdHlsZSc6ICdlbXBsb3llcnJlcHJlc2VudGF0aXZlJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAnYXJ0TWF4U3R5bGUnOiAnaW5kdXN0cnlwcm9mZXNzaW9uYWwnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgICdhcnRNYXhTdHlsZSc6ICdkZW50YWxwcm92aWRlcidcclxuICAgICAgICB9XHJcbiAgICBdO1xyXG5cclxuICAgIFN0cmluZy5wcm90b3R5cGUuZmlyc3RUb1VwcGVyQ2FzZSA9IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXGJbYS16XS9nLCBmdW5jdGlvbihsZXR0ZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCdhdWRpZW5jZT0nKSA+IC0xKSB7XHJcbiAgICAgICAgJC5lYWNoKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc2xpY2UoMSkuc3BsaXQoJyYnKSwgZnVuY3Rpb24oaW5kZXgsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5zcGxpdCgnPScpWzBdID09PSAnYXVkaWVuY2UnKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucXVlcnlTdHIgPSB2YWx1ZS5zcGxpdCgnPScpWzFdLnJlcGxhY2UoLy0vZywgJycpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vICRzY29wZS5xdWVyeVN0ciA9IHZhbHVlLnNwbGl0KCc9JylbMV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdsYXN0bmFtZScpKSB7XHJcbiAgICAgICAgJHNjb3BlLnF1ZXJ5U3RyID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnbGFzdG5hbWUnKTtcclxuICAgIH1cclxuICAgICRzY29wZS5zaG93TGFzdENsaWNrZWQgPSBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnbGFzdG5hbWUnLCBuYW1lKTtcclxuICAgIH07XHJcbiAgICBhbmd1bGFyLmZvckVhY2goYXJyLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICRzY29wZVsnYXJ0TWF4U3R5bGUnICsgdmFsdWUuYXJ0TWF4U3R5bGVdID0gKCRzY29wZS5xdWVyeVN0ciA9PT0gdmFsdWUuYXJ0TWF4U3R5bGUpID8ge1xyXG4gICAgICAgICAgICAnbWF4LWhlaWdodCc6ICczMDAwcHgnXHJcbiAgICAgICAgfSA6ICcnO1xyXG4gICAgfSk7XHJcbn1dKTsiLCIvKiBnbG9iYWwgc2l0ZVZhbHVlICovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcbiAgICBsZmdhcHAuY29udHJvbGxlcignc2VhcmNoQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJ3NlYXJjaFNlcnZpY2UnLCBmdW5jdGlvbigkc2NvcGUsIHNlYXJjaFNlcnZpY2UpIHtcclxuICAgICAgICB2YXIgX3NlYXJjaFJlc3VsdE9iaiA9IHtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMgPSB7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMucmVzdWx0c0ZvciA9IHRydWU7XHJcbiAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMubm9SZXN1bHRzRm9yID0gdHJ1ZTtcclxuICAgICAgICAkc2NvcGUuaXNMZXNzVGVuID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIHBhZ2luYXRpb24gdmxhdWVzIGluaXRpYWxpemF0aW9uLlxyXG4gICAgICAgIHZhciBtb2JpbGVMaXN0Q291bnQgPSAxMDtcclxuXHJcbiAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMuZGlzYWJsZU5leHQgPSB0cnVlO1xyXG4gICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLmRpc2FibGVQcmV2ID0gdHJ1ZTtcclxuICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5zdGFydEZyb20gPSAwO1xyXG4gICAgICAgIHZhciBlbGxpcHNlcyA9ICcuLi4nO1xyXG4gICAgICAgIHZhciBuZXh0Rm91clBhZ2VzID0gNDtcclxuICAgICAgICB2YXIgbmV4dFNldFBhZ2VzID0gMztcclxuXHJcbiAgICAgICAgLy8gZW5kc1xyXG5cclxuICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5zZWFyY2hSZXN1bHRzSW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5zZWFyY2goJHNjb3BlLnNlYXJjaFJlc3VsdHMuZ2V0VVJMUGFyYW1ldGVyKCdxJykpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLmdldFVSTFBhcmFtZXRlciA9IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCAnXFxcXFsnKS5yZXBsYWNlKC9bXFxdXS8sICdcXFxcXScpO1xyXG4gICAgICAgICAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCdbXFxcXD8mXScgKyBuYW1lICsgJz0oW14mI10qKScpLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0cyA9IHJlZ2V4LmV4ZWMobG9jYXRpb24uc2VhcmNoKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzID09PSBudWxsID8gJycgOiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1sxXS5yZXBsYWNlKC9cXCsvZywgJyAnKSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMuc2VhcmNoID0gZnVuY3Rpb24ocSkge1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5yZXN1bHRzID0gW107XHJcbiAgICAgICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLnJlc3VsdExpc3QgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHNlYXJjaE9iaiA9IHtcclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpZiAocSAhPT0gbnVsbCAmJiBxICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHNlYXJjaE9iai5xdWVyeVN0cmluZyA9IGVuY29kZVVSSUNvbXBvbmVudChxKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNlYXJjaE9iai5xdWVyeVN0cmluZyA9IGVuY29kZVVSSUNvbXBvbmVudCgkc2NvcGUuc2VhcmNoUmVzdWx0cy5zZWFyY2hQYXJhbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2VhcmNoT2JqLnNpdGUgPSBzaXRlVmFsdWU7XHJcbiAgICAgICAgICAgIHZhciBzZXJ2aWNlVVJMLCBldmVudEFjdGlvbjtcclxuXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xyXG4gICAgICAgICAgICBzZXJ2aWNlVVJMID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIHdpbmRvdy5sb2NhdGlvbi5ob3N0XHJcbiAgICAgICAgICAgICAgICArICcvcGJsLXNlYXJjaC1zZXJ2aWNlLWFwcC9yZXN0L3NlYXJjaC9nc2EnO1xyXG4gICAgICAgICAgICBzZWFyY2hTZXJ2aWNlLnNlYXJjaFJlc3VsdHMoc2VydmljZVVSTCwgc2VhcmNoT2JqLCBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHEgIT09IG51bGwgJiYgcSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLnNlYXJjaFF1ZXJ5ID0gcTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRBY3Rpb24gPSAnZ2xvYmFsJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5zZWFyY2hRdWVyeSA9ICRzY29wZS5zZWFyY2hSZXN1bHRzLnNlYXJjaFBhcmFtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudEFjdGlvbiA9ICdwYWdlJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuR1NQICE9PSBudWxsICYmIHJlc3BvbnNlLmRhdGEuR1NQICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuR1NQLlJFUyAhPT0gbnVsbCAmJiByZXNwb25zZS5kYXRhLkdTUC5SRVNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLkdTUC5SRVMuRU4gPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5yZXN1bHRzLnB1c2gocmVzcG9uc2UuZGF0YS5HU1AuUkVTLlIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5yZXN1bHRzID0gcmVzcG9uc2UuZGF0YS5HU1AuUkVTLlI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLnNlYXJjaFJlc3VsdHMucmVzdWx0cywgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuVCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5UID0gdmFsdWUuVC5yZXBsYWNlKC8mbHQ7L2csICc8JykucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8mZ3Q7L2csICc+JykucmVwbGFjZSgvJmFtcDsvZywgJyYnKS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL++/vS9pZywgJ8KuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5TKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLlMgPSB2YWx1ZS5TLnJlcGxhY2UoLyZsdDsvZywgJzwnKS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyZndDsvZywgJz4nKS5yZXBsYWNlKC8mYW1wOy9nLCAnJicpLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAv77+9L2lnLCAnwq4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLnJlc3VsdHNMZW5ndGggPSAkc2NvcGUuc2VhcmNoUmVzdWx0cy5yZXN1bHRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAkc2NvcGUuc2VhcmNoUmVzdWx0cy5yZXN1bHRzTGVuZ3RoID09IDApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRTZWN0aW9uPSQoXCJwOmNvbnRhaW5zKCdObyBTZWFyY2ggUmVzdWx0cyBmb3IgJylcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0U2VjdGlvbil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ1aS1wYWdpbmF0aW9uIHppcHNlYXJjaHJlc3VsdHNcIilbMF0uc3R5bGUuZGlzcGxheT0nbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ1aS1wYWdpbmF0aW9uIHppcHNlYXJjaHJlc3VsdHNcIilbMF0uc3R5bGUuZGlzcGxheT0nYmxvY2snOyAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NlYXJjaFJlc3VsdE9iai5zZXRBbmRSZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMubnVtYmVyT2ZQYWdlcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwoJHNjb3BlLnNlYXJjaFJlc3VsdHMucmVzdWx0c0xlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvICRzY29wZS5zZWFyY2hSZXN1bHRzLmNvdW50UGVyUGFnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMucmVzdWx0TGlzdCA9ICRzY29wZS5zZWFyY2hSZXN1bHRzLnJlc3VsdHMuc2xpY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMCwgJHNjb3BlLnNlYXJjaFJlc3VsdHMuY291bnRQZXJQYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLmFuY2hvckFycmF5ID0gZ2VuZXJhdGVQYWdpbmF0aW9uKCRzY29wZS5zZWFyY2hSZXN1bHRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmN1cnJlbnRQYWdlICsgMSwgJHNjb3BlLnNlYXJjaFJlc3VsdHMubnVtYmVyT2ZQYWdlcygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLnJlc3VsdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMuY2xpY2tlZE51bSA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5kaXNhYmxlUHJldiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNlYXJjaFJlc3VsdHMubnVtYmVyT2ZQYWdlcygpID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLnNob3dNb3JlUmVzdWx0cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMuZGlzYWJsZU5leHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMuZGlzYWJsZU5leHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMubm9SZXN1bHRzRm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc05vUmVzdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5yZXN1bHRzRm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfYWN0aW9uJyAgICAgICAgOiAnc2VhcmNoJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfdHlwZScgICAgICAgICAgOiBldmVudEFjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfc2VhcmNoX3Rlcm1zJyAgOiByZXNwb25zZS5kYXRhLkdTUC5RLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9zZWFyY2hfcmVzdWx0cyc6ICRzY29wZS5zZWFyY2hSZXN1bHRzLnJlc3VsdHNMZW5ndGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3V0YWcgOiAnLCB1dGFnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0YWcubGluayhkYXRhKTsgLy8gd2lsbCBjYWxsIHRoaXMgZnVuY3Rpb24gb25jZSB3ZSBnb3Qgc3VjY2VzcyByZXNwb25zZSBmcm9tIHRoZSBzZXJ2aWNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5yZXN1bHRzRm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLm5vUmVzdWx0c0ZvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzTm9SZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMucmVzdWx0cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdFNlY3Rpb249JChcInA6Y29udGFpbnMoJ05vIFNlYXJjaCBSZXN1bHRzIGZvciAnKVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdFNlY3Rpb24pe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ1aS1wYWdpbmF0aW9uIHppcHNlYXJjaHJlc3VsdHNcIilbMF0uc3R5bGUuZGlzcGxheT0nbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5ub1Jlc3VsdHNGb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzTm9SZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5yZXN1bHRzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5ub1Jlc3VsdHNGb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNOb1Jlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMucmVzdWx0cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBfc2VhcmNoUmVzdWx0T2JqLnNldEFuZFJlc2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLmN1cnJlbnRQYWdlID0gMDtcclxuICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMuY291bnRQZXJQYWdlID0gMTA7XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuc2VhcmNoUmVzdWx0cy5yZXN1bHRzIHx8ICRzY29wZS5zZWFyY2hSZXN1bHRzLnJlc3VsdHMubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNlYXJjaFJlc3VsdHMucmVzdWx0cy5sZW5ndGggPCAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLnZpZXdlZENvdW50ID0gJHNjb3BlLnNlYXJjaFJlc3VsdHMucmVzdWx0cy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzTGVzc1RlbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLnZpZXdlZENvdW50ID0gJHNjb3BlLnNlYXJjaFJlc3VsdHMuY291bnRQZXJQYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0xlc3NUZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLnZpZXdlZENvdW50ID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5hbmNob3JBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5kaXNhYmxlTmV4dCA9IHRydWU7XHJcbiAgICAgICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLmRpc2FibGVQcmV2ID0gdHJ1ZTtcclxuICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMuc3RhcnRGcm9tID0gMDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiBfc2VhcmNoUmVzdWx0T2JqLmNhbGN1bGF0ZURpc3BsYXlBbmNob3IgPSBmdW5jdGlvbiAoTlVNQkVSKSB7XHJcbiAgXHRpZiAoTlVNQkVSIDw9IDYpIHtcclxuICBcdFx0Zm9yICh2YXIgaT0wOyBpPE5VTUJFUjsgaSsrKSB7XHJcbiAgXHRcdFx0JHNjb3BlLnNlYXJjaFJlc3VsdHMuYW5jaG9yQXJyYXkucHVzaChpKzEpO1xyXG4gIFx0XHR9XHJcbiAgXHR9IGVsc2Uge1xyXG4gIFx0XHQkc2NvcGUuc2VhcmNoUmVzdWx0cy5hbmNob3JBcnJheSA9IFsxLDIsMyw0LCcuLi4nLE5VTUJFUl07XHJcbiAgXHR9XHJcbiAgfTtcclxuXHJcbiAgX3NlYXJjaFJlc3VsdE9iai5yZW1vdmVEb3RzID0gZnVuY3Rpb24gKCkge1xyXG4gIFx0dmFyIF9hcnJheSA9IFtdO1xyXG4gIFx0Zm9yICh2YXIgaT0wOyBpPDY7IGkrKykge1xyXG4gIFx0XHRfYXJyYXkudW5zaGlmdCgkc2NvcGUuc2VhcmNoUmVzdWx0cy5hbmNob3JBcnJheVs1XS1pKTtcclxuICBcdH1cclxuICBcdCRzY29wZS5zZWFyY2hSZXN1bHRzLmFuY2hvckFycmF5ID0gX2FycmF5O1xyXG4gIH07Ki9cclxuXHJcbiAgICAgICAgLyogJHNjb3BlLnNlYXJjaFJlc3VsdHMucmVzdWx0cyA9IFtdO1xyXG4gICAgICAgIGlmIChnbG9iYWxDb25zdGFudDEuU2VhcmNoUmVzdWx0LkdTUCAhPT0gbnVsbCAmIGdsb2JhbENvbnN0YW50MS5TZWFyY2hSZXN1bHQuR1NQICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBcdGlmIChnbG9iYWxDb25zdGFudDEuU2VhcmNoUmVzdWx0LkdTUC5SRVMgIT09IG51bGwgJiBnbG9iYWxDb25zdGFudDEuU2VhcmNoUmVzdWx0LkdTUC5SRVMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIFx0XHRpZiAoZ2xvYmFsQ29uc3RhbnQxLlNlYXJjaFJlc3VsdC5HU1AuUkVTLkVOID09IDEpIHtcclxuICAgICAgICBcdFx0XHQkc2NvcGUuc2VhcmNoUmVzdWx0cy5yZXN1bHRzLnB1c2goZ2xvYmFsQ29uc3RhbnQxLlNlYXJjaFJlc3VsdC5HU1AuUkVTLlIpO1xyXG4gICAgICAgIFx0XHR9IGVsc2Uge1xyXG4gICAgICAgIFx0XHRcdCRzY29wZS5zZWFyY2hSZXN1bHRzLnJlc3VsdHMgPSBnbG9iYWxDb25zdGFudDEuU2VhcmNoUmVzdWx0LkdTUC5SRVMuUjtcclxuICAgICAgICBcdFx0fVxyXG5cclxuICAgICAgICBcdFx0YW5ndWxhci5mb3JFYWNoKCRzY29wZS5zZWFyY2hSZXN1bHRzLnJlc3VsdHMsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCl7XHJcbiAgICAgICAgXHRcdFx0dmFsdWUuVCA9IHZhbHVlLlQucmVwbGFjZSgvJmx0Oy9nLCAnPCcpLnJlcGxhY2UoLyZndDsvZywgJz4nKS5yZXBsYWNlKC8mYW1wOy9nLCAnJicpO1xyXG4gICAgICAgIFx0XHRcdHZhbHVlLlMgPSB2YWx1ZS5TLnJlcGxhY2UoLyZsdDsvZywgJzwnKS5yZXBsYWNlKC8mZ3Q7L2csICc+JykucmVwbGFjZSgvJmFtcDsvZywgJyYnKTtcclxuICAgICAgICBcdFx0fSk7XHJcbiAgICAgICAgXHRcdCRzY29wZS5zZWFyY2hSZXN1bHRzLnJlc3VsdHNMZW5ndGggPSAkc2NvcGUuc2VhcmNoUmVzdWx0cy5yZXN1bHRzLmxlbmd0aDtcclxuICAgICAgICBcdFx0XHRfc2VhcmNoUmVzdWx0T2JqLnNldEFuZFJlc2V0KCk7XHJcbiAgICAgICAgXHRcdFx0JHNjb3BlLnNlYXJjaFJlc3VsdHMubnVtYmVyT2ZQYWdlcyA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgXHRcdFx0XHRyZXR1cm4gTWF0aC5jZWlsKCRzY29wZS5zZWFyY2hSZXN1bHRzLnJlc3VsdHNMZW5ndGgvJHNjb3BlLnNlYXJjaFJlc3VsdHMuY291bnRQZXJQYWdlKTtcclxuICAgICAgICBcdFx0XHR9O1xyXG4gICAgICAgIFx0XHRcdF9zZWFyY2hSZXN1bHRPYmouY2FsY3VsYXRlRGlzcGxheUFuY2hvcigkc2NvcGUuc2VhcmNoUmVzdWx0cy5udW1iZXJPZlBhZ2VzKCkpO1xyXG4gICAgICAgIFx0XHRcdCRzY29wZS5zZWFyY2hSZXN1bHRzLm5vUmVzdWx0c0ZvciA9IHRydWU7XHJcbiAgICAgICAgXHRcdFx0JHNjb3BlLmlzTm9SZXN1bHQgPSBmYWxzZTtcclxuICAgICAgICBcdFx0XHQkc2NvcGUuc2VhcmNoUmVzdWx0cy5yZXN1bHRzRm9yID0gZmFsc2U7XHJcbiAgICAgICAgXHRcdH0gZWxzZSB7XHJcbiAgICAgICAgXHRcdFx0JHNjb3BlLnNlYXJjaFJlc3VsdHMucmVzdWx0c0ZvciA9IHRydWU7XHJcbiAgICAgICAgXHRcdFx0JHNjb3BlLnNlYXJjaFJlc3VsdHMubm9SZXN1bHRzRm9yID0gZmFsc2U7XHJcbiAgICAgICAgXHRcdFx0JHNjb3BlLmlzTm9SZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgIFx0XHRcdCRzY29wZS5zZWFyY2hSZXN1bHRzLnJlc3VsdHMgPSBbXTtcclxuICAgICAgICBcdFx0fVxyXG4gICAgICAgIFx0fSBlbHNlIHtcclxuICAgICAgICBcdFx0JHNjb3BlLnNlYXJjaFJlc3VsdHMubm9SZXN1bHRzRm9yID0gZmFsc2U7XHJcbiAgICAgICAgXHRcdCRzY29wZS5pc05vUmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICBcdFx0JHNjb3BlLnNlYXJjaFJlc3VsdHMucmVzdWx0cyA9IFtdO1xyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIH0qL1xyXG5cclxuICAgICAgICAvLyAkc2NvcGUuc2VhcmNoUmVzdWx0cy5yZXN1bHRzID0gZ2xvYmFsQ29uc3RhbnQxLlNlYXJjaFJlc3VsdC5HU1AuUkVTLlI7XHJcbiAgICAgICAgLyogYW5ndWxhci5mb3JFYWNoKCRzY29wZS5zZWFyY2hSZXN1bHRzLnJlc3VsdHMsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCl7XHJcbiAgICAgICAgXHR2YWx1ZS5UID0gdmFsdWUuVC5yZXBsYWNlKC8mbHQ7L2csICc8JykucmVwbGFjZSgvJmd0Oy9nLCAnPicpLnJlcGxhY2UoLyZhbXA7L2csICcmJyk7XHJcbiAgICAgICAgXHR2YWx1ZS5TID0gdmFsdWUuUy5yZXBsYWNlKC8mbHQ7L2csICc8JykucmVwbGFjZSgvJmd0Oy9nLCAnPicpLnJlcGxhY2UoLyZhbXA7L2csICcmJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMucmVzdWx0c0xlbmd0aCA9ICRzY29wZS5zZWFyY2hSZXN1bHRzLnJlc3VsdHMubGVuZ3RoO1xyXG4gICAgICAgIF9zZWFyY2hSZXN1bHRPYmouc2V0QW5kUmVzZXQoKTtcclxuICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5udW1iZXJPZlBhZ2VzID0gZnVuY3Rpb24oKXtcclxuICAgICAgICBcdHJldHVybiBNYXRoLmNlaWwoJHNjb3BlLnNlYXJjaFJlc3VsdHMucmVzdWx0c0xlbmd0aC8kc2NvcGUuc2VhcmNoUmVzdWx0cy5jb3VudFBlclBhZ2UpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgX3NlYXJjaFJlc3VsdE9iai5jYWxjdWxhdGVEaXNwbGF5QW5jaG9yKCRzY29wZS5zZWFyY2hSZXN1bHRzLm51bWJlck9mUGFnZXMoKSk7ICovXHJcblxyXG4gICAgICAgICRzY29wZS5zaG93Q3VycmVudFBhZ2UgPSBmdW5jdGlvbihMSVNUTlVNKSB7XHJcbiAgICAgICAgICAgIGlmIChMSVNUTlVNICE9PSAnLi4uJyAmJiAkc2NvcGUuc2VhcmNoUmVzdWx0cy5jbGlja2VkTnVtICE9PSBMSVNUTlVNKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKExJU1ROVU0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMuY2xpY2tlZE51bSA9IExJU1ROVU07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMuY3VycmVudFBhZ2UgPSBMSVNUTlVNIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNlYXJjaFJlc3VsdHMucmVzdWx0cy5sZW5ndGggPCAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy52aWV3ZWRDb3VudCA9ICRzY29wZS5zZWFyY2hSZXN1bHRzLnJlc3VsdHMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLnZpZXdlZENvdW50ID0gKCRzY29wZS5zZWFyY2hSZXN1bHRzLmN1cnJlbnRQYWdlICsgMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICogJHNjb3BlLnNlYXJjaFJlc3VsdHMuY291bnRQZXJQYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNlYXJjaFJlc3VsdHMucmVzdWx0cy5sZW5ndGggPCAkc2NvcGUuc2VhcmNoUmVzdWx0cy52aWV3ZWRDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMudmlld2VkQ291bnQgPSAkc2NvcGUuc2VhcmNoUmVzdWx0cy5yZXN1bHRzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5zdGFydEZyb20gPSAkc2NvcGUuc2VhcmNoUmVzdWx0cy5jdXJyZW50UGFnZSAqICRzY29wZS5zZWFyY2hSZXN1bHRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jb3VudFBlclBhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMucmVzdWx0TGlzdCA9ICRzY29wZS5zZWFyY2hSZXN1bHRzLnJlc3VsdHMuc2xpY2UoJHNjb3BlLnNlYXJjaFJlc3VsdHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0YXJ0RnJvbSwgJHNjb3BlLnNlYXJjaFJlc3VsdHMuc3RhcnRGcm9tICsgJHNjb3BlLnNlYXJjaFJlc3VsdHMuY291bnRQZXJQYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5kaXNhYmxlUHJldiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLmRpc2FibGVOZXh0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKExJU1ROVU0gPT09ICRzY29wZS5zZWFyY2hSZXN1bHRzLm51bWJlck9mUGFnZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5kaXNhYmxlTmV4dCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChMSVNUTlVNID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLmRpc2FibGVQcmV2ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMuYW5jaG9yQXJyYXkgPSBnZW5lcmF0ZVBhZ2luYXRpb24oTElTVE5VTSwgJHNjb3BlLnNlYXJjaFJlc3VsdHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm51bWJlck9mUGFnZXMoKSwgJHNjb3BlLnNlYXJjaFJlc3VsdHMuYW5jaG9yQXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmdldFByZU5leHRQYWdlID0gZnVuY3Rpb24odHlwZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ3ByZXYnICYmICgkc2NvcGUuc2VhcmNoUmVzdWx0cy5jdXJyZW50UGFnZSArIDEpICE9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0N1cnJlbnRQYWdlKCRzY29wZS5zZWFyY2hSZXN1bHRzLmN1cnJlbnRQYWdlKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnbmV4dCcgJiYgKCRzY29wZS5zZWFyY2hSZXN1bHRzLmN1cnJlbnRQYWdlICsgMSkgIT09ICRzY29wZS5zZWFyY2hSZXN1bHRzXHJcbiAgICAgICAgICAgICAgICAubnVtYmVyT2ZQYWdlcygpKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0N1cnJlbnRQYWdlKCRzY29wZS5zZWFyY2hSZXN1bHRzLmN1cnJlbnRQYWdlICsgMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiAkc2NvcGUuc2hvd05leHRUZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHRpZiAoISRzY29wZS5zZWFyY2hSZXN1bHRzLmNsaWNrZWROdW0pIHtcclxuICAgICAgICBcdFx0JHNjb3BlLnNlYXJjaFJlc3VsdHMuY2xpY2tlZE51bSA9IDI7XHJcbiAgICAgICAgXHR9IGVsc2Uge1xyXG4gICAgICAgIFx0XHQkc2NvcGUuc2VhcmNoUmVzdWx0cy5jbGlja2VkTnVtKys7XHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgXHRpZiAoJHNjb3BlLnNlYXJjaFJlc3VsdHMubnVtYmVyT2ZQYWdlcygpID4gJHNjb3BlLnNlYXJjaFJlc3VsdHMuY2xpY2tlZE51bSkge1xyXG4gICAgICAgIFx0XHQkc2NvcGUuc2hvd0N1cnJlbnRQYWdlKDMsICRzY29wZS5zZWFyY2hSZXN1bHRzLmNsaWNrZWROdW0pO1xyXG4gICAgICAgIFx0fSBlbHNlIHtcclxuICAgICAgICBcdFx0JHNjb3BlLnNlYXJjaFJlc3VsdHMuY2xpY2tlZE51bSA9ICRzY29wZS5zZWFyY2hSZXN1bHRzLm51bWJlck9mUGFnZXMoKTtcclxuICAgICAgICBcdH1cclxuICAgICAgICB9OyovXHJcblxyXG4gICAgICAgIHZhciBnZW5lcmF0ZVBhZ2luYXRpb24gPSBmdW5jdGlvbihjdXJyZW50UGFnZUluZGV4LCB0b3RhbFBhZ2VDb3VudCwgcGFnZXNBcnJheSkge1xyXG4gICAgICAgICAgICAvLyB3aGVuIHdlIGhhdmUgdG90YWxQYWdlQ291bnQgaXMgMSBvciAyXHJcbiAgICAgICAgICAgIHZhciBuYXZBcnJheSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRvdGFsUGFnZUNvdW50IDw9IDIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwYWdlID0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAocGFnZSA8PSB0b3RhbFBhZ2VDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hdkFycmF5LnB1c2gocGFnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgKytwYWdlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBuYXZBcnJheTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZW5kc1xyXG5cclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQYWdlSW5kZXggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIC8vIG9uIHBhZ2UgbG9hZCBzZXQgcGFnaW5hdGlvbiAgKDEgKG5leHQgZm91ciBwYWdlcykuLi4gdG90YWxQYWdlQ291bnQpXHJcbiAgICAgICAgICAgICAgICBuYXZBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGkgPSAxO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgbmV4dCA0IHBhZ2VzLlxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0b3RhbFBhZ2VDb3VudCA+IGN1cnJlbnRQYWdlSW5kZXggKyBuZXh0Rm91clBhZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgPD0gY3VycmVudFBhZ2VJbmRleCArIG5leHRGb3VyUGFnZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmF2QXJyYXkucHVzaChpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgPCB0b3RhbFBhZ2VDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXZBcnJheS5wdXNoKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbmF2QXJyYXkucHVzaChlbGxpcHNlcywgdG90YWxQYWdlQ291bnQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0bW92ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChlbGxpcHNlcyA9PT0gcGFnZXNBcnJheVsxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydEVsbGlwc2VzSW5kZXggPSBwYWdlc0FycmF5LmluZGV4T2YoZWxsaXBzZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmRFbGxpcHNlc0luZGV4ID0gcGFnZXNBcnJheS5sYXN0SW5kZXhPZihlbGxpcHNlcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG5hdkFycmF5ID0gcGFnZXNBcnJheS5zbGljZShzdGFydEVsbGlwc2VzSW5kZXggKyAxLCBlbmRFbGxpcHNlc0luZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodG90YWxQYWdlQ291bnQgPD0gNikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFnZXNBcnJheTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hdkFycmF5ID0gcGFnZXNBcnJheS5zbGljZSgwLCBwYWdlc0FycmF5LmluZGV4T2YoJy4uLicpKTtcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdG1vdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b3RhbFBhZ2VDb3VudCA8PSA2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdkFycmF5LnNwbGljZSgxLCAwLCBlbGxpcHNlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdkFycmF5LnB1c2goZWxsaXBzZXMsIHRvdGFsUGFnZUNvdW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuYXZBcnJheTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRvdGFsUGFnZUNvdW50ID4gNikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuYXZBcnJheVtuYXZBcnJheS5sZW5ndGggLSAxXSA9PT0gY3VycmVudFBhZ2VJbmRleCkgeyAvLyBpZiBwYWdlIGlzIG1pZGFycmF5IGVuZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXZBcnJheSA9IGdldE5leHRTZXRQYWdlcyhjdXJyZW50UGFnZUluZGV4LCB0b3RhbFBhZ2VDb3VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdkFycmF5LnNwbGljZSgwLCAwLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UGFnZUluZGV4ID09PSB0b3RhbFBhZ2VDb3VudCkgeyAvLyBpZiBwYWdlID0gdG90YWwgcGFnZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmF2QXJyYXkgPSBnZXRQcmV2aW91c1NldFBhZ2VzKGN1cnJlbnRQYWdlSW5kZXgsIHRvdGFsUGFnZUNvdW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuYXZBcnJheVswXSA9PT0gY3VycmVudFBhZ2VJbmRleCArIDEpIHsgLy8gcHJldmlvdXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmF2QXJyYXkgPSBnZXRQcmV2aW91c1NldFBhZ2VzKGN1cnJlbnRQYWdlSW5kZXgsIHRvdGFsUGFnZUNvdW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmF2QXJyYXkuc3BsaWNlKDAsIDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFmaXJzdG1vdmUgJiAhbWF0Y2hlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFnZXNBcnJheTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZpcnN0bW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXZBcnJheS5zcGxpY2UoMSwgMCwgZWxsaXBzZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXZBcnJheS5wdXNoKGVsbGlwc2VzLCB0b3RhbFBhZ2VDb3VudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmF2QXJyYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5hdkFycmF5LnNwbGljZSgxLCAwLCBlbGxpcHNlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmF2QXJyYXkucHVzaChlbGxpcHNlcywgdG90YWxQYWdlQ291bnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbmF2QXJyYXk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldE5leHRTZXRQYWdlcyA9IGZ1bmN0aW9uKGN1cnJlbnRQYWdlSW5kZXgsIHRvdGFsUGFnZUNvdW50KSB7XHJcbiAgICAgICAgICAgIHZhciBzdGFydExpbWl0O1xyXG4gICAgICAgICAgICB2YXIgdXBwZXJMaW1pdDtcclxuICAgICAgICAgICAgdmFyIG1pZEFycmF5ID0gW107XHJcbiAgICAgICAgICAgIHZhciBkaWZmID0gKHRvdGFsUGFnZUNvdW50IC0gY3VycmVudFBhZ2VJbmRleCk7XHJcbiAgICAgICAgICAgIHZhciBoYXZlTmV4dFNldFBhZ2VzID0gKGRpZmYgPiBuZXh0U2V0UGFnZXMpO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBuZXh0IHNldCBvZiBwYWdlcy5cclxuXHJcbiAgICAgICAgICAgIGlmIChoYXZlTmV4dFNldFBhZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydExpbWl0ID0gY3VycmVudFBhZ2VJbmRleDtcclxuICAgICAgICAgICAgICAgIHVwcGVyTGltaXQgPSBjdXJyZW50UGFnZUluZGV4ICsgbmV4dFNldFBhZ2VzO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3RhcnRMaW1pdCA9IGN1cnJlbnRQYWdlSW5kZXggLSAobmV4dEZvdXJQYWdlcyAtIGRpZmYpO1xyXG4gICAgICAgICAgICAgICAgdXBwZXJMaW1pdCA9IHRvdGFsUGFnZUNvdW50IC0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3aGlsZSAoc3RhcnRMaW1pdCA8PSB1cHBlckxpbWl0KSB7XHJcbiAgICAgICAgICAgICAgICBtaWRBcnJheS5wdXNoKHN0YXJ0TGltaXQpO1xyXG4gICAgICAgICAgICAgICAgc3RhcnRMaW1pdCsrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbWlkQXJyYXk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFByZXZpb3VzU2V0UGFnZXMgPSBmdW5jdGlvbihjdXJyZW50UGFnZUluZGV4LCB0b3RhbFBhZ2VDb3VudCkge1xyXG4gICAgICAgICAgICB2YXIgbG93TGltaXQ7XHJcbiAgICAgICAgICAgIHZhciB1cHBlckxpbWl0O1xyXG4gICAgICAgICAgICB2YXIgbWlkQXJyYXkgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UGFnZUluZGV4ID09PSB0b3RhbFBhZ2VDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgbG93TGltaXQgPSBjdXJyZW50UGFnZUluZGV4IC0gNDsgLy8gZ2V0IHByZXZpb3VzIGZvdXIgcGFnZXMuXHJcbiAgICAgICAgICAgICAgICB1cHBlckxpbWl0ID0gY3VycmVudFBhZ2VJbmRleDtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChsb3dMaW1pdCA8IHVwcGVyTGltaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBtaWRBcnJheS5wdXNoKGxvd0xpbWl0KTtcclxuICAgICAgICAgICAgICAgICAgICBsb3dMaW1pdCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbWlkQXJyYXkuc3BsaWNlKDAsIDAsIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBtaWRBcnJheTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY3VycmVudFBhZ2VJbmRleCA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgbG93TGltaXQgPSBjdXJyZW50UGFnZUluZGV4O1xyXG4gICAgICAgICAgICAgICAgdXBwZXJMaW1pdCA9IGN1cnJlbnRQYWdlSW5kZXggKyAzO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRQYWdlSW5kZXggPT09IDMpIHtcclxuICAgICAgICAgICAgICAgIGxvd0xpbWl0ID0gY3VycmVudFBhZ2VJbmRleCAtIDE7XHJcbiAgICAgICAgICAgICAgICB1cHBlckxpbWl0ID0gY3VycmVudFBhZ2VJbmRleCArIDI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsb3dMaW1pdCA9IGN1cnJlbnRQYWdlSW5kZXggLSAyO1xyXG4gICAgICAgICAgICAgICAgdXBwZXJMaW1pdCA9IGN1cnJlbnRQYWdlSW5kZXggKyAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB3aGlsZSAobG93TGltaXQgPD0gdXBwZXJMaW1pdCkge1xyXG4gICAgICAgICAgICAgICAgbWlkQXJyYXkucHVzaChsb3dMaW1pdCk7XHJcbiAgICAgICAgICAgICAgICBsb3dMaW1pdCsrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbWlkQXJyYXk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gdXNlZCB0byBnZXQgbW9yZSBkYXRhIG9uIGNsaWNrIG9mIG1vcmUgcmVzdWx0cyBidXR0b24gaW4gbW9iaWxlXHJcbiAgICAgICAgLy8gdGhpcyBmdW5jdGlvbiBpcyBmb3Igb25seSBtb2JpbGUgdmlldyBwb3J0LlxyXG4gICAgICAgICRzY29wZS5nZXRNb3JlUmVzdWx0cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBtb2JpbGVMaXN0Q291bnQgPSBtb2JpbGVMaXN0Q291bnQgKyAkc2NvcGUuc2VhcmNoUmVzdWx0cy5jb3VudFBlclBhZ2U7XHJcbiAgICAgICAgICAgICRzY29wZS5zZWFyY2hSZXN1bHRzLnJlc3VsdExpc3QgPSAkc2NvcGUuc2VhcmNoUmVzdWx0cy5yZXN1bHRzLnNsaWNlKDAsIG1vYmlsZUxpc3RDb3VudCk7XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuc2VhcmNoUmVzdWx0cy5udW1iZXJPZlBhZ2VzKCkgPj0gKChtb2JpbGVMaXN0Q291bnQgKyAkc2NvcGUuc2VhcmNoUmVzdWx0cy5jb3VudFBlclBhZ2UpXHJcbiAgICAgICAgICAgICAgICAgICAgLyAkc2NvcGUuc2VhcmNoUmVzdWx0cy5jb3VudFBlclBhZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cy5zaG93TW9yZVJlc3VsdHMgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFJlc3VsdHMuc2hvd01vcmVSZXN1bHRzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBuYXZpdGF0ZSB0byBwYWdlIHRvcFxyXG4gICAgICAgICRzY29wZS5wYWdpbmF0ZVNjcm9sbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgdGFibGVWYWwgPSBhbmd1bGFyLmVsZW1lbnQoJy51LWdsb2JhbC1jb250YWluZXInKS5vZmZzZXQoKS50b3A7XHJcblxyXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogdGFibGVWYWxcclxuICAgICAgICAgICAgfSwgODAwKTtcclxuICAgICAgICB9O1xyXG4gICAgfV0pLmZpbHRlcignc3RhcnRGcm9tJywgW2Z1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCwgc3RhcnQpIHtcclxuICAgICAgICAgICAgaWYgKGlucHV0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIHBhcnNlIHRvIGludFxyXG4gICAgICAgICAgICAgICAgc3RhcnQgPSArc3RhcnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0LnNsaWNlKHN0YXJ0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmNvbnRyb2xsZXIoJ3NlY0ZpbGluZ3NDb250cmwnLCBbJyRzY29wZScsICdzZWNGaWxpbmdzU2VydmljZXMnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbigkc2NvcGUsIHNlY0ZpbGluZ3NTZXJ2aWNlcyxcclxuICAgICR0aW1lb3V0KSB7XHJcbiAgICAkc2NvcGUuc2VjRmlsaW5nc1R5cGVJbmZvID0gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgJ2ZpbGluZ1R5cGUnICAgICAgOiAnQWxsJyxcclxuICAgICAgICAgICAgJ3Bvc3RWYWx1ZScgICAgICAgOiAne1wiRlVOQ1RJT05cIjpcIkVkZ2FyUlRMaXN0XCIsXCJOVU1CRVJQRVJQQUdFXCI6XCI1MDAwXCJ9JyxcclxuICAgICAgICAgICAgJ2ZpbGluZ0ZpbHRlclR5cGUnOiAnJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAnZmlsaW5nVHlwZScgICAgICA6ICcxMC1LICYgMTAtUScsXHJcbiAgICAgICAgICAgICdwb3N0VmFsdWUnICAgICAgIDogJ3tcIkZVTkNUSU9OXCI6XCJFZGdhclJUTGlzdFwiLFwiTlVNQkVSUEVSUEFHRVwiOlwiMzAwMFwiLFwiRE9DVFlQRVwiOlwiQW5udWFsLFF1YXJ0ZXJseVwifScsXHJcbiAgICAgICAgICAgICdmaWxpbmdGaWx0ZXJUeXBlJzogJzEwLVF8MTAtS3wxMC1RL0F8MTAtSy9BfDEwLUs0MDV8MTAtSzQwNS9BJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAnZmlsaW5nVHlwZScgICAgICA6ICc4LUsnLFxyXG4gICAgICAgICAgICAncG9zdFZhbHVlJyAgICAgICA6ICd7XCJGVU5DVElPTlwiOlwiRWRnYXJSVExpc3RcIixcIk5VTUJFUlBFUlBBR0VcIjpcIjMwMDBcIixcIkRPQ1RZUEVcIjpcIkN1cnJlbnRcIn0nLFxyXG4gICAgICAgICAgICAnZmlsaW5nRmlsdGVyVHlwZSc6ICc4LUt8OC1LL0EnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgICdmaWxpbmdUeXBlJyAgICAgIDogJ090aGVyJyxcclxuICAgICAgICAgICAgJ3Bvc3RWYWx1ZScgICAgICAgOiAne1wiRlVOQ1RJT05cIjpcIkVkZ2FyUlRMaXN0XCIsXCJOVU1CRVJQRVJQQUdFXCI6XCIzMDAwXCIsXCJFWENMVURFRE9DVFlQRVwiOlwiQW5udWFsLFF1YXJ0ZXJseSxDdXJyZW50LFByb3h5LEluc2lkZXJcIn0nLFxyXG4gICAgICAgICAgICAnZmlsaW5nRmlsdGVyVHlwZSc6ICcxMS1LfDExLUsvQXwxM0YtSFJ8MTNGLU5UfDE1LTEyR3wyNXwyNS1OU0V8MjUtTlNFL0F8NDI0QjF8NDI0QjJ8NDI0QjN8NDI0QjR8NDI0QjV8NDI0Qjd8NDI1fDgtQTEyQnw4LUExMkcvQXxBV3xDVCBPUkRFUnxGV1B8TlQgMTEtS3xQT1MgQU18UE9TQVNSfFJXfFMtMXxTLTN8Uy0zL0F8Uy0zQVNSfFMtM0RQT1N8Uy00fFMtNC9BfFMtOHxTLTggUE9TfFNDIDEzRHxTQyAxM0QvQXxTQyAxM0d8U0MgMTNHL0EnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgICdmaWxpbmdUeXBlJyAgICAgIDogJ1Byb3h5IChERUYxNEEpJyxcclxuICAgICAgICAgICAgJ3Bvc3RWYWx1ZScgICAgICAgOiAne1wiRlVOQ1RJT05cIjpcIkVkZ2FyUlRMaXN0XCIsXCJOVU1CRVJQRVJQQUdFXCI6XCIzMDAwXCIsXCJET0NUWVBFXCI6XCJQcm94eVwifScsXHJcbiAgICAgICAgICAgICdmaWxpbmdGaWx0ZXJUeXBlJzogJ0RFRkExNEF8REVGIDE0QXxQUkUgMTRBfERFRlIxNEEnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgICdmaWxpbmdUeXBlJyAgICAgIDogJ0Zvcm0gMywgNCAmIDUnLFxyXG4gICAgICAgICAgICAncG9zdFZhbHVlJyAgICAgICA6ICd7XCJGVU5DVElPTlwiOlwiRWRnYXJSVExpc3RcIixcIk5VTUJFUlBFUlBBR0VcIjpcIjMwMDBcIixcIkRPQ1RZUEVcIjpcIkluc2lkZXJcIn0nLFxyXG4gICAgICAgICAgICAnZmlsaW5nRmlsdGVyVHlwZSc6ICc0fDQvQXw1fDN8My9BfDUvQSdcclxuICAgICAgICB9XHJcbiAgICBdO1xyXG4gICAgYW5ndWxhci5lbGVtZW50KCcuZmlsaW5nVHlwZScpLnZhbCgkc2NvcGUuc2VjRmlsaW5nc1R5cGVJbmZvWzBdLmZpbGluZ1R5cGUpO1xyXG4gICAgJHNjb3BlLnNlY0ZpbGluZ3NUeXBlSW5mby5zb3J0KCk7XHJcbiAgICAkc2NvcGUuY3VzdG9tRmlsdGVyID0gZnVuY3Rpb24oZGF0YSwgZGF0YUNvbHVtbikge1xyXG4gICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJTaG93KCk7XHJcbiAgICAgICAgJHNjb3BlLnBvc3RWYWx1ZSA9ICd7XCJGVU5DVElPTlwiOlwiRWRnYXJSVExpc3RcIixcIk5VTUJFUlBFUlBBR0VcIjpcIjUwMDBcIn0nO1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuc2VjRmlsaW5nc1R5cGVJbmZvLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUuZmlsaW5nVHlwZSA9PT0gZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RWYWx1ZSA9IHZhbHVlLnBvc3RWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNlY0ZpbGluZ3NTZXJ2aWNlcy5zZWNGaWxpbmdEYXRhKCRzY29wZS5wb3N0VmFsdWUsIGZ1bmN0aW9uKGRhdGFGcm9tSnNvbikge1xyXG4gICAgICAgICAgICB2YXIgZGF0YVZhbHVlLFxyXG4gICAgICAgICAgICAgICAgc2VjRmlsaW5nZGF0YSA9IGRhdGFGcm9tSnNvbjtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5maXJzdFRpbWVMb2FkID0gMDtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIEFyck5vRHVwZShhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IHtcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBbYVtpXV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHIgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrIGluIHRlbXApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoayA9PT0gJ0ZXUCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgci51bnNoaWZ0KGspO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHIucHVzaChrKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlY0ZpbGluZ2RhdGEgPSBzZWNGaWxpbmdkYXRhLkVER0FSUlRMSVNULlJFU1VMVC5ST1c7XHJcbiAgICAgICAgICAgIHZhciBzZWNGaWxpbmdzVHlwZSA9IFtdLFxyXG4gICAgICAgICAgICAgICAgc2VjRmlsaW5nRGF0ZSA9IFtdLFxyXG4gICAgICAgICAgICAgICAgc2VjRmlsaW5nRGF0YVRhYmxlID0gW107XHJcblxyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc2VjRmlsaW5nZGF0YSwgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHVzaCh2YWx1ZS5ET0NUWVBFKTtcclxuICAgICAgICAgICAgfSwgc2VjRmlsaW5nc1R5cGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coQXJyTm9EdXBlKHNlY0ZpbGluZ3NUeXBlKSk7XHJcbiAgICAgICAgICAgIC8vICRzY29wZS5zZWNGaWxpbmdzVHlwZUluZm89IEFyck5vRHVwZShzZWNGaWxpbmdzVHlwZSk7XHJcbiAgICAgICAgICAgIC8vICRzY29wZS5zZWNGaWxpbmdzVHlwZUluZm8uc29ydCgpO1xyXG4gICAgICAgICAgICAvLyAkc2NvcGUuc2VjRmlsaW5nc1R5cGVJbmZvLnVuc2hpZnQoJ0FsbCcpO1xyXG5cclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlY0ZpbGluZ2RhdGEsIGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhVmFsdWUgPSB2YWx1ZS5GSUxJTkdEQVRFLnNwbGl0KCctJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2goZGF0YVZhbHVlWzBdKTtcclxuICAgICAgICAgICAgfSwgc2VjRmlsaW5nRGF0ZSk7XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuc2VjRmlsaW5nc1R5cGVEYXRlID0gQXJyTm9EdXBlKHNlY0ZpbGluZ0RhdGUpO1xyXG4gICAgICAgICAgICB2YXIgYnJvd3Nlck5hbWUsIHZlck9mZnNldCxcclxuICAgICAgICAgICAgICAgIG5BZ3QgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xyXG5cclxuICAgICAgICAgICAgaWYgKCh2ZXJPZmZzZXQgPSBuQWd0LmluZGV4T2YoJ0ZpcmVmb3gnKSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBicm93c2VyTmFtZSA9ICdGaXJlZm94JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGJyb3dzZXJOYW1lICE9PSAnRmlyZWZveCcpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZWNGaWxpbmdzVHlwZURhdGUgPSAkc2NvcGUuc2VjRmlsaW5nc1R5cGVEYXRlLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLnNlY0ZpbGluZ3NUeXBlRGF0ZS51bnNoaWZ0KCdBbGwgWWVhcnMnKTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5sYXN0U2VjWWVhciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuc2VjWWVhcnMnKS52YWwoJHNjb3BlLnNlY0ZpbGluZ3NUeXBlRGF0ZVswXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gJHNjb3BlLnNlY1llYXJzPSRzY29wZS5zZWNGaWxpbmdzVHlwZURhdGVbMF07XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyAkc2NvcGUubGFzdEZpbGluZ1R5cGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJHNjb3BlLnNlY0ZpbGluZ3NUeXBlSW5mb1swXS5maWxpbmdUeXBlLCAnc2VjJylcclxuICAgICAgICAgICAgLy8gYW5ndWxhci5lbGVtZW50KCcuZmlsaW5nVHlwZScpLnZhbCgkc2NvcGUuc2VjRmlsaW5nc1R5cGVJbmZvWzBdLmZpbGluZ1R5cGUpO1xyXG4gICAgICAgICAgICAvLyAkc2NvcGUuZmlsaW5nVHlwZT0kc2NvcGUuc2VjRmlsaW5nc1R5cGVJbmZvWzBdO1xyXG4gICAgICAgICAgICAvLyB9O1xyXG5cclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlY0ZpbGluZ2RhdGEsIGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBzZWNGaWxpbmdEYXRhVGFibGUucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgJ0RPQ1RZUEUnICAgIDogdmFsdWUuRE9DVFlQRSxcclxuICAgICAgICAgICAgICAgICAgICAnRklEJyAgICAgICAgOiB2YWx1ZS5GSUQsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0RFU0NSSVBUSU9OJzogdmFsdWUuREVTQ1JJUFRJT04sXHJcbiAgICAgICAgICAgICAgICAgICAgJ0ZJTElOR0RBVEUnIDogZ2xvYmFsQ29uc3RhbnQuZm9ybWF0RGF0ZSh2YWx1ZS5GSUxJTkdEQVRFLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnLScpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8qIFNJWkU6IGdsb2JhbENvbnN0YW50LmJ5dGVzVG9TaXplKHZhbHVlLlNJWkUpKi9cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGRhdGEgPSBkYXRhLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGR0YWJsZSA9ICQoJyN0YWJsZS1hMS1kYXRhJykuZGF0YVRhYmxlKHtcclxuICAgICAgICAgICAgICAgICAgICAnZGVzdHJveSc6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgJ29yZGVyJyAgOiBbWzIsICdkZXNjJ11dLFxyXG4gICAgICAgICAgICAgICAgICAgICdkYXRhJyAgIDogc2VjRmlsaW5nRGF0YVRhYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgICdjb2x1bW5zJzogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YSc6ICdET0NUWVBFJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YSc6ICdERVNDUklQVElPTidcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEnOiAnRklMSU5HREFURSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHRcdFx0XHRcdC8qIHsgJ2RhdGEnOiAnU0laRScgfSovXHJcbiAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAnYkxlbmd0aENoYW5nZSc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICdhdXRvV2lkdGgnICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3Jlc3BvbnNpdmUnICAgOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICdkaXNwbGF5TGVuZ3RoJzogMjAsXHJcbiAgICAgICAgICAgICAgICAgICAgJ29MYW5ndWFnZScgICAgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdvUGFnaW5hdGUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc05leHQnICAgIDogJ05leHQgMjAgPGkgY2xhc3M9XCJmYSBmYS1jaGV2cm9uLXJpZ2h0XCI+PC9pPicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc1ByZXZpb3VzJzogJydcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3NJbmZvJyAgICAgICAgOiAnU2hvd2luZyBfU1RBUlRfLV9FTkRfIG9mIF9UT1RBTF8nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc0luZm9GaWx0ZXJlZCc6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAnY29sdW1uRGVmcyc6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdkYXRhVGFibGVzX25vd3JhcCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0cycgIDogWzJdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICdmblJvd0NhbGxiYWNrJzogZnVuY3Rpb24oblJvdywgc2VjRmlsaW5nRGF0YVRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyN0YWJsZS1hMS1kYXRhJykucmVtb3ZlQXR0cigncm9sZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCd0ZDplcSgxKScsIG5Sb3cpLmh0bWwoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGEgaHJlZj1cImh0dHA6Ly9pbnZlc3Rvci5zaGFyZWhvbGRlci5jb20vbG5jL3NlY2ZpbGluZy5jZm0/ZmlsaW5nSUQ9J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBzZWNGaWxpbmdEYXRhVGFibGUuRklEXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICdcIiB0aXRsZT1cIlZpZXcgSFRNTFwiIG9uY2xpY2s9XCJ3aW5kb3cub3Blbih0aGlzLmhyZWYsd2lkdGg9NjAwLGhlaWdodD00MDApOyByZXR1cm4gZmFsc2U7XCIgb25rZXlwcmVzcz1cIndpbmRvdy5vcGVuKHRoaXMuaHJlZix3aWR0aD02MDAsaGVpZ2h0PTQwMCk7IHJldHVybiBmYWxzZTtcIiA+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBzZWNGaWxpbmdEYXRhVGFibGUuREVTQ1JJUFRJT04gKyAnPC9hPicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5Sb3c7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgJCgnI3RhYmxlLWExLWRhdGFfZmlsdGVyJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpbGluZ1R5cGUsIGZpbGluZ1llYXI7XHJcblxyXG4gICAgICAgICAgICAgICAgZmlsaW5nVHlwZSA9IGFuZ3VsYXIuZWxlbWVudCgnLmZpbGluZ1R5cGUnKS5hdHRyKCdkYXRhLXZhbCcpO1xyXG4gICAgICAgICAgICAgICAgZmlsaW5nWWVhciA9IGFuZ3VsYXIuZWxlbWVudCgnLnNlY1llYXJzJykudmFsKCkudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YUNvbHVtbiA9PT0gJ0ZpbGluZ1R5cGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZmlsaW5nVHlwZSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YUNvbHVtbiA9PT0gJ1llYXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsaW5nWWVhciA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YUNvbHVtbiA9PT0gJ0JvdGgnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsaW5nVHlwZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGluZ1llYXIgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gJyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSA9PT0gJ2FsbCB5ZWFycycgfHwgZmlsaW5nWWVhciA9PT0gJ2FsbCB5ZWFycycpIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsaW5nWWVhciA9ICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgPT09ICdhbGwnIHx8IGZpbGluZ1R5cGUgPT09ICdhbGwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGluZ1R5cGUgPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZmlsaW5nVHlwZSA9PT0gJycgJiYgZmlsaW5nWWVhciA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBkdGFibGUuZm5GaWx0ZXIoJycpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmaWxpbmdUeXBlID09PSAnJyAmJiBmaWxpbmdZZWFyICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGR0YWJsZS5mbkZpbHRlcihmaWxpbmdZZWFyKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsaW5nWWVhciA9PT0gJycgJiYgZmlsaW5nVHlwZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBkdGFibGUuZm5GaWx0ZXIodW5lc2NhcGUoJ14nICsgZmlsaW5nVHlwZSArICckJyksIDAsIHRydWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsaW5nWWVhciAhPT0gJycgJiYgZmlsaW5nVHlwZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBkdGFibGUuZm5GaWx0ZXIodW5lc2NhcGUoJ14nICsgZmlsaW5nVHlwZSArICckJyksIDAsIHRydWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBkdGFibGUuZm5GaWx0ZXIoZmlsaW5nWWVhcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcGFnaW5hdGVTY3JvbGwoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlVmFsID0gYW5ndWxhci5lbGVtZW50KCcudGJsLWExJykub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWFkZXJIZ3QgPSBhbmd1bGFyLmVsZW1lbnQoJy5Ub3BoZWFkZXItbG9nb2FyZWEnKS5vdXRlckhlaWdodChcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlVmFsID0gKHRhYmxlVmFsIC0gaGVhZGVySGd0KSAtIDIwO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnaHRtbCwgYm9keScpLnN0b3AoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3Njcm9sbFRvcCc6IHRhYmxlVmFsXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgODAwKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcucGFnaW5hdGVfYnV0dG9uJykudW5iaW5kKCdjbGljaycsIHBhZ2luYXRlU2Nyb2xsKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcucGFnaW5hdGVfYnV0dG9uJykuYmluZCgnY2xpY2snLCBwYWdpbmF0ZVNjcm9sbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5maXJzdFRpbWVMb2FkID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLnBhZ2luYXRlX2J1dHRvbicpLnVuYmluZCgnY2xpY2snLCBwYWdpbmF0ZVNjcm9sbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLnBhZ2luYXRlX2J1dHRvbicpLmJpbmQoJ2NsaWNrJywgcGFnaW5hdGVTY3JvbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5maXJzdFRpbWVMb2FkID0gMTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGVTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJIaWRlKCk7XHJcbiAgICAgICAgICAgIH0sIDIwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgJHNjb3BlLmN1c3RvbUZpbHRlcignTnVsbFZhbHVlJywgJ0JvdGgnKTtcclxufV0pOyIsIi8qIGdsb2JhbCBjdXJyZW50UGFnZUlkICovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcbiAgYW5ndWxhci5tb2R1bGUoJ2xmZ2FwcCcpLmNvbnRyb2xsZXIoJ3N0YXJSYXRpbmdDb250cm9sbGVyJywgWydSZXN0U2VydmljZScsICckdGltZW91dCcsIGZ1bmN0aW9uKHJlc3RTZXJ2aWNlLCAkdGltZW91dCkge1xyXG4gICAgdmFyIHN0YXJSYXRpbmcgPSB0aGlzO1xyXG4gICAgdmFyIHVybCA9ICcvcGJsLWdhdGV3YXktc2VydmljZS1hcHAvcmVzdC9wYmwtZ2F0ZXdheS9nYXRld2F5RGF0YSc7XHJcbiAgICB2YXIgbXNnVGltZW91dCA9IDIwMDA7XHJcblxyXG4gICAgc3RhclJhdGluZy5yYXRpbmcgPSAwO1xyXG4gICAgc3RhclJhdGluZy50b3RhbFJhdGluZ3MgPSAwO1xyXG4gICAgc3RhclJhdGluZy5zYXZlTW9kZSA9IGZhbHNlO1xyXG4gICAgc3RhclJhdGluZy5zdWNjZXNzTW9kZSA9IGZhbHNlO1xyXG4gICAgc3RhclJhdGluZy5zcGlubmVyID0gZmFsc2U7XHJcblxyXG4gICAgc3RhclJhdGluZy5pbml0ID0gZnVuY3Rpb24odGltZW91dCkge1xyXG4gICAgICB2YXIgcmVxdWVzdEJvZHkgPSB7XHJcbiAgICAgICAgJ3BhZ2VJZCcgICAgOiBjdXJyZW50UGFnZUlkLFxyXG4gICAgICAgICdTRVJWSUNFX0lEJzogJ0lOVF9TVEFSX1JBVElOR19HRVQnXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBpZiAodGltZW91dCkge1xyXG4gICAgICAgIG1zZ1RpbWVvdXQgPSB0aW1lb3V0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzdGFyUmF0aW5nU2VydmljZShyZXF1ZXN0Qm9keSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN0YXJSYXRpbmcub25Ib3ZlckZvY3VzID0gZnVuY3Rpb24oc3Rhcikge1xyXG4gICAgICBzdGFyUmF0aW5nLmN1cnJTdGFyID0gc3RhcjtcclxuICAgIH07XHJcblxyXG4gICAgc3RhclJhdGluZy5vbkhvdmVyRm9jdXNFeGl0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHN0YXJSYXRpbmcuY3VyclN0YXIgPSBzdGFyUmF0aW5nLnJhdGluZztcclxuICAgIH07XHJcblxyXG4gICAgc3RhclJhdGluZy5zdGFyQ2xpY2sgPSBmdW5jdGlvbihzdGFyKSB7XHJcbiAgICAgIGlmICghc3RhclJhdGluZy5zYXZlTW9kZSkge1xyXG4gICAgICAgIHZhciBtb2RlID0gJ1NBVkUnO1xyXG5cclxuICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICdldmVudF9hY3Rpb24nOiAnbGluaycsXHJcbiAgICAgICAgICAnZXZlbnRfbmFtZScgIDogJycgKyBzdGFyLFxyXG4gICAgICAgICAgJ2V2ZW50X3R5cGUnICA6ICdzdGFyIHJhdGluZydcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHV0YWcgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICB1dGFnLmxpbmsoZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGFyUmF0aW5nLnNhdmVNb2RlID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcmVxdWVzdEJvZHkgPSB7XHJcbiAgICAgICAgICAncGFnZUlkJyAgICAgOiBjdXJyZW50UGFnZUlkLFxyXG4gICAgICAgICAgJ3BhZ2VUaXRsZScgIDogZG9jdW1lbnQudGl0bGUsXHJcbiAgICAgICAgICAncGFnZVZlcnNpb24nOiAnMScsXHJcbiAgICAgICAgICAncmF0aW5nJyAgICAgOiBzdGFyLFxyXG4gICAgICAgICAgJ2FwcE5hbWUnICAgIDogJ0xGRycsXHJcbiAgICAgICAgICAnU0VSVklDRV9JRCcgOiAnSU5UX1NUQVJfUkFUSU5HX1NBVkUnXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc3RhclJhdGluZ1NlcnZpY2UocmVxdWVzdEJvZHksIG1vZGUpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIHN0YXJSYXRpbmdTZXJ2aWNlKHJlcXVlc3RCb2R5LCBtb2RlKSB7XHJcbiAgICAgIHN0YXJSYXRpbmcuc3Bpbm5lciA9IHRydWU7XHJcbiAgICAgIHJlc3RTZXJ2aWNlLnBvc3QodXJsLCByZXF1ZXN0Qm9keSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgIHN0YXJSYXRpbmcucmF0aW5nID0gcmVzcG9uc2UuZGF0YS5hdmdSYXRpbmcudG9GaXhlZCgxKTtcclxuICAgICAgICAgIHN0YXJSYXRpbmcuY3VyclN0YXIgPSBzdGFyUmF0aW5nLnJhdGluZztcclxuICAgICAgICAgIHN0YXJSYXRpbmcudG90YWxSYXRpbmdzID0gcmVzcG9uc2UuZGF0YS5jb3VudDtcclxuICAgICAgICAgIHN0YXJSYXRpbmcuc2VydmljZU1zZyA9ICdUaGFuayB5b3UhJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc3RhclJhdGluZy5zZXJ2aWNlTXNnID0gJ1BsZWFzZSB0cnkgYWdhaW4gbGF0ZXInO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGFyUmF0aW5nLnNwaW5uZXIgPSBmYWxzZTtcclxuICAgICAgICBpZiAobW9kZSA9PT0gJ1NBVkUnKSB7XHJcbiAgICAgICAgICBzdGFyUmF0aW5nLnNhdmVNb2RlID0gZmFsc2U7XHJcbiAgICAgICAgICBzdGFyUmF0aW5nLnN1Y2Nlc3NNb2RlID0gdHJ1ZTtcclxuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzdGFyUmF0aW5nLnN1Y2Nlc3NNb2RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICQoJy5zdGFyLXJhdGluZy1jb250JykuZm9jdXMoKTtcclxuICAgICAgICAgIH0sIG1zZ1RpbWVvdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfV0pO1xyXG59KSgpOyIsIi8qIGdsb2JhbCBjdXJyZW50UGFnZUlkLCBpbmRpdmlkdWFsUGFnZUlkLCBhdWRpZW5jZV90b3BfbmF2X2lkLCBpbmRpdmlkdWFsUGFnZVVSTCAqL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gIGFuZ3VsYXIubW9kdWxlKCdMRkdIZWFkZXInKS5jb250cm9sbGVyKCdBdWRpZW5jZUFnZVNlbGVjdG9yQ29udHJvbGxlcicsIFtmdW5jdGlvbigpIHtcclxuICAgIHZhciBhdWRpZW5jZUFnZVNlbFZNID0gdGhpcztcclxuXHJcbiAgICBhdWRpZW5jZUFnZVNlbFZNLnNlZ21lbnRWYWwgPSBudWxsO1xyXG4gXHJcbiAgICAkKGRvY3VtZW50KS5tb3VzZXVwKGZ1bmN0aW9uKGV2ZW50KXtcclxuICAgICAgaWYoJChcIi50b3BoZWFkZXItc3VibWVudS1jb250YWluZXItLWF1ZGllbmNlLWFnZS1zZWxcIikuaGFzKGV2ZW50LnRhcmdldCkubGVuZ3RoPT09MCl7XHJcbiAgICAgICAgJChcIi50b3BoZWFkZXItc3VibWVudS1jb250YWluZXItLWF1ZGllbmNlLWFnZS1zZWxcIikucmVtb3ZlQ2xhc3MoXCJ0b3BoZWFkZXItc3VibWVudS1jb250YWluZXItLWF1ZGllbmNlLWFnZS1zZWxcIik7XHJcbiAgICAgICAgJChcIi50b3BoZWFkZXItbWVudV9fY2FyZXQtc2hvd1wiKS5yZW1vdmVDbGFzcyhcInRvcGhlYWRlci1tZW51X19jYXJldC1zaG93XCIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkKFwiLnRvcGhlYWRlci1tZW51X19pdGVtLS1hdWRpZW5jZVwiKS5jbGljayhmdW5jdGlvbihlKXtcclxuICAgICAgIHZhciBhdWRpZW5jZUNsYXNzID0gJChcIi5hdWRpZW5jZS1hZ2Utc2VsZWN0b3JcIikuaGFzQ2xhc3MoXCJ0b3BoZWFkZXItc3VibWVudS1jb250YWluZXItLWF1ZGllbmNlLWFnZS1zZWxcIik7XHJcbiAgICAgICB2YXIgdG9wSGVhZGVyQ2xhc3MgPSAkKFwiLnRvcGhlYWRlci1zdWJtZW51LWNvbnRhaW5lclwiKS5oYXNDbGFzcyhcInRvcGhlYWRlci1zdWJtZW51LWNvbnRhaW5lci0tYXVkaWVuY2UtYWdlLXNlbFwiKTtcclxuICAgICAgaWYodG9wSGVhZGVyQ2xhc3MgPT0gdHJ1ZSAmJiBhdWRpZW5jZUNsYXNzID09IHRydWUpe1xyXG4gICAgICAgICQoXCIuYXVkaWVuY2UtYWdlLXNlbGVjdG9yXCIpLnJlbW92ZUNsYXNzKFwidG9waGVhZGVyLXN1Ym1lbnUtY29udGFpbmVyLS1hdWRpZW5jZS1hZ2Utc2VsXCIpO1xyXG4gICAgICB9ZWxzZSAgaWYodG9wSGVhZGVyQ2xhc3MgPT0gZmFsc2UgJiYgYXVkaWVuY2VDbGFzcyA9PSBmYWxzZSl7XHJcbiAgICAgICAgICAkKFwiLmF1ZGllbmNlLWFnZS1zZWxlY3RvclwiKS5hZGRDbGFzcyhcInRvcGhlYWRlci1zdWJtZW51LWNvbnRhaW5lci0tYXVkaWVuY2UtYWdlLXNlbFwiKTtcclxuICAgICAgICB9ZWxzZSBpZih0b3BIZWFkZXJDbGFzcyA9PSBmYWxzZSAmJiBhdWRpZW5jZUNsYXNzID09IHRydWUpe1xyXG4gICAgICAgICAgICQoXCIuYXVkaWVuY2UtYWdlLXNlbGVjdG9yXCIpLnJlbW92ZUNsYXNzKFwidG9waGVhZGVyLXN1Ym1lbnUtY29udGFpbmVyLS1hdWRpZW5jZS1hZ2Utc2VsXCIpO1xyXG4gICAgICAgIH1lbHNlIGlmKHRvcEhlYWRlckNsYXNzID09IHRydWUgJiYgYXVkaWVuY2VDbGFzcyA9PSBmYWxzZSl7XHJcbiAgICAgICAgICAgJChcIi5hdWRpZW5jZS1hZ2Utc2VsZWN0b3JcIikucmVtb3ZlQ2xhc3MoXCJ0b3BoZWFkZXItc3VibWVudS1jb250YWluZXItLWF1ZGllbmNlLWFnZS1zZWxcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gdG9nZ2xlU2Nyb2xsKGRpc2FibGVTY3JvbGwpIHtcclxuICAgICAgaWYgKGRpc2FibGVTY3JvbGwpIHtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2JvZHknKS5oZWlnaHQoYW5ndWxhci5lbGVtZW50KHdpbmRvdykuaGVpZ2h0KCkpLmNzcyh7XHJcbiAgICAgICAgICAnb3ZlcmZsb3cnOiAnaGlkZGVuJyxcclxuICAgICAgICAgICdwb3NpdGlvbic6ICdmaXhlZCdcclxuICAgICAgICB9KTtcclxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy50b3BoZWFkZXInKS5jc3Moe1xyXG4gICAgICAgICAgJ292ZXJmbG93JzogJ3Zpc2libGUnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCdib2R5JykuY3NzKHtcclxuICAgICAgICAgICdoZWlnaHQnICA6ICdhdXRvJyxcclxuICAgICAgICAgICdvdmVyZmxvdyc6ICdhdXRvJyxcclxuICAgICAgICAgICdwb3NpdGlvbic6ICdzdGF0aWMnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcudG9waGVhZGVyJykuY3NzKHtcclxuICAgICAgICAgICdvdmVyZmxvdyc6ICdoaWRkZW4nXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhdWRpZW5jZUFnZVNlbFZNLmluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKGdldENvb2tpZSgndmlzaXRvclNlZ0Nvb2tpZScpICE9PSB1bmRlZmluZWQgJiYgZ2V0Q29va2llKCd2aXNpdG9yU2VnQ29va2llJykgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICYmIGdldENvb2tpZSgndmlzaXRvclNlZ0Nvb2tpZScpICE9PSAnJykge1xyXG4gICAgICAgIC8vIGRpc3BsYXkgc2VsZWN0ZWQgYWdlIGdyb3VwXHJcbiAgICAgICAgYXVkaWVuY2VBZ2VTZWxWTS5zZWdtZW50VmFsID0gZ2V0Q29va2llKCd2aXNpdG9yU2VnQ29va2llJyk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGN1cnJlbnRQYWdlSWQgPT09IGluZGl2aWR1YWxQYWdlSWQgJiYgYXVkaWVuY2VBZ2VTZWxWTS5zZWdtZW50VmFsID09PSBudWxsKSB7XHJcbiAgICAgICAgYXVkaWVuY2VBZ2VTZWxWTS5zaG93QXVkaWVuY2VBZ2VTZWwgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGF1ZGllbmNlQWdlU2VsVk0uYXVkaWVuY2VBZ2VTZWwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgYXVkaWVuY2VBZ2VTZWxWTS5zaG93QXVkaWVuY2VBZ2VTZWwgPyBhdWRpZW5jZUFnZVNlbFZNLnNob3dBdWRpZW5jZUFnZVNlbCA9IGZhbHNlIDogYXVkaWVuY2VBZ2VTZWxWTS5zaG93QXVkaWVuY2VBZ2VTZWwgPSB0cnVlO1xyXG4gICAgfTtcclxuXHJcbiAgICBhdWRpZW5jZUFnZVNlbFZNLm1vYmlsZUF1ZGllbmNlQWdlU2VsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGF1ZGllbmNlQWdlU2VsVk0uc2hvd0F1ZGllbmNlQWdlU2VsZWN0b3JNb2JpbGUgPyBhdWRpZW5jZUFnZVNlbFZNLnNob3dBdWRpZW5jZUFnZVNlbGVjdG9yTW9iaWxlID0gZmFsc2UgOiBhdWRpZW5jZUFnZVNlbFZNLnNob3dBdWRpZW5jZUFnZVNlbGVjdG9yTW9iaWxlXHJcbiAgICAgICAgPSB0cnVlO1xyXG4gICAgICB0b2dnbGVTY3JvbGwoYXVkaWVuY2VBZ2VTZWxWTS5zaG93QXVkaWVuY2VBZ2VTZWxlY3Rvck1vYmlsZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGF1ZGllbmNlQWdlU2VsVk0uc2V0U2VnbWVudCA9IGZ1bmN0aW9uKHNlZ21lbnQpIHtcclxuICAgICAgc2V0Q29va2llKCd2aXNpdG9yU2VnQ29va2llJywgc2VnbWVudCwgJzM2NScpO1xyXG4gICAgICB2YXIgZGF0YUluZm8gPSB7XHJcbiAgICAgICAgJ2V2ZW50X2FjdGlvbic6ICdsaW5rJyxcclxuICAgICAgICAnZXZlbnRfbmFtZScgIDogc2VnbWVudCxcclxuICAgICAgICAnZXZlbnRfdHlwZScgIDogJ0dlbmVyYXRpb25hbCBDb250ZW50J1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiB1dGFnICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHV0YWcubGluayhkYXRhSW5mbyk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGluZGl2aWR1YWxQYWdlSWQgPT09IGF1ZGllbmNlX3RvcF9uYXZfaWQpIHtcclxuICAgICAgICBsb2NhdGlvbi5yZWxvYWQodHJ1ZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBpbmRpdmlkdWFsUGFnZVVSTDtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XSk7XHJcbn0pKCk7IiwiLyogZ2xvYmFscyBjdXJyTG9jYWxlIGxvY2FsZXMgKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbihmdW5jdGlvbigpIHtcclxuICBhbmd1bGFyLm1vZHVsZSgnTEZHSGVhZGVyJykuY29udHJvbGxlcignTEZHTG9jYWxlQ29udHJvbGxlcicsIFtmdW5jdGlvbigpIHtcclxuICAgIHZhciBsZmdMb2NhbGVWTSA9IHRoaXM7XHJcbiAgICB2YXIgbG9jYWxlQXJyYXkgPSB7XHJcbiAgICAgICdlbl9VUyc6ICdFTkdMSVNILUVOJyxcclxuICAgICAgJ2VzX0VTJzogJ1NQQU5JU0gtRVMnXHJcbiAgICB9O1xyXG5cclxuICAgIGxmZ0xvY2FsZVZNLmN1cnJMb2NhbGVEZXNrdG9wID0gJ0VOJztcclxuICAgIGxmZ0xvY2FsZVZNLmN1cnJMb2NhbGVNb2JpbGUgPSAnRU5HTElTSCc7XHJcblxyXG4gICAgbGZnTG9jYWxlVk0uaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAoY3VyckxvY2FsZSAhPT0gdW5kZWZpbmVkICYmIGN1cnJMb2NhbGUgIT09IG51bGwgJiYgY3VyckxvY2FsZSAhPT0gJycpIHtcclxuICAgICAgICB2YXIgY3VyckxvY2FsZVRlbXAgPSBsb2NhbGVBcnJheVtjdXJyTG9jYWxlXS5zcGxpdCgnLScpO1xyXG5cclxuICAgICAgICBsZmdMb2NhbGVWTS5jdXJyTG9jYWxlRGVza3RvcCA9IGN1cnJMb2NhbGVUZW1wWzFdLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgbGZnTG9jYWxlVk0uY3VyckxvY2FsZU1vYmlsZSA9IGN1cnJMb2NhbGVUZW1wWzBdLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgbGZnTG9jYWxlVk0ubG9jYWxlQ2xpY2sgPSBmdW5jdGlvbihsb2NhbGVEZXNjKSB7XHJcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gbG9jYWxlc1tsb2NhbGVEZXNjXTtcclxuICAgIH07XHJcbiAgfV0pO1xyXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIGFuZ3VsYXIubW9kdWxlKCdsZmdhcHAnKS5jb250cm9sbGVyKCdzZWN1cmVkQ29udGVudENvbnRyb2xsZXInLCBbJyRzY29wZScsICckd2luZG93JywgJyRyb290U2NvcGUnLFxyXG4gICAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJHdpbmRvdywgJHJvb3RTY29wZSkge1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VjdXJlZENvbnRlbnRWTSA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VjdXJlZENvbnRlbnRWTS5zaG93TG9naW4gPSAxO1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VjdXJlZENvbnRlbnRWTS5zaG93RGVmYXVsdCA9IDA7XHJcbiAgICAgICAgICAgICRzY29wZS5zZWN1cmVkQ29udGVudFZNLnNob3dTZWN1cmVkID0gMDtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5zZWN1cmVkQ29udGVudFZNLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInNlY3VyZWRDb250ZW50Vk0gaW5pdCBjYWxsZWRcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGxvZ2luRm9ybU5hbWUgPSBhbmd1bGFyLmVsZW1lbnQoJyNzZWN1cmVkLWNvbnRlbnQtbG9naW4gZm9ybS5lbHEtZm9ybScpLmF0dHIoXCJuYW1lXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiZWxxX1wiK2xvZ2luRm9ybU5hbWUrXCJfcmVkaXJlY3RcIikgPT0gbnVsbCB8fCBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImVscV9cIitsb2dpbkZvcm1OYW1lK1wiX3JlZGlyZWN0XCIpID09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImVscV9cIitsb2dpbkZvcm1OYW1lK1wiX3JlZGlyZWN0XCIsIFwiMFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBsb2dpblN0YXRlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJlbHFfXCIrbG9naW5Gb3JtTmFtZStcIl9yZWRpcmVjdFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImxvZ2luRm9ybU5hbWU6XCIsbG9naW5Gb3JtTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImxvZ2luU3RhdGU6XCIsbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJlbHFfXCIrbG9naW5Gb3JtTmFtZStcIl9yZWRpcmVjdFwiKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KGxvZ2luU3RhdGUpID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VjdXJlZENvbnRlbnRWTS5zaG93TG9naW4gPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWN1cmVkQ29udGVudFZNLnNob3dEZWZhdWx0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VjdXJlZENvbnRlbnRWTS5zaG93U2VjdXJlZCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlSW50KGxvZ2luU3RhdGUpID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VjdXJlZENvbnRlbnRWTS5zaG93TG9naW4gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWN1cmVkQ29udGVudFZNLnNob3dEZWZhdWx0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VjdXJlZENvbnRlbnRWTS5zaG93U2VjdXJlZCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJlbHFfXCIrbG9naW5Gb3JtTmFtZStcIl9yZWRpcmVjdFwiLFwiMlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAvL2hhbmRsZSByZWRpcmVjdCBmb3IgZXh0ZXJuYWwgdG9vbHNcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5jb21wb25lbnRQYWdlVVJMICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKFwiZXh0ZXJuYWxSZWRpcmVjdFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2V4dGVybmFsIHJlZGlyZWN0IGZpcmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tb25GdW5jdGlvbnMubG9hZGVyU2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IHdpbmRvdy5jb21wb25lbnRQYWdlVVJMO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlSW50KGxvZ2luU3RhdGUpID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VjdXJlZENvbnRlbnRWTS5zaG93TG9naW4gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWN1cmVkQ29udGVudFZNLnNob3dEZWZhdWx0ID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VjdXJlZENvbnRlbnRWTS5zaG93U2VjdXJlZCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfV0pO1xyXG59KSgpO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcblxyXG5sZmdhcHAuY29udHJvbGxlcignY29tcGFyZU92ZXJsYXlDb250cmwnLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xyXG4gICAgJHNjb3BlLiRvbignY29tcGFyZU92ZXJsYXlEYXRhJywgZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICAkc2NvcGUuY29tcGFyZUNoYXJ0RGF0YShkYXRhKTtcclxuICAgIH0pO1xyXG4gICAgdmFyIGNoYXJ0Q29tbW9uID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBjaGFydE1vZHVsZSA9IHtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY2hhcnRNb2R1bGUuZmlsdGVyQ2hhcnQgPSBmdW5jdGlvbihmaWx0ZXJIZWFkZXIpIHtcclxuICAgICAgICAgICAgdmFyIGNhdGVnb3JpZXNYYXhpcyxcclxuICAgICAgICAgICAgICAgIHNlcmllc1ZhbHVlcyA9IFtdLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyRGF0YSwgeEF4aXNUaXRsZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmaWx0ZXJIZWFkZXIudmFsdWUgPT09ICczJykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvbXBhcmVQZGYgPSAkc2NvcGUuY29tcGFyZVdpdGhWaWV3LnJlcGxhY2UoJ3t7dmlld0lkfX0nLCBnbG9iYWxDb25zdGFudFxyXG4gICAgICAgICAgICAgICAgICAgIC5tb250aGx5UXVhclBkZik7XHJcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzWGF4aXMgPSBbJzEgWXInLCAnNSBZcicsICcxMCBZciBvciBTaW5jZSBJbmNlcHRpb24nXTtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuY2hhcnRWYWx1ZXMucXVhcnRlcmx5UGVyZm9ybSwgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJpZXNWYWx1ZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICduYW1lJyAgICA6IHZhbHVlLmludmVzdG1lbnRPcHRpb24ucmVwbGFjZSgvJm5ic3A7L2csICcnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Z1bmRJZCcgIDogdmFsdWUucGZsSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdzZWxlY3RlZCc6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhJyAgICA6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE51bWJlcigodmFsdWUucGVyZlZhbHVlT25lWWVhcikucmVwbGFjZSgnTi9BJywgMCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTnVtYmVyKCh2YWx1ZS5wZXJmVmFsdWVGaXZlWWVhcikucmVwbGFjZSgnTi9BJywgMCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTnVtYmVyKCh2YWx1ZS5wZXJmVmFsdWVUZW5ZZWFyU2luY2VJbmNlcHRpb24pLnJlcGxhY2UoJ04vQScsIDApKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXNYYXhpcyA9IFsnMSBNbycsICczIE1vJywgJzEgWXInLCAnMyBZcicsICc1IFlyJywgJzEwIFlyJ107XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVySGVhZGVyLnZhbHVlID09PSAnMicpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29tcGFyZVBkZiA9ICRzY29wZS5jb21wYXJlV2l0aFZpZXcucmVwbGFjZSgne3t2aWV3SWR9fScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbENvbnN0YW50Lm1vbnRobHlTdXJyUGRmKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJEYXRhID0gJHNjb3BlLmNoYXJ0VmFsdWVzLm1vbnRobHlQZXJmb3JtU3VycmVuZGVyO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29tcGFyZVBkZiA9ICRzY29wZS5jb21wYXJlV2l0aFZpZXcucmVwbGFjZSgne3t2aWV3SWR9fScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbENvbnN0YW50Lm1vbnRobHlQZGYpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlckRhdGEgPSAkc2NvcGUuY2hhcnRWYWx1ZXMubW9udGhseVBlcmZvcm07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goaGVhZGVyRGF0YSwgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJpZXNWYWx1ZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICduYW1lJyAgICA6IHZhbHVlLnN1YkFjY05hbWUucmVwbGFjZSgvJm5ic3A7L2csICcnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Z1bmRJZCcgIDogdmFsdWUucGZsSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdzZWxlY3RlZCc6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhJyAgICA6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE51bWJlcigodmFsdWUucGVyZlZhbHVlT25lTW9udGgpLnJlcGxhY2UoJ04vQScsIDApKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE51bWJlcigodmFsdWUucGVyZlZhbHVlVGhyZWVNb250aCkucmVwbGFjZSgnTi9BJywgMCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTnVtYmVyKCh2YWx1ZS5wZXJmVmFsdWVPbmVZZWFyKS5yZXBsYWNlKCdOL0EnLCAwKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdW1iZXIoKHZhbHVlLnBlcmZWYWx1ZVRocmVlWWVhcikucmVwbGFjZSgnTi9BJywgMCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTnVtYmVyKCh2YWx1ZS5wZXJmVmFsdWVGaXZlWWVhcikucmVwbGFjZSgnTi9BJywgMCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTnVtYmVyKCh2YWx1ZS5wZXJmVmFsdWVUZW5ZZWFyKS5yZXBsYWNlKCdOL0EnLCAwKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgeEF4aXNUaXRsZSA9IGdsb2JhbENvbnN0YW50LmFubnVhbFJldHVybiArICRzY29wZS5jaGFydFZhbHVlcy5sYXN0UGVyZkRhdGU7XHJcbiAgICAgICAgICAgIGNoYXJ0TW9kdWxlLmNvbXBhcmVDaGFydENyZWF0ZShjYXRlZ29yaWVzWGF4aXMsIHNlcmllc1ZhbHVlcywgeEF4aXNUaXRsZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjaGFydE1vZHVsZS5jb21wYXJlQ2hhcnRDcmVhdGUgPSBmdW5jdGlvbihjYXRlZ29yaWVzWGF4aXMsIHNlcmllc1ZhbHVlcywgeEF4aXNUaXRsZSkge1xyXG4gICAgICAgICAgICB2YXIgbGVnZW5kV2lkdGgsIGxlZ2VuZFN0eWxlV2lkdGgsIGNoa01hcmdpblRvcCwgY2hrTGVmdCwgeGF4aXNUaXRXaWR0aCwgY29sb3JzO1xyXG5cclxuICAgICAgICAgICAgY29sb3JzID0gWycjOTRBRTBBJywgJyMxMTVGQTYnLCAnI0E2MTEyMCcsICcjRkY4ODA5JywgJyNGRkQxM0UnXTtcclxuICAgICAgICAgICAgaWYgKHNzbS5pc0FjdGl2ZSgnbW9iaWxlJykpIHtcclxuICAgICAgICAgICAgICAgIGxlZ2VuZFdpZHRoID0gMjYwO1xyXG4gICAgICAgICAgICAgICAgbGVnZW5kU3R5bGVXaWR0aCA9IDIwMDtcclxuICAgICAgICAgICAgICAgIGNoa01hcmdpblRvcCA9ICcxMyUnO1xyXG4gICAgICAgICAgICAgICAgY2hrTGVmdCA9ICc4MyUnO1xyXG4gICAgICAgICAgICAgICAgeGF4aXNUaXRXaWR0aCA9IDIyMDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxlZ2VuZFdpZHRoID0gNTAwO1xyXG4gICAgICAgICAgICAgICAgbGVnZW5kU3R5bGVXaWR0aCA9IDQ1MDtcclxuICAgICAgICAgICAgICAgIGNoa01hcmdpblRvcCA9ICczJSc7XHJcbiAgICAgICAgICAgICAgICBjaGtMZWZ0ID0gJzgzJSc7XHJcbiAgICAgICAgICAgICAgICB4YXhpc1RpdFdpZHRoID0gNDIwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICQoJyNjb21wYXJlQ29udGFpbmVyJykuaGlnaGNoYXJ0cyh7XHJcbiAgICAgICAgICAgICAgICAnY2hhcnQnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnY29sdW1uJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICd0aXRsZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAndGV4dCc6IG51bGxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAneEF4aXMnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2dyaWRMaW5lV2lkdGgnOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICdsYWJlbHMnICAgICAgIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc3R5bGUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9udFNpemUnOiAnMTJweCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgJ2NhdGVnb3JpZXMnOiBjYXRlZ29yaWVzWGF4aXMsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJyAgICAgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdzdHlsZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb250V2VpZ2h0JzogJ2JvbGQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJyAgICAgOiB4YXhpc1RpdFdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0JzogeEF4aXNUaXRsZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAneUF4aXMnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc3R5bGUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9udFdlaWdodCc6ICdib2xkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAndGV4dCc6IGdsb2JhbENvbnN0YW50LnBlcmN0Q2hhbmdlXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAnbGFiZWxzJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc3R5bGUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9udFNpemUnOiAnMTJweCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Zvcm1hdHRlcic6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgKyAnJSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgJ3Rvb2x0aXAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2Zvcm1hdHRlcic6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxiPicgKyB0aGlzLnggKyAnPC9iPjxici8+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyB0aGlzLnNlcmllcy5uYW1lICsgJzogPGJyLz48Yj4nICsgdGhpcy55ICsgJyU8L2I+JztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgJ2NyZWRpdHMnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2VuYWJsZWQnOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICdwbG90T3B0aW9ucyc6IHtcclxuICAgICAgICAgICAgICAgICAgICAnY29sdW1uJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAncG9pbnRQYWRkaW5nJzogMC4yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVyV2lkdGgnIDogMC41XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAnc2VyaWVzJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2hvd0NoZWNrYm94JzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50cycgICAgICA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGVja2JveENsaWNrJzogZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29tcGFyZVBkZiA9ICRzY29wZS5jb21wYXJlUGRmLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTkEnLCB0aGlzLnVzZXJPcHRpb25zLmZ1bmRJZCArICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWdlbmRTeW1ib2wuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jb21wYXJlUGRmID0gJHNjb3BlLmNvbXBhcmVQZGYucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXNlck9wdGlvbnMuZnVuZElkICsgJycsICdOQScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5sZWdlbmRTeW1ib2wuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGVnZW5kSXRlbUNsaWNrJzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAncGllJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29sb3JzJzogY29sb3JzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICdjb2xvcnMnOiBjb2xvcnMsXHJcbiAgICAgICAgICAgICAgICAnbGVnZW5kJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICd0aXRsZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQnOiBnbG9iYWxDb25zdGFudC5pbnZlc3RPcHRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAnYm9yZGVyV2lkdGgnOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICdpdGVtV2lkdGgnICA6IGxlZ2VuZFdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICdpdGVtU3R5bGUnICA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogbGVnZW5kU3R5bGVXaWR0aFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgJ21hcmdpbic6IDEyXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgJ3Nlcmllcyc6IHNlcmllc1ZhbHVlc1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbihjaGFydCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlcmllcyA9IGNoYXJ0LnNlcmllcyxcclxuICAgICAgICAgICAgICAgICAgICBpID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlcmllc1tpXS5sZWdlbmRJdGVtLnRyYW5zbGF0ZSgtMTUsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcmllc1tpXS5jaGVja2JveC5zdHlsZS5tYXJnaW5Ub3AgPSBjaGtNYXJnaW5Ub3A7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzW2ldLmNoZWNrYm94LnN0eWxlLm1hcmdpbkxlZnQgPSAnLTIlJztcclxuICAgICAgICAgICAgICAgICAgICBzZXJpZXNbaV0uY2hlY2tib3guc3R5bGUubGVmdCA9IGNoa0xlZnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBjaGFydE1vZHVsZTtcclxuICAgIH0pKCRzY29wZSk7XHJcblxyXG4gICAgJHNjb3BlLmNoYW5nZUhlYWRlckZpbHRlciA9IGZ1bmN0aW9uKGZpbHRlckhlYWRlcikge1xyXG4gICAgICAgIGNoYXJ0Q29tbW9uLmZpbHRlckNoYXJ0KGZpbHRlckhlYWRlcik7XHJcbiAgICB9O1xyXG4gICAgJHNjb3BlLmNvbXBhcmVDaGFydERhdGEgPSBmdW5jdGlvbihjaGFydERhdGEpIHtcclxuICAgICAgICAkc2NvcGUuY2hhcnRWYWx1ZXMgPSBjaGFydERhdGE7XHJcbiAgICAgICAgJHNjb3BlLmhlYWRlckFycmF5ID0gY2hhcnREYXRhLnZpZXdQZXJmb3JtO1xyXG4gICAgICAgICRzY29wZS5maWx0ZXJIZWFkZXIgPSBjaGFydERhdGEuZmlsdGVySGVhZGVyO1xyXG4gICAgICAgICRzY29wZS5yaWRlck5hbWUgPSBjaGFydERhdGEucmlkZXJOYW1lO1xyXG4gICAgICAgICRzY29wZS5jb21wYXJlUGRmID0gY2hhcnREYXRhLmNvbXBhcmVQZGY7XHJcbiAgICAgICAgJHNjb3BlLmNvbXBhcmVXaXRoVmlldyA9IGNoYXJ0RGF0YS5jb21wYXJlV2l0aFZpZXc7XHJcbiAgICAgICAgY2hhcnRDb21tb24uZmlsdGVyQ2hhcnQoY2hhcnREYXRhLmZpbHRlckhlYWRlcik7XHJcbiAgICAgICAgJHNjb3BlLmN1cnJlbnRIZWFkZXIgPSAkc2NvcGUuZmlsdGVySGVhZGVyLm5hbWU7XHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnJGxhc3QnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2xhbmRpbmctaGVyby1jb21wYXJlJykubGlzdFB1bGxkb3duKCk7XHJcbiAgICAgICAgICAgIH0sIDEwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5wcmludENvbXBhcmVPdmVybGF5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJCgnLnByaW50LWNvbXBhcmUtb3ZlcmxheScpLnByaW50KHtcclxuICAgICAgICAgICAgJ2lmcmFtZSc6IGZhbHNlLFxyXG5cclxuICAgICAgICAgICAgLy8gRG9uJ3QgcHJpbnQgdGhpc1xyXG4gICAgICAgICAgICAnbm9QcmludFNlbGVjdG9yJzogJy5wcmludC1oaWRlJyxcclxuXHJcbiAgICAgICAgICAgIC8vIHJlc29sdmVzIGFmdGVyIHByaW50IGFuZCByZXN0cnVjdHVyZSB0aGUgY29kZSBmb3IgYmV0dGVyIG1haW50YWluYWJpbGl0eVxyXG4gICAgICAgICAgICAnZGVmZXJyZWQnOiAkLkRlZmVycmVkKClcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1dKTsiLCIndXNlIHN0cmljdCc7XG5cbmxmZ2FwcC5jb250cm9sbGVyKCdpbnZlc2NvT3ZlcmxheUNvbnRybCcsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgdmFyIHBlcmZvcm1PYmogPSB7XG4gICAgICAgICdhbGlnbkxlZ2VuZCcgICAgICAgIDogJ3JpZ2h0JyxcbiAgICAgICAgJ3ZlcnRpY2FsQWxpZ25MZWdlbmQnOiAnbWlkZGxlJyxcbiAgICAgICAgJ2xlZ2VuZFgnICAgICAgICAgICAgOiAwLFxuICAgICAgICAnbGVnZW5kWScgICAgICAgICAgICA6IDAsXG4gICAgICAgICdwcm9kdWN0SWQnICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgJ2hlaWdodFBpZScgICAgICAgICAgOiAzNTAsXG4gICAgICAgICd3aWR0aFBpZScgICAgICAgICAgIDogNDAwLFxuICAgICAgICAnaGVpZ2h0QmFyJyAgICAgICAgICA6IDI1MCxcbiAgICAgICAgJ3dpZHRoQmFyJyAgICAgICAgICAgOiAzODAsXG4gICAgICAgICdoZWlnaHRCYXIxJyAgICAgICAgIDogMjgwLFxuICAgICAgICAnd2lkdGhCYXIxJyAgICAgICAgICA6IDQwMCxcbiAgICAgICAgJ3NwbGl0ZWROdW1BcnJheScgICAgOiBudWxsXG4gICAgfTtcblxuICAgICRzY29wZS5pbnZlc2NvT3ZlcmxheSA9IHtcblxuICAgIH07XG4gICAgJChkb2N1bWVudCkub24oJ3Jlc3BvbnNpdmU6c3RhdGVjaGFuZ2VkJywgZnVuY3Rpb24oZSwgcGFyYW0pIHtcbiAgICAgICAgcGVyZm9ybU9iai5wYXJhbSA9IHBhcmFtO1xuICAgIH0pO1xuICAgIGFuZ3VsYXIuZWxlbWVudCgnI2ludmVzY28tb3ZlcmxheXRhYicpLnVJVGFiU2V0KCk7XG4gICAgYW5ndWxhci5lbGVtZW50KCcjbGZnLXRvcGhlYWRlci1wdWxsZG93bicpLmxpc3RQdWxsZG93bigpO1xuICAgICRzY29wZS4kb24oJ2ludmVzY29PdmVybGF5RGF0YScsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgndWwudGFiLXNlY3Rpb24gPiBsaTpmaXJzdC1jaGlsZCcpLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAgICRzY29wZS5pbnZlc2NvTW9kdWxlKGRhdGEpO1xuICAgIH0pO1xuICAgIHBlcmZvcm1PYmouZmlsdGVySW5kZXggPSAxO1xuICAgIHZhciBpbnZlc2NvVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGludmVzY29Nb2R1bGVzID0ge1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgaW52ZXNjb01vZHVsZXMuY2hlY2tEcm9wRG93bk51bWJlciA9IGZ1bmN0aW9uKG51bSkge1xuICAgICAgICAgICAgaWYgKG51bSA9PT0gJzEnKSB7XG4gICAgICAgICAgICAgICAgaW52ZXNjb01vZHVsZXMuY2hlY2tJbmRleFZhbHVlKCdtb250aGx5UGVyZm9ybWFuY2UnKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuaW52ZXNjb092ZXJsYXkueWVhck5hbWUgPSAkc2NvcGUuaW52ZXNjb092ZXJsYXkuZnVuZFBlcmZvcm1hbmNlRGF0YS5mdWxscGVyZkRhdGFcbiAgICAgICAgICAgICAgICAgICAgLnByb2R1Y3RQZXJmb3JtYW5jZS5tb250aGx5UGVyZkhlYWRlcjtcbiAgICAgICAgICAgICAgICAkc2NvcGUuaW52ZXNjb092ZXJsYXkuZm9vdGVyVGV4dCA9ICRzY29wZS5pbnZlc2NvT3ZlcmxheS5mdW5kUGVyZm9ybWFuY2VEYXRhLmZ1bGxwZXJmRGF0YVxuICAgICAgICAgICAgICAgICAgICAucHJvZHVjdFBlcmZvcm1hbmNlLm1vbnRobHlQZXJmRm9vdGVyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChudW0gPT09ICcyJykge1xuICAgICAgICAgICAgICAgIGludmVzY29Nb2R1bGVzLmNoZWNrSW5kZXhWYWx1ZSgnbW9udGhseVBlcmZvcm1hbmNlU3VycmVuZGVyJyk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmludmVzY29PdmVybGF5LnllYXJOYW1lID0gJHNjb3BlLmludmVzY29PdmVybGF5LmZ1bmRQZXJmb3JtYW5jZURhdGEuZnVsbHBlcmZEYXRhXG4gICAgICAgICAgICAgICAgICAgIC5wcm9kdWN0UGVyZm9ybWFuY2UubW9udGhseVBlcmZTdXJyZW5kZXJIZWFkZXI7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmludmVzY29PdmVybGF5LmZvb3RlclRleHQgPSAkc2NvcGUuaW52ZXNjb092ZXJsYXkuZnVuZFBlcmZvcm1hbmNlRGF0YS5mdWxscGVyZkRhdGFcbiAgICAgICAgICAgICAgICAgICAgLnByb2R1Y3RQZXJmb3JtYW5jZS5tb250aGx5UGVyZlN1cnJlbmRlckZvb3RlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW52ZXNjb01vZHVsZXMuY2hlY2tJbmRleFZhbHVlKCdxdWFydGVybHlTdGFuZGFyZFBlcmZvcm1hbmNlJyk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmludmVzY29PdmVybGF5LnllYXJOYW1lID0gJHNjb3BlLmludmVzY29PdmVybGF5LmZ1bmRQZXJmb3JtYW5jZURhdGEuZnVsbHBlcmZEYXRhXG4gICAgICAgICAgICAgICAgICAgIC5wcm9kdWN0UGVyZm9ybWFuY2Uuc3RhbmRhcmRpemVkUGVyZkhlYWRlcjtcbiAgICAgICAgICAgICAgICAkc2NvcGUuaW52ZXNjb092ZXJsYXkuZm9vdGVyVGV4dCA9ICRzY29wZS5pbnZlc2NvT3ZlcmxheS5mdW5kUGVyZm9ybWFuY2VEYXRhLmZ1bGxwZXJmRGF0YVxuICAgICAgICAgICAgICAgICAgICAucHJvZHVjdFBlcmZvcm1hbmNlLnN0YW5kYXJkaXplZFBlcmZGb290ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwZXJmb3JtT2JqLmZpbHRlckluZGV4ID0gbnVtO1xuICAgICAgICB9O1xuICAgICAgICBpbnZlc2NvTW9kdWxlcy5jaGVja0luZGV4VmFsdWUgPSBmdW5jdGlvbihzdGF0dXMpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuaW52ZXNjb092ZXJsYXkuZnVuZFBlcmZvcm1hbmNlRGF0YS5mdWxscGVyZkRhdGEucHJvZHVjdFBlcmZvcm1hbmNlW1xuICAgICAgICAgICAgICAgIHN0YXR1c10sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pbnZlc2NvT3ZlcmxheS5wcm9maWxlSWQgPT09IHZhbHVlLnBmbElkKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnZlc2NvT3ZlcmxheS5wZXJmb3JtYW5jZURhdGEgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBpbnZlc2NvTW9kdWxlcy5jaGVja2Z1bmREZXRhaWxBcnJheSA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgICAgICAkc2NvcGUuaW52ZXNjb092ZXJsYXkuZnVuZFRvcFRlbkhvbGRpbmdzID0gW107XG4gICAgICAgICAgICBwZXJmb3JtT2JqLnRvdGFsSG9sZGluZyA9IDA7XG4gICAgICAgICAgICAkc2NvcGUuaW52ZXNjb092ZXJsYXkuZnVuZENsYXNzZXMgPSBbXTtcbiAgICAgICAgICAgICRzY29wZS5pbnZlc2NvT3ZlcmxheS5iYXJGdW5kQXJyID0gW107XG4gICAgICAgICAgICAkc2NvcGUuaW52ZXNjb092ZXJsYXkuYmFyZnVuZENsYXNzTmFtZSA9IFtdO1xuICAgICAgICAgICAgcGVyZm9ybU9iai5hbGlnbkxlZ2VuZCA9ICdyaWdodCc7XG4gICAgICAgICAgICBwZXJmb3JtT2JqLnZlcnRpY2FsQWxpZ25MZWdlbmQgPSAnbWlkZGxlJztcbiAgICAgICAgICAgIHBlcmZvcm1PYmoubGVnZW5kWCA9IDA7XG4gICAgICAgICAgICBwZXJmb3JtT2JqLmxlZ2VuZFkgPSAwO1xuICAgICAgICAgICAgcGVyZm9ybU9iai5oZWlnaHRQaWUgPSAzNTA7XG4gICAgICAgICAgICBwZXJmb3JtT2JqLndpZHRoUGllID0gNDAwO1xuICAgICAgICAgICAgcGVyZm9ybU9iai5oZWlnaHRCYXIgPSAyNTA7XG4gICAgICAgICAgICBwZXJmb3JtT2JqLndpZHRoQmFyID0gMzgwO1xuICAgICAgICAgICAgcGVyZm9ybU9iai5oZWlnaHRCYXIxID0gMzgwO1xuICAgICAgICAgICAgcGVyZm9ybU9iai53aWR0aEJhcjEgPSA0MDA7XG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goYXJyYXksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pbnZlc2NvT3ZlcmxheS5wcm9maWxlSWQgPT09IHZhbHVlLmZ1bmRJZCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW52ZXNjb092ZXJsYXkuZnVuRGV0YWlsID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnZlc2NvT3ZlcmxheS5mdW5kSW5jZXB0aW9uRGF0ZSA9IHZhbHVlLmZ1bmRJbmNlcHRpb25EYXRlO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW52ZXNjb092ZXJsYXkuZnVuZFRvcFRlbkhvbGRpbmdzID0gdmFsdWUuZnVuZFRvcFRlbkhvbGRpbmdzO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW52ZXNjb092ZXJsYXkuZnVuZFBvcnRGb2xpb0RhdGUgPSB2YWx1ZS5mdW5kUG9ydEZvbGlvRGF0ZTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS5pbnZlc2NvT3ZlcmxheS5mdW5kVG9wVGVuSG9sZGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlcmZvcm1PYmoudG90YWxIb2xkaW5nICs9ICRzY29wZS5pbnZlc2NvT3ZlcmxheS5mdW5kVG9wVGVuSG9sZGluZ3NbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaV0ucGN0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnZlc2NvT3ZlcmxheS50b3RhbEhvbGRpbmcgPSBwZXJmb3JtT2JqLnRvdGFsSG9sZGluZy50b0ZpeGVkKFxuICAgICAgICAgICAgICAgICAgICAgICAgMSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgJHNjb3BlLmludmVzY29PdmVybGF5LmZ1bkRldGFpbC5mdW5kQ2xhc3Nlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmludmVzY29PdmVybGF5LmZ1bmRDbGFzc2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICduYW1lJzogdmFsdWUuZnVuZENsYXNzZXNbal0uY29tcGFueU5hbWUgKyAnOicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3knICAgOiB2YWx1ZS5mdW5kQ2xhc3Nlc1tqXS5wY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmludmVzY29PdmVybGF5LmJhckZ1bmRBcnIucHVzaCh2YWx1ZS5mdW5kQ2xhc3Nlc1tqXS5wY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmludmVzY29PdmVybGF5LmJhcmZ1bmRDbGFzc05hbWUucHVzaCh2YWx1ZS5mdW5kQ2xhc3Nlc1tqXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jb21wYW55TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaW52ZXNjb01vZHVsZXMuY2hlY2tmdW5kRGlzY2xvc3VyZXNBcnJheSh2YWx1ZS5mb290bm90ZU51bWJlcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGludmVzY29Nb2R1bGVzLmNoZWNrZnVuZERpc2Nsb3N1cmVzQXJyYXkgPSBmdW5jdGlvbihudW1iZXJzKSB7XG4gICAgICAgICAgICBwZXJmb3JtT2JqLnNwbGl0ZWROdW1BcnJheSA9IG51bWJlcnMuc3BsaXQoJywnKTtcbiAgICAgICAgICAgICRzY29wZS5pbnZlc2NvT3ZlcmxheS5mdW5kRGlzY2xvc3VyZXMgPSBbXTtcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuaW52ZXNjb092ZXJsYXkuZnVuZFBlcmZvcm1hbmNlRGF0YS5mdWxscGVyZkRhdGEucHJvZHVjdFBlcmZvcm1hbmNlXG4gICAgICAgICAgICAgICAgLmZ1bmREaXNjbG9zdXJlcyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBlcmZvcm1PYmouc3BsaXRlZE51bUFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVyZm9ybU9iai5zcGxpdGVkTnVtQXJyYXlbaV0udHJpbSgpID09PSB2YWx1ZS5kaXNjTm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW52ZXNjb092ZXJsYXkuZnVuZERpc2Nsb3N1cmVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzY1RleHQnOiB2YWx1ZS5kaXNjVGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGludmVzY29Nb2R1bGVzO1xuICAgIH0pKCRzY29wZSk7XG5cbiAgICAkc2NvcGUuaW52ZXNjb01vZHVsZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgcGVyZm9ybU9iai5wcm9kdWN0SWQgPSBkYXRhLmZ1bGxwZXJmRGF0YS5wcm9kdWN0UGVyZm9ybWFuY2Uuc2Fjb2RlMTtcbiAgICAgICAgJHNjb3BlLmludmVzY29PdmVybGF5LmZ1bmRQZXJmb3JtYW5jZURhdGEgPSBkYXRhO1xuICAgICAgICAkc2NvcGUuaW52ZXNjb092ZXJsYXkucHJvZmlsZUlkID0gZGF0YS5wcm9maWxlSWQ7XG4gICAgICAgICRzY29wZS5pbnZlc2NvT3ZlcmxheS5kcm9wZG93bk51bSA9IGRhdGEuZHJvcGRvd25OdW07XG4gICAgICAgICRzY29wZS5pbnZlc2NvT3ZlcmxheS5wcm9kdWN0RGlzY2xvc3VyZXMgPSAkc2NvcGUuaW52ZXNjb092ZXJsYXkuZnVuZFBlcmZvcm1hbmNlRGF0YS5mdWxscGVyZkRhdGFcbiAgICAgICAgICAgIC5wcm9kdWN0UGVyZm9ybWFuY2UucHJvZHVjdERpc2Nsb3N1cmVzO1xuICAgICAgICAkc2NvcGUuaW52ZXNjb092ZXJsYXkuY29tcGxpYW5jZVRvcCA9IGRhdGEuZnVsbHBlcmZEYXRhLnByb2R1Y3RQZXJmb3JtYW5jZS5jb21wbGlhbmNlVG9wO1xuICAgICAgICBpbnZlc2NvVXRpbC5jaGVja0Ryb3BEb3duTnVtYmVyKCRzY29wZS5pbnZlc2NvT3ZlcmxheS5kcm9wZG93bk51bSk7XG4gICAgICAgIGludmVzY29VdGlsLmNoZWNrZnVuZERldGFpbEFycmF5KCRzY29wZS5pbnZlc2NvT3ZlcmxheS5mdW5kUGVyZm9ybWFuY2VEYXRhLmZ1bGxwZXJmRGF0YS5wcm9kdWN0UGVyZm9ybWFuY2VcbiAgICAgICAgICAgIC5mdW5kRGV0YWlsKTtcbiAgICAgICAgaWYgKHBlcmZvcm1PYmoucGFyYW0gPT09ICdtb2JpbGUnKSB7XG4gICAgICAgICAgICBwZXJmb3JtT2JqLmFsaWduTGVnZW5kID0gJ2NlbnRlcic7XG4gICAgICAgICAgICBwZXJmb3JtT2JqLnZlcnRpY2FsQWxpZ25MZWdlbmQgPSAnYm90dG9tJztcbiAgICAgICAgICAgIHBlcmZvcm1PYmoubGVnZW5kWCA9IDIwO1xuICAgICAgICAgICAgcGVyZm9ybU9iai5sZWdlbmRZID0gMTA7XG4gICAgICAgICAgICBwZXJmb3JtT2JqLndpZHRoUGllID0gMzAwO1xuICAgICAgICAgICAgcGVyZm9ybU9iai5oZWlnaHRQaWUgPSAzMDA7XG4gICAgICAgICAgICBwZXJmb3JtT2JqLmhlaWdodEJhciA9IDIwMDtcbiAgICAgICAgICAgIHBlcmZvcm1PYmoud2lkdGhCYXIgPSAzMDA7XG4gICAgICAgICAgICBwZXJmb3JtT2JqLmhlaWdodEJhcjEgPSAyMDA7XG4gICAgICAgICAgICBwZXJmb3JtT2JqLndpZHRoQmFyMSA9IDMwMDtcbiAgICAgICAgfVxuICAgICAgICAkc2NvcGUuc2hvd1BpZUJhckNoYXJ0KHRydWUpO1xuICAgICAgICAkc2NvcGUuc2hvd092ZXJsYXkoJHNjb3BlLmludmVzY29PdmVybGF5LnByb2ZpbGVJZCk7XG4gICAgfTtcblxuICAgICRzY29wZS5zaG93T3ZlcmxheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBwZXJmb3JtT2JqLm1vbnRobHlQZXJmb3JtYW5jZSA9IFtdO1xuICAgICAgICB2YXIgbW9udGhWaWV3Q2F0QXJyYXJ5ID0gW107XG4gICAgICAgIHZhciBtb250aFZpZXdWYWx1ZUFycmFyeSA9IFtdO1xuICAgICAgICB2YXIgdGl0bGUsIGE7XG4gICAgICAgIHZhciBtb250aFZpZXcgPSBbe1xuICAgICAgICAgICAgJzAnOiAnY2hhbmdlRnJtUHJldkRheVBlcmZvcm1hbmNlJyxcbiAgICAgICAgICAgICcxJzogJ0NoYW5nZSBmcm9tIFByZXZpb3VzIERheSdcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgJzAnOiAnbGFzdERhaWx5UGVyZkRhdGUnLFxuICAgICAgICAgICAgJzEnOiAnWVREIGFzIG9mICcsXG4gICAgICAgICAgICAnMic6ICdwZXJmVmFsdWVZdGQxJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgICAnMCc6ICdtb250aGx5UGVyZm9ybWFuY2VZdGQyRGF0ZScsXG4gICAgICAgICAgICAnMSc6ICdZVEQgYXMgb2YgJyxcbiAgICAgICAgICAgICcyJzogJ3BlcmZWYWx1ZVl0ZDInXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgICcwJzogJ3BlcmZWYWx1ZU9uZU1vbnRoJyxcbiAgICAgICAgICAgICcxJzogJzEgTW9udGgnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgICcwJzogJ3BlcmZWYWx1ZVRocmVlTW9udGgnLFxuICAgICAgICAgICAgJzEnOiAnMyBNb250aCdcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgJzAnOiAncGVyZlZhbHVlT25lWWVhcicsXG4gICAgICAgICAgICAnMSc6ICcxIFllYXInXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgICcwJzogJ3BlcmZWYWx1ZVRocmVlWWVhcicsXG4gICAgICAgICAgICAnMSc6ICczIFllYXInXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgICcwJzogJ3BlcmZWYWx1ZUZpdmVZZWFyJyxcbiAgICAgICAgICAgICcxJzogJzUgWWVhcidcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgJzAnOiAncGVyZlZhbHVlVGVuWWVhcicsXG4gICAgICAgICAgICAnMSc6ICcxMCBZZWFyJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgICAnMCc6ICdwZXJmVmFsdWVTaW5jZUluY2VwdGlvbicsXG4gICAgICAgICAgICAnMSc6ICdTaW5jZSBJbmNlcHRpb24nXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgICcwJzogJ3BlcmZWYWx1ZVRlblllYXJTaW5jZUluY2VwdGlvbicsXG4gICAgICAgICAgICAnMSc6ICcxMCBZZWFyICBvciBTaW5jZSBJbmNlcHRpb24nXG4gICAgICAgIH1dO1xuXG4gICAgICAgIGlmIChwZXJmb3JtT2JqLmZpbHRlckluZGV4ID09PSAnMScpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuaW52ZXNjb092ZXJsYXkuZnVuZFBlcmZvcm1hbmNlRGF0YS5mdWxscGVyZkRhdGEucHJvZHVjdFBlcmZvcm1hbmNlLm1vbnRobHlQZXJmb3JtYW5jZSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmludmVzY29PdmVybGF5LnByb2ZpbGVJZCA9PT0gdmFsdWUucGZsSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoYSBpbiBtb250aFZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9udGhWaWV3W2FdWzBdICE9PSAncGVyZlZhbHVlVGVuWWVhclNpbmNlSW5jZXB0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9udGhWaWV3W2FdWzBdID09PSAnbGFzdERhaWx5UGVyZkRhdGUnIHx8IG1vbnRoVmlld1thXVswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT09ICdtb250aGx5UGVyZm9ybWFuY2VZdGQyRGF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID0gbW9udGhWaWV3W2FdWzFdICsgJHNjb3BlLmludmVzY29PdmVybGF5LmZ1bmRQZXJmb3JtYW5jZURhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZnVsbHBlcmZEYXRhLnByb2R1Y3RQZXJmb3JtYW5jZVttb250aFZpZXdbYV1bMF1dO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJmb3JtT2JqLm1vbnRobHlQZXJmb3JtYW5jZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiB0aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndmFsdWUnOiB2YWx1ZVttb250aFZpZXdbYV1bMl1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID0gbW9udGhWaWV3W2FdWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyZm9ybU9iai5tb250aGx5UGVyZm9ybWFuY2UucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJzogdGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogdmFsdWVbbW9udGhWaWV3W2FdWzBdXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwZXJmb3JtT2JqLmZ1bmRJbmNEdCA9IHZhbHVlLmZ1bmRJbmNEdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHBlcmZvcm1PYmouZmlsdGVySW5kZXggPT09ICcyJykge1xuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5pbnZlc2NvT3ZlcmxheS5mdW5kUGVyZm9ybWFuY2VEYXRhLmZ1bGxwZXJmRGF0YS5wcm9kdWN0UGVyZm9ybWFuY2UubW9udGhseVBlcmZvcm1hbmNlU3VycmVuZGVyLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaW52ZXNjb092ZXJsYXkucHJvZmlsZUlkID09PSB2YWx1ZS5wZmxJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChhIGluIG1vbnRoVmlldykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb250aFZpZXdbYV1bMF0gIT09ICdwZXJmVmFsdWVUZW5ZZWFyU2luY2VJbmNlcHRpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb250aFZpZXdbYV1bMF0gPT09ICdsYXN0RGFpbHlQZXJmRGF0ZScgfHwgbW9udGhWaWV3W2FdWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PT0gJ21vbnRobHlQZXJmb3JtYW5jZVl0ZDJEYXRlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSBtb250aFZpZXdbYV1bMV0gKyAkc2NvcGUuaW52ZXNjb092ZXJsYXkuZnVuZFBlcmZvcm1hbmNlRGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5mdWxscGVyZkRhdGEucHJvZHVjdFBlcmZvcm1hbmNlW21vbnRoVmlld1thXVswXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJmb3JtT2JqLm1vbnRobHlQZXJmb3JtYW5jZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiB0aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndmFsdWUnOiB2YWx1ZVttb250aFZpZXdbYV1bMl1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID0gbW9udGhWaWV3W2FdWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyZm9ybU9iai5tb250aGx5UGVyZm9ybWFuY2UucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJzogdGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogdmFsdWVbbW9udGhWaWV3W2FdWzBdXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwZXJmb3JtT2JqLmZ1bmRJbmNEdCA9IHZhbHVlLmZ1bmRJbmNEdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHBlcmZvcm1PYmouZmlsdGVySW5kZXggPT09ICczJykge1xuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5pbnZlc2NvT3ZlcmxheS5mdW5kUGVyZm9ybWFuY2VEYXRhLmZ1bGxwZXJmRGF0YS5wcm9kdWN0UGVyZm9ybWFuY2UucXVhcnRlcmx5U3RhbmRhcmRQZXJmb3JtYW5jZSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmludmVzY29PdmVybGF5LnByb2ZpbGVJZCA9PT0gdmFsdWUucGZsSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoYSBpbiBtb250aFZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9udGhWaWV3W2FdWzBdID09PSAncGVyZlZhbHVlT25lWWVhcicgfHwgbW9udGhWaWV3W2FdWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID09PSAncGVyZlZhbHVlRml2ZVllYXInIHx8IG1vbnRoVmlld1thXVswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PT0gJ3BlcmZWYWx1ZVRlblllYXJTaW5jZUluY2VwdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyZm9ybU9iai5tb250aGx5UGVyZm9ybWFuY2UucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiBtb250aFZpZXdbYV1bMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndmFsdWUnOiB2YWx1ZVttb250aFZpZXdbYV1bMF1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChwZXJmb3JtT2JqLm1vbnRobHlQZXJmb3JtYW5jZSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIG1vbnRoVmlld0NhdEFycmFyeS5wdXNoKHZhbHVlLnRpdGxlKTtcbiAgICAgICAgICAgIG1vbnRoVmlld1ZhbHVlQXJyYXJ5LnB1c2goKHZhbHVlLnZhbHVlID09PSAnTi9BJykgPyAwIDogTnVtYmVyKHZhbHVlLnZhbHVlKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8qIGlmKHBlcmZvcm1PYmouZmlsdGVySW5kZXggIT09ICczJyl7XG4gICAgICAgIFx0bW9udGhWaWV3Q2F0QXJyYXJ5ID0gbW9udGhWaWV3Q2F0QXJyYXJ5LnNsaWNlKDEsLTEpO1xuICAgICAgICBcdG1vbnRoVmlld1ZhbHVlQXJyYXJ5ID0gbW9udGhWaWV3VmFsdWVBcnJhcnkuc2xpY2UoMSwtMSk7XG4gICAgICAgIH0qL1xuICAgICAgICAkKCcjcHJlZlBpZTItY29udGFpbmVyJykuaGlnaGNoYXJ0cyh7XG4gICAgICAgICAgICAnY2hhcnQnOiB7XG4gICAgICAgICAgICAgICAgJ3R5cGUnICA6ICdjb2x1bW4nLFxuICAgICAgICAgICAgICAgICdoZWlnaHQnOiBwZXJmb3JtT2JqLmhlaWdodEJhcjEsXG4gICAgICAgICAgICAgICAgJ3dpZHRoJyA6IHBlcmZvcm1PYmoud2lkdGhCYXIxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ3RpdGxlJzoge1xuICAgICAgICAgICAgICAgICd0ZXh0JzogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICd4QXhpcyc6IHtcbiAgICAgICAgICAgICAgICAnY2F0ZWdvcmllcyc6IG1vbnRoVmlld0NhdEFycmFyeSxcbiAgICAgICAgICAgICAgICAndGl0bGUnICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQnOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnbGFiZWxzJzoge1xuICAgICAgICAgICAgICAgICAgICAncm90YXRpb24nOiA3NVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAneUF4aXMnOiBbe1xuICAgICAgICAgICAgICAgICd0aXRsZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQnOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnbGFiZWxzJzoge1xuICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOiAnanVzdGlmeScsXG4gICAgICAgICAgICAgICAgICAgICdmb3JtYXQnICA6ICd7dmFsdWV9ICUnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnbGluZVdpZHRoJyAgIDogMSxcbiAgICAgICAgICAgICAgICAndGlja0ludGVydmFsJzogMVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAndG9vbHRpcCc6IHtcbiAgICAgICAgICAgICAgICAnZm9ybWF0dGVyJzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWNWYWx1ZSA9ICh0aGlzLnkudG9GaXhlZCgyKS5zcGxpdCgnLicpWzFdID09PSAnMCcpID8gdGhpcy55LnRvRml4ZWQoXG4gICAgICAgICAgICAgICAgICAgICAgICAyKS5zcGxpdCgnLicpWzBdIDogdGhpcy55LnRvRml4ZWQoMik7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMua2V5ICsgJyAoJyArIGRlY1ZhbHVlICsgJyklJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ3Bsb3RPcHRpb25zJzoge1xuICAgICAgICAgICAgICAgICdiYXInOiB7XG4gICAgICAgICAgICAgICAgICAgICdkYXRhTGFiZWxzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2VuYWJsZWQnOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2xlZ2VuZCc6IHtcbiAgICAgICAgICAgICAgICAnZW5hYmxlZCc6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2NyZWRpdHMnOiB7XG4gICAgICAgICAgICAgICAgJ2VuYWJsZWQnOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdzZXJpZXMnOiBbe1xuICAgICAgICAgICAgICAgICduYW1lJzogJycsXG4gICAgICAgICAgICAgICAgJ2RhdGEnOiBtb250aFZpZXdWYWx1ZUFycmFyeVxuICAgICAgICAgICAgfV1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAkc2NvcGUuaXNQaWVCYXIgPSB0cnVlO1xuICAgICRzY29wZS5zaG93UGllQmFyQ2hhcnQgPSBmdW5jdGlvbihpc1BpZUJhcikge1xuICAgICAgICAkc2NvcGUuaXNQaWVCYXIgPSBpc1BpZUJhcjtcbiAgICAgICAgaWYgKGlzUGllQmFyKSB7XG4gICAgICAgICAgICB2YXIgY29sb3JzID0gWycjOTBDNTNFJywgJyM1RkEwRDYnLCAnIzVBNDc3MicsICcjQjI0RjZBJywgJyMzQTUxQTMnXTtcbiAgICAgICAgICAgIHZhciBjaGFydCA9IG5ldyBIaWdoY2hhcnRzLkNoYXJ0KHtcbiAgICAgICAgICAgICAgICAvLyAkKCcjcHJlZlBpZS1jb250YWluZXInKS5oaWdoY2hhcnRzKHtcbiAgICAgICAgICAgICAgICAnY2hhcnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICdyZW5kZXJUbycgICAgICAgICAgIDogJ3ByZWZQaWUtY29udGFpbmVyJyxcbiAgICAgICAgICAgICAgICAgICAgJ3Bsb3RCYWNrZ3JvdW5kQ29sb3InOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAncGxvdEJvcmRlcldpZHRoJyAgICA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICdwbG90U2hhZG93JyAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICdoZWlnaHQnICAgICAgICAgICAgIDogcGVyZm9ybU9iai5oZWlnaHRQaWUsXG4gICAgICAgICAgICAgICAgICAgICd3aWR0aCcgICAgICAgICAgICAgIDogcGVyZm9ybU9iai53aWR0aFBpZVxuXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAndGl0bGUnOiB7XG4gICAgICAgICAgICAgICAgICAgICd0ZXh0JzogJydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICd0b29sdGlwJzoge1xuICAgICAgICAgICAgICAgICAgICAnZm9ybWF0dGVyJzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVjVmFsdWUgPSAodGhpcy55LnRvRml4ZWQoMSkuc3BsaXQoJy4nKVsxXSA9PT0gJzAnKSA/IHRoaXMueS50b0ZpeGVkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEpLnNwbGl0KCcuJylbMF0gOiB0aGlzLnkudG9GaXhlZCgxKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8Yj4nICsgdGhpcy5rZXkgKyAnPC9iPicgKyBkZWNWYWx1ZSArICclJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ3Bsb3RPcHRpb25zJzoge1xuICAgICAgICAgICAgICAgICAgICAnc2VyaWVzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ21hcmtlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZW5hYmxlZCc6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdwaWUnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnYWxsb3dQb2ludFNlbGVjdCc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAnY3Vyc29yJyAgICAgICAgICA6ICdwb2ludGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTGFiZWxzJyAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbmFibGVkJzogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAncG9pbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V2ZW50cyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21vdXNlT3Zlcic6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zbGljZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21vdXNlT3V0JzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNsaWNlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xlZ2VuZEl0ZW1DbGljayc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdzaG93SW5MZWdlbmQnOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbG9ycycgICAgICA6IGNvbG9yc1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnY29sb3JzJzogY29sb3JzLFxuICAgICAgICAgICAgICAgICdsZWdlbmQnOiB7XG4gICAgICAgICAgICAgICAgICAgICdhbGlnbicgICAgICAgICAgIDogcGVyZm9ybU9iai5hbGlnbkxlZ2VuZCxcbiAgICAgICAgICAgICAgICAgICAgJ3ZlcnRpY2FsQWxpZ24nICAgOiBwZXJmb3JtT2JqLnZlcnRpY2FsQWxpZ25MZWdlbmQsXG4gICAgICAgICAgICAgICAgICAgICdsYXlvdXQnICAgICAgICAgIDogJ3ZlcnRpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgJ2l0ZW1NYXJnaW5Cb3R0b20nOiA4LFxuICAgICAgICAgICAgICAgICAgICAneCcgICAgICAgICAgICAgICA6IHBlcmZvcm1PYmoubGVnZW5kWCxcbiAgICAgICAgICAgICAgICAgICAgJ2xhYmVsRm9ybWF0dGVyJyAgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnPGRpdiBjbGFzcz1cImhpZ2hjaGFydHMtbGVnZW5kLWl0ZW1cIiBzdHlsZT1cInRleHQtYWxpZ246IGxlZnQ7IHdpZHRoOjEzMHB4O2Zsb2F0OmxlZnQ7XCI+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgdGhpcy5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC9kaXY+PGRpdiBzdHlsZT1cIndpZHRoOjQwcHg7IGZsb2F0OmxlZnQ7dGV4dC1hbGlnbjpyaWdodDtcIj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyB0aGlzLnkgKyAnJTwvZGl2Pic7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICd5JzogcGVyZm9ybU9iai5sZWdlbmRZXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnc2VyaWVzJzogW3tcbiAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAncGllJyxcblxuICAgICAgICAgICAgICAgICAgICAvLyBuYW1lOiAnQnJvd3NlciBzaGFyZScsXG4gICAgICAgICAgICAgICAgICAgICdkYXRhJzogJHNjb3BlLmludmVzY29PdmVybGF5LmZ1bmRDbGFzc2VzXG4gICAgICAgICAgICAgICAgfV1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICQoJy5oaWdoY2hhcnRzLWxlZ2VuZC1pdGVtIHRleHQnKS5tb3VzZW92ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkTGVnZW5kID0gJCh0aGlzKS50ZXh0KCk7XG5cbiAgICAgICAgICAgICAgICBzZWxlY3RlZExlZ2VuZCA9IHNlbGVjdGVkTGVnZW5kLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB2YXIgdG90UHRzID0gY2hhcnQuc2VyaWVzWzBdLnBvaW50cy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvdFB0czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGFydGxlZ2VuZE5hbWUgPSBjaGFydC5zZXJpZXNbMF0ucG9pbnRzW2ldLm5hbWUudHJpbSgpICsgY2hhcnQuc2VyaWVzW1xuICAgICAgICAgICAgICAgICAgICAgICAgMF0ucG9pbnRzW2ldLnkgKyAnJSc7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJ0bGVnZW5kTmFtZSA9PT0gc2VsZWN0ZWRMZWdlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0LnNlcmllc1swXS5wb2ludHNbaV0uc2xpY2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydC5zZXJpZXNbMF0ucG9pbnRzW2ldLnNsaWNlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkKCcuaGlnaGNoYXJ0cy1sZWdlbmQtaXRlbSB0ZXh0JykubW91c2VvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRvdFB0cyA9IGNoYXJ0LnNlcmllc1swXS5wb2ludHMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3RQdHM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjaGFydC5zZXJpZXNbMF0ucG9pbnRzW2ldLnNsaWNlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQoJyNwcmVmUGllLWNvbnRhaW5lcicpLmhpZ2hjaGFydHMoe1xuICAgICAgICAgICAgICAgICdjaGFydCc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ3R5cGUnICA6ICdiYXInLFxuICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogcGVyZm9ybU9iai5oZWlnaHRCYXIsXG4gICAgICAgICAgICAgICAgICAgICd3aWR0aCcgOiBwZXJmb3JtT2JqLndpZHRoQmFyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAndGl0bGUnOiB7XG4gICAgICAgICAgICAgICAgICAgICd0ZXh0JzogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ3hBeGlzJzoge1xuICAgICAgICAgICAgICAgICAgICAnZ3JpZExpbmVXaWR0aCc6IDEsXG4gICAgICAgICAgICAgICAgICAgICdjYXRlZ29yaWVzJyAgIDogJHNjb3BlLmludmVzY29PdmVybGF5LmJhcmZ1bmRDbGFzc05hbWUsXG4gICAgICAgICAgICAgICAgICAgICd0aXRsZScgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQnOiAnPGI+RGlzdHJpYnV0aW9uPC9iPidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ3lBeGlzJzoge1xuICAgICAgICAgICAgICAgICAgICAnbWluJyAgICAgICAgICA6IDAsXG4gICAgICAgICAgICAgICAgICAgICdncmlkTGluZVdpZHRoJzogMCxcbiAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJyAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAndGV4dCc6ICc8Yj5QZXJjZW50YWdlIEFsbG9jYXRpb248L2I+J1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnbGFiZWxzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93JzogJ2p1c3RpZnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Zvcm1hdCcgIDogJ3t2YWx1ZX0gJSdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ3Rvb2x0aXAnOiB7XG4gICAgICAgICAgICAgICAgICAgICdmb3JtYXR0ZXInOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWNWYWx1ZSA9ICh0aGlzLnkudG9GaXhlZCgxKS5zcGxpdCgnLicpWzFdID09PSAnMCcpID8gdGhpcy55LnRvRml4ZWQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMSkuc3BsaXQoJy4nKVswXSA6IHRoaXMueS50b0ZpeGVkKDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxiPicgKyB0aGlzLmtleSArICc6IDwvYj4nICsgZGVjVmFsdWUgKyAnJSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdwbG90T3B0aW9ucyc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2Jhcic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTGFiZWxzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbmFibGVkJzogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnc2VyaWVzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbG9yQnlQb2ludCc6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ2NvbG9ycyc6IFsnIzkwQzUzRScsICcjNUZBMEQ2JywgJyM1QTQ3NzInLCAnI0IyNEY2QScsICcjM0E1MUEzJ10sXG4gICAgICAgICAgICAgICAgJ2xlZ2VuZCc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2VuYWJsZWQnICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgJ2FsaWduJyAgICAgICAgICAgOiBwZXJmb3JtT2JqLmFsaWduTGVnZW5kLFxuICAgICAgICAgICAgICAgICAgICAndmVydGljYWxBbGlnbicgICA6IHBlcmZvcm1PYmoudmVydGljYWxBbGlnbkxlZ2VuZCxcbiAgICAgICAgICAgICAgICAgICAgJ2xheW91dCcgICAgICAgICAgOiAndmVydGljYWwnLFxuICAgICAgICAgICAgICAgICAgICAnaXRlbU1hcmdpbkJvdHRvbSc6IDgsXG4gICAgICAgICAgICAgICAgICAgICd4JyAgICAgICAgICAgICAgIDogcGVyZm9ybU9iai5sZWdlbmRYLFxuICAgICAgICAgICAgICAgICAgICAneScgICAgICAgICAgICAgICA6IHBlcmZvcm1PYmoubGVnZW5kWVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ2NyZWRpdHMnOiB7XG4gICAgICAgICAgICAgICAgICAgICdlbmFibGVkJzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdzZXJpZXMnOiBbe1xuICAgICAgICAgICAgICAgICAgICAnZGF0YSc6ICRzY29wZS5pbnZlc2NvT3ZlcmxheS5iYXJGdW5kQXJyXG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgICRzY29wZS5nZXREb3dubG9hZCA9IGZ1bmN0aW9uKG5hbWUsIHR5cGUpIHtcbiAgICAgICAgdmFyIHVybCA9ICcvYWZwcXVlcnktcmVzdC11aSc7XG5cbiAgICAgICAgaWYgKG5hbWUgPT09ICdGdW5kUGVyZm9ybWFuY2UnKSB7XG4gICAgICAgICAgICB1cmwgKz0gJy9zZXJ2aWNlL3Byb2R1Y3QvZG93bmxvYWQnICsgdHlwZS50b1VwcGVyQ2FzZSgpICsgJ0Z1bmRQZXJmb3JtYW5jZS8nICsgcGVyZm9ybU9iai5wcm9kdWN0SWRcbiAgICAgICAgICAgICAgICArICcvJyArICRzY29wZS5pbnZlc2NvT3ZlcmxheS5wcm9maWxlSWQgKyAnL20vJyArIG5hbWUgKyAnLicgKyB0eXBlO1xuICAgICAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdGdW5kVW5pdFZhbHVlcycpIHtcbiAgICAgICAgICAgIHVybCArPSAnL3NlcnZpY2UvdW5pdHZhbHVlL2Rvd25sb2FkJyArIHR5cGUudG9VcHBlckNhc2UoKSArICdGdW5kVW5pdFZhbHVlcy8nICsgcGVyZm9ybU9iai5wcm9kdWN0SWRcbiAgICAgICAgICAgICAgICArICcvJyArICRzY29wZS5pbnZlc2NvT3ZlcmxheS5wcm9maWxlSWQgKyAnLycgKyBuYW1lICsgJy4nICsgdHlwZTtcbiAgICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAnRnVuZFByb2ZpbGUnKSB7XG4gICAgICAgICAgICBuYW1lICs9ICgkc2NvcGUuaXNQaWVCYXIpID8gJ1BpZUNoYXJ0JyA6ICdCYXJDaGFydCc7XG4gICAgICAgICAgICB1cmwgKz0gJy9zZXJ2aWNlL2Z1bmQvZG93bmxvYWRQREZGdW5kUHJvZmlsZS8nICsgcGVyZm9ybU9iai5wcm9kdWN0SWQgKyAnLycgKyAkc2NvcGUuaW52ZXNjb092ZXJsYXlcbiAgICAgICAgICAgICAgICAucHJvZmlsZUlkICsgJy8nICsgJHNjb3BlLmlzUGllQmFyICsgJy8nICsgbmFtZTtcbiAgICAgICAgfVxuICAgICAgICB3aW5kb3cub3Blbih1cmwpO1xuICAgIH07XG59XSk7IiwiKGZ1bmN0aW9uICgpIHtcclxuXHQvKiBnbG9iYWwgbGZnQXBwLCBnbG9iYWxDb25zdGFudCovXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cdGxmZ2FwcC5mYWN0b3J5KCdjb250YWN0V2hvbGVzYWxlclNlcnZpY2UnLCBbJyRodHRwJywgZnVuY3Rpb24gKCRodHRwKSB7XHJcblx0XHRyZXR1cm4ge1xyXG4gICAgICAgICAgICBjb250YWN0V2hvbGVzYWxlclNlcnZpY2U6IGZ1bmN0aW9uIChzY29wZSwgZGF0YSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIHZhciAkcHJvbWlzZSA9ICRodHRwLnBvc3QoZ2xvYmFsQ29uc3RhbnQuZm9ybVBvc3RVcmwsIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgJHByb21pc2UudGhlbihmdW5jdGlvbiAobXNnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobXNnKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblx0XHR9O1xyXG5cdH1dKTtcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG5cdC8qIGdsb2JhbCBsZmdBcHAsIGdsb2JhbENvbnN0YW50Ki9cclxuXHQndXNlIHN0cmljdCc7XHJcblx0bGZnYXBwLmZhY3RvcnkoJ2NvbnRhY3RXaG9sZXNhbGVyTGxhdmFTZXJ2aWNlJywgWyckaHR0cCcsIGZ1bmN0aW9uICgkaHR0cCkge1xyXG5cdFx0cmV0dXJuIHtcclxuICAgICAgICAgICAgY29udGFjdFdob2xlc2FsZXJMbGF2YVNlcnZpY2U6IGZ1bmN0aW9uIChzY29wZSwgZGF0YSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIHZhciAkcHJvbWlzZSA9ICRodHRwLnBvc3QoZ2xvYmFsQ29uc3RhbnQuZm9ybVBvc3RVcmwsIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgJHByb21pc2UudGhlbihmdW5jdGlvbiAobXNnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJiZWZvcmUgc2VydmljZSBjYWxsYmFja1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhtc2cpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYWZ0ZXIgc2VydmljZSBjYWxsYmFjazogXCIgKyBtc2cpO1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24obXNnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJjYWxsaW5nIHNlcnZpY2UgZmFpbGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHRcdH07XHJcblx0fV0pO1xyXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmxmZ2FwcC5mYWN0b3J5KCdhc2tDdXN0b21lclNlcnZpY2VTZXJ2aWNlcycsIFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAnYXNrQ3VzdG9tZXJTZXJ2aWNlUG9zdCc6IGZ1bmN0aW9uKHNjb3BlLCBkYXRhLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgJHByb21pc2UgPSAkaHR0cC5wb3N0KGdsb2JhbENvbnN0YW50LmZvcm1Qb3N0VXJsLCBkYXRhKTtcclxuXHJcbiAgICAgICAgICAgICRwcm9taXNlLnRoZW4oZnVuY3Rpb24obXNnKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhtc2cpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmZhY3RvcnkoJ2Zvcm1Qb3N0U2VydmljZScsIFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAnZm9ybVBvc3REYXRhJzogZnVuY3Rpb24oc2NvcGUsIGRhdGEsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciAkcHJvbWlzZSA9ICRodHRwLnBvc3QoZ2xvYmFsQ29uc3RhbnQuZm9ybVBvc3RVcmwsIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgJHByb21pc2UudGhlbihmdW5jdGlvbihtc2cpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG1zZyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1dKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5sZmdhcHAuZmFjdG9yeSgnY29udGFjdEZvcm1TZXJ2aWNlJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgICdmb3JtUG9zdERhdGEnOiBmdW5jdGlvbihzY29wZSwgZGF0YSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdmFyICRwcm9taXNlID0gJGh0dHAucG9zdChnbG9iYWxDb25zdGFudC5mb3JtUG9zdFVybCwgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAkcHJvbWlzZS50aGVuKGZ1bmN0aW9uKG1zZykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobXNnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufV0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmxmZ2FwcC5mYWN0b3J5KCdjb250YWN0VXNHcFNlcnZpY2VzJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgICdjb250YWN0VXNHcEluZm9Qb3N0JzogZnVuY3Rpb24oc2NvcGUsIGRhdGEsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciAkcHJvbWlzZSA9ICRodHRwLnBvc3QoZ2xvYmFsQ29uc3RhbnQuZm9ybVBvc3RVcmwsIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgJHByb21pc2UudGhlbihmdW5jdGlvbihtc2cpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG1zZyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1dKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5sZmdhcHAuZmFjdG9yeSgnZGlzYWJpbGl0eVdhaXZlclNlcnZpY2VzJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgICdkaXNhYmlsaXR5V2FpdmVyUG9zdCc6IGZ1bmN0aW9uKHNjb3BlLCBkYXRhLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgJHByb21pc2UgPSAkaHR0cC5wb3N0KGdsb2JhbENvbnN0YW50LmZvcm1Qb3N0VXJsLCBkYXRhKTtcclxuXHJcbiAgICAgICAgICAgICRwcm9taXNlLnRoZW4oZnVuY3Rpb24obXNnKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhtc2cpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmZhY3RvcnkoJ2RyaW5rZXJCaWRkbGVTZXJ2aWNlcycsIFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAnZHJpbmtlckJpZGRsZVBvc3QnOiBmdW5jdGlvbihzY29wZSwgZGF0YSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdmFyICRwcm9taXNlID0gJGh0dHAucG9zdChnbG9iYWxDb25zdGFudC5mb3JtUG9zdFVybCwgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAkcHJvbWlzZS50aGVuKGZ1bmN0aW9uKG1zZykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobXNnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufV0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmxmZ2FwcC5mYWN0b3J5KCdyZXF1ZXN0SW5mb1NlcnZpY2VzJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgICdyZXF1ZXN0SW5mb1Bvc3QnOiBmdW5jdGlvbihzY29wZSwgZGF0YSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdmFyICRwcm9taXNlID0gJGh0dHAucG9zdChnbG9iYWxDb25zdGFudC5mb3JtUG9zdFVybCwgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAkcHJvbWlzZS50aGVuKGZ1bmN0aW9uKG1zZykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobXNnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufV0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmxmZ2FwcC5mYWN0b3J5KCdmcmF1ZEZvcm1TZXJ2aWNlJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgICdmcmF1ZEZvcm1Qb3N0RGF0YSc6IGZ1bmN0aW9uKHNjb3BlLCBkYXRhLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgJHByb21pc2UgPSAkaHR0cC5wb3N0KGdsb2JhbENvbnN0YW50LmZvcm1Qb3N0VXJsLCBkYXRhKTtcclxuXHJcbiAgICAgICAgICAgICRwcm9taXNlLnRoZW4oZnVuY3Rpb24obXNnKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhtc2cpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmZhY3RvcnkoJ2Zvcm1Qb3N0U2VydmljZScsIFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAnZm9ybVBvc3REYXRhJzogZnVuY3Rpb24oc2NvcGUsIGRhdGEsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciAkcHJvbWlzZSA9ICRodHRwLnBvc3QoZ2xvYmFsQ29uc3RhbnQuZm9ybVBvc3RVcmwsIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgJHByb21pc2UudGhlbihmdW5jdGlvbihtc2cpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG1zZyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1dKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5sZmdhcHAuZmFjdG9yeSgnbGlmZUluc3VyYW5jZURlYXRoU2VydmljZXMnLCBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgJ2xpZmVJbnN1cmFuY2VEZWF0aEluZm9Qb3N0JzogZnVuY3Rpb24oc2NvcGUsIGRhdGEsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciAkcHJvbWlzZSA9ICRodHRwLnBvc3QoZ2xvYmFsQ29uc3RhbnQuZm9ybVBvc3RVcmwsIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgJHByb21pc2UudGhlbihmdW5jdGlvbihtc2cpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG1zZyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1dKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5sZmdhcHAuZmFjdG9yeSgnbG9uZ1Rlcm1DYXJlU2VydmljZXMnLCBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgJ2xvbmdUZXJtQ2FyZUluZm9Qb3N0JzogZnVuY3Rpb24oc2NvcGUsIGRhdGEsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciAkcHJvbWlzZSA9ICRodHRwLnBvc3QoZ2xvYmFsQ29uc3RhbnQuZm9ybVBvc3RVcmwsIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgJHByb21pc2UudGhlbihmdW5jdGlvbihtc2cpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG1zZyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1dKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5sZmdhcHAuZmFjdG9yeSgncmVnaXN0ZXJTdXBwbGllclNlcnZpY2VzJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgICdyZWdpc3RlclN1cHBsaWVyUG9zdCc6IGZ1bmN0aW9uKHNjb3BlLCBkYXRhLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgJHByb21pc2UgPSAkaHR0cC5wb3N0KGdsb2JhbENvbnN0YW50LmZvcm1Qb3N0VXJsLCBkYXRhKTtcclxuXHJcbiAgICAgICAgICAgICRwcm9taXNlLnRoZW4oZnVuY3Rpb24obXNnKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhtc2cpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmZhY3RvcnkoJ2xvc3RQb2xpY3lGaW5kZXJTZXJ2aWNlcycsIFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAnbG9zdFBvbGljeUZpbmRlclBvc3QnOiBmdW5jdGlvbihzY29wZSwgZGF0YSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdmFyICRwcm9taXNlID0gJGh0dHAucG9zdChnbG9iYWxDb25zdGFudC5mb3JtUG9zdFVybCwgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAkcHJvbWlzZS50aGVuKGZ1bmN0aW9uKG1zZykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobXNnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufV0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmxmZ2FwcC5mYWN0b3J5KCdzZWN1cml0eVJlcG9ydGluZ1NlcnZpY2VzJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgICdzZWN1cml0eVJlcG9ydGluZ1Bvc3QnOiBmdW5jdGlvbihzY29wZSwgZGF0YSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdmFyICRwcm9taXNlID0gJGh0dHAucG9zdChnbG9iYWxDb25zdGFudC5mb3JtUG9zdFVybCwgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAkcHJvbWlzZS50aGVuKGZ1bmN0aW9uKG1zZykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobXNnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufV0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmxmZ2FwcC5mYWN0b3J5KCdzcGFuaXNoQ29udGFjdEZvcm1TZXJ2aWNlcycsIFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAnc3BhbmlzaENvbnRhY3RGb3JtUG9zdCc6IGZ1bmN0aW9uKHNjb3BlLCBkYXRhLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgJHByb21pc2UgPSAkaHR0cC5wb3N0KGdsb2JhbENvbnN0YW50LmZvcm1Qb3N0VXJsLCBkYXRhKTtcclxuXHJcbiAgICAgICAgICAgICRwcm9taXNlLnRoZW4oZnVuY3Rpb24obXNnKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhtc2cpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmZhY3RvcnkoJ3BlcmZvcm1hbmNlU2VydmljZScsIFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAncGVyZm9ybWFuY2VEYXRhJzogZnVuY3Rpb24oc2NvcGUsIGNvZGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIC8qIHZhciAkcHJvbWlzZSA9ICRodHRwLnBvc3QoJy9hZnBxdWVyeS1yZXN0LXVpL3NlcnZpY2UvcHJvZHVjdC8nK2NvZGUrJycsJycpO1xyXG4gICAgICAgICAgICAkcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChtc2cpIHtcclxuICAgICAgICAgICAgXHRjYWxsYmFjayhtc2cpO1xyXG4gICAgICAgICAgICBcdGh0dHA6Ly9jYS1kZXYubGZnLmNvbVxyXG4gICAgICAgICAgICB9KTsgKi9cclxuICAgICAgICAgICAgdmFyIGRhdGEgPSB7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgJGh0dHAucG9zdCgnL2FmcHF1ZXJ5LXJlc3QtdWkvc2VydmljZS9wcm9kdWN0LycgKyBjb2RlICsgJycsIHtcclxuXHJcbiAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhLmRhdGEgPSByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3IgOiAnLCByZXN1bHQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmZhY3RvcnkoJ2hpc3RvcmljYWxQcmljZXNTZXJ2aWNlJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgICdoaXN0b3JpY2FsUHJpY2VzRGF0YSc6IGZ1bmN0aW9uKHNjb3BlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAvKiB2YXIgZGF0ZVNwbGl0ID0gc2NvcGUuc3BsaXQoJy8nKTtcclxuICAgICAgICAgICAgdmFyICRwcm9taXNlID0gJGh0dHAuZ2V0KCdodHRwOi8vaW52ZXN0b3Iuc2hhcmVob2xkZXIuY29tL2xuYy9zdG9ja2xvb2t1cC5jZm0/aGlzdG9yaWNfTW9udGg9JytkYXRlU3BsaXRbMF0rJyZoaXN0b3JpY19EYXk9JytkYXRlU3BsaXRbMV0rJyZoaXN0b3JpY19ZZWFyPScrZGF0ZVNwbGl0WzJdKycnKTtcclxuICAgICAgICAgICAgJHByb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICBcdC8vY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgICAgICAgIFx0Y2FsbGJhY2soZGF0YSk7XHJcbiAgICAgICAgICAgIH0pOyAqL1xyXG4gICAgICAgICAgICAvKiBjYWxsYmFjaygkLnBhcnNlSlNPTihnbG9iYWxDb25zdGFudC5oaXN0b3JpY2FsUHJpY2VzKSk7Ki9cclxuICAgICAgICAgICAgJGh0dHAucG9zdCgnL3BibC1pbnZlc3Rvci1zZXJ2aWNlLWFwcC9yZXN0L2lyL2dldERldGFpbHMnLCB7XHJcbiAgICAgICAgICAgICAgICAnRlVOQ1RJT04nICA6ICdIaXN0b3JpY1N0b2NrUXVvdGUnLFxyXG4gICAgICAgICAgICAgICAgJ1RJQ0tFUicgICAgOiAnTE5DJyxcclxuICAgICAgICAgICAgICAgICdMT09LVVBEQVRFJzogc2NvcGVcclxuICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKEpTT04ucGFyc2UocmVzdWx0LnNlcnZpY2VSZXBvbnNlTWVzc2FnZSkpO1xyXG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1dKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5sZmdhcHAuZmFjdG9yeSgnaW5zaWRlclRyYWRpbmdTZXJ2aWNlJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgICdpbnNpZGVyVHJhZGluZ0RhdGEnOiBmdW5jdGlvbihzY29wZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgY2FsbGJhY2soJC5wYXJzZUpTT04oZ2xvYmFsQ29uc3RhbnQuaW5zaWRlclRyYWRpbmcpKTtcclxuXHJcbiAgICAgICAgICAgIC8qIHZhciAkcHJvbWlzZSA9ICRodHRwLmdldCgnaHR0cDovL2xvY2FsaG9zdDo5MDAwL3NjcmlwdHMvYXBwL2luc2lkZXJUcmFkaW5nLnhtbCcpO1xyXG4gICAgICAgICAgICAkcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgIFx0Y2FsbGJhY2soJC5wYXJzZVhNTChkYXRhLmRhdGEpKTtcclxuICAgICAgICAgICAgfSk7Ki9cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gICAgbGZnYXBwLmZhY3RvcnkoJ2xpZmVFeHBlY3RhbmN5Q2FsY1NlcnZpY2UnLCBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnbGlmZUV4cGVjdGFuY3lDYWxjU2VydmljZSc6IGZ1bmN0aW9uKHNjb3BlLCBkYXRhLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICAgICAgICAgICdtZXRob2QnOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3VybCcgICA6IGdsb2JhbENvbnN0YW50LmxpZmVFeHBlY3RhbmN5Q2FsYyxcclxuICAgICAgICAgICAgICAgICAgICAnZGF0YScgIDogZGF0YVxyXG4gICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbihmdW5jdGlvbigpIHtcclxuICAgIGxmZ2FwcC5mYWN0b3J5KFxyXG4gICAgICAgICdzZWFyY2hTZXJ2aWNlJywgW1xyXG4gICAgICAgICAgICAnJGh0dHAnLFxyXG4gICAgICAgICAgICBmdW5jdGlvbigkaHR0cCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAnc2VhcmNoUmVzdWx0cyc6IGZ1bmN0aW9uKHVybCwgZGF0YSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRwcm9taXNlID0gJGh0dHBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wb3N0KHVybCwgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcHJvbWlzZS50aGVuKGZ1bmN0aW9uKG1zZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobXNnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF0pO1xyXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmxmZ2FwcC5mYWN0b3J5KCdzZWNGaWxpbmdzU2VydmljZXMnLCBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgJ3NlY0ZpbGluZ0RhdGEnOiBmdW5jdGlvbihzY29wZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc2NvcGUpO1xyXG4gICAgICAgICAgICAvKiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgXHRjYWxsYmFjaygkLnBhcnNlSlNPTihnbG9iYWxDb25zdGFudC5zZWNGaWxpbmdzLnNlcnZpY2VSZXBvbnNlTWVzc2FnZSkpXHJcbiAgICAgICAgICAgIH0sIDMwMDApOyAqL1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygkLnBhcnNlSlNPTihnbG9iYWxDb25zdGFudC5zZWNGaWxpbmdzLnNlcnZpY2VSZXBvbnNlTWVzc2FnZSksICdhc2Rhc2Rhc2QnKTtcclxuICAgICAgICAgICAgLyogdmFyICRwcm9taXNlID0gJGh0dHAuZ2V0KCdodHRwOi8vbG9jYWxob3N0OjkwMDAvc2NyaXB0cy9hcHAvc2VydmljZXMvc2VjRmlsaW5ncy54bWwnKTtcclxuICAgICAgICAgICAgJHByb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICBcdGNhbGxiYWNrKCQucGFyc2VYTUwoZGF0YS5kYXRhKSk7XHJcbiAgICAgICAgICAgIH0pOyovXHJcbiAgICAgICAgICAgICRodHRwLnBvc3QoJy9wYmwtaW52ZXN0b3Itc2VydmljZS1hcHAvcmVzdC9pci9nZXREZXRhaWxzJywgc2NvcGUpXHJcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhKU09OLnBhcnNlKHJlc3VsdC5zZXJ2aWNlUmVwb25zZU1lc3NhZ2UpKTtcclxuICAgICAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XSk7IiwiLyogZ2xvYmFsIE1hcmtlckNsdXN0ZXJlciAqL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2xmZ2FwcCcpLmZhY3RvcnkoJ0dvb2dsZU1hcFNlcnZpY2UnLCBbJyRxJywgJyRmaWx0ZXInLCAnQ29tbW9uU2VydmljZScsIGZ1bmN0aW9uKCRxLCAkZmlsdGVyLFxyXG4gICAgICAgIGNvbW1vblNlcnZpY2UpIHtcclxuICAgICAgICB2YXIgbWFwLCBtYXBJbml0LCBtYXJrZXJDbHVzdGVyZXIsIGluZm93aW5kb3c7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxpc3RTY3JvbGwoaW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIHBybnRFbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXBJbml0Lmxpc3RQcm50SWQpO1xyXG4gICAgICAgICAgICB2YXIgY2hpbGRFbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShtYXBJbml0Lmxpc3RDaGlsZE5hbWUpO1xyXG4gICAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gY2hpbGRFbGVbaW5kZXhdLm9mZnNldFRvcCAtIHBybnRFbGUub2Zmc2V0VG9wO1xyXG5cclxuICAgICAgICAgICAgcHJudEVsZS5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVJbmZvV2luZG93TXNnKGFkdmlzb3IpIHtcclxuICAgICAgICAgICAgdmFyIGluZm9XaW5kb3dDb250ZW50ID0gJzxkaXYgY2xhc3M9XCJpbmZvLXdpbmRvd1wiPjxwPic7XHJcblxyXG4gICAgICAgICAgICAvLyBGaXJzdCBuYW1lIHZhbHVlIG51bGwgY2hlY2tcclxuICAgICAgICAgICAgaWYgKCFjb21tb25TZXJ2aWNlLmlzRW1wdHlTdHJpbmcoYWR2aXNvci5maXJzdE5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBpbmZvV2luZG93Q29udGVudCA9IGluZm9XaW5kb3dDb250ZW50ICsgYWR2aXNvci5maXJzdE5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIExhc3QgbmFtZSB2YWx1ZSBudWxsIGNoZWNrXHJcbiAgICAgICAgICAgIGlmICghY29tbW9uU2VydmljZS5pc0VtcHR5U3RyaW5nKGFkdmlzb3IubGFzdE5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBpbmZvV2luZG93Q29udGVudCA9IGluZm9XaW5kb3dDb250ZW50ICsgJyAnICsgYWR2aXNvci5sYXN0TmFtZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5mb1dpbmRvd0NvbnRlbnQgPSBpbmZvV2luZG93Q29udGVudCArICc8L3A+JztcclxuXHJcbiAgICAgICAgICAgIC8vIEVtYWlsIHZhbHVlIG51bGwgY2hlY2tcclxuICAgICAgICAgICAgaWYgKCFjb21tb25TZXJ2aWNlLmlzRW1wdHlTdHJpbmcoYWR2aXNvci5lbWFpbCkpIHtcclxuICAgICAgICAgICAgICAgIGluZm9XaW5kb3dDb250ZW50ID0gaW5mb1dpbmRvd0NvbnRlbnRcclxuICAgICAgICAgICAgICAgICAgICArICc8cD48YSBocmVmPVwibWFpbHRvOicgKyBhZHZpc29yLmVtYWlsICsgJ1wiPicgKyBhZHZpc29yLmVtYWlsICsgJzwvYT48L3A+JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gRGlzdGFuY2UgdmFsdWUgbnVsbCBjaGVja1xyXG4gICAgICAgICAgICBpZiAoIWNvbW1vblNlcnZpY2UuaXNFbXB0eVN0cmluZyhhZHZpc29yLmRpc3RhbmNlKSkge1xyXG4gICAgICAgICAgICAgICAgaW5mb1dpbmRvd0NvbnRlbnQgPSBpbmZvV2luZG93Q29udGVudFxyXG4gICAgICAgICAgICAgICAgICAgICsgJzxwIGNsYXNzPVwiZGlyZWN0aW9uc1wiPjxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5nb29nbGUuY29tL21hcHM/ZGFkZHI9J1xyXG4gICAgICAgICAgICAgICAgICAgICsgYWR2aXNvci5sb2NhdGlvbi5sYXQgKyAnLCcgKyBhZHZpc29yLmxvY2F0aW9uLmxuZyArICdcIj5EaXJlY3Rpb25zPC9hPjwvcD4nO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbmZvV2luZG93Q29udGVudCA9IGluZm9XaW5kb3dDb250ZW50ICsgJzxkaXYgY2xhc3M9XCJhZGRyZXNzLWNvbnRcIj4nO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkcmVzcyBsaW5lIDEgdmFsdWUgbnVsbCBjaGVja1xyXG4gICAgICAgICAgICBpZiAoIWNvbW1vblNlcnZpY2UuaXNFbXB0eVN0cmluZyhhZHZpc29yLmFkZHJlc3NMaW5lMSkpIHtcclxuICAgICAgICAgICAgICAgIGluZm9XaW5kb3dDb250ZW50ID0gaW5mb1dpbmRvd0NvbnRlbnRcclxuICAgICAgICAgICAgICAgICAgICArICc8cD4nICsgYWR2aXNvci5hZGRyZXNzTGluZTEgKyAnPC9wPic7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluZm9XaW5kb3dDb250ZW50ID0gaW5mb1dpbmRvd0NvbnRlbnQgKyAnPHA+JztcclxuXHJcbiAgICAgICAgICAgIC8vIENpdHkgdmFsdWUgbnVsbCBjaGVja1xyXG4gICAgICAgICAgICBpZiAoIWNvbW1vblNlcnZpY2UuaXNFbXB0eVN0cmluZyhhZHZpc29yLmNpdHkpKSB7XHJcbiAgICAgICAgICAgICAgICBpbmZvV2luZG93Q29udGVudCA9IGluZm9XaW5kb3dDb250ZW50ICsgYWR2aXNvci5jaXR5O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBTdGF0ZSB2YWx1ZSBudWxsIGNoZWNrXHJcbiAgICAgICAgICAgIGlmICghY29tbW9uU2VydmljZS5pc0VtcHR5U3RyaW5nKGFkdmlzb3Iuc3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICBpbmZvV2luZG93Q29udGVudCA9IGluZm9XaW5kb3dDb250ZW50ICsgJywgJyArIGFkdmlzb3Iuc3RhdGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFppcCBjb2RlIHZhbHVlIG51bGwgY2hlY2tcclxuICAgICAgICAgICAgaWYgKCFjb21tb25TZXJ2aWNlLmlzRW1wdHlTdHJpbmcoYWR2aXNvci56aXBDb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaW5mb1dpbmRvd0NvbnRlbnQgPSBpbmZvV2luZG93Q29udGVudCArICcgJyArIGFkdmlzb3IuemlwQ29kZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5mb1dpbmRvd0NvbnRlbnQgPSBpbmZvV2luZG93Q29udGVudCArICc8L3A+JztcclxuXHJcbiAgICAgICAgICAgIC8vIFBob25lIG51bWJlciB2YWx1ZSBudWxsIGNoZWNrXHJcbiAgICAgICAgICAgIGlmICghY29tbW9uU2VydmljZS5pc0VtcHR5U3RyaW5nKGFkdmlzb3IucGhvbmVOdW1iZXIpKSB7XHJcbiAgICAgICAgICAgICAgICBpbmZvV2luZG93Q29udGVudCA9IGluZm9XaW5kb3dDb250ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgKyAnPHAgY2xhc3M9XCJibHVlLWxibFwiPjxhIGhyZWY9XCJ0ZWw6JyArIGFkdmlzb3IucGhvbmVOdW1iZXIgKyAnXCI+JyArIGFkdmlzb3IucGhvbmVOdW1iZXJcclxuICAgICAgICAgICAgICAgICAgICArICc8L2E+PC9wPjwvZGl2PjwvZGl2Pic7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBpbmZvV2luZG93Q29udGVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG1hcmtlckNsaWNrKGFkdmlzb3IpIHtcclxuICAgICAgICAgICAgdmFyIG1hcmtlciA9IGFkdmlzb3IubWFya2VyO1xyXG4gICAgICAgICAgICB2YXIgbWFya2VyTGJsID0gbWFya2VyLmxhYmVsLnRleHQ7XHJcblxyXG4gICAgICAgICAgICAvLyBDbGljayBldmVudCBmb3IgbWFya2VyXHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odHlwZSkge1xyXG4gICAgICAgICAgICAgICAgbWFwSW5pdC52bS5zZWxNYXJrZXIgPSBtYXJrZXJMYmw7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF0bG5nID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICdsYXQnOiBtYXJrZXIucG9zaXRpb24ubGF0KCksXHJcbiAgICAgICAgICAgICAgICAgICAgJ2xuZyc6IG1hcmtlci5wb3NpdGlvbi5sbmcoKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAncGl4ZWxPZmZzZXQnOiBuZXcgZ29vZ2xlLm1hcHMuU2l6ZSgwLCAtNDApXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtYXJrZXIuZ2V0TWFwKCkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmZvd2luZG93LnNldE9wdGlvbnMob3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5zZXRQb3NpdGlvbihsYXRsbmcpO1xyXG4gICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5zZXRDb250ZW50KGNyZWF0ZUluZm9XaW5kb3dNc2coYWR2aXNvcikpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGluZm93aW5kb3cub3BlbihtYXJrZXIuZ2V0KCdtYXAnKSwgbWFya2VyKTtcclxuICAgICAgICAgICAgICAgIGluZm93aW5kb3cub3BlbihtYXApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSAndHJpZ2dlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXBJbml0LnNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxpc3RTY3JvbGwocGFyc2VJbnQobWFya2VyTGJsKSAtIDEpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbWFya2VyQ2x1c3RlckNsaWNrKGNsdXN0ZXIpIHtcclxuICAgICAgICAgICAgdmFyIG1hcmtlcnMgPSBjbHVzdGVyLmdldE1hcmtlcnMoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBoYXNTYW1lTGF0TG5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgdmFyIHByZXZNYXJrZXIgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXJrZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbWFya2Vyc1tpXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocHJldk1hcmtlciAhPT0gbnVsbCAmJiAocHJldk1hcmtlci5nZXRQb3NpdGlvbigpLmxhdCgpICE9PSBtYXJrZXIuZ2V0UG9zaXRpb24oKS5sYXQoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBwcmV2TWFya2VyLmdldFBvc2l0aW9uKCkubG5nKCkgIT09IG1hcmtlci5nZXRQb3NpdGlvbigpLmxuZygpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc1NhbWVMYXRMbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHByZXZNYXJrZXIgPSBtYXJrZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGhhc1NhbWVMYXRMbmcpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjbHVzdGVyQ29udGVudCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF0bG5nID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICdsYXQnOiBtYXJrZXJzWzBdLmdldFBvc2l0aW9uKCkubGF0KCksXHJcbiAgICAgICAgICAgICAgICAgICAgJ2xuZyc6IG1hcmtlcnNbMF0uZ2V0UG9zaXRpb24oKS5sbmcoKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBtYXJrZXJzLmZvckVhY2goZnVuY3Rpb24obWFya2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFkdmlzb3JJbmRleCA9IHBhcnNlSW50KG1hcmtlci5sYWJlbC50ZXh0KSAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFkdmlzb3IgPSBtYXBJbml0LnJlc3VsdHNbYWR2aXNvckluZGV4XTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsdXN0ZXJDb250ZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsdXN0ZXJDb250ZW50ID0gY3JlYXRlSW5mb1dpbmRvd01zZyhhZHZpc29yKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbHVzdGVyQ29udGVudCA9IGNsdXN0ZXJDb250ZW50ICsgJzxociBjbGFzcz1cImluZm8td2luZG93LWhyXCI+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjcmVhdGVJbmZvV2luZG93TXNnKGFkdmlzb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGluZm93aW5kb3cuc2V0Q29udGVudChjbHVzdGVyQ29udGVudCk7XHJcbiAgICAgICAgICAgICAgICBpbmZvd2luZG93LnNldFBvc2l0aW9uKGxhdGxuZyk7XHJcbiAgICAgICAgICAgICAgICBpbmZvd2luZG93Lm9wZW4obWFwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYXR0YWNoTWFya2VycygpIHtcclxuICAgICAgICAgICAgdmFyIG1hcmtlcnMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChtYXBJbml0LnJlc3VsdHMsIGZ1bmN0aW9uKGFkdmlzb3IsIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWFya2VyTGJsID0gcGFyc2VJbnQoaW5kZXgpICsgMTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbWFya2V0TGJsRlNpemUgPSAnMTJweCc7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG1hcmtlckxibCA+IDk5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFya2V0TGJsRlNpemUgPSAnMTBweCc7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGljb25PcmlnaW4gPSBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMTEsIDEyKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobWFya2VyTGJsID4gOSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGljb25PcmlnaW4gPSBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMTAsIDEyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhhZHZpc29yLmxvY2F0aW9uLmxhdCxcclxuICAgICAgICAgICAgICAgICAgICBhZHZpc29yLmxvY2F0aW9uLmxuZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xyXG4gICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbicgOiBsYXRMbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2FuaW1hdGlvbic6IGdvb2dsZS5tYXBzLkFuaW1hdGlvbi5EUk9QLFxyXG4gICAgICAgICAgICAgICAgICAgICdpY29uJyAgICAgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICd1cmwnICAgICAgICA6ICcvc3RhdGljL3djcy9sZmcvaW1hZ2VzL2ljb25zL21hcC1tYXJrZXIucG5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsT3JpZ2luJzogaWNvbk9yaWdpblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAndGV4dCcgICAgICA6ICcnICsgbWFya2VyTGJsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29sb3InICAgICA6ICd3aGl0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdmb250U2l6ZScgIDogbWFya2V0TGJsRlNpemUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdmb250V2VpZ2h0JzogJ2JvbGQnXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAnbWFwJzogbWFwXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBhZHZpc29yLm1hcmtlciA9IG1hcmtlcjtcclxuICAgICAgICAgICAgICAgIG1hcmtlci5hZGRMaXN0ZW5lcignY2xpY2snLCBtYXJrZXJDbGljayhhZHZpc29yKSk7XHJcbiAgICAgICAgICAgICAgICBtYXJrZXJzLnB1c2gobWFya2VyKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBtYXJrZXJDbHVzdGVyZXIgPSBuZXcgTWFya2VyQ2x1c3RlcmVyKG1hcCwgbWFya2Vycywge1xyXG4gICAgICAgICAgICAgICAgLy8gaW1hZ2VQYXRoOiAnaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vbWFwcy9kb2N1bWVudGF0aW9uL2phdmFzY3JpcHQvZXhhbXBsZXMvbWFya2VyY2x1c3RlcmVyL20nLFxyXG4gICAgICAgICAgICAgICAgJ2ltYWdlUGF0aCcgIDogJy9zdGF0aWMvd2NzL2xmZy9pbWFnZXMvaWNvbnMvbScsXHJcbiAgICAgICAgICAgICAgICAnbWF4Wm9vbScgICAgOiAxOCxcclxuICAgICAgICAgICAgICAgICd6b29tT25DbGljayc6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBtYXJrZXJDbHVzdGVyZXIuYWRkTGlzdGVuZXIoJ2NsaWNrJywgbWFya2VyQ2x1c3RlckNsaWNrKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qIEdvb2dsZSBNYXBzIEphdmFzY3JpcHQgQVBJIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9ucyAqL1xyXG4gICAgICAgIC8vIFRoZSBpbml0TWFwIGZ1bmN0aW9uIGluaXRpYWxpemVzIGFuZCBhZGRzIHRoZSBtYXAgd2hlbiB0aGUgd2ViIHBhZ2UgbG9hZHNcclxuICAgICAgICBmdW5jdGlvbiBpbml0TWFwKG1hcEluaXRPYmopIHtcclxuICAgICAgICAgICAgLy8gdmFyIHByb21pc2U7XHJcbiAgICAgICAgICAgIG1hcEluaXQgPSBtYXBJbml0T2JqO1xyXG5cclxuICAgICAgICAgICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyksIHtcclxuICAgICAgICAgICAgICAgICd6b29tJyAgIDogMCxcclxuICAgICAgICAgICAgICAgICdtYXhab29tJzogMTgsXHJcbiAgICAgICAgICAgICAgICAnY2VudGVyJyA6IG1hcEluaXQucmVzdWx0c1swXS5sb2NhdGlvblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHZhciBsYXRsbmdib3VuZHMgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzKCk7XHJcblxyXG4gICAgICAgICAgICBtYXBJbml0LnJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbihhZHZpc29yKSB7XHJcbiAgICAgICAgICAgICAgICBsYXRsbmdib3VuZHMuZXh0ZW5kKGFkdmlzb3IubG9jYXRpb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIG1hcC5maXRCb3VuZHMobGF0bG5nYm91bmRzKTtcclxuXHJcbiAgICAgICAgICAgIGluZm93aW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdygpO1xyXG5cclxuICAgICAgICAgICAgLyogaWYgKG1hcEluaXQuc2VhcmNoQnkgPT09ICd6aXBDb2RlJykge1xyXG4gICAgICAgICAgICAgICAgcHJvbWlzZSA9IGNhbGN1bGF0ZURpc3RhbmNlKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG4gICAgICAgICAgICAgICAgcHJvbWlzZSA9IGRlZmVycmVkLnByb21pc2U7XHJcbiAgICAgICAgICAgICAgICBhdHRhY2hNYXJrZXJzKCk7XHJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKG1hcEluaXQucmVzdWx0cyk7XHJcbiAgICAgICAgICAgIH0qL1xyXG5cclxuICAgICAgICAgICAgYXR0YWNoTWFya2VycygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdHJpZ2dlck1hcmtlcihhZHZpc29yKSB7XHJcbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIoYWR2aXNvci5tYXJrZXIsICdjbGljaycsICd0cmlnZ2VyJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZW9jb2RlTGF0TG5nKHppcENvZGUpIHtcclxuICAgICAgICAgICAgdmFyIHByb21pc2U7XHJcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcblxyXG4gICAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgICAgICAgICAgdmFyIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7XHJcblxyXG4gICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKHtcclxuICAgICAgICAgICAgICAgICdhZGRyZXNzJzogemlwQ29kZVxyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbihyZXN1bHRzLCBzdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09ICdPSycpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ubGF0ID0gcmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbi5sYXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ubG5nID0gcmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbi5sbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShsb2NhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdHZW9jb2RlIHdhcyBub3Qgc3VjY2Vzc2Z1bCBmb3IgdGhlIGZvbGxvd2luZyByZWFzb246ICdcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBzdGF0dXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICdsaXN0U2Nyb2xsJyAgIDogbGlzdFNjcm9sbCxcclxuICAgICAgICAgICAgJ3RyaWdnZXJNYXJrZXInOiB0cmlnZ2VyTWFya2VyLFxyXG4gICAgICAgICAgICAnaW5pdE1hcCcgICAgICA6IGluaXRNYXAsXHJcbiAgICAgICAgICAgICdnZW9jb2RlTGF0TG5nJzogZ2VvY29kZUxhdExuZ1xyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2xmZ2FwcCcpLmZhY3RvcnkoJ0NvbW1vblNlcnZpY2UnLCBbZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVaaXBDb2RlKHppcENvZGUsIGV2dCkge1xyXG4gICAgICAgICAgICBldnQgPSAoZXZ0KSA/IGV2dCA6IHdpbmRvdy5ldmVudDtcclxuICAgICAgICAgICAgdmFyIGNoYXJDb2RlID0gKGV2dC53aGljaCkgPyBldnQud2hpY2ggOiBldnQua2V5Q29kZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjaGFyQ29kZSA+IDMxICYmIChjaGFyQ29kZSA8IDQ4IHx8IGNoYXJDb2RlID4gNTcpKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB6aXBDb2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh6aXBDb2RlICE9PSB1bmRlZmluZWQgJiYgemlwQ29kZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgemlwQ29kZSA9IHppcENvZGUucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHppcENvZGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZVBob25lTm8ocGhvbmVObywgZXZ0KSB7XHJcbiAgICAgICAgICAgIGV2dCA9IChldnQpID8gZXZ0IDogd2luZG93LmV2ZW50O1xyXG4gICAgICAgICAgICBpZiAocGhvbmVObyAhPT0gdW5kZWZpbmVkICYmIHBob25lTm8gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwaG9uZU5vLmxlbmd0aCA9PT0gMyAmJiBldnQua2V5Q29kZSAhPT0gOCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBob25lTm8gPSBwaG9uZU5vLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGhvbmVObyA9IHBob25lTm8ucmVwbGFjZSgvKFxcZHszfSkvLCAnJDEtJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBob25lTm8ubGVuZ3RoID09PSA3ICYmIGV2dC5rZXlDb2RlICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGhvbmVObyA9IHBob25lTm8ucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBwaG9uZU5vID0gcGhvbmVOby5yZXBsYWNlKC8oXFxkezN9KShcXGR7M30pLywgJyQxLSQyLScpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwaG9uZU5vLmxlbmd0aCA9PT0gMTIpIHtcclxuICAgICAgICAgICAgICAgICAgICBwaG9uZU5vID0gcGhvbmVOby5yZXBsYWNlKC9bXjAtOV0vZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBob25lTm8gPSBwaG9uZU5vLnJlcGxhY2UoLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwaG9uZU5vLmxlbmd0aCA9PT0gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICBwaG9uZU5vID0gcGhvbmVOby5yZXBsYWNlKC8oXFxkezN9KShcXGR7M30pKFxcZHs0fSkvLCAnJDEtJDItJDMnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHBob25lTm87XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBGdW5jdGlvbiB0byBzY3JvbGwgdXAgYWZ0ZXIgY2xpY2tpbmcgc2VhcmNoXHJcbiAgICAgICAgZnVuY3Rpb24gc2Nyb2xsVG9wKGNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgcGFyYW1TdGF0ZTtcclxuXHJcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdyZXNwb25zaXZlOnN0YXRlY2hhbmdlZCcsIGZ1bmN0aW9uKGUsIHBhcmFtKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbVN0YXRlID0gcGFyYW07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbFRwVmFsLCBib2R5O1xyXG5cclxuICAgICAgICAgICAgICAgIHNjcm9sbFRwVmFsID0gJChjbGFzc05hbWUpLm9mZnNldCgpLnRvcDtcclxuICAgICAgICAgICAgICAgIGJvZHkgPSAkKCdodG1sLCBib2R5Jyk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1TdGF0ZSA9PT0gJ21vYmlsZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBib2R5LnNjcm9sbFRvcChzY3JvbGxUcFZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9keS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdzY3JvbGxUb3AnOiBzY3JvbGxUcFZhbFxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3F1ZXVlJyAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdlYXNpbmcnICA6ICdzd2luZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdkdXJhdGlvbic6IDUwMFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxUcFZhbCA9IChzY3JvbGxUcFZhbCAtIDEwKSAtICQoJy5Ub3BoZWFkZXInKS5oZWlnaHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYm9keS5zY3JvbGxUb3Aoc2Nyb2xsVHBWYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJvZHkuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsVG9wJzogc2Nyb2xsVHBWYWxcclxuICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdxdWV1ZScgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZWFzaW5nJyAgOiAnc3dpbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZHVyYXRpb24nOiA1MDBcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgMjAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGZvcm1hdFBob25lTm8ocGhvbmVObykge1xyXG4gICAgICAgICAgICBpZiAocGhvbmVObyAhPT0gdW5kZWZpbmVkICYmIHBob25lTm8gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHBob25lTm8gPSBwaG9uZU5vLnJlcGxhY2UoLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8sICckMS0kMi0kMycpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcGhvbmVObztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGlzRW1wdHlTdHJpbmcoc3RyKSB7XHJcbiAgICAgICAgICAgIGlmIChzdHIgIT09IHVuZGVmaW5lZCAmJiBzdHIgIT09IG51bGwgJiYgc3RyICE9PSAnbnVsbCcgJiYgc3RyICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICdzY3JvbGxUb3AnICAgICAgOiBzY3JvbGxUb3AsXHJcbiAgICAgICAgICAgICd2YWxpZGF0ZVBob25lTm8nOiB2YWxpZGF0ZVBob25lTm8sXHJcbiAgICAgICAgICAgICd2YWxpZGF0ZVppcENvZGUnOiB2YWxpZGF0ZVppcENvZGUsXHJcbiAgICAgICAgICAgICdmb3JtYXRQaG9uZU5vJyAgOiBmb3JtYXRQaG9uZU5vLFxyXG4gICAgICAgICAgICAnaXNFbXB0eVN0cmluZycgIDogaXNFbXB0eVN0cmluZ1xyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2xmZ2FwcCcpLmZhY3RvcnkoJ1Jlc3RTZXJ2aWNlJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ3Bvc3QnOiBmdW5jdGlvbih1cmwsIGRhdGEsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgICAgICAgICAgJ21ldGhvZCc6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICAndXJsJyAgIDogdXJsLFxyXG4gICAgICAgICAgICAgICAgICAgICdkYXRhJyAgOiBkYXRhXHJcbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ2dldCc6IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgICAgICAgICAnbWV0aG9kJzogJ0dFVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3VybCcgICA6IHVybFxyXG4gICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmxmZ2FwcC5kaXJlY3RpdmUoJ3Njcm9sbCcsIFsnJHdpbmRvdycsIGZ1bmN0aW9uKCR3aW5kb3cpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSkge1xyXG4gICAgICAgIHZhciB0b3BIZWFkZXJQb3MxID0gMTUwO1xyXG4gICAgICAgIHZhciB0b3BIZWFkZXJQb3MyID0gODA7XHJcblxyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5iaW5kKCdzY3JvbGwnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGFnZVlPZmZzZXQgPj0gMTApIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2dldFN0YXJ0ZWQtc3VjY2Vzcy10eHQnKS5jc3MoJ3RvcCcsIHRvcEhlYWRlclBvczIgKyAncHgnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2dldFN0YXJ0ZWQtc3VjY2Vzcy10eHQnKS5jc3MoJ3RvcCcsIHRvcEhlYWRlclBvczEgKyAncHgnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzY29wZS4kYXBwbHkoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1dKTtcclxubGZnYXBwLmRpcmVjdGl2ZSgnb25seU51bWJlclZhbGlkYXRpb24nLCBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgJ3JlcXVpcmUnIDogJ25nTW9kZWwnLFxyXG4gICAgICAgICdyZXN0cmljdCc6ICdBJyxcclxuICAgICAgICAnbGluaycgICAgOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBpbnB1dFZhbHVlKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkaWdpdHMgPSB2YWwucmVwbGFjZSgvW14wLTldL2csICcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpZ2l0cyAhPT0gdmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZShkaWdpdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLiRyZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoZGlnaXRzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN0cmwuJHBhcnNlcnMucHVzaChpbnB1dFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KTsiLCIndXNlIHN0cmljdCc7XG5cbmxmZ2FwcC5kaXJlY3RpdmUoJ2xmc0FkZGFjY291bnRzJywgWyckY29tcGlsZScsIGZ1bmN0aW9uKCRjb21waWxlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgJ3Jlc3RyaWN0JzogJ0UnLFxuICAgICAgICAncmVwbGFjZScgOiB0cnVlLFxuICAgICAgICAnc2NvcGUnICAgOiB7XG4gICAgICAgICAgICAnYWNjTGlzdCcgICAgICAgICAgICAgOiAnPScsXG4gICAgICAgICAgICAnd2F0Y2hQcmVmaXhBbmRBY2NOdW0nOiAnPW1ldGhvZCcsXG4gICAgICAgICAgICAndHlwZScgICAgICAgICAgICAgICAgOiAnQCdcbiAgICAgICAgfSxcbiAgICAgICAgJ3RlbXBsYXRlJzogJzxwPjxhIGhyZWY9XFwnamF2YXNjcmlwdDo7XFwnIGlkPVxcJ2FkZE1vcmVBY2NvdW50c1xcJyBjbGFzcz1cXCdVSUJ1dHRvbiBVSUJ1dHRvbi0tdXBwZXJjYXNlXFwnPkFkZCBNb3JlIEFjY291bnRzPC9hPjwvcD4nLFxuICAgICAgICAnbGluaycgICAgOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCkge1xuICAgICAgICAgICAgc2NvcGUuY291bnQgPSAwO1xuICAgICAgICAgICAgZWxlbWVudC5maW5kKCdhJykuYmluZCgnY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2NvcGUuY291bnQgJSAzID09PSAwICYmIHNjb3BlLmNvdW50ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBodG1sID0gJGNvbXBpbGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNlY3Rpb24gY2xhc3M9XFwnbXVsdGl3YXBwZXIgYWNjTGlzdHdyYXBwZXJcXCc+PGxmczphY2NvdW50IGNvdW50PVxcJydcbiAgICAgICAgICAgICAgICAgICAgICAgICsgc2NvcGUuY291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJ1xcJyBhY2MtbGlzdD1cXCdhY2NMaXN0XFwnIGRhdGEtbWV0aG9kPVxcJ3dhdGNoUHJlZml4QW5kQWNjTnVtXFwnIHR5cGU9J1xuICAgICAgICAgICAgICAgICAgICAgICAgKyBzY29wZS50eXBlICsgJz48L2xmczphY2NvdW50Pjwvc2VjdGlvbj4nKShzY29wZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCQoJy5hY2NMaXN0d3JhcHBlcjpsYXN0JykpLmFmdGVyKGh0bWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidXR0b24gPSAkY29tcGlsZSgnPGxmczphY2NvdW50IGNvdW50PVxcJycgKyBzY29wZS5jb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgKyAnXFwnIGFjYy1saXN0PVxcJ2FjY0xpc3RcXCcgZGF0YS1tZXRob2Q9XFwnd2F0Y2hQcmVmaXhBbmRBY2NOdW1cXCcgdHlwZT0nXG4gICAgICAgICAgICAgICAgICAgICAgICArIHNjb3BlLnR5cGUgKyAnID48L2xmczphY2NvdW50PicpKHNjb3BlKTtcblxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJCgnLmFjY0xpc3R3cmFwcGVyOmxhc3QnKSkuYXBwZW5kKGJ1dHRvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNjb3BlLmNvdW50Kys7XG4gICAgICAgICAgICAgICAgaWYgKHNjb3BlLmNvdW50ID09PSAxNSAmJiBzY29wZS50eXBlID09PSAncmVnJykge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNjb3BlLmNvdW50ID09PSA5ICYmIHNjb3BlLnR5cGUgPT09ICd1cGRhdGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9O1xufV0pO1xuXG5sZmdhcHAuZGlyZWN0aXZlKCdsZnNBZGRkZWxhY2NvdW50cycsIFsnJGNvbXBpbGUnLCBmdW5jdGlvbigkY29tcGlsZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgICdyZXN0cmljdCc6ICdFJyxcbiAgICAgICAgJ3JlcGxhY2UnIDogdHJ1ZSxcbiAgICAgICAgJ3Njb3BlJyAgIDoge1xuICAgICAgICAgICAgJ2FjY0RlbExpc3QnOiAnPScsXG4gICAgICAgICAgICAndHlwZScgICAgICA6ICdAJ1xuXG4gICAgICAgIH0sXG4gICAgICAgICd0ZW1wbGF0ZSc6ICc8cD48YSBocmVmPVxcJ2phdmFzY3JpcHQ6O1xcJyBpZD1cXCdhZGREZWxNb3JlQWNjb3VudHNcXCcgY2xhc3M9XFwnVUlCdXR0b24gVUlCdXR0b24tLXVwcGVyY2FzZVxcJz5BZGQgTW9yZSBBY2NvdW50czwvYT48L3A+JyxcbiAgICAgICAgJ2xpbmsnICAgIDogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHNjb3BlLmNvdW50ID0gMDtcbiAgICAgICAgICAgIGVsZW1lbnQuZmluZCgnYScpLmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNjb3BlLmNvdW50ICUgMyA9PT0gMCAmJiBzY29wZS5jb3VudCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaHRtbCA9ICRjb21waWxlKFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzZWN0aW9uIGNsYXNzPVxcJ211bHRpd2FwcGVyIGFjY0RlbExpc3R3cmFwcGVyXFwnPjxsZnM6YWNjb3VudGRlbCBjb3VudD1cXCcnXG4gICAgICAgICAgICAgICAgICAgICAgICArIHNjb3BlLmNvdW50ICsgJ1xcJyBhY2MtbGlzdD1cXCdhY2NEZWxMaXN0XFwnPjwvbGZzOmFjY291bnQ+PC9zZWN0aW9uPidcbiAgICAgICAgICAgICAgICAgICAgKShzY29wZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCQoJy5hY2NEZWxMaXN0d3JhcHBlcjpsYXN0JykpLmFmdGVyKGh0bWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidXR0b24gPSAkY29tcGlsZSgnPGxmczphY2NvdW50ZGVsIGNvdW50PVxcJycgKyBzY29wZS5jb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgKyAnXFwnIGFjYy1saXN0PVxcJ2FjY0RlbExpc3RcXCc+PC9sZnM6YWNjb3VudD4nKShzY29wZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCQoJy5hY2NEZWxMaXN0d3JhcHBlcjpsYXN0JykpLmFwcGVuZChidXR0b24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzY29wZS5jb3VudCsrO1xuICAgICAgICAgICAgICAgIGlmIChzY29wZS5jb3VudCA9PT0gMTUgJiYgc2NvcGUudHlwZSA9PT0gJ3JlZycpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzY29wZS5jb3VudCA9PT0gOSAmJiBzY29wZS50eXBlID09PSAndXBkYXRlJykge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfTtcbn1dKTtcblxubGZnYXBwLmRpcmVjdGl2ZSgnbGZzQWNjb3VudCcsIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIGxmc0FjY291bnRDb250cm9sbGVyKCRzY29wZSkge1xuICAgICAgICAkc2NvcGUudmFsaWRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICgkc2NvcGUudHlwZSA9PT0gJ3JlZycpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNQcmVmaXgxQ2hhbmdlZCA9ICEoKCRzY29wZS5hY2NMaXN0WzBdLnByZWZpeCA9PT0gdW5kZWZpbmVkIHx8ICcnID09PSAkc2NvcGUuYWNjTGlzdFswXVxuICAgICAgICAgICAgICAgICAgICAucHJlZml4KSk7XG4gICAgICAgICAgICAgICAgdmFyIGlzQWNjTnVtMUNoYW5nZWQgPSAhKCgkc2NvcGUuYWNjTGlzdFswXS5hY2NOdW0gPT09IHVuZGVmaW5lZCB8fCAnJyA9PT0gJHNjb3BlLmFjY0xpc3RbMF1cbiAgICAgICAgICAgICAgICAgICAgLmFjY051bSkpO1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLndhdGNoUHJlZml4QW5kQWNjTnVtKGlzUHJlZml4MUNoYW5nZWQsIGlzQWNjTnVtMUNoYW5nZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuJHdhdGNoKCdwcmVmaXgnLCBmdW5jdGlvbihuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IHtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHVuZGVmaW5lZCA9PT0gJHNjb3BlLmFjY0xpc3RbJHNjb3BlLmNvdW50XSkge1xuICAgICAgICAgICAgICAgIG9iaiA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ2luZGV4JyA6ICRzY29wZS5jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgJ3ByZWZpeCc6IChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkID8gJycgOiBuZXdWYWx1ZSlcblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuYWNjTGlzdFskc2NvcGUuY291bnRdID0gb2JqO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYmogPSAkc2NvcGUuYWNjTGlzdFskc2NvcGUuY291bnRdO1xuXG4gICAgICAgICAgICAgICAgb2JqLnByZWZpeCA9IChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkID8gJycgOiBuZXdWYWx1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmNvdW50ID09PSAwICYmICRzY29wZS50eXBlID09PSAncmVnJykge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmFsaWRhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJHNjb3BlLmFjY0xpc3RbJHNjb3BlLmNvdW50XSA9IG9iajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2FjY051bScsIGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0ge1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAodW5kZWZpbmVkID09PSAkc2NvcGUuYWNjTGlzdFskc2NvcGUuY291bnRdKSB7XG4gICAgICAgICAgICAgICAgb2JqID0ge1xuICAgICAgICAgICAgICAgICAgICAnaW5kZXgnIDogJHNjb3BlLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICAnYWNjTnVtJzogKG5ld1ZhbHVlID09PSB1bmRlZmluZWQgPyAnJyA6IG5ld1ZhbHVlKVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuYWNjTGlzdFskc2NvcGUuY291bnRdID0gb2JqO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYmogPSAkc2NvcGUuYWNjTGlzdFskc2NvcGUuY291bnRdO1xuXG4gICAgICAgICAgICAgICAgb2JqLmFjY051bSA9IChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkID8gJycgOiBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jb3VudCA9PT0gMCAmJiAkc2NvcGUudHlwZSA9PT0gJ3JlZycpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRzY29wZS5hY2NMaXN0WyRzY29wZS5jb3VudF0gPSBvYmo7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgICdyZXN0cmljdCc6ICdFJyxcbiAgICAgICAgJ3JlcGxhY2UnIDogdHJ1ZSxcbiAgICAgICAgJ3Njb3BlJyAgIDoge1xuICAgICAgICAgICAgJ2NvdW50JyAgICAgICAgICAgICAgIDogJz0nLFxuICAgICAgICAgICAgJ2FjY0xpc3QnICAgICAgICAgICAgIDogJz0nLFxuICAgICAgICAgICAgJ3dhdGNoUHJlZml4QW5kQWNjTnVtJzogJz1tZXRob2QnLFxuICAgICAgICAgICAgJ3R5cGUnICAgICAgICAgICAgICAgIDogJ0AnXG4gICAgICAgIH0sXG4gICAgICAgICd0ZW1wbGF0ZSc6ICc8c2VjdGlvbiBjbGFzcz1cXCdmLWNvbC0zXFwnPidcbiAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XFwnc2UtYm94LW5ld1xcJz4nXG4gICAgICAgICAgICArICc8ZGl2IGNsYXNzPVxcJ3JlZ19mb3JtX2lucHV0X3R4dF9maWVsZFxcJz4nXG4gICAgICAgICAgICArICc8aW5wdXQgdHlwZT1cXCd0ZXh0XFwnIG5nLWtleXVwPVxcJ3ZhbGlkYXRlKClcXCcgbmFtZT1cXCdwcmVmaXhcXCcgY2xhc3M9XFwnc2UtYm94LW5ldy1pbnB1dFxcJyBuZy1tb2RlbD1cXCdwcmVmaXhcXCcgcGxhY2Vob2xkZXI9XFwnUHJlZml4XFwnIG1heGxlbmd0aD1cXCczXFwnPidcbiAgICAgICAgICAgICsgJzwvZGl2PidcbiAgICAgICAgICAgICsgJzwvZGl2PidcbiAgICAgICAgICAgICsgJzxzcGFuIGNsYXNzPVxcJ3NwYW4tYmxvY2tcXCc+X188L3NwYW4+J1xuICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cXCdzZS1ib3gtbmV3XFwnPidcbiAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XFwncmVnX2Zvcm1faW5wdXRfdHh0X2ZpZWxkXFwnPidcbiAgICAgICAgICAgICsgJzxpbnB1dCB0eXBlPVxcJ3RleHRcXCcgbmcta2V5dXA9XFwndmFsaWRhdGUoKVxcJyBuYW1lPVxcJ2FjY051bVxcJyBjbGFzcz1cXCdzZS1ib3gtbmV3LWlucHV0XFwnIG5nLW1vZGVsPVxcJ2FjY051bVxcJyBwbGFjZWhvbGRlcj1cXCdBY2NvdW50IE51bVxcJyBtYXhsZW5ndGg9XFwnNlxcJyBuYW1lPVxcJ1xcJz4nXG4gICAgICAgICAgICArICc8L2Rpdj4nXG4gICAgICAgICAgICArICc8L2Rpdj4nXG4gICAgICAgICAgICArICc8L3NlY3Rpb24+JyxcbiAgICAgICAgJ2NvbnRyb2xsZXInOiBsZnNBY2NvdW50Q29udHJvbGxlclxuXG4gICAgfTtcbn0pO1xuXG5sZmdhcHAuZGlyZWN0aXZlKCdsZnNBY2NvdW50ZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gbGZzQWNjb3VudENvbnRyb2xsZXIoJHNjb3BlKSB7XG4gICAgICAgICRzY29wZS4kd2F0Y2goJ3ByZWZpeCcsIGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0ge1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAodW5kZWZpbmVkID09PSAkc2NvcGUuYWNjTGlzdFskc2NvcGUuY291bnRdKSB7XG4gICAgICAgICAgICAgICAgb2JqID0ge1xuICAgICAgICAgICAgICAgICAgICAnaW5kZXgnIDogJHNjb3BlLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICAncHJlZml4JzogKG5ld1ZhbHVlID09PSB1bmRlZmluZWQgPyAnJyA6IG5ld1ZhbHVlKVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuYWNjTGlzdFskc2NvcGUuY291bnRdID0gb2JqO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYmogPSAkc2NvcGUuYWNjTGlzdFskc2NvcGUuY291bnRdO1xuXG4gICAgICAgICAgICAgICAgb2JqLnByZWZpeCA9IChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkID8gJycgOiBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmFjY0xpc3RbJHNjb3BlLmNvdW50XSA9IG9iajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2FjY051bScsIGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0ge1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAodW5kZWZpbmVkID09PSAkc2NvcGUuYWNjTGlzdFskc2NvcGUuY291bnRdKSB7XG4gICAgICAgICAgICAgICAgb2JqID0ge1xuICAgICAgICAgICAgICAgICAgICAnaW5kZXgnIDogJHNjb3BlLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICAnYWNjTnVtJzogKG5ld1ZhbHVlID09PSB1bmRlZmluZWQgPyAnJyA6IG5ld1ZhbHVlKVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuYWNjTGlzdFskc2NvcGUuY291bnRdID0gb2JqO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYmogPSAkc2NvcGUuYWNjTGlzdFskc2NvcGUuY291bnRdO1xuXG4gICAgICAgICAgICAgICAgb2JqLmFjY051bSA9IChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkID8gJycgOiBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmFjY0xpc3RbJHNjb3BlLmNvdW50XSA9IG9iajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgJ3Jlc3RyaWN0JzogJ0UnLFxuICAgICAgICAncmVwbGFjZScgOiB0cnVlLFxuICAgICAgICAnc2NvcGUnICAgOiB7XG4gICAgICAgICAgICAnY291bnQnICA6ICc9JyxcbiAgICAgICAgICAgICdhY2NMaXN0JzogJz0nXG4gICAgICAgIH0sXG4gICAgICAgICd0ZW1wbGF0ZSc6ICc8c2VjdGlvbiBjbGFzcz1cXCdmLWNvbC0zXFwnPidcbiAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XFwnc2UtYm94LW5ld1xcJz4nXG4gICAgICAgICAgICArICc8ZGl2IGNsYXNzPVxcJ3JlZ19mb3JtX2lucHV0X3R4dF9maWVsZFxcJz4nXG4gICAgICAgICAgICArICc8aW5wdXQgdHlwZT1cXCd0ZXh0XFwnIG5nLW1vZGVsPVxcJ3ByZWZpeFxcJyBjbGFzcz1cXCdzZS1ib3gtbmV3LWlucHV0XFwnIHBsYWNlaG9sZGVyPVxcJ1ByZWZpeFxcJyBtYXhsZW5ndGg9XFwnM1xcJz4nXG4gICAgICAgICAgICArICc8L2Rpdj4nXG4gICAgICAgICAgICArICc8L2Rpdj4nXG4gICAgICAgICAgICArICc8c3BhbiBjbGFzcz1cXCdzcGFuLWJsb2NrXFwnPl9fPC9zcGFuPidcbiAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XFwnc2UtYm94LW5ld1xcJz4nXG4gICAgICAgICAgICArICc8ZGl2IGNsYXNzPVxcJ3JlZ19mb3JtX2lucHV0X3R4dF9maWVsZFxcJz4nXG4gICAgICAgICAgICArICc8aW5wdXQgdHlwZT1cXCd0ZXh0XFwnIG5nLW1vZGVsPVxcJ2FjY051bVxcJyBjbGFzcz1cXCdzZS1ib3gtbmV3LWlucHV0XFwnIHBsYWNlaG9sZGVyPVxcJ0FjY291bnQgTnVtXFwnIG1heGxlbmd0aD1cXCc2XFwnIG5hbWU9XFwnXFwnPidcbiAgICAgICAgICAgICsgJzwvZGl2PidcbiAgICAgICAgICAgICsgJzwvZGl2PidcbiAgICAgICAgICAgICsgJzwvc2VjdGlvbj4nLFxuICAgICAgICAnY29udHJvbGxlcic6IGxmc0FjY291bnRDb250cm9sbGVyXG5cbiAgICB9O1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxubGZnYXBwLmRpcmVjdGl2ZSgnYXNzZXRBYmJyJywgZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgICdyZXN0cmljdCc6ICdBJyxcclxuICAgICAgICAnbGluaycgICAgOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xyXG4gICAgICAgICAgICB2YXIgYXR0ckFzc2V0LFxyXG4gICAgICAgICAgICAgICAgYXNzZXRDYXQgPSBbXSxcclxuICAgICAgICAgICAgICAgIGFzc2V0U3RyLCBpO1xyXG5cclxuICAgICAgICAgICAgYXR0ckFzc2V0ID0gYXR0ci5hc3NldDtcclxuICAgICAgICAgICAgYXNzZXRTdHIgPSBhdHRyQXNzZXQucmVwbGFjZSgvIC9nLCAnJyk7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhc3NldFN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFzc2V0U3RyW2ldID09PSBhc3NldFN0cltpXS50b1VwcGVyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRDYXRbaV0gPSBhc3NldFN0cltpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzY29wZS5hc3NldHNDYXQgPSBhc3NldENhdC5qb2luKCcnKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KS5kaXJlY3RpdmUoJ29uRmluaXNoUmVuZGVyJywgZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgICdyZXN0cmljdCc6ICdBJyxcclxuICAgICAgICAnbGluaycgICAgOiBmdW5jdGlvbihzY29wZSkge1xyXG4gICAgICAgICAgICBpZiAoc2NvcGUuJGxhc3QgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ25nUmVwZWF0RmluaXNoZWQnKTtcclxuICAgICAgICAgICAgICAgIH0sIDEwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcbiAgYW5ndWxhci5tb2R1bGUoJ0xGR0hlYWRlcicpLmRpcmVjdGl2ZSgnYWxpZ25NZW51JywgWyckd2luZG93JywgZnVuY3Rpb24oJHdpbmRvdykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgJ2xpbmsnOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xyXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNvbChzdWJNZW51Q29udEVsZSwgc3ViTWVudVdyYXBwZXJFbGUsIG5vT2ZDb2xzLCBoYXNRdWlja2xpbmtzKSB7XHJcbiAgICAgICAgICBzdWJNZW51Q29udEVsZS5jbGFzc0xpc3QucmVtb3ZlKCdtZWdhbWVudS1zdWJtZW51LS0xY29sJyk7XHJcbiAgICAgICAgICBzdWJNZW51Q29udEVsZS5jbGFzc0xpc3QucmVtb3ZlKCdtZWdhbWVudS1zdWJtZW51LS0yY29sJyk7XHJcbiAgICAgICAgICBzdWJNZW51Q29udEVsZS5jbGFzc0xpc3QucmVtb3ZlKCdtZWdhbWVudS1zdWJtZW51LS0zY29sJyk7XHJcbiAgICAgICAgICBzdWJNZW51Q29udEVsZS5jbGFzc0xpc3QucmVtb3ZlKCdtZWdhbWVudS1zdWJtZW51LS00Y29sJyk7XHJcblxyXG4gICAgICAgICAgc3ViTWVudVdyYXBwZXJFbGUuY2xhc3NMaXN0LnJlbW92ZSgnbWVnYW1lbnUtc3VibWVudS0tMWNvbC1xdWlja2xpbmtzJyk7XHJcbiAgICAgICAgICBzdWJNZW51V3JhcHBlckVsZS5jbGFzc0xpc3QucmVtb3ZlKCdtZWdhbWVudS1zdWJtZW51LS0xY29sJyk7XHJcbiAgICAgICAgICBzdWJNZW51V3JhcHBlckVsZS5jbGFzc0xpc3QucmVtb3ZlKCdtZWdhbWVudS1zdWJtZW51LS0yY29sLXF1aWNrbGlua3MnKTtcclxuICAgICAgICAgIHN1Yk1lbnVXcmFwcGVyRWxlLmNsYXNzTGlzdC5yZW1vdmUoJ21lZ2FtZW51LXN1Ym1lbnUtLTJjb2wnKTtcclxuICAgICAgICAgIHN1Yk1lbnVXcmFwcGVyRWxlLmNsYXNzTGlzdC5yZW1vdmUoJ21lZ2FtZW51LXN1Ym1lbnUtLTNjb2wtcXVpY2tsaW5rcycpO1xyXG4gICAgICAgICAgc3ViTWVudVdyYXBwZXJFbGUuY2xhc3NMaXN0LnJlbW92ZSgnbWVnYW1lbnUtc3VibWVudS0tM2NvbCcpO1xyXG4gICAgICAgICAgc3ViTWVudVdyYXBwZXJFbGUuY2xhc3NMaXN0LnJlbW92ZSgnbWVnYW1lbnUtc3VibWVudS0tNGNvbC1xdWlja2xpbmtzJyk7XHJcbiAgICAgICAgICBzdWJNZW51V3JhcHBlckVsZS5jbGFzc0xpc3QucmVtb3ZlKCdtZWdhbWVudS1zdWJtZW51LS00Y29sJyk7XHJcblxyXG4gICAgICAgICAgaWYgKG5vT2ZDb2xzID09PSA0KSB7XHJcbiAgICAgICAgICAgIHN1Yk1lbnVDb250RWxlLmNsYXNzTGlzdC5hZGQoJ21lZ2FtZW51LXN1Ym1lbnUtLTRjb2wnKTtcclxuICAgICAgICAgICAgaWYgKGhhc1F1aWNrbGlua3MpIHtcclxuICAgICAgICAgICAgICBzdWJNZW51V3JhcHBlckVsZS5jbGFzc0xpc3QuYWRkKCdtZWdhbWVudS1zdWJtZW51LS00Y29sLXF1aWNrbGlua3MnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBzdWJNZW51V3JhcHBlckVsZS5jbGFzc0xpc3QuYWRkKCdtZWdhbWVudS1zdWJtZW51LS00Y29sJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSBpZiAobm9PZkNvbHMgPT09IDMpIHtcclxuICAgICAgICAgICAgc3ViTWVudUNvbnRFbGUuY2xhc3NMaXN0LmFkZCgnbWVnYW1lbnUtc3VibWVudS0tM2NvbCcpO1xyXG4gICAgICAgICAgICBpZiAoaGFzUXVpY2tsaW5rcykge1xyXG4gICAgICAgICAgICAgIHN1Yk1lbnVXcmFwcGVyRWxlLmNsYXNzTGlzdC5hZGQoJ21lZ2FtZW51LXN1Ym1lbnUtLTNjb2wtcXVpY2tsaW5rcycpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHN1Yk1lbnVXcmFwcGVyRWxlLmNsYXNzTGlzdC5hZGQoJ21lZ2FtZW51LXN1Ym1lbnUtLTNjb2wnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIGlmIChub09mQ29scyA9PT0gMikge1xyXG4gICAgICAgICAgICBzdWJNZW51Q29udEVsZS5jbGFzc0xpc3QuYWRkKCdtZWdhbWVudS1zdWJtZW51LS0yY29sJyk7XHJcbiAgICAgICAgICAgIGlmIChoYXNRdWlja2xpbmtzKSB7XHJcbiAgICAgICAgICAgICAgc3ViTWVudVdyYXBwZXJFbGUuY2xhc3NMaXN0LmFkZCgnbWVnYW1lbnUtc3VibWVudS0tMmNvbC1xdWlja2xpbmtzJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgc3ViTWVudVdyYXBwZXJFbGUuY2xhc3NMaXN0LmFkZCgnbWVnYW1lbnUtc3VibWVudS0tMmNvbCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzdWJNZW51Q29udEVsZS5jbGFzc0xpc3QuYWRkKCdtZWdhbWVudS1zdWJtZW51LS0xY29sJyk7XHJcbiAgICAgICAgICAgIGlmIChoYXNRdWlja2xpbmtzKSB7XHJcbiAgICAgICAgICAgICAgc3ViTWVudVdyYXBwZXJFbGUuY2xhc3NMaXN0LmFkZCgnbWVnYW1lbnUtc3VibWVudS0tMWNvbC1xdWlja2xpbmtzJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgc3ViTWVudVdyYXBwZXJFbGUuY2xhc3NMaXN0LmFkZCgnbWVnYW1lbnUtc3VibWVudS0tMWNvbCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBhbGlnbk1lbnUoKSB7XHJcbiAgICAgICAgICB2YXIgaHRtbEVsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdodG1sJylbMF07XHJcbiAgICAgICAgICB2YXIgc3ViTWVudUNvbnRFbGUgPSBlbGVtZW50WzBdO1xyXG4gICAgICAgICAgdmFyIHN1Yk1lbnVXcmFwcGVyRWxlO1xyXG4gICAgICAgICAgdmFyIG1lbnVFbGU7XHJcbiAgICAgICAgICB2YXIgbWVudVR5cGUgPSBhdHRyLm1lbnV0eXBlO1xyXG5cclxuICAgICAgICAgIHZhciBzaXRlTmF2RWxlO1xyXG5cclxuICAgICAgICAgIGlmIChtZW51VHlwZSA9PT0gJ21lZ2FtZW51Jykge1xyXG4gICAgICAgICAgICBzaXRlTmF2RWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2l0ZS1uYXZpZ2F0aW9uJylbMF07XHJcbiAgICAgICAgICAgIHN1Yk1lbnVXcmFwcGVyRWxlID0gc3ViTWVudUNvbnRFbGUucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgbWVudUVsZSA9IHN1Yk1lbnVXcmFwcGVyRWxlLnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKG1lbnVUeXBlID09PSAnc3VwcG9ydG1lbnUnKSB7XHJcbiAgICAgICAgICAgIHNpdGVOYXZFbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0b3BoZWFkZXItbmF2aWdhdGlvbicpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpdGVOYXZFbGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICBpZiAoIXNpdGVOYXZFbGVbaV0uY2xhc3NMaXN0LmNvbnRhaW5zKCd0b3BoZWFkZXItbmF2aWdhdGlvbi0tbW9iaWxlLWNvbnRhY3Qtc3VwcG9ydCcpKSB7XHJcbiAgICAgICAgICAgICAgICBzaXRlTmF2RWxlID0gc2l0ZU5hdkVsZVtpXTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3ViTWVudVdyYXBwZXJFbGUgPSBzdWJNZW51Q29udEVsZTtcclxuICAgICAgICAgICAgbWVudUVsZSA9IHN1Yk1lbnVDb250RWxlLnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOiA3NDlweCknKS5tYXRjaGVzKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgdmFyIHBhZGRpbmdUb3AgPSBwYXJzZUZsb2F0KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHN1Yk1lbnVDb250RWxlKS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXRvcCcpKTtcclxuICAgICAgICAgICAgICB2YXIgcGFkZGluZ0JvdHRvbSA9IHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoc3ViTWVudUNvbnRFbGUpLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctYm90dG9tJykpO1xyXG4gICAgICAgICAgICAgIHZhciBtYXhIZWlnaHQgPSBwYXJzZUZsb2F0KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHN1Yk1lbnVDb250RWxlKS5nZXRQcm9wZXJ0eVZhbHVlKCdtYXgtaGVpZ2h0JykpIC0gcGFkZGluZ1RvcCAtXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nQm90dG9tO1xyXG5cclxuICAgICAgICAgICAgICB2YXIgY29sSGVpZ2h0ID0gMDtcclxuICAgICAgICAgICAgICB2YXIgbm9PZkNvbHMgPSAxO1xyXG4gICAgICAgICAgICAgIHZhciBoYXNRdWlja2xpbmtzID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgIGlmIChtZW51VHlwZSA9PT0gJ21lZ2FtZW51Jykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeiA9IDA7IHogPCBzdWJNZW51Q29udEVsZS5jaGlsZHJlbi5sZW5ndGg7IHorKykge1xyXG4gICAgICAgICAgICAgICAgICB2YXIgc3ViTWVudUl0ZW1FbGUgPSBzdWJNZW51Q29udEVsZS5jaGlsZHJlblt6XTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIGNvbEhlaWdodCA9IGNvbEhlaWdodCArIHN1Yk1lbnVJdGVtRWxlLm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgaWYgKGNvbEhlaWdodCA+PSBtYXhIZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBub09mQ29scyA9IG5vT2ZDb2xzICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBjb2xIZWlnaHQgPSBzdWJNZW51SXRlbUVsZS5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgc3ViTWVudUl0ZW1FbGUuc3R5bGUuYm9yZGVyVG9wID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGEgc3VibWVudSBleGNlZWRzIHRoZSBjb250YWluZXIgbWF4LWhlaWdodCwgc2V0IHRoZSBtYXgtaGVpZ2h0IHByb2dyYW1hdGljYWxseVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJNZW51SXRlbUVsZS5vZmZzZXRIZWlnaHQgPj0gbWF4SGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAvLyBSZWR1Y2UgdGhlIG5vIG9mIGNvbHVtbnMgYnkgMSBzaW5jZSB0aGlzIGVsZW1lbnQgd2lsbCBub3QgbW92ZSB0byB0aGUgbmV4dCBjb2x1bW5cclxuICAgICAgICAgICAgICAgICAgICAgIG5vT2ZDb2xzID0gbm9PZkNvbHMgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gSUUgRml4IC0gdGVtcG9yYXJpbHkgc2V0IG1heCBoZWlnaHQgdG8gMTUwMHB4IHRvIGdldCB0aGUgYWN0dWFsIGhlaWdodCBvZiB0aGUgc3VibWVudVxyXG4gICAgICAgICAgICAgICAgICAgICAgc3ViTWVudUNvbnRFbGUuc3R5bGUubWF4SGVpZ2h0ID0gJzE1MDBweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICBzdWJNZW51Q29udEVsZS5zdHlsZS5tYXhIZWlnaHQgPSBzdWJNZW51SXRlbUVsZS5vZmZzZXRIZWlnaHQgKyBwYWRkaW5nQm90dG9tICsgcGFkZGluZ1RvcCArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzdWJNZW51V3JhcHBlckVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICB2YXIgc3ViTWVudVdyYXBwZXJJdGVtID0gc3ViTWVudVdyYXBwZXJFbGUuY2hpbGRyZW5bal07XHJcblxyXG4gICAgICAgICAgICAgICAgICBpZiAoc3ViTWVudVdyYXBwZXJJdGVtLmNsYXNzTGlzdC5jb250YWlucygnbWVnYW1lbnUtc3VibWVudS1jb250YWluZXItLXF1aWNrbGlua3MnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc1F1aWNrbGlua3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVDb2woc3ViTWVudUNvbnRFbGUsIHN1Yk1lbnVXcmFwcGVyRWxlLCBub09mQ29scywgaGFzUXVpY2tsaW5rcyk7XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICB2YXIgc3ViTWVudVdpZHRoID0gc3ViTWVudVdyYXBwZXJFbGUub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgICAgdmFyIG1lbnVXaWR0aCA9IG1lbnVFbGUub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgICAgdmFyIG1lbnVMZWZ0ID0gbWVudUVsZS5vZmZzZXRMZWZ0O1xyXG4gICAgICAgICAgICAgIHZhciBsZWZ0QWxpZ24gPSAoKG1lbnVXaWR0aCAtIHN1Yk1lbnVXaWR0aCkgLyAyKTtcclxuICAgICAgICAgICAgICB2YXIgZ2xvYmFsQ29udFdpZHRoID0gc2l0ZU5hdkVsZS5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgICB2YXIgZ2xvYmFsQ29udE1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KChodG1sRWxlLm9mZnNldFdpZHRoIC0gZ2xvYmFsQ29udFdpZHRoKSAvIDIpO1xyXG4gICAgICAgICAgICAgIHZhciBzcGFjZU9uUmlnaHQgPSBnbG9iYWxDb250V2lkdGggLSAobWVudUxlZnQgLSBnbG9iYWxDb250TWFyZ2luTGVmdCArIG1lbnVXaWR0aCk7XHJcbiAgICAgICAgICAgICAgdmFyIHNwYWNlT25MZWZ0ID0gbWVudUxlZnQgLSBnbG9iYWxDb250TWFyZ2luTGVmdDtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKChzcGFjZU9uTGVmdCArIGxlZnRBbGlnbikgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJNZW51V3JhcHBlckVsZS5zdHlsZS5sZWZ0ID0gJy0nICsgc3BhY2VPbkxlZnQgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgc3ViTWVudVdyYXBwZXJFbGUuc3R5bGUucmlnaHQgPSAnYXV0byc7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICgoc3BhY2VPblJpZ2h0ICsgbGVmdEFsaWduKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIHN1Yk1lbnVXcmFwcGVyRWxlLnN0eWxlLnJpZ2h0ID0gJzBweCc7XHJcbiAgICAgICAgICAgICAgICBzdWJNZW51V3JhcHBlckVsZS5zdHlsZS5sZWZ0ID0gJ2F1dG8nO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoKG1lbnVMZWZ0ICsgbGVmdEFsaWduKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIHN1Yk1lbnVXcmFwcGVyRWxlLnN0eWxlLmxlZnQgPSAnLScgKyBtZW51TGVmdCArICdweCc7XHJcbiAgICAgICAgICAgICAgICBzdWJNZW51V3JhcHBlckVsZS5zdHlsZS5yaWdodCA9ICdhdXRvJztcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3ViTWVudVdyYXBwZXJFbGUuc3R5bGUubGVmdCA9IGxlZnRBbGlnbiArICdweCc7XHJcbiAgICAgICAgICAgICAgICBzdWJNZW51V3JhcHBlckVsZS5zdHlsZS5yaWdodCA9ICdhdXRvJztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIDEwMCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBSZXNldHRpbmcgZm9yIG1vYmlsZVxyXG4gICAgICAgICAgICBzdWJNZW51V3JhcHBlckVsZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnbGVmdCcpO1xyXG4gICAgICAgICAgICBzdWJNZW51V3JhcHBlckVsZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgncmlnaHQnKTtcclxuICAgICAgICAgICAgc3ViTWVudVdyYXBwZXJFbGUuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3dpZHRoJyk7XHJcbiAgICAgICAgICAgIHN1Yk1lbnVXcmFwcGVyRWxlLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdoZWlnaHQnKTtcclxuXHJcbiAgICAgICAgICAgIHN1Yk1lbnVDb250RWxlLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdtYXgtaGVpZ2h0Jyk7XHJcbiAgICAgICAgICAgIHN1Yk1lbnVDb250RWxlLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdsZWZ0Jyk7XHJcbiAgICAgICAgICAgIHN1Yk1lbnVDb250RWxlLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdyaWdodCcpO1xyXG4gICAgICAgICAgICBzdWJNZW51Q29udEVsZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnd2lkdGgnKTtcclxuICAgICAgICAgICAgc3ViTWVudUNvbnRFbGUuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2hlaWdodCcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGFsaWduTWVudSgpO1xyXG4gICAgICAgICAgc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGFsaWduTWVudSgpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1dKTtcclxufSkoKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcbiAgYW5ndWxhci5tb2R1bGUoJ0xGR0hlYWRlcicpLmRpcmVjdGl2ZSgnbWVudUFuY2hvcicsIFtmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICdsaW5rJzogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQpIHtcclxuICAgICAgICBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKCcobWF4LXdpZHRoOiA3NDlweCknKS5tYXRjaGVzKSB7XHJcbiAgICAgICAgICAgIHZhciBtZW51RWxlID0gZWxlbWVudFswXTtcclxuICAgICAgICAgICAgdmFyIG9mZnNldFRvcCA9IG1lbnVFbGUub2Zmc2V0VG9wO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1lbnVFbGUuY2xhc3NMaXN0LmNvbnRhaW5zKCd0b3BoZWFkZXItbWVudV9faXRlbS0tc2hvdycpKSB7XHJcbiAgICAgICAgICAgICAgdmFyIGkgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgdmFyIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCBpKTtcclxuICAgICAgICAgICAgICAgIGkgKz0gMTA7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+PSBvZmZzZXRUb3ApIHtcclxuICAgICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIG9mZnNldFRvcCk7XHJcbiAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSwgNSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XSk7XHJcbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gIGFuZ3VsYXIubW9kdWxlKCdMRkdIZWFkZXInKS5kaXJlY3RpdmUoJ21lbnVEcmlsbERvd24nLCBbZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAnbGluayc6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XHJcbiAgICAgICAgdmFyIG1lZ2FtZW51RWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbWVnYW1lbnUnKVswXTtcclxuICAgICAgICB2YXIgbWVnYW1lbnVFbGVCVyA9IHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG1lZ2FtZW51RWxlKS5nZXRQcm9wZXJ0eVZhbHVlKCdib3JkZXItdG9wLXdpZHRoJykpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBhZGRTbGlkZUNsYXNzKG5hbWUsIGVsZSkge1xyXG4gICAgICAgICAgZWxlLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3ctLW1lbnUnKTtcclxuICAgICAgICAgIGVsZS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlLS1tZW51Jyk7XHJcbiAgICAgICAgICBlbGUuY2xhc3NMaXN0LmFkZChuYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG1lbnVEcmlsbERvd24oKSB7XHJcbiAgICAgICAgICB2YXIgbWVudSA9IGVsZW1lbnRbMF07XHJcbiAgICAgICAgICB2YXIgZGF0YUxldmVsID0gbWVudS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbGV2ZWwnKTtcclxuICAgICAgICAgIHZhciBtZW51SWQgPSBtZW51LmdldEF0dHJpYnV0ZSgnZGF0YS1tZW51aWQnKTtcclxuICAgICAgICAgIHZhciBoaWRlTWVudUlkID0gbWVudS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGlkZW1lbnVpZCcpO1xyXG4gICAgICAgICAgdmFyIGNvbnRhaW5lcklkID0gbWVudS5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29udGFpbmVyaWQnKTtcclxuICAgICAgICAgIHZhciBjb250aWFuZXJFbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb250YWluZXI9XCInICsgY29udGFpbmVySWQgKyAnXCJdJyk7XHJcbiAgICAgICAgICB2YXIgc2hvd01lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1mb3I9XCInICsgbWVudUlkICsgJ1wiXScpO1xyXG4gICAgICAgICAgdmFyIGhpZGVNZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtZm9yPVwiJyArIGhpZGVNZW51SWQgKyAnXCJdJyk7XHJcblxyXG4gICAgICAgICAgaWYgKHNob3dNZW51KSB7XHJcbiAgICAgICAgICAgIGFkZFNsaWRlQ2xhc3MoJ3Nob3ctLW1lbnUnLCBzaG93TWVudSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoaGlkZU1lbnUpIHtcclxuICAgICAgICAgICAgYWRkU2xpZGVDbGFzcygnaGlkZS0tbWVudScsIGhpZGVNZW51KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChhdHRyLm1lbnV0eXBlID09PSAnbWVnYW1lbnUnKSB7XHJcbiAgICAgICAgICAgIG1lZ2FtZW51RWxlLnN0eWxlLmhlaWdodCA9IHNob3dNZW51Lm9mZnNldEhlaWdodCArIG1lZ2FtZW51RWxlQlcgKyAncHgnO1xyXG4gICAgICAgICAgICBtZWdhbWVudUVsZS5zdHlsZS5sZWZ0ID0gJy0nICsgKHBhcnNlSW50KGRhdGFMZXZlbC5yZXBsYWNlKGF0dHIubWVudXR5cGUsICcnKSkgKiAxMDApICsgJyUnO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChhdHRyLm1lbnV0eXBlID09PSAnc3VwcG9ydG1lbnUnKSB7XHJcbiAgICAgICAgICAgIGNvbnRpYW5lckVsZS5zdHlsZS5oZWlnaHQgPSBzaG93TWVudS5vZmZzZXRIZWlnaHQgKyAncHgnO1xyXG4gICAgICAgICAgICBoaWRlTWVudS5zdHlsZS5sZWZ0ID0gJy0nICsgKHBhcnNlSW50KGRhdGFMZXZlbC5yZXBsYWNlKGF0dHIubWVudXR5cGUsICcnKSkgKiAxMDApICsgJyUnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbWVudURyaWxsVXAoKSB7XHJcbiAgICAgICAgICB2YXIgbWVudSA9IGVsZW1lbnRbMF07XHJcbiAgICAgICAgICB2YXIgZGF0YUxldmVsID0gbWVudS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbGV2ZWxpZCcpO1xyXG4gICAgICAgICAgdmFyIGhpZGVNZW51SWQgPSBtZW51LmdldEF0dHJpYnV0ZSgnZGF0YS1oaWRlbWVudWlkJyk7XHJcbiAgICAgICAgICB2YXIgc2hvd01lbnVJZCA9IG1lbnUuZ2V0QXR0cmlidXRlKCdkYXRhLXNob3dtZW51aWQnKTtcclxuICAgICAgICAgIHZhciBjb250YWluZXJJZCA9IG1lbnUuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbnRhaW5lcmlkJyk7XHJcbiAgICAgICAgICB2YXIgY29udGlhbmVyRWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtY29udGFpbmVyPVwiJyArIGNvbnRhaW5lcklkICsgJ1wiXScpO1xyXG4gICAgICAgICAgdmFyIHNob3dNZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtZm9yPVwiJyArIHNob3dNZW51SWQgKyAnXCJdJyk7XHJcbiAgICAgICAgICB2YXIgaGlkZU1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1mb3I9XCInICsgaGlkZU1lbnVJZCArICdcIl0nKTtcclxuXHJcbiAgICAgICAgICBpZiAoaGlkZU1lbnUpIHtcclxuICAgICAgICAgICAgYWRkU2xpZGVDbGFzcygnaGlkZS0tbWVudScsIGhpZGVNZW51KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHZhciBjb250SGVpZ2h0ID0gMDtcclxuXHJcbiAgICAgICAgICBpZiAoYXR0ci5tZW51dHlwZSA9PT0gJ21lZ2FtZW51Jykge1xyXG4gICAgICAgICAgICBpZiAoc2hvd01lbnUpIHtcclxuICAgICAgICAgICAgICBhZGRTbGlkZUNsYXNzKCdzaG93LS1tZW51Jywgc2hvd01lbnUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocGFyc2VJbnQoZGF0YUxldmVsLnJlcGxhY2UoYXR0ci5tZW51dHlwZSwgJycpKSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2hvd01lbnUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdWJtZWdhbWVudSA9IHNob3dNZW51LmNoaWxkcmVuW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRIZWlnaHQgPSBjb250SGVpZ2h0ICsgcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoc3VibWVnYW1lbnUpLmdldFByb3BlcnR5VmFsdWUoJ21pbi1oZWlnaHQnKSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIG1lZ2FtZW51RWxlLnN0eWxlLmhlaWdodCA9IGNvbnRIZWlnaHQgKyBtZWdhbWVudUVsZUJXICsgJ3B4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBtZWdhbWVudUVsZS5zdHlsZS5oZWlnaHQgPSBzaG93TWVudS5vZmZzZXRIZWlnaHQgKyBtZWdhbWVudUVsZUJXICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbWVnYW1lbnVFbGUuc3R5bGUubGVmdCA9IHBhcnNlSW50KG1lZ2FtZW51RWxlLnN0eWxlLmxlZnQpICsgMTAwICsgJyUnO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChhdHRyLm1lbnV0eXBlID09PSAnc3VwcG9ydG1lbnUnKSB7XHJcbiAgICAgICAgICAgIGlmIChwYXJzZUludChkYXRhTGV2ZWwucmVwbGFjZShhdHRyLm1lbnV0eXBlLCAnJykpID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzaG93TWVudS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN1YnN1cHBvcnRtZW51ID0gc2hvd01lbnUuY2hpbGRyZW5bal07XHJcblxyXG4gICAgICAgICAgICAgICAgY29udEhlaWdodCA9IGNvbnRIZWlnaHQgKyBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShzdWJzdXBwb3J0bWVudSkuZ2V0UHJvcGVydHlWYWx1ZSgnaGVpZ2h0JykpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBjb250aWFuZXJFbGUuc3R5bGUuaGVpZ2h0ID0gY29udEhlaWdodCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgbWVnYW1lbnVFbGUuc3R5bGUuaGVpZ2h0ID0gc2hvd01lbnUub2Zmc2V0SGVpZ2h0ICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzaG93TWVudS5zdHlsZS5sZWZ0ID0gcGFyc2VJbnQoc2hvd01lbnUuc3R5bGUubGVmdCkgKyAxMDAgKyAnJSc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKCcobWF4LXdpZHRoOiA3NDlweCknKS5tYXRjaGVzKSB7XHJcbiAgICAgICAgICAgIGlmIChhdHRyLmRyaWxsZG93biA9PT0gJ3RydWUnKSB7XHJcbiAgICAgICAgICAgICAgbWVudURyaWxsRG93bigpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIG1lbnVEcmlsbFVwKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XSk7XHJcbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gIGFuZ3VsYXIubW9kdWxlKCdMRkdIZWFkZXInKS5kaXJlY3RpdmUoJ3JlZ2lzdGVyRHJvcGRvd24nLCBbZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAnbGluayc6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KSB7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KGVsZW1lbnQpLm9uKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAkKCcjeW91ckF1ZGllbmNlJykucmVtb3ZlQ2xhc3MoJ2lzLW9wZW4nKTtcclxuICAgICAgICAgICQoJy5SZWdpc3RlcicpLmhpZGUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XSk7XHJcbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gIGFuZ3VsYXIubW9kdWxlKCdMRkdIZWFkZXInKS5kaXJlY3RpdmUoJ3JlZ2lzdGVyVG9vbHRpcCcsIFtmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICdsaW5rJzogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgbGlzdEVsZSA9ICQoZWxlbWVudCk7XHJcbiAgICAgICAgdmFyIGhlbHBFbGUgPSAkKGVsZW1lbnQpLmZpbmQoJy5mb3JtLWxpc3QtdHh0aGVscCcpO1xyXG4gICAgICAgIHZhciB0b29sdGlwSWQgPSAkKGxpc3RFbGUpLmRhdGEoJ3Rvb2x0aXAtaWQnKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2hvd1JlZ2lzdGVyVG9vbHRpcChlbGUpIHtcclxuICAgICAgICAgICQoJy5SZWdpc3Rlci5BdWRpZW5jZVNlbGVjdG9yLS1kZWZhdWx0JykuaGlkZSgpO1xyXG4gICAgICAgICAgdmFyIGVsZVRvcCA9IHBhcnNlSW50KGVsZS5vZmZzZXQoKS50b3ApO1xyXG4gICAgICAgICAgdmFyIGRvY1Njcm9sbFRvcCA9ICQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpO1xyXG4gICAgICAgICAgdmFyIGVsZUxlZnQgPSBwYXJzZUludChlbGUub2Zmc2V0KCkubGVmdCk7XHJcbiAgICAgICAgICB2YXIgZWxlSGVpZ2h0ID0gZWxlLmhlaWdodCgpO1xyXG4gICAgICAgICAgdmFyIHRsdGlwRWxlID0gJCgnIycgKyBlbGUuZGF0YSgndG9vbHRpcC1pZCcpKTtcclxuICAgICAgICAgIHZhciB0bHBXaWR0aCA9IHRsdGlwRWxlLm91dGVyV2lkdGgoKTtcclxuICAgICAgICAgIHZhciB0bHBIZWlnaHQgPSB0bHRpcEVsZS5oZWlnaHQoKTtcclxuICAgICAgICAgIHZhciBkZXZpY2VIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7XHJcbiAgICAgICAgICB2YXIgZmluYWxFbERpZmYsXHJcbiAgICAgICAgICAgIGZpbmFsRWxlVG9wID0gMDtcclxuICAgICAgICAgIHZhciBmaW5hbEFycm93VG9wID0gMDtcclxuXHJcbiAgICAgICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEoJyhtaW4td2lkdGg6IDc0OXB4KScpLm1hdGNoZXMpIHtcclxuICAgICAgICAgICAgZmluYWxFbGVUb3AgPSAoZWxlVG9wIC0gZG9jU2Nyb2xsVG9wKTtcclxuICAgICAgICAgICAgZmluYWxFbERpZmYgPSAoZmluYWxFbGVUb3AgKyB0bHBIZWlnaHQpIC0gZGV2aWNlSGVpZ2h0O1xyXG4gICAgICAgICAgICBpZiAoZmluYWxFbERpZmYgPiAwKSB7XHJcbiAgICAgICAgICAgICAgZmluYWxFbGVUb3AgLT0gKGZpbmFsRWxEaWZmKTtcclxuICAgICAgICAgICAgICBmaW5hbEFycm93VG9wICs9IGZpbmFsRWxEaWZmO1xyXG4gICAgICAgICAgICAgICQoJy5BdWRpZW5jZVNlbGVjdG9yLWFycm93JywgdGx0aXBFbGUpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAncG9zaXRpb24nOiAncmVsYXRpdmUnLFxyXG4gICAgICAgICAgICAgICAgJ3RvcCcgICAgIDogKGZpbmFsQXJyb3dUb3AgKyAoZWxlSGVpZ2h0IC8gMikpXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgZmluYWxFbGVUb3AgPSBmaW5hbEVsZVRvcCAtICg0NSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgZmluYWxFbGVUb3AgPSBmaW5hbEVsZVRvcCAtICg0NSAtIChlbGVIZWlnaHQgLyAyKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRsdGlwRWxlLmNzcyh7XHJcbiAgICAgICAgICAgICAgJ3RvcCcgOiBmaW5hbEVsZVRvcCxcclxuICAgICAgICAgICAgICAnbGVmdCc6IGVsZUxlZnQgLSAodGxwV2lkdGggKyAyOSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0bHRpcEVsZS5jc3Moe1xyXG4gICAgICAgICAgICAgICd0b3AnIDogZWxlVG9wIC0gKHRscEhlaWdodCArIDU3KSxcclxuICAgICAgICAgICAgICAnbGVmdCc6IDBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICQoJy5BdWRpZW5jZVNlbGVjdG9yLW1vYmlsZS1hcnJvdycsIHRsdGlwRWxlKS5jc3Moe1xyXG4gICAgICAgICAgICAgICdsZWZ0JzogKGVsZUxlZnQgLSAyOSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdGx0aXBFbGUuc2hvdygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaGlkZVJlZ2lzdGVyVG9vbHRpcCgpIHtcclxuICAgICAgICAgICQoJy5SZWdpc3RlcicpLmhpZGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudChlbGVtZW50KS5vbignbW91c2VlbnRlcicsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOiA5OTlweCknKS5tYXRjaGVzKSB7XHJcbiAgICAgICAgICAgIHNob3dSZWdpc3RlclRvb2x0aXAobGlzdEVsZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudChlbGVtZW50KS5vbignbW91c2VsZWF2ZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOiA5OTlweCknKS5tYXRjaGVzKSB7XHJcbiAgICAgICAgICAgIGhpZGVSZWdpc3RlclRvb2x0aXAobGlzdEVsZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudChoZWxwRWxlKS5vbignY2xpY2sgdG91Y2hzdGFydCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgc2hvd1JlZ2lzdGVyVG9vbHRpcChoZWxwRWxlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjJyArIHRvb2x0aXBJZCArICcgLkF1ZGllbmNlU2VsZWN0b3ItYnV0LWNsb3NlJykub24oJ2NsaWNrIHRvdWNoc3RhcnQnLFxyXG4gICAgICAgICAgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciB0bHRpcEVsZSA9ICQoJyMnICsgdG9vbHRpcElkKTtcclxuXHJcbiAgICAgICAgICAgIHRsdGlwRWxlLmhpZGUoKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1dKTtcclxufSkoKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcbiAgYW5ndWxhci5tb2R1bGUoJ0xGR0hlYWRlcicpLmRpcmVjdGl2ZSgnd3JhcExpbmtXaXRoSWNvbicsIFtmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICdsaW5rJzogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcclxuICAgICAgICBmdW5jdGlvbiB3cmFwTGlua1dpdGhJY29uKCkge1xyXG4gICAgICAgICAgdmFyIGxpbmtFbGUgPSBlbGVtZW50WzBdO1xyXG4gICAgICAgICAgdmFyIGxpbmtUZXh0QXJyYXkgPSBsaW5rRWxlLnRleHQudHJpbSgpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICB2YXIgbGFzdFdvcmQgPSBsaW5rVGV4dEFycmF5W2xpbmtUZXh0QXJyYXkubGVuZ3RoIC0gMV07XHJcblxyXG4gICAgICAgICAgaWYgKGF0dHIuaWNvbmNsYXNzKSB7XHJcbiAgICAgICAgICAgIGxhc3RXb3JkID0gJzxzcGFuIGNsYXNzPVwibm8tLXdyYXBcIj4nICsgbGFzdFdvcmQgKyAnPGkgY2xhc3M9XCInICsgYXR0ci5pY29uY2xhc3MgKyAnXCI+PC9pPjwvc3Bhbj4nO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGFzdFdvcmQgPSAnPHNwYW4gY2xhc3M9XCJuby0td3JhcFwiPicgKyBsYXN0V29yZCArICc8aSBjbGFzcz1cImZhIGZhLWNoZXZyb24tcmlnaHQgbWVnYW1lbnUtc3VibWVudV9faGVhZGVyLWNoZXZyb25cIj48L2k+PC9zcGFuPic7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgbGlua1RleHRBcnJheVtsaW5rVGV4dEFycmF5Lmxlbmd0aCAtIDFdID0gbGFzdFdvcmQ7XHJcbiAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQobGlua0VsZSkuaHRtbChsaW5rVGV4dEFycmF5LmpvaW4oJyAnKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3cmFwTGlua1dpdGhJY29uKCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfV0pO1xyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhci5tb2R1bGUoXCJsZmdhcHBcIikuZGlyZWN0aXZlKCdhc3luY0NvbXBvbmVudCcsIGZ1bmN0aW9uICgkY29tcGlsZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZSwgYXR0cnMpIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2goYXR0cnMuYXN5bmNDb21wb25lbnQsIGZ1bmN0aW9uIChodG1sKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZS5odG1sKGh0bWwpO1xuICAgICAgICAgICAgICAgICAgICAkY29tcGlsZShlbGUuY29udGVudHMoKSkoc2NvcGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xufSkoKTtcbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBnbG9iYWxDb25zdGFudCA9IHtcclxuICAgICdTZXJ2aWNlUGJsVVJMJyAgICAgOiAnaHR0cDovL3BibC1yZXN0LWRldi5sZmcuY29tJyxcclxuICAgICdmb3JtVG9vbENhdGVnb3JpZXMnOiB7XHJcbiAgICAgICAgJ0FubnVpdHlTZWFyY2hGb3JtcycgOiAnQU5OVUlUWV9TRUFSQ0hfRk9STVMnLFxyXG4gICAgICAgICdMaWZlU2VhcmNoRm9ybXMnICAgIDogJ0xJRkVfU0VBUkNIX0ZPUk1TJyxcclxuICAgICAgICAnQW5udWl0eUNsYWltc0Zvcm1zJyA6ICdBTk5VSVRZX0NMQUlNU19GT1JNUycsXHJcbiAgICAgICAgJ0xpZmVDbGFpbXNGb3JtcycgICAgOiAnTElGRV9DTEFJTVNfRk9STVMnLFxyXG4gICAgICAgICdMb25nVGVybUNhcmVGb3JtcycgIDogJ0xPTkdfVEVSTV9DQVJFX0ZPUk1TJyxcclxuICAgICAgICAnTG9uZ1Rlcm1DbGFpbXNGb3Jtcyc6ICdMT05HX1RFUk1fQ0xBSU1TX0ZPUk1TJ1xyXG4gICAgfSxcclxuICAgICd0YWJsZTEnICAgICAgICAgICA6ICdsZmctcGVyZm9ybWFuY2UtdmFsdWVzJyxcclxuICAgICd0YWJsZTInICAgICAgICAgICA6ICdsZmctcGVyZm9ybWFuY2UtdmFsdWVzLXN1cnJlbmRlcicsXHJcbiAgICAndGFibGUzJyAgICAgICAgICAgOiAnbGZnLXBlcmZvcm1hbmNlLXZhbHVlcy1xdWFydGVybHknLFxyXG4gICAgJ3BlcmZvcm1QZGYnICAgICAgIDogJy9hZnBxdWVyeS1yZXN0LXVpL3NlcnZpY2UvcHJvZHVjdC9kb3dubG9hZFBERlByb2R1Y3RQZXJmb3JtYW5jZS97e2pzb25JZH19L0Eve3t2aWV3SWR9fS9Qcm9kdWN0UGVyZm9ybWFuY2VfQXt7dmlld0lkfX0ucGRmJyxcclxuICAgICdwZXJmb3JtRXhjZWwnICAgICA6ICcvYWZwcXVlcnktcmVzdC11aS9zZXJ2aWNlL3Byb2R1Y3QvZG93bmxvYWRYTFNQcm9kdWN0UGVyZm9ybWFuY2Uve3tqc29uSWR9fS9BL3t7dmlld0lkfX0vUHJvZHVjdFBlcmZvcm1hbmNlX0F7e3ZpZXdJZH19LnhscycsXHJcbiAgICAncGVyZm9ybVJNUGRmJyAgICAgOiAnL2FmcHF1ZXJ5LXJlc3QtdWkvc2VydmljZS9wcm9kdWN0L2Rvd25sb2FkUERGUHJvZHVjdFBlcmZvcm1hbmNlL3t7anNvbklkfX0vUi97e3ZpZXdJZH19L1Byb2R1Y3RQZXJmb3JtYW5jZV9Se3t2aWV3SWR9fS5wZGYnLFxyXG4gICAgJ3BlcmZvcm1STUV4Y2VsJyAgIDogJy9hZnBxdWVyeS1yZXN0LXVpL3NlcnZpY2UvcHJvZHVjdC9kb3dubG9hZFhMU1Byb2R1Y3RQZXJmb3JtYW5jZS97e2pzb25JZH19L1Ive3t2aWV3SWR9fS9Qcm9kdWN0UGVyZm9ybWFuY2VfUnt7dmlld0lkfX0ueGxzJyxcclxuICAgICdmdW5kQ29tcGFyaXNvblBkZic6ICcvYWZwcXVlcnktcmVzdC11aS9zZXJ2aWNlL3Byb2R1Y3QvZG93bmxvYWRQREZGdW5kQ29tcGFyaXNvbi97e2pzb25JZH19L3t7ZnVuZElkfX0ve3t2aWV3SWR9fS9GdW5kQ29tcGFyc2lvbi5wZGYnLFxyXG4gICAgJ3VuaXRWYWx1ZXNSTVBkZicgIDogJy9hZnBxdWVyeS1yZXN0LXVpL3NlcnZpY2UvdW5pdHZhbHVlL2Rvd25sb2FkUERGVW5pdFZhbHVlcy97e2pzb25JZH19L1IvVW5pdFZhbHVlc19SLnBkZicsXHJcbiAgICAndW5pdFZhbHVlc1BkZicgICAgOiAnL2FmcHF1ZXJ5LXJlc3QtdWkvc2VydmljZS91bml0dmFsdWUvZG93bmxvYWRQREZVbml0VmFsdWVzL3t7anNvbklkfX0vQS9Vbml0VmFsdWVzX0EucGRmJyxcclxuICAgICdtb3JlVGhhbk9uZScgICAgICA6ICdQbGVhc2UgU2VsZWN0IG1vcmUgdGhhbiAxIGZ1bmQgZm9yIGNvbXBhcmlzb24gISEnLFxyXG4gICAgJ2xlc3NUaGFuRml2ZScgICAgIDogJ1lvdSBjYW5cXCd0IHNlbGVjdCBtb3JlIHRoYW4gZml2ZSBmdW5kcyBmb3IgY29tcGFyaXNvbiAhIScsXHJcbiAgICAnbW9udGhseVBkZicgICAgICAgOiAnbScsXHJcbiAgICAnbW9udGhseVN1cnJQZGYnICAgOiAnbXMnLFxyXG4gICAgJ21vbnRobHlRdWFyUGRmJyAgIDogJ3EnLFxyXG4gICAgJ2FubnVhbFJldHVybicgICAgIDogJ0F2ZXJhZ2UgQW5udWFsIFRvdGFsIFJldHVybiAoICUgKSBhcyBvZiAnLFxyXG4gICAgJ3BlcmN0Q2hhbmdlJyAgICAgIDogJ1BlcmNlbnRhZ2UgQ2hhbmdlJyxcclxuICAgICdpbnZlc3RPcHRpb25zJyAgICA6ICdTZWxlY3RlZCBJbnZlc3RtZW50IE9wdGlvbnMnLFxyXG4gICAgJ3JlcG9ydHNMaW5rJyAgICAgIDogJ2h0dHBzOi8vd3d3LmxmZy5jb20nLFxyXG4gICAgJ3htbFRvSnNvbicgICAgICAgIDogZnVuY3Rpb24oeG1sKSB7XHJcbiAgICAgICAgdmFyIG9iaiA9IHtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHhtbC5ub2RlVHlwZSA9PSAxKSB7XHJcbiAgICAgICAgICAgIGlmICh4bWwuYXR0cmlidXRlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBvYmpbJ0BhdHRyaWJ1dGVzJ10gPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgeG1sLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0geG1sLmF0dHJpYnV0ZXMuaXRlbShqKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqWydAYXR0cmlidXRlcyddW2F0dHJpYnV0ZS5ub2RlTmFtZV0gPSBhdHRyaWJ1dGUubm9kZVZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh4bWwubm9kZVR5cGUgPT0gMykge1xyXG4gICAgICAgICAgICBvYmogPSB4bWwubm9kZVZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoeG1sLmhhc0NoaWxkTm9kZXMoKSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHhtbC5jaGlsZE5vZGVzLml0ZW0oaSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbm9kZU5hbWUgPSBpdGVtLm5vZGVOYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKG9ialtub2RlTmFtZV0pID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG9ialtub2RlTmFtZV0gPSBnbG9iYWxDb25zdGFudC54bWxUb0pzb24oaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKG9ialtub2RlTmFtZV0ucHVzaCkgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvbGQgPSBvYmpbbm9kZU5hbWVdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqW25vZGVOYW1lXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpbbm9kZU5hbWVdLnB1c2gob2xkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqW25vZGVOYW1lXS5wdXNoKGdsb2JhbENvbnN0YW50LnhtbFRvSnNvbihpdGVtKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9LFxyXG4gICAgJ2Zvcm1hdERhdGUnOiBmdW5jdGlvbihpbnB1dEZvcm1hdCwgZGF0ZVNlcGFyYXRvcikge1xyXG4gICAgICAgIGlmIChpbnB1dEZvcm1hdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBpbnB1dEZvcm1hdC5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICB2YXIgc3BsaXREYXRlID0gcmVzdWx0WzBdLnNwbGl0KCctJyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc3BsaXREYXRlWzFdICsgZGF0ZVNlcGFyYXRvciArIHNwbGl0RGF0ZVsyXSArIGRhdGVTZXBhcmF0b3IgKyBzcGxpdERhdGVbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcbiAgICAnZm9ybWF0QU1QTSc6IGZ1bmN0aW9uKGRhdGUpIHtcclxuICAgICAgICB2YXIgZGF0ZXMgPSBuZXcgRGF0ZShkYXRlKTtcclxuICAgICAgICB2YXIgaG91cnMgPSBkYXRlcy5nZXRIb3VycygpO1xyXG4gICAgICAgIHZhciBtaW51dGVzID0gZGF0ZXMuZ2V0TWludXRlcygpO1xyXG4gICAgICAgIHZhciBhbXBtID0gaG91cnMgPj0gMTIgPyAnUE0nIDogJ0FNJztcclxuXHJcbiAgICAgICAgaG91cnMgPSBob3VycyAlIDEyO1xyXG4gICAgICAgIGhvdXJzID0gaG91cnMgPyBob3VycyA6IDEyOyAvLyB0aGUgaG91ciAnMCcgc2hvdWxkIGJlICcxMidcclxuICAgICAgICBtaW51dGVzID0gbWludXRlcyA8IDEwID8gJzAnICsgbWludXRlcyA6IG1pbnV0ZXM7XHJcbiAgICAgICAgdmFyIHN0clRpbWUgPSBob3VycyArICc6JyArIG1pbnV0ZXMgKyAnJyArIGFtcG07XHJcblxyXG4gICAgICAgIHJldHVybiBzdHJUaW1lO1xyXG4gICAgfSxcclxuICAgICdieXRlc1RvU2l6ZSc6IGZ1bmN0aW9uKGJ5dGVzKSB7XHJcbiAgICAgICAgdmFyIHNpemVzID0gWydCeXRlcycsICdLQicsICdNQicsICdHQicsICdUQiddO1xyXG5cclxuICAgICAgICBpZiAoYnl0ZXMgPT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJzAgQnl0ZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpID0gcGFyc2VJbnQoTWF0aC5mbG9vcihNYXRoLmxvZyhieXRlcykgLyBNYXRoLmxvZygxMDI0KSkpO1xyXG5cclxuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChieXRlcyAvIE1hdGgucG93KDEwMjQsIGkpLCAyKSArICcgJyArIHNpemVzW2ldO1xyXG4gICAgfSxcclxuICAgICdpbnZlc3RvclJlbGF0aW9ucycgOiAne1wiU1RPQ0tRVU9URVwiOiB7XCItUk9XQ09VTlRcIjogXCIxXCIsXCJSRVNVTFRcIjoge1wiUk9XXCI6IHtcIkFTS1wiOiBcIjYwLjM3MFwiLFwiQklEXCI6IFwiNTcuMzUwXCIsXCJDSEFOR0VcIjogXCIwLjcyMFwiLFwiREFURVRJTUVcIjogXCIyMDE1LTA0LTIwIDE2OjAyOjQxXCIsXCJESVZJREVORFwiOiBcIjAuMjAwXCIsXCJFUFNcIjogXCI1LjgxMFwiLFwiRVhDSEFOR0VcIjogXCJOWVNFXCIsXCJISUdIXCI6IFwiNTcuNjkwXCIsXCJMQVNUREFURVRJTUVcIjogXCIyMDE1LTA0LTIwIDE2OjAyOjQxXCIsXCJMQVNUUFJJQ0VcIjogXCI1Ny41MTBcIixcIkxPTkdOQU1FXCI6IFwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiTE9XXCI6IFwiNTYuOTYwXCIsXCJPUEVOXCI6IFwiNTcuMTMwXCIsXCJQQ0hBTkdFXCI6IFwiMS4yNjhcIixcIlBFXCI6IFwiOS4wMDBcIixcIlBSRVZJT1VTQ0xPU0VcIjogXCI1Ni43OTBcIixcIlNIQVJFU1wiOiBcIjI1NjA0NFwiLFwiU0hPUlROQU1FXCI6IFwiTGluY29sbiBOYXRpb25hbCBDb3JwXCIsXCJUSUNLRVJcIjogXCJMTkNcIixcIlRSQURFU1wiOiBcIjg2ODVcIixcIlZPTFVNRVwiOiBcIjExOTc1MDBcIixcIllFQVJISUdIXCI6IFwiNjAuODQwXCIsXCJZRUFSTE9XXCI6IFwiNDUuMjUwXCIsXCJZSUVMRFwiOiBcIjEuNDA5XCJ9fSxcIlNUQVRVU1wiOiBcIk5vIEVycm9yXCIsXCJTVEFUVVNDT0RFXCI6IFwiMFwifX0nLFxyXG4gICAgJ2luc2lkZXJUcmFkaW5nJyAgICA6ICd7XCJFREdBUlJUTElTVFwiOntcIi1ST1dDT1VOVFwiOlwiNTBcIixcIlJFU1VMVFwiOntcIlJPV1wiOlt7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIktFTExZIEdBUlkgQ1wiLFwiRE9DSURcIjpcIjEwNjA2MTkwXCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTUtMjgyMVwiLFwiRklMSU5HREFURVwiOlwiMjAxNS0wNC0wMiAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA2MDYxOTBcIixcIkhUTUxTSVpFXCI6XCIyNjUzMlwiLFwiSURcIjpcIjFcIixcIlBERkxJTktcIjpcImh0dHA6Ly9pbnZlc3Rvci5zaGFyZWhvbGRlci5jb20vY29tbW9uL2Rvd25sb2FkL3NlYy5jZm0/Y29tcGFueWlkPUxOQyZmaWQ9MTIxNDY1OS0xNS0yODIxJmNpaz01OTU1OFwiLFwiUERGU0laRVwiOlwiMjU0NjZcIixcIlJFQ0VJVkVEREFURVwiOlwiMjAxNS0wNC0wMiAxMTowNToyNVwiLFwiUlRGXCI6XCJUcnVlXCIsXCJSVEZMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj1ydGYmY29tcGFueWlkPUxOQyZpZD0xMDYwNjE5MFwiLFwiU0laRVwiOlwiNTk1NVwiLFwiVE9UQUxSRUNPUkRTXCI6XCIxNDU0XCIsXCJYQlJMXCI6XCJGYWxzZVwiLFwiWEJSTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvWEJSTE5hdi5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA2MDYxOTBcIixcIlhMU1wiOlwiVHJ1ZVwiLFwiWExTTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9eGxzJmNvbXBhbnlpZD1MTkMmaWQ9MTA2MDYxOTBcIn0se1wiQ0lLXCI6XCI1OTU1OFwiLFwiQ09NUEFOWU5BTUVcIjpcIkxpbmNvbG4gTmF0aW9uYWwgQ29ycG9yYXRpb25cIixcIkRFU0NSSVBUSU9OXCI6XCJUSURXRUxMIElTQUlBSFwiLFwiRE9DSURcIjpcIjEwNjA2MTg3XCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTUtMjgyMFwiLFwiRklMSU5HREFURVwiOlwiMjAxNS0wNC0wMiAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA2MDYxODdcIixcIkhUTUxTSVpFXCI6XCIyNjUyOVwiLFwiSURcIjpcIjJcIixcIlBERkxJTktcIjpcImh0dHA6Ly9pbnZlc3Rvci5zaGFyZWhvbGRlci5jb20vY29tbW9uL2Rvd25sb2FkL3NlYy5jZm0/Y29tcGFueWlkPUxOQyZmaWQ9MTIxNDY1OS0xNS0yODIwJmNpaz01OTU1OFwiLFwiUERGU0laRVwiOlwiMjU1MTFcIixcIlJFQ0VJVkVEREFURVwiOlwiMjAxNS0wNC0wMiAxMTowNToyNFwiLFwiUlRGXCI6XCJUcnVlXCIsXCJSVEZMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj1ydGYmY29tcGFueWlkPUxOQyZpZD0xMDYwNjE4N1wiLFwiU0laRVwiOlwiNTk2NVwiLFwiVE9UQUxSRUNPUkRTXCI6XCIxNDU0XCIsXCJYQlJMXCI6XCJGYWxzZVwiLFwiWEJSTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvWEJSTE5hdi5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA2MDYxODdcIixcIlhMU1wiOlwiVHJ1ZVwiLFwiWExTTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9eGxzJmNvbXBhbnlpZD1MTkMmaWQ9MTA2MDYxODdcIn0se1wiQ0lLXCI6XCI1OTU1OFwiLFwiQ09NUEFOWU5BTUVcIjpcIkxpbmNvbG4gTmF0aW9uYWwgQ29ycG9yYXRpb25cIixcIkRFU0NSSVBUSU9OXCI6XCJQSVRUQVJEIFBBVFJJQ0sgU1wiLFwiRE9DSURcIjpcIjEwNjA2MTgzXCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTUtMjgxOVwiLFwiRklMSU5HREFURVwiOlwiMjAxNS0wNC0wMiAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA2MDYxODNcIixcIkhUTUxTSVpFXCI6XCIyNjU0MFwiLFwiSURcIjpcIjNcIixcIlBERkxJTktcIjpcImh0dHA6Ly9pbnZlc3Rvci5zaGFyZWhvbGRlci5jb20vY29tbW9uL2Rvd25sb2FkL3NlYy5jZm0/Y29tcGFueWlkPUxOQyZmaWQ9MTIxNDY1OS0xNS0yODE5JmNpaz01OTU1OFwiLFwiUERGU0laRVwiOlwiMjU1NDJcIixcIlJFQ0VJVkVEREFURVwiOlwiMjAxNS0wNC0wMiAxMTowNToyNFwiLFwiUlRGXCI6XCJUcnVlXCIsXCJSVEZMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj1ydGYmY29tcGFueWlkPUxOQyZpZD0xMDYwNjE4M1wiLFwiU0laRVwiOlwiNTgzNFwiLFwiVE9UQUxSRUNPUkRTXCI6XCIxNDU0XCIsXCJYQlJMXCI6XCJGYWxzZVwiLFwiWEJSTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvWEJSTE5hdi5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA2MDYxODNcIixcIlhMU1wiOlwiVHJ1ZVwiLFwiWExTTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9eGxzJmNvbXBhbnlpZD1MTkMmaWQ9MTA2MDYxODNcIn0se1wiQ0lLXCI6XCI1OTU1OFwiLFwiQ09NUEFOWU5BTUVcIjpcIkxpbmNvbG4gTmF0aW9uYWwgQ29ycG9yYXRpb25cIixcIkRFU0NSSVBUSU9OXCI6XCJQQVlORSBXSUxMSUFNIFBPUlRFUlwiLFwiRE9DSURcIjpcIjEwNjA2MTgxXCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTUtMjgxOFwiLFwiRklMSU5HREFURVwiOlwiMjAxNS0wNC0wMiAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA2MDYxODFcIixcIkhUTUxTSVpFXCI6XCIyNjU0NlwiLFwiSURcIjpcIjRcIixcIlBERkxJTktcIjpcImh0dHA6Ly9pbnZlc3Rvci5zaGFyZWhvbGRlci5jb20vY29tbW9uL2Rvd25sb2FkL3NlYy5jZm0/Y29tcGFueWlkPUxOQyZmaWQ9MTIxNDY1OS0xNS0yODE4JmNpaz01OTU1OFwiLFwiUERGU0laRVwiOlwiMjU1NzVcIixcIlJFQ0VJVkVEREFURVwiOlwiMjAxNS0wNC0wMiAxMTowNToyNFwiLFwiUlRGXCI6XCJUcnVlXCIsXCJSVEZMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj1ydGYmY29tcGFueWlkPUxOQyZpZD0xMDYwNjE4MVwiLFwiU0laRVwiOlwiNjA0MFwiLFwiVE9UQUxSRUNPUkRTXCI6XCIxNDU0XCIsXCJYQlJMXCI6XCJGYWxzZVwiLFwiWEJSTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvWEJSTE5hdi5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA2MDYxODFcIixcIlhMU1wiOlwiVHJ1ZVwiLFwiWExTTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9eGxzJmNvbXBhbnlpZD1MTkMmaWQ9MTA2MDYxODFcIn0se1wiQ0lLXCI6XCI1OTU1OFwiLFwiQ09NUEFOWU5BTUVcIjpcIkxpbmNvbG4gTmF0aW9uYWwgQ29ycG9yYXRpb25cIixcIkRFU0NSSVBUSU9OXCI6XCJNRUUgTUlDSEFFTCBGXCIsXCJET0NJRFwiOlwiMTA2MDYxNzhcIixcIkRPQ1RZUEVcIjpcIjRcIixcIkZJRFwiOlwiMTIxNDY1OS0xNS0yODE3XCIsXCJGSUxJTkdEQVRFXCI6XCIyMDE1LTA0LTAyIDAwOjAwOjAwXCIsXCJIVE1MTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy92aWV3ZXJDb250ZW50LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDYwNjE3OFwiLFwiSFRNTFNJWkVcIjpcIjI2NTMzXCIsXCJJRFwiOlwiNVwiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE1LTI4MTcmY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyNTUzMlwiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE1LTA0LTAyIDExOjA1OjI0XCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwNjA2MTc4XCIsXCJTSVpFXCI6XCI1ODU1XCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDYwNjE3OFwiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDYwNjE3OFwifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIkxBQ0hNQU4gTSBMRUFOTkVcIixcIkRPQ0lEXCI6XCIxMDYwNjE3N1wiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE1LTI4MTZcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDQtMDIgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNjA2MTc3XCIsXCJIVE1MU0laRVwiOlwiMjY1MzhcIixcIklEXCI6XCI2XCIsXCJQREZMSU5LXCI6XCJodHRwOi8vaW52ZXN0b3Iuc2hhcmVob2xkZXIuY29tL2NvbW1vbi9kb3dubG9hZC9zZWMuY2ZtP2NvbXBhbnlpZD1MTkMmZmlkPTEyMTQ2NTktMTUtMjgxNiZjaWs9NTk1NThcIixcIlBERlNJWkVcIjpcIjI1NTQyXCIsXCJSRUNFSVZFRERBVEVcIjpcIjIwMTUtMDQtMDIgMTE6MDU6MjRcIixcIlJURlwiOlwiVHJ1ZVwiLFwiUlRGTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9cnRmJmNvbXBhbnlpZD1MTkMmaWQ9MTA2MDYxNzdcIixcIlNJWkVcIjpcIjU5NTdcIixcIlRPVEFMUkVDT1JEU1wiOlwiMTQ1NFwiLFwiWEJSTFwiOlwiRmFsc2VcIixcIlhCUkxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL1hCUkxOYXYuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNjA2MTc3XCIsXCJYTFNcIjpcIlRydWVcIixcIlhMU0xJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXhscyZjb21wYW55aWQ9TE5DJmlkPTEwNjA2MTc3XCJ9LHtcIkNJS1wiOlwiNTk1NThcIixcIkNPTVBBTllOQU1FXCI6XCJMaW5jb2xuIE5hdGlvbmFsIENvcnBvcmF0aW9uXCIsXCJERVNDUklQVElPTlwiOlwiSk9ITlNPTiBFUklDIEdcIixcIkRPQ0lEXCI6XCIxMDYwNjE2NVwiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE1LTI4MTVcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDQtMDIgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNjA2MTY1XCIsXCJIVE1MU0laRVwiOlwiMjY1MzVcIixcIklEXCI6XCI3XCIsXCJQREZMSU5LXCI6XCJodHRwOi8vaW52ZXN0b3Iuc2hhcmVob2xkZXIuY29tL2NvbW1vbi9kb3dubG9hZC9zZWMuY2ZtP2NvbXBhbnlpZD1MTkMmZmlkPTEyMTQ2NTktMTUtMjgxNSZjaWs9NTk1NThcIixcIlBERlNJWkVcIjpcIjI1NTIyXCIsXCJSRUNFSVZFRERBVEVcIjpcIjIwMTUtMDQtMDIgMTE6MDM6MDZcIixcIlJURlwiOlwiVHJ1ZVwiLFwiUlRGTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9cnRmJmNvbXBhbnlpZD1MTkMmaWQ9MTA2MDYxNjVcIixcIlNJWkVcIjpcIjU5NzBcIixcIlRPVEFMUkVDT1JEU1wiOlwiMTQ1NFwiLFwiWEJSTFwiOlwiRmFsc2VcIixcIlhCUkxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL1hCUkxOYXYuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNjA2MTY1XCIsXCJYTFNcIjpcIlRydWVcIixcIlhMU0xJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXhscyZjb21wYW55aWQ9TE5DJmlkPTEwNjA2MTY1XCJ9LHtcIkNJS1wiOlwiNTk1NThcIixcIkNPTVBBTllOQU1FXCI6XCJMaW5jb2xuIE5hdGlvbmFsIENvcnBvcmF0aW9uXCIsXCJERVNDUklQVElPTlwiOlwiSEVOREVSU09OIEdFT1JHRSBXIElJSVwiLFwiRE9DSURcIjpcIjEwNjA2MTYzXCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTUtMjgxNFwiLFwiRklMSU5HREFURVwiOlwiMjAxNS0wNC0wMiAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA2MDYxNjNcIixcIkhUTUxTSVpFXCI6XCIyNjU1MVwiLFwiSURcIjpcIjhcIixcIlBERkxJTktcIjpcImh0dHA6Ly9pbnZlc3Rvci5zaGFyZWhvbGRlci5jb20vY29tbW9uL2Rvd25sb2FkL3NlYy5jZm0/Y29tcGFueWlkPUxOQyZmaWQ9MTIxNDY1OS0xNS0yODE0JmNpaz01OTU1OFwiLFwiUERGU0laRVwiOlwiMjU1ODJcIixcIlJFQ0VJVkVEREFURVwiOlwiMjAxNS0wNC0wMiAxMTowMzowNlwiLFwiUlRGXCI6XCJUcnVlXCIsXCJSVEZMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj1ydGYmY29tcGFueWlkPUxOQyZpZD0xMDYwNjE2M1wiLFwiU0laRVwiOlwiNTk4NVwiLFwiVE9UQUxSRUNPUkRTXCI6XCIxNDU0XCIsXCJYQlJMXCI6XCJGYWxzZVwiLFwiWEJSTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvWEJSTE5hdi5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA2MDYxNjNcIixcIlhMU1wiOlwiVHJ1ZVwiLFwiWExTTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9eGxzJmNvbXBhbnlpZD1MTkMmaWQ9MTA2MDYxNjNcIn0se1wiQ0lLXCI6XCI1OTU1OFwiLFwiQ09NUEFOWU5BTUVcIjpcIkxpbmNvbG4gTmF0aW9uYWwgQ29ycG9yYXRpb25cIixcIkRFU0NSSVBUSU9OXCI6XCJDVU5OSU5HSEFNIFdJTExJQU0gSCBEUlwiLFwiRE9DSURcIjpcIjEwNjA2MTU1XCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTUtMjgxM1wiLFwiRklMSU5HREFURVwiOlwiMjAxNS0wNC0wMiAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA2MDYxNTVcIixcIkhUTUxTSVpFXCI6XCIyNjU1NVwiLFwiSURcIjpcIjlcIixcIlBERkxJTktcIjpcImh0dHA6Ly9pbnZlc3Rvci5zaGFyZWhvbGRlci5jb20vY29tbW9uL2Rvd25sb2FkL3NlYy5jZm0/Y29tcGFueWlkPUxOQyZmaWQ9MTIxNDY1OS0xNS0yODEzJmNpaz01OTU1OFwiLFwiUERGU0laRVwiOlwiMjU1NTFcIixcIlJFQ0VJVkVEREFURVwiOlwiMjAxNS0wNC0wMiAxMTowMzowNlwiLFwiUlRGXCI6XCJUcnVlXCIsXCJSVEZMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj1ydGYmY29tcGFueWlkPUxOQyZpZD0xMDYwNjE1NVwiLFwiU0laRVwiOlwiNjAxMVwiLFwiVE9UQUxSRUNPUkRTXCI6XCIxNDU0XCIsXCJYQlJMXCI6XCJGYWxzZVwiLFwiWEJSTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvWEJSTE5hdi5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA2MDYxNTVcIixcIlhMU1wiOlwiVHJ1ZVwiLFwiWExTTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9eGxzJmNvbXBhbnlpZD1MTkMmaWQ9MTA2MDYxNTVcIn0se1wiQ0lLXCI6XCI1OTU1OFwiLFwiQ09NUEFOWU5BTUVcIjpcIkxpbmNvbG4gTmF0aW9uYWwgQ29ycG9yYXRpb25cIixcIkRFU0NSSVBUSU9OXCI6XCJBVkVSWSBXSUxMSUFNIEpcIixcIkRPQ0lEXCI6XCIxMDYwNjE1MlwiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE1LTI4MTJcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDQtMDIgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNjA2MTUyXCIsXCJIVE1MU0laRVwiOlwiMjY1MzdcIixcIklEXCI6XCIxMFwiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE1LTI4MTImY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyNTU0OFwiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE1LTA0LTAyIDExOjAzOjA2XCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwNjA2MTUyXCIsXCJTSVpFXCI6XCI1OTc2XCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDYwNjE1MlwiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDYwNjE1MlwifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIktPTkVOIE1BUksgRVwiLFwiRE9DSURcIjpcIjEwNTU1MjA3XCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTUtMjE4NlwiLFwiRklMSU5HREFURVwiOlwiMjAxNS0wMy0xMSAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA1NTUyMDdcIixcIkhUTUxTSVpFXCI6XCIzMzY4M1wiLFwiSURcIjpcIjExXCIsXCJQREZMSU5LXCI6XCJodHRwOi8vaW52ZXN0b3Iuc2hhcmVob2xkZXIuY29tL2NvbW1vbi9kb3dubG9hZC9zZWMuY2ZtP2NvbXBhbnlpZD1MTkMmZmlkPTEyMTQ2NTktMTUtMjE4NiZjaWs9NTk1NThcIixcIlBERlNJWkVcIjpcIjI2NDg0XCIsXCJSRUNFSVZFRERBVEVcIjpcIjIwMTUtMDMtMTEgMTA6Mjc6MzBcIixcIlJURlwiOlwiVHJ1ZVwiLFwiUlRGTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9cnRmJmNvbXBhbnlpZD1MTkMmaWQ9MTA1NTUyMDdcIixcIlNJWkVcIjpcIjEwMDYwXCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDU1NTIwN1wiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDU1NTIwN1wifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIkdMQVNTIERFTk5JUyBSXCIsXCJET0NJRFwiOlwiMTA1NDkyMDFcIixcIkRPQ1RZUEVcIjpcIjRcIixcIkZJRFwiOlwiMTIxNDY1OS0xNS0yMDk5XCIsXCJGSUxJTkdEQVRFXCI6XCIyMDE1LTAzLTA5IDAwOjAwOjAwXCIsXCJIVE1MTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy92aWV3ZXJDb250ZW50LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDU0OTIwMVwiLFwiSFRNTFNJWkVcIjpcIjU3NzM1XCIsXCJJRFwiOlwiMTJcIixcIlBERkxJTktcIjpcImh0dHA6Ly9pbnZlc3Rvci5zaGFyZWhvbGRlci5jb20vY29tbW9uL2Rvd25sb2FkL3NlYy5jZm0/Y29tcGFueWlkPUxOQyZmaWQ9MTIxNDY1OS0xNS0yMDk5JmNpaz01OTU1OFwiLFwiUERGU0laRVwiOlwiMzAyNTJcIixcIlJFQ0VJVkVEREFURVwiOlwiMjAxNS0wMy0wOSAxNjoxMjoyNVwiLFwiUlRGXCI6XCJUcnVlXCIsXCJSVEZMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj1ydGYmY29tcGFueWlkPUxOQyZpZD0xMDU0OTIwMVwiLFwiU0laRVwiOlwiMjUyODVcIixcIlRPVEFMUkVDT1JEU1wiOlwiMTQ1NFwiLFwiWEJSTFwiOlwiRmFsc2VcIixcIlhCUkxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL1hCUkxOYXYuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNTQ5MjAxXCIsXCJYTFNcIjpcIlRydWVcIixcIlhMU0xJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXhscyZjb21wYW55aWQ9TE5DJmlkPTEwNTQ5MjAxXCJ9LHtcIkNJS1wiOlwiNTk1NThcIixcIkNPTVBBTllOQU1FXCI6XCJMaW5jb2xuIE5hdGlvbmFsIENvcnBvcmF0aW9uXCIsXCJERVNDUklQVElPTlwiOlwiTUlMTEVSIERPVUdMQVMgTlwiLFwiRE9DSURcIjpcIjEwNTQ5MjAwXCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTUtMjA5N1wiLFwiRklMSU5HREFURVwiOlwiMjAxNS0wMy0wOSAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA1NDkyMDBcIixcIkhUTUxTSVpFXCI6XCIyNzMyNlwiLFwiSURcIjpcIjEzXCIsXCJQREZMSU5LXCI6XCJodHRwOi8vaW52ZXN0b3Iuc2hhcmVob2xkZXIuY29tL2NvbW1vbi9kb3dubG9hZC9zZWMuY2ZtP2NvbXBhbnlpZD1MTkMmZmlkPTEyMTQ2NTktMTUtMjA5NyZjaWs9NTk1NThcIixcIlBERlNJWkVcIjpcIjI1MjM2XCIsXCJSRUNFSVZFRERBVEVcIjpcIjIwMTUtMDMtMDkgMTY6MTI6MjVcIixcIlJURlwiOlwiVHJ1ZVwiLFwiUlRGTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9cnRmJmNvbXBhbnlpZD1MTkMmaWQ9MTA1NDkyMDBcIixcIlNJWkVcIjpcIjU4NzVcIixcIlRPVEFMUkVDT1JEU1wiOlwiMTQ1NFwiLFwiWEJSTFwiOlwiRmFsc2VcIixcIlhCUkxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL1hCUkxOYXYuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNTQ5MjAwXCIsXCJYTFNcIjpcIlRydWVcIixcIlhMU0xJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXhscyZjb21wYW55aWQ9TE5DJmlkPTEwNTQ5MjAwXCJ9LHtcIkNJS1wiOlwiNTk1NThcIixcIkNPTVBBTllOQU1FXCI6XCJMaW5jb2xuIE5hdGlvbmFsIENvcnBvcmF0aW9uXCIsXCJERVNDUklQVElPTlwiOlwiUElUVEFSRCBQQVRSSUNLIFNcIixcIkRPQ0lEXCI6XCIxMDU0NTM3MlwiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE1LTIwMzhcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDMtMDYgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNTQ1MzcyXCIsXCJIVE1MU0laRVwiOlwiMjUzOTlcIixcIklEXCI6XCIxNFwiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE1LTIwMzgmY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyNTI1MFwiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE1LTAzLTA2IDE0OjE2OjE3XCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwNTQ1MzcyXCIsXCJTSVpFXCI6XCI1MjEwXCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDU0NTM3MlwiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDU0NTM3MlwifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIktPTkVOIE1BUksgRVwiLFwiRE9DSURcIjpcIjEwNTMzOTM5XCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTUtMTkyNlwiLFwiRklMSU5HREFURVwiOlwiMjAxNS0wMy0wMyAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA1MzM5MzlcIixcIkhUTUxTSVpFXCI6XCIyNzQ2NFwiLFwiSURcIjpcIjE1XCIsXCJQREZMSU5LXCI6XCJodHRwOi8vaW52ZXN0b3Iuc2hhcmVob2xkZXIuY29tL2NvbW1vbi9kb3dubG9hZC9zZWMuY2ZtP2NvbXBhbnlpZD1MTkMmZmlkPTEyMTQ2NTktMTUtMTkyNiZjaWs9NTk1NThcIixcIlBERlNJWkVcIjpcIjI1MzM0XCIsXCJSRUNFSVZFRERBVEVcIjpcIjIwMTUtMDMtMDMgMTU6MDA6NTJcIixcIlJURlwiOlwiVHJ1ZVwiLFwiUlRGTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9cnRmJmNvbXBhbnlpZD1MTkMmaWQ9MTA1MzM5MzlcIixcIlNJWkVcIjpcIjY3MDdcIixcIlRPVEFMUkVDT1JEU1wiOlwiMTQ1NFwiLFwiWEJSTFwiOlwiRmFsc2VcIixcIlhCUkxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL1hCUkxOYXYuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNTMzOTM5XCIsXCJYTFNcIjpcIlRydWVcIixcIlhMU0xJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXhscyZjb21wYW55aWQ9TE5DJmlkPTEwNTMzOTM5XCJ9LHtcIkNJS1wiOlwiNTk1NThcIixcIkNPTVBBTllOQU1FXCI6XCJMaW5jb2xuIE5hdGlvbmFsIENvcnBvcmF0aW9uXCIsXCJERVNDUklQVElPTlwiOlwiR0xBU1MgREVOTklTIFJcIixcIkRPQ0lEXCI6XCIxMDUyNjY1N1wiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE1LTE4MTNcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDItMjcgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNTI2NjU3XCIsXCJIVE1MU0laRVwiOlwiMzI2OThcIixcIklEXCI6XCIxNlwiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE1LTE4MTMmY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyNTc2N1wiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE1LTAyLTI3IDIwOjUyOjAyXCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwNTI2NjU3XCIsXCJTSVpFXCI6XCI5MTY2XCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDUyNjY1N1wiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDUyNjY1N1wifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIk1JTExFUiBET1VHTEFTIE5cIixcIkRPQ0lEXCI6XCIxMDUyNjY1NlwiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE1LTE4MTJcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDItMjcgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNTI2NjU2XCIsXCJIVE1MU0laRVwiOlwiMzU3ODhcIixcIklEXCI6XCIxN1wiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE1LTE4MTImY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyNzIyOFwiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE1LTAyLTI3IDIwOjUyOjAyXCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwNTI2NjU2XCIsXCJTSVpFXCI6XCIxMTI0N1wiLFwiVE9UQUxSRUNPUkRTXCI6XCIxNDU0XCIsXCJYQlJMXCI6XCJGYWxzZVwiLFwiWEJSTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvWEJSTE5hdi5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA1MjY2NTZcIixcIlhMU1wiOlwiVHJ1ZVwiLFwiWExTTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9eGxzJmNvbXBhbnlpZD1MTkMmaWQ9MTA1MjY2NTZcIn0se1wiQ0lLXCI6XCI1OTU1OFwiLFwiQ09NUEFOWU5BTUVcIjpcIkxpbmNvbG4gTmF0aW9uYWwgQ29ycG9yYXRpb25cIixcIkRFU0NSSVBUSU9OXCI6XCJLT05FTiBNQVJLIEVcIixcIkRPQ0lEXCI6XCIxMDUyNjY1NVwiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE1LTE4MTFcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDItMjcgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNTI2NjU1XCIsXCJIVE1MU0laRVwiOlwiMzI2NjNcIixcIklEXCI6XCIxOFwiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE1LTE4MTEmY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyNTg2MVwiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE1LTAyLTI3IDIwOjUyOjAyXCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwNTI2NjU1XCIsXCJTSVpFXCI6XCI5MTgxXCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDUyNjY1NVwiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDUyNjY1NVwifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIkZSRUlUQUcgUkFOREFMIEpcIixcIkRPQ0lEXCI6XCIxMDUyNjY1NFwiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE1LTE4MTBcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDItMjcgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNTI2NjU0XCIsXCJIVE1MU0laRVwiOlwiNDE4NDlcIixcIklEXCI6XCIxOVwiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE1LTE4MTAmY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyODI2OFwiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE1LTAyLTI3IDIwOjUyOjAxXCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwNTI2NjU0XCIsXCJTSVpFXCI6XCIxNTA5N1wiLFwiVE9UQUxSRUNPUkRTXCI6XCIxNDU0XCIsXCJYQlJMXCI6XCJGYWxzZVwiLFwiWEJSTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvWEJSTE5hdi5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA1MjY2NTRcIixcIlhMU1wiOlwiVHJ1ZVwiLFwiWExTTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9eGxzJmNvbXBhbnlpZD1MTkMmaWQ9MTA1MjY2NTRcIn0se1wiQ0lLXCI6XCI1OTU1OFwiLFwiQ09NUEFOWU5BTUVcIjpcIkxpbmNvbG4gTmF0aW9uYWwgQ29ycG9yYXRpb25cIixcIkRFU0NSSVBUSU9OXCI6XCJCVUNLSU5HSEFNIExJU0FcIixcIkRPQ0lEXCI6XCIxMDUyNjY1M1wiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE1LTE4MDlcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDItMjcgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNTI2NjUzXCIsXCJIVE1MU0laRVwiOlwiMzAzMzZcIixcIklEXCI6XCIyMFwiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE1LTE4MDkmY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyNTQxM1wiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE1LTAyLTI3IDIwOjUyOjAxXCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwNTI2NjUzXCIsXCJTSVpFXCI6XCI4NDIyXCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDUyNjY1M1wiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDUyNjY1M1wifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIkNJT05HT0xJIEFEQU0gRy5cIixcIkRPQ0lEXCI6XCIxMDUyNjY1MlwiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE1LTE4MDhcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDItMjcgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNTI2NjUyXCIsXCJIVE1MU0laRVwiOlwiMzA3NDFcIixcIklEXCI6XCIyMVwiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE1LTE4MDgmY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyNTg5NFwiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE1LTAyLTI3IDIwOjUyOjAxXCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwNTI2NjUyXCIsXCJTSVpFXCI6XCI4NzE1XCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDUyNjY1MlwiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDUyNjY1MlwifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIkNPT1BFUiBFTExFTlwiLFwiRE9DSURcIjpcIjEwNTI2NjUxXCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTUtMTgwN1wiLFwiRklMSU5HREFURVwiOlwiMjAxNS0wMi0yNyAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA1MjY2NTFcIixcIkhUTUxTSVpFXCI6XCIzMzg3MFwiLFwiSURcIjpcIjIyXCIsXCJQREZMSU5LXCI6XCJodHRwOi8vaW52ZXN0b3Iuc2hhcmVob2xkZXIuY29tL2NvbW1vbi9kb3dubG9hZC9zZWMuY2ZtP2NvbXBhbnlpZD1MTkMmZmlkPTEyMTQ2NTktMTUtMTgwNyZjaWs9NTk1NThcIixcIlBERlNJWkVcIjpcIjI3MTEzXCIsXCJSRUNFSVZFRERBVEVcIjpcIjIwMTUtMDItMjcgMjA6NTI6MDFcIixcIlJURlwiOlwiVHJ1ZVwiLFwiUlRGTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9cnRmJmNvbXBhbnlpZD1MTkMmaWQ9MTA1MjY2NTFcIixcIlNJWkVcIjpcIjEwNjgzXCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDUyNjY1MVwiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDUyNjY1MVwifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIkNPUk5FTElPIENIQVJMRVMgQ1wiLFwiRE9DSURcIjpcIjEwNTI2NjUwXCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTUtMTgwNlwiLFwiRklMSU5HREFURVwiOlwiMjAxNS0wMi0yNyAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA1MjY2NTBcIixcIkhUTUxTSVpFXCI6XCIyODg2NFwiLFwiSURcIjpcIjIzXCIsXCJQREZMSU5LXCI6XCJodHRwOi8vaW52ZXN0b3Iuc2hhcmVob2xkZXIuY29tL2NvbW1vbi9kb3dubG9hZC9zZWMuY2ZtP2NvbXBhbnlpZD1MTkMmZmlkPTEyMTQ2NTktMTUtMTgwNiZjaWs9NTk1NThcIixcIlBERlNJWkVcIjpcIjIzMzI3XCIsXCJSRUNFSVZFRERBVEVcIjpcIjIwMTUtMDItMjcgMjA6NTI6MDFcIixcIlJURlwiOlwiVHJ1ZVwiLFwiUlRGTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9cnRmJmNvbXBhbnlpZD1MTkMmaWQ9MTA1MjY2NTBcIixcIlNJWkVcIjpcIjY5NDhcIixcIlRPVEFMUkVDT1JEU1wiOlwiMTQ1NFwiLFwiWEJSTFwiOlwiRmFsc2VcIixcIlhCUkxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL1hCUkxOYXYuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNTI2NjUwXCIsXCJYTFNcIjpcIlRydWVcIixcIlhMU0xJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXhscyZjb21wYW55aWQ9TE5DJmlkPTEwNTI2NjUwXCJ9LHtcIkNJS1wiOlwiNTk1NThcIixcIkNPTVBBTllOQU1FXCI6XCJMaW5jb2xuIE5hdGlvbmFsIENvcnBvcmF0aW9uXCIsXCJERVNDUklQVElPTlwiOlwiRlVMTEVSIFdJTEZPUkQgSC5cIixcIkRPQ0lEXCI6XCIxMDUyNjY0OVwiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE1LTE4MDVcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDItMjcgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNTI2NjQ5XCIsXCJIVE1MU0laRVwiOlwiMzAzNDdcIixcIklEXCI6XCIyNFwiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE1LTE4MDUmY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyNTQ3MVwiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE1LTAyLTI3IDIwOjUyOjAxXCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwNTI2NjQ5XCIsXCJTSVpFXCI6XCI4NDMxXCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDUyNjY0OVwiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDUyNjY0OVwifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIktPTkVOIE1BUksgRVwiLFwiRE9DSURcIjpcIjEwNTExNzQyXCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTUtMTY0N1wiLFwiRklMSU5HREFURVwiOlwiMjAxNS0wMi0yNCAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA1MTE3NDJcIixcIkhUTUxTSVpFXCI6XCIzMzI5OFwiLFwiSURcIjpcIjI1XCIsXCJQREZMSU5LXCI6XCJodHRwOi8vaW52ZXN0b3Iuc2hhcmVob2xkZXIuY29tL2NvbW1vbi9kb3dubG9hZC9zZWMuY2ZtP2NvbXBhbnlpZD1MTkMmZmlkPTEyMTQ2NTktMTUtMTY0NyZjaWs9NTk1NThcIixcIlBERlNJWkVcIjpcIjI3MTg1XCIsXCJSRUNFSVZFRERBVEVcIjpcIjIwMTUtMDItMjQgMTc6MjY6MDhcIixcIlJURlwiOlwiVHJ1ZVwiLFwiUlRGTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9cnRmJmNvbXBhbnlpZD1MTkMmaWQ9MTA1MTE3NDJcIixcIlNJWkVcIjpcIjk1MjJcIixcIlRPVEFMUkVDT1JEU1wiOlwiMTQ1NFwiLFwiWEJSTFwiOlwiRmFsc2VcIixcIlhCUkxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL1hCUkxOYXYuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNTExNzQyXCIsXCJYTFNcIjpcIlRydWVcIixcIlhMU0xJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXhscyZjb21wYW55aWQ9TE5DJmlkPTEwNTExNzQyXCJ9LHtcIkNJS1wiOlwiNTk1NThcIixcIkNPTVBBTllOQU1FXCI6XCJMaW5jb2xuIE5hdGlvbmFsIENvcnBvcmF0aW9uXCIsXCJERVNDUklQVElPTlwiOlwiR0xBU1MgREVOTklTIFJcIixcIkRPQ0lEXCI6XCIxMDUxMTc0MVwiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE1LTE2NDZcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDItMjQgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNTExNzQxXCIsXCJIVE1MU0laRVwiOlwiMzEzMDdcIixcIklEXCI6XCIyNlwiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE1LTE2NDYmY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyNjk2MFwiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE1LTAyLTI0IDE3OjI2OjA4XCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwNTExNzQxXCIsXCJTSVpFXCI6XCI4MTExXCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDUxMTc0MVwiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDUxMTc0MVwifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIk1JTExFUiBET1VHTEFTIE5cIixcIkRPQ0lEXCI6XCIxMDUxMTc0MFwiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE1LTE2NDVcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDItMjQgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNTExNzQwXCIsXCJIVE1MU0laRVwiOlwiMjc2NjJcIixcIklEXCI6XCIyN1wiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE1LTE2NDUmY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyNTA1NVwiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE1LTAyLTI0IDE3OjI2OjA4XCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwNTExNzQwXCIsXCJTSVpFXCI6XCI1ODA4XCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDUxMTc0MFwiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDUxMTc0MFwifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIkZVTExFUiBXSUxGT1JEIEguXCIsXCJET0NJRFwiOlwiMTA1MTE3MjBcIixcIkRPQ1RZUEVcIjpcIjRcIixcIkZJRFwiOlwiMTIxNDY1OS0xNS0xNjQ0XCIsXCJGSUxJTkdEQVRFXCI6XCIyMDE1LTAyLTI0IDAwOjAwOjAwXCIsXCJIVE1MTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy92aWV3ZXJDb250ZW50LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDUxMTcyMFwiLFwiSFRNTFNJWkVcIjpcIjI4NTkwXCIsXCJJRFwiOlwiMjhcIixcIlBERkxJTktcIjpcImh0dHA6Ly9pbnZlc3Rvci5zaGFyZWhvbGRlci5jb20vY29tbW9uL2Rvd25sb2FkL3NlYy5jZm0/Y29tcGFueWlkPUxOQyZmaWQ9MTIxNDY1OS0xNS0xNjQ0JmNpaz01OTU1OFwiLFwiUERGU0laRVwiOlwiMjYzMTRcIixcIlJFQ0VJVkVEREFURVwiOlwiMjAxNS0wMi0yNCAxNzoyNjowOFwiLFwiUlRGXCI6XCJUcnVlXCIsXCJSVEZMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj1ydGYmY29tcGFueWlkPUxOQyZpZD0xMDUxMTcyMFwiLFwiU0laRVwiOlwiNzIwOVwiLFwiVE9UQUxSRUNPUkRTXCI6XCIxNDU0XCIsXCJYQlJMXCI6XCJGYWxzZVwiLFwiWEJSTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvWEJSTE5hdi5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA1MTE3MjBcIixcIlhMU1wiOlwiVHJ1ZVwiLFwiWExTTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9eGxzJmNvbXBhbnlpZD1MTkMmaWQ9MTA1MTE3MjBcIn0se1wiQ0lLXCI6XCI1OTU1OFwiLFwiQ09NUEFOWU5BTUVcIjpcIkxpbmNvbG4gTmF0aW9uYWwgQ29ycG9yYXRpb25cIixcIkRFU0NSSVBUSU9OXCI6XCJGUkVJVEFHIFJBTkRBTCBKXCIsXCJET0NJRFwiOlwiMTA1MTE3MTlcIixcIkRPQ1RZUEVcIjpcIjRcIixcIkZJRFwiOlwiMTIxNDY1OS0xNS0xNjQzXCIsXCJGSUxJTkdEQVRFXCI6XCIyMDE1LTAyLTI0IDAwOjAwOjAwXCIsXCJIVE1MTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy92aWV3ZXJDb250ZW50LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDUxMTcxOVwiLFwiSFRNTFNJWkVcIjpcIjMxMjQxXCIsXCJJRFwiOlwiMjlcIixcIlBERkxJTktcIjpcImh0dHA6Ly9pbnZlc3Rvci5zaGFyZWhvbGRlci5jb20vY29tbW9uL2Rvd25sb2FkL3NlYy5jZm0/Y29tcGFueWlkPUxOQyZmaWQ9MTIxNDY1OS0xNS0xNjQzJmNpaz01OTU1OFwiLFwiUERGU0laRVwiOlwiMjY4ODhcIixcIlJFQ0VJVkVEREFURVwiOlwiMjAxNS0wMi0yNCAxNzoyNjowOFwiLFwiUlRGXCI6XCJUcnVlXCIsXCJSVEZMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj1ydGYmY29tcGFueWlkPUxOQyZpZD0xMDUxMTcxOVwiLFwiU0laRVwiOlwiODExNVwiLFwiVE9UQUxSRUNPUkRTXCI6XCIxNDU0XCIsXCJYQlJMXCI6XCJGYWxzZVwiLFwiWEJSTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvWEJSTE5hdi5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA1MTE3MTlcIixcIlhMU1wiOlwiVHJ1ZVwiLFwiWExTTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9eGxzJmNvbXBhbnlpZD1MTkMmaWQ9MTA1MTE3MTlcIn0se1wiQ0lLXCI6XCI1OTU1OFwiLFwiQ09NUEFOWU5BTUVcIjpcIkxpbmNvbG4gTmF0aW9uYWwgQ29ycG9yYXRpb25cIixcIkRFU0NSSVBUSU9OXCI6XCJCVUNLSU5HSEFNIExJU0FcIixcIkRPQ0lEXCI6XCIxMDUxMTcwNFwiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE1LTE2NDFcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDItMjQgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNTExNzA0XCIsXCJIVE1MU0laRVwiOlwiMjg1NzlcIixcIklEXCI6XCIzMFwiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE1LTE2NDEmY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyNjI2OVwiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE1LTAyLTI0IDE3OjIzOjE1XCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwNTExNzA0XCIsXCJTSVpFXCI6XCI3MjAwXCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDUxMTcwNFwiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDUxMTcwNFwifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIkNPUk5FTElPIENIQVJMRVMgQ1wiLFwiRE9DSURcIjpcIjEwNTExNjcxXCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTUtMTY0MlwiLFwiRklMSU5HREFURVwiOlwiMjAxNS0wMi0yNCAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTA1MTE2NzFcIixcIkhUTUxTSVpFXCI6XCIzMTI3M1wiLFwiSURcIjpcIjMxXCIsXCJQREZMSU5LXCI6XCJodHRwOi8vaW52ZXN0b3Iuc2hhcmVob2xkZXIuY29tL2NvbW1vbi9kb3dubG9hZC9zZWMuY2ZtP2NvbXBhbnlpZD1MTkMmZmlkPTEyMTQ2NTktMTUtMTY0MiZjaWs9NTk1NThcIixcIlBERlNJWkVcIjpcIjI3MDEyXCIsXCJSRUNFSVZFRERBVEVcIjpcIjIwMTUtMDItMjQgMTc6MjA6MTlcIixcIlJURlwiOlwiVHJ1ZVwiLFwiUlRGTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9cnRmJmNvbXBhbnlpZD1MTkMmaWQ9MTA1MTE2NzFcIixcIlNJWkVcIjpcIjgyMjlcIixcIlRPVEFMUkVDT1JEU1wiOlwiMTQ1NFwiLFwiWEJSTFwiOlwiRmFsc2VcIixcIlhCUkxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL1hCUkxOYXYuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwNTExNjcxXCIsXCJYTFNcIjpcIlRydWVcIixcIlhMU0xJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXhscyZjb21wYW55aWQ9TE5DJmlkPTEwNTExNjcxXCJ9LHtcIkNJS1wiOlwiNTk1NThcIixcIkNPTVBBTllOQU1FXCI6XCJMaW5jb2xuIE5hdGlvbmFsIENvcnBvcmF0aW9uXCIsXCJERVNDUklQVElPTlwiOlwiVElEV0VMTCBJU0FJQUhcIixcIkRPQ0lEXCI6XCIxMDM5MDE2MVwiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE1LTczXCIsXCJGSUxJTkdEQVRFXCI6XCIyMDE1LTAxLTA1IDAwOjAwOjAwXCIsXCJIVE1MTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy92aWV3ZXJDb250ZW50LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDM5MDE2MVwiLFwiSFRNTFNJWkVcIjpcIjI2NTMxXCIsXCJJRFwiOlwiMzJcIixcIlBERkxJTktcIjpcImh0dHA6Ly9pbnZlc3Rvci5zaGFyZWhvbGRlci5jb20vY29tbW9uL2Rvd25sb2FkL3NlYy5jZm0/Y29tcGFueWlkPUxOQyZmaWQ9MTIxNDY1OS0xNS03MyZjaWs9NTk1NThcIixcIlBERlNJWkVcIjpcIjI1NTAwXCIsXCJSRUNFSVZFRERBVEVcIjpcIjIwMTUtMDEtMDUgMTM6NTg6MjhcIixcIlJURlwiOlwiVHJ1ZVwiLFwiUlRGTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9cnRmJmNvbXBhbnlpZD1MTkMmaWQ9MTAzOTAxNjFcIixcIlNJWkVcIjpcIjU5NjVcIixcIlRPVEFMUkVDT1JEU1wiOlwiMTQ1NFwiLFwiWEJSTFwiOlwiRmFsc2VcIixcIlhCUkxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL1hCUkxOYXYuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwMzkwMTYxXCIsXCJYTFNcIjpcIlRydWVcIixcIlhMU0xJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXhscyZjb21wYW55aWQ9TE5DJmlkPTEwMzkwMTYxXCJ9LHtcIkNJS1wiOlwiNTk1NThcIixcIkNPTVBBTllOQU1FXCI6XCJMaW5jb2xuIE5hdGlvbmFsIENvcnBvcmF0aW9uXCIsXCJERVNDUklQVElPTlwiOlwiUElUVEFSRCBQQVRSSUNLIFNcIixcIkRPQ0lEXCI6XCIxMDM5MDE1N1wiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE1LTcyXCIsXCJGSUxJTkdEQVRFXCI6XCIyMDE1LTAxLTA1IDAwOjAwOjAwXCIsXCJIVE1MTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy92aWV3ZXJDb250ZW50LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDM5MDE1N1wiLFwiSFRNTFNJWkVcIjpcIjI2NTQyXCIsXCJJRFwiOlwiMzNcIixcIlBERkxJTktcIjpcImh0dHA6Ly9pbnZlc3Rvci5zaGFyZWhvbGRlci5jb20vY29tbW9uL2Rvd25sb2FkL3NlYy5jZm0/Y29tcGFueWlkPUxOQyZmaWQ9MTIxNDY1OS0xNS03MiZjaWs9NTk1NThcIixcIlBERlNJWkVcIjpcIjI1NTMzXCIsXCJSRUNFSVZFRERBVEVcIjpcIjIwMTUtMDEtMDUgMTM6NTg6MjhcIixcIlJURlwiOlwiVHJ1ZVwiLFwiUlRGTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9cnRmJmNvbXBhbnlpZD1MTkMmaWQ9MTAzOTAxNTdcIixcIlNJWkVcIjpcIjU4MzRcIixcIlRPVEFMUkVDT1JEU1wiOlwiMTQ1NFwiLFwiWEJSTFwiOlwiRmFsc2VcIixcIlhCUkxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL1hCUkxOYXYuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwMzkwMTU3XCIsXCJYTFNcIjpcIlRydWVcIixcIlhMU0xJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXhscyZjb21wYW55aWQ9TE5DJmlkPTEwMzkwMTU3XCJ9LHtcIkNJS1wiOlwiNTk1NThcIixcIkNPTVBBTllOQU1FXCI6XCJMaW5jb2xuIE5hdGlvbmFsIENvcnBvcmF0aW9uXCIsXCJERVNDUklQVElPTlwiOlwiUEFZTkUgV0lMTElBTSBQT1JURVJcIixcIkRPQ0lEXCI6XCIxMDM5MDE1NFwiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE1LTcxXCIsXCJGSUxJTkdEQVRFXCI6XCIyMDE1LTAxLTA1IDAwOjAwOjAwXCIsXCJIVE1MTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy92aWV3ZXJDb250ZW50LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDM5MDE1NFwiLFwiSFRNTFNJWkVcIjpcIjI2NTQ4XCIsXCJJRFwiOlwiMzRcIixcIlBERkxJTktcIjpcImh0dHA6Ly9pbnZlc3Rvci5zaGFyZWhvbGRlci5jb20vY29tbW9uL2Rvd25sb2FkL3NlYy5jZm0/Y29tcGFueWlkPUxOQyZmaWQ9MTIxNDY1OS0xNS03MSZjaWs9NTk1NThcIixcIlBERlNJWkVcIjpcIjI1NTY2XCIsXCJSRUNFSVZFRERBVEVcIjpcIjIwMTUtMDEtMDUgMTM6NTg6MjhcIixcIlJURlwiOlwiVHJ1ZVwiLFwiUlRGTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9cnRmJmNvbXBhbnlpZD1MTkMmaWQ9MTAzOTAxNTRcIixcIlNJWkVcIjpcIjYwNDBcIixcIlRPVEFMUkVDT1JEU1wiOlwiMTQ1NFwiLFwiWEJSTFwiOlwiRmFsc2VcIixcIlhCUkxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL1hCUkxOYXYuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwMzkwMTU0XCIsXCJYTFNcIjpcIlRydWVcIixcIlhMU0xJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXhscyZjb21wYW55aWQ9TE5DJmlkPTEwMzkwMTU0XCJ9LHtcIkNJS1wiOlwiNTk1NThcIixcIkNPTVBBTllOQU1FXCI6XCJMaW5jb2xuIE5hdGlvbmFsIENvcnBvcmF0aW9uXCIsXCJERVNDUklQVElPTlwiOlwiTUVFIE1JQ0hBRUwgRlwiLFwiRE9DSURcIjpcIjEwMzkwMTQ5XCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTUtNzBcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDEtMDUgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwMzkwMTQ5XCIsXCJIVE1MU0laRVwiOlwiMjY1MzVcIixcIklEXCI6XCIzNVwiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE1LTcwJmNpaz01OTU1OFwiLFwiUERGU0laRVwiOlwiMjU1MTZcIixcIlJFQ0VJVkVEREFURVwiOlwiMjAxNS0wMS0wNSAxMzo1ODoyOFwiLFwiUlRGXCI6XCJUcnVlXCIsXCJSVEZMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj1ydGYmY29tcGFueWlkPUxOQyZpZD0xMDM5MDE0OVwiLFwiU0laRVwiOlwiNTg1NVwiLFwiVE9UQUxSRUNPUkRTXCI6XCIxNDU0XCIsXCJYQlJMXCI6XCJGYWxzZVwiLFwiWEJSTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvWEJSTE5hdi5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTAzOTAxNDlcIixcIlhMU1wiOlwiVHJ1ZVwiLFwiWExTTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9eGxzJmNvbXBhbnlpZD1MTkMmaWQ9MTAzOTAxNDlcIn0se1wiQ0lLXCI6XCI1OTU1OFwiLFwiQ09NUEFOWU5BTUVcIjpcIkxpbmNvbG4gTmF0aW9uYWwgQ29ycG9yYXRpb25cIixcIkRFU0NSSVBUSU9OXCI6XCJMQUNITUFOIE0gTEVBTk5FXCIsXCJET0NJRFwiOlwiMTAzOTAxNDdcIixcIkRPQ1RZUEVcIjpcIjRcIixcIkZJRFwiOlwiMTIxNDY1OS0xNS02OVwiLFwiRklMSU5HREFURVwiOlwiMjAxNS0wMS0wNSAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTAzOTAxNDdcIixcIkhUTUxTSVpFXCI6XCIyNjU0MFwiLFwiSURcIjpcIjM2XCIsXCJQREZMSU5LXCI6XCJodHRwOi8vaW52ZXN0b3Iuc2hhcmVob2xkZXIuY29tL2NvbW1vbi9kb3dubG9hZC9zZWMuY2ZtP2NvbXBhbnlpZD1MTkMmZmlkPTEyMTQ2NTktMTUtNjkmY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyNTU1NlwiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE1LTAxLTA1IDEzOjU1OjU1XCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwMzkwMTQ3XCIsXCJTSVpFXCI6XCI1OTU3XCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDM5MDE0N1wiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDM5MDE0N1wifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIktFTExZIEdBUlkgQ1wiLFwiRE9DSURcIjpcIjEwMzkwMTQ0XCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTUtNjhcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDEtMDUgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwMzkwMTQ0XCIsXCJIVE1MU0laRVwiOlwiMjY1MzRcIixcIklEXCI6XCIzN1wiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE1LTY4JmNpaz01OTU1OFwiLFwiUERGU0laRVwiOlwiMjU0NDFcIixcIlJFQ0VJVkVEREFURVwiOlwiMjAxNS0wMS0wNSAxMzo1NTo1NFwiLFwiUlRGXCI6XCJUcnVlXCIsXCJSVEZMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj1ydGYmY29tcGFueWlkPUxOQyZpZD0xMDM5MDE0NFwiLFwiU0laRVwiOlwiNTk1NVwiLFwiVE9UQUxSRUNPUkRTXCI6XCIxNDU0XCIsXCJYQlJMXCI6XCJGYWxzZVwiLFwiWEJSTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvWEJSTE5hdi5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTAzOTAxNDRcIixcIlhMU1wiOlwiVHJ1ZVwiLFwiWExTTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9eGxzJmNvbXBhbnlpZD1MTkMmaWQ9MTAzOTAxNDRcIn0se1wiQ0lLXCI6XCI1OTU1OFwiLFwiQ09NUEFOWU5BTUVcIjpcIkxpbmNvbG4gTmF0aW9uYWwgQ29ycG9yYXRpb25cIixcIkRFU0NSSVBUSU9OXCI6XCJKT0hOU09OIEVSSUMgR1wiLFwiRE9DSURcIjpcIjEwMzkwMTM5XCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTUtNjdcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDEtMDUgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwMzkwMTM5XCIsXCJIVE1MU0laRVwiOlwiMjY1MzZcIixcIklEXCI6XCIzOFwiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE1LTY3JmNpaz01OTU1OFwiLFwiUERGU0laRVwiOlwiMjU1MTRcIixcIlJFQ0VJVkVEREFURVwiOlwiMjAxNS0wMS0wNSAxMzo1NTo1NFwiLFwiUlRGXCI6XCJUcnVlXCIsXCJSVEZMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj1ydGYmY29tcGFueWlkPUxOQyZpZD0xMDM5MDEzOVwiLFwiU0laRVwiOlwiNTk2OVwiLFwiVE9UQUxSRUNPUkRTXCI6XCIxNDU0XCIsXCJYQlJMXCI6XCJGYWxzZVwiLFwiWEJSTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvWEJSTE5hdi5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTAzOTAxMzlcIixcIlhMU1wiOlwiVHJ1ZVwiLFwiWExTTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9eGxzJmNvbXBhbnlpZD1MTkMmaWQ9MTAzOTAxMzlcIn0se1wiQ0lLXCI6XCI1OTU1OFwiLFwiQ09NUEFOWU5BTUVcIjpcIkxpbmNvbG4gTmF0aW9uYWwgQ29ycG9yYXRpb25cIixcIkRFU0NSSVBUSU9OXCI6XCJIRU5ERVJTT04gR0VPUkdFIFcgSUlJXCIsXCJET0NJRFwiOlwiMTAzOTAxMzZcIixcIkRPQ1RZUEVcIjpcIjRcIixcIkZJRFwiOlwiMTIxNDY1OS0xNS02NlwiLFwiRklMSU5HREFURVwiOlwiMjAxNS0wMS0wNSAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTAzOTAxMzZcIixcIkhUTUxTSVpFXCI6XCIyNjU1MlwiLFwiSURcIjpcIjM5XCIsXCJQREZMSU5LXCI6XCJodHRwOi8vaW52ZXN0b3Iuc2hhcmVob2xkZXIuY29tL2NvbW1vbi9kb3dubG9hZC9zZWMuY2ZtP2NvbXBhbnlpZD1MTkMmZmlkPTEyMTQ2NTktMTUtNjYmY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyNTU2OFwiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE1LTAxLTA1IDEzOjU1OjU0XCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwMzkwMTM2XCIsXCJTSVpFXCI6XCI1OTg0XCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDM5MDEzNlwiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDM5MDEzNlwifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIkNVTk5JTkdIQU0gV0lMTElBTSBIIERSXCIsXCJET0NJRFwiOlwiMTAzOTAxMzVcIixcIkRPQ1RZUEVcIjpcIjRcIixcIkZJRFwiOlwiMTIxNDY1OS0xNS02NVwiLFwiRklMSU5HREFURVwiOlwiMjAxNS0wMS0wNSAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTAzOTAxMzVcIixcIkhUTUxTSVpFXCI6XCIyNjU1N1wiLFwiSURcIjpcIjQwXCIsXCJQREZMSU5LXCI6XCJodHRwOi8vaW52ZXN0b3Iuc2hhcmVob2xkZXIuY29tL2NvbW1vbi9kb3dubG9hZC9zZWMuY2ZtP2NvbXBhbnlpZD1MTkMmZmlkPTEyMTQ2NTktMTUtNjUmY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyNTU3M1wiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE1LTAxLTA1IDEzOjU1OjU0XCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwMzkwMTM1XCIsXCJTSVpFXCI6XCI2MDExXCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDM5MDEzNVwiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDM5MDEzNVwifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIkFWRVJZIFdJTExJQU0gSlwiLFwiRE9DSURcIjpcIjEwMzkwMTIwXCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTUtNjRcIixcIkZJTElOR0RBVEVcIjpcIjIwMTUtMDEtMDUgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwMzkwMTIwXCIsXCJIVE1MU0laRVwiOlwiMjY1MzhcIixcIklEXCI6XCI0MVwiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE1LTY0JmNpaz01OTU1OFwiLFwiUERGU0laRVwiOlwiMjU1MzhcIixcIlJFQ0VJVkVEREFURVwiOlwiMjAxNS0wMS0wNSAxMzo1MzoxMVwiLFwiUlRGXCI6XCJUcnVlXCIsXCJSVEZMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj1ydGYmY29tcGFueWlkPUxOQyZpZD0xMDM5MDEyMFwiLFwiU0laRVwiOlwiNTk3NVwiLFwiVE9UQUxSRUNPUkRTXCI6XCIxNDU0XCIsXCJYQlJMXCI6XCJGYWxzZVwiLFwiWEJSTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvWEJSTE5hdi5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTAzOTAxMjBcIixcIlhMU1wiOlwiVHJ1ZVwiLFwiWExTTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9eGxzJmNvbXBhbnlpZD1MTkMmaWQ9MTAzOTAxMjBcIn0se1wiQ0lLXCI6XCI1OTU1OFwiLFwiQ09NUEFOWU5BTUVcIjpcIkxpbmNvbG4gTmF0aW9uYWwgQ29ycG9yYXRpb25cIixcIkRFU0NSSVBUSU9OXCI6XCJNSUxMRVIgRE9VR0xBUyBOXCIsXCJET0NJRFwiOlwiMTAzNjA3NTdcIixcIkRPQ1RZUEVcIjpcIjRcIixcIkZJRFwiOlwiMTIxNDY1OS0xNC04MzcwXCIsXCJGSUxJTkdEQVRFXCI6XCIyMDE0LTEyLTE2IDAwOjAwOjAwXCIsXCJIVE1MTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy92aWV3ZXJDb250ZW50LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDM2MDc1N1wiLFwiSFRNTFNJWkVcIjpcIjI3MzI1XCIsXCJJRFwiOlwiNDJcIixcIlBERkxJTktcIjpcImh0dHA6Ly9pbnZlc3Rvci5zaGFyZWhvbGRlci5jb20vY29tbW9uL2Rvd25sb2FkL3NlYy5jZm0/Y29tcGFueWlkPUxOQyZmaWQ9MTIxNDY1OS0xNC04MzcwJmNpaz01OTU1OFwiLFwiUERGU0laRVwiOlwiMjQ3NzRcIixcIlJFQ0VJVkVEREFURVwiOlwiMjAxNC0xMi0xNiAwOTo1Mjo0N1wiLFwiUlRGXCI6XCJUcnVlXCIsXCJSVEZMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj1ydGYmY29tcGFueWlkPUxOQyZpZD0xMDM2MDc1N1wiLFwiU0laRVwiOlwiNTcxOFwiLFwiVE9UQUxSRUNPUkRTXCI6XCIxNDU0XCIsXCJYQlJMXCI6XCJGYWxzZVwiLFwiWEJSTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvWEJSTE5hdi5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTAzNjA3NTdcIixcIlhMU1wiOlwiVHJ1ZVwiLFwiWExTTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9eGxzJmNvbXBhbnlpZD1MTkMmaWQ9MTAzNjA3NTdcIn0se1wiQ0lLXCI6XCI1OTU1OFwiLFwiQ09NUEFOWU5BTUVcIjpcIkxpbmNvbG4gTmF0aW9uYWwgQ29ycG9yYXRpb25cIixcIkRFU0NSSVBUSU9OXCI6XCJBVkVSWSBXSUxMSUFNIEpcIixcIkRPQ0lEXCI6XCIxMDM2MDEzMFwiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE0LTgzNjBcIixcIkZJTElOR0RBVEVcIjpcIjIwMTQtMTItMTUgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwMzYwMTMwXCIsXCJIVE1MU0laRVwiOlwiMjUwMDlcIixcIklEXCI6XCI0M1wiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE0LTgzNjAmY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyNDg4OFwiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE0LTEyLTE1IDE3OjQ5OjQwXCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwMzYwMTMwXCIsXCJTSVpFXCI6XCI1MTU5XCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDM2MDEzMFwiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDM2MDEzMFwifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIkNPUk5FTElPIENIQVJMRVMgQ1wiLFwiRE9DSURcIjpcIjEwMzUzMzk5XCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTQtODMwMFwiLFwiRklMSU5HREFURVwiOlwiMjAxNC0xMi0xMSAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTAzNTMzOTlcIixcIkhUTUxTSVpFXCI6XCIzMzQ1MFwiLFwiSURcIjpcIjQ0XCIsXCJQREZMSU5LXCI6XCJodHRwOi8vaW52ZXN0b3Iuc2hhcmVob2xkZXIuY29tL2NvbW1vbi9kb3dubG9hZC9zZWMuY2ZtP2NvbXBhbnlpZD1MTkMmZmlkPTEyMTQ2NTktMTQtODMwMCZjaWs9NTk1NThcIixcIlBERlNJWkVcIjpcIjI3MDY3XCIsXCJSRUNFSVZFRERBVEVcIjpcIjIwMTQtMTItMTEgMTI6MDQ6MTBcIixcIlJURlwiOlwiVHJ1ZVwiLFwiUlRGTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9cnRmJmNvbXBhbnlpZD1MTkMmaWQ9MTAzNTMzOTlcIixcIlNJWkVcIjpcIjk4OTNcIixcIlRPVEFMUkVDT1JEU1wiOlwiMTQ1NFwiLFwiWEJSTFwiOlwiRmFsc2VcIixcIlhCUkxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL1hCUkxOYXYuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwMzUzMzk5XCIsXCJYTFNcIjpcIlRydWVcIixcIlhMU0xJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXhscyZjb21wYW55aWQ9TE5DJmlkPTEwMzUzMzk5XCJ9LHtcIkNJS1wiOlwiNTk1NThcIixcIkNPTVBBTllOQU1FXCI6XCJMaW5jb2xuIE5hdGlvbmFsIENvcnBvcmF0aW9uXCIsXCJERVNDUklQVElPTlwiOlwiTEFDSE1BTiBNIExFQU5ORVwiLFwiRE9DSURcIjpcIjEwMzQ1MjMyXCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTQtODIxNFwiLFwiRklMSU5HREFURVwiOlwiMjAxNC0xMi0wNSAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTAzNDUyMzJcIixcIkhUTUxTSVpFXCI6XCIyNjUwNFwiLFwiSURcIjpcIjQ1XCIsXCJQREZMSU5LXCI6XCJodHRwOi8vaW52ZXN0b3Iuc2hhcmVob2xkZXIuY29tL2NvbW1vbi9kb3dubG9hZC9zZWMuY2ZtP2NvbXBhbnlpZD1MTkMmZmlkPTEyMTQ2NTktMTQtODIxNCZjaWs9NTk1NThcIixcIlBERlNJWkVcIjpcIjIyODY5XCIsXCJSRUNFSVZFRERBVEVcIjpcIjIwMTQtMTItMDUgMTY6NDA6MTdcIixcIlJURlwiOlwiVHJ1ZVwiLFwiUlRGTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9cnRmJmNvbXBhbnlpZD1MTkMmaWQ9MTAzNDUyMzJcIixcIlNJWkVcIjpcIjYwOTBcIixcIlRPVEFMUkVDT1JEU1wiOlwiMTQ1NFwiLFwiWEJSTFwiOlwiRmFsc2VcIixcIlhCUkxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL1hCUkxOYXYuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwMzQ1MjMyXCIsXCJYTFNcIjpcIlRydWVcIixcIlhMU0xJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXhscyZjb21wYW55aWQ9TE5DJmlkPTEwMzQ1MjMyXCJ9LHtcIkNJS1wiOlwiNTk1NThcIixcIkNPTVBBTllOQU1FXCI6XCJMaW5jb2xuIE5hdGlvbmFsIENvcnBvcmF0aW9uXCIsXCJERVNDUklQVElPTlwiOlwiS09ORU4gTUFSSyBFXCIsXCJET0NJRFwiOlwiMTAzMjUzMDBcIixcIkRPQ1RZUEVcIjpcIjRcIixcIkZJRFwiOlwiMTIxNDY1OS0xNC03OTQxXCIsXCJGSUxJTkdEQVRFXCI6XCIyMDE0LTExLTI0IDAwOjAwOjAwXCIsXCJIVE1MTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy92aWV3ZXJDb250ZW50LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDMyNTMwMFwiLFwiSFRNTFNJWkVcIjpcIjUxMjgxXCIsXCJJRFwiOlwiNDZcIixcIlBERkxJTktcIjpcImh0dHA6Ly9pbnZlc3Rvci5zaGFyZWhvbGRlci5jb20vY29tbW9uL2Rvd25sb2FkL3NlYy5jZm0/Y29tcGFueWlkPUxOQyZmaWQ9MTIxNDY1OS0xNC03OTQxJmNpaz01OTU1OFwiLFwiUERGU0laRVwiOlwiMzA0MjhcIixcIlJFQ0VJVkVEREFURVwiOlwiMjAxNC0xMS0yNCAxNDoxNDo1OVwiLFwiUlRGXCI6XCJUcnVlXCIsXCJSVEZMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj1ydGYmY29tcGFueWlkPUxOQyZpZD0xMDMyNTMwMFwiLFwiU0laRVwiOlwiMjExMjlcIixcIlRPVEFMUkVDT1JEU1wiOlwiMTQ1NFwiLFwiWEJSTFwiOlwiRmFsc2VcIixcIlhCUkxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL1hCUkxOYXYuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwMzI1MzAwXCIsXCJYTFNcIjpcIlRydWVcIixcIlhMU0xJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXhscyZjb21wYW55aWQ9TE5DJmlkPTEwMzI1MzAwXCJ9LHtcIkNJS1wiOlwiNTk1NThcIixcIkNPTVBBTllOQU1FXCI6XCJMaW5jb2xuIE5hdGlvbmFsIENvcnBvcmF0aW9uXCIsXCJERVNDUklQVElPTlwiOlwiTUlMTEVSIERPVUdMQVMgTlwiLFwiRE9DSURcIjpcIjEwMzIyNTUzXCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTQtNzkyM1wiLFwiRklMSU5HREFURVwiOlwiMjAxNC0xMS0yMSAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTAzMjI1NTNcIixcIkhUTUxTSVpFXCI6XCIyNzMyOVwiLFwiSURcIjpcIjQ3XCIsXCJQREZMSU5LXCI6XCJodHRwOi8vaW52ZXN0b3Iuc2hhcmVob2xkZXIuY29tL2NvbW1vbi9kb3dubG9hZC9zZWMuY2ZtP2NvbXBhbnlpZD1MTkMmZmlkPTEyMTQ2NTktMTQtNzkyMyZjaWs9NTk1NThcIixcIlBERlNJWkVcIjpcIjI0ODk5XCIsXCJSRUNFSVZFRERBVEVcIjpcIjIwMTQtMTEtMjEgMTQ6MTE6NTRcIixcIlJURlwiOlwiVHJ1ZVwiLFwiUlRGTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9cnRmJmNvbXBhbnlpZD1MTkMmaWQ9MTAzMjI1NTNcIixcIlNJWkVcIjpcIjU2NzJcIixcIlRPVEFMUkVDT1JEU1wiOlwiMTQ1NFwiLFwiWEJSTFwiOlwiRmFsc2VcIixcIlhCUkxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL1hCUkxOYXYuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwMzIyNTUzXCIsXCJYTFNcIjpcIlRydWVcIixcIlhMU0xJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXhscyZjb21wYW55aWQ9TE5DJmlkPTEwMzIyNTUzXCJ9LHtcIkNJS1wiOlwiNTk1NThcIixcIkNPTVBBTllOQU1FXCI6XCJMaW5jb2xuIE5hdGlvbmFsIENvcnBvcmF0aW9uXCIsXCJERVNDUklQVElPTlwiOlwiS09ORU4gTUFSSyBFXCIsXCJET0NJRFwiOlwiMTAzMjI1NTFcIixcIkRPQ1RZUEVcIjpcIjRcIixcIkZJRFwiOlwiMTIxNDY1OS0xNC03OTIyXCIsXCJGSUxJTkdEQVRFXCI6XCIyMDE0LTExLTIxIDAwOjAwOjAwXCIsXCJIVE1MTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy92aWV3ZXJDb250ZW50LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDMyMjU1MVwiLFwiSFRNTFNJWkVcIjpcIjI5NjU4XCIsXCJJRFwiOlwiNDhcIixcIlBERkxJTktcIjpcImh0dHA6Ly9pbnZlc3Rvci5zaGFyZWhvbGRlci5jb20vY29tbW9uL2Rvd25sb2FkL3NlYy5jZm0/Y29tcGFueWlkPUxOQyZmaWQ9MTIxNDY1OS0xNC03OTIyJmNpaz01OTU1OFwiLFwiUERGU0laRVwiOlwiMjU0NjFcIixcIlJFQ0VJVkVEREFURVwiOlwiMjAxNC0xMS0yMSAxNDoxMTo1M1wiLFwiUlRGXCI6XCJUcnVlXCIsXCJSVEZMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj1ydGYmY29tcGFueWlkPUxOQyZpZD0xMDMyMjU1MVwiLFwiU0laRVwiOlwiNjM5NVwiLFwiVE9UQUxSRUNPUkRTXCI6XCIxNDU0XCIsXCJYQlJMXCI6XCJGYWxzZVwiLFwiWEJSTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvWEJSTE5hdi5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTAzMjI1NTFcIixcIlhMU1wiOlwiVHJ1ZVwiLFwiWExTTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9eGxzJmNvbXBhbnlpZD1MTkMmaWQ9MTAzMjI1NTFcIn0se1wiQ0lLXCI6XCI1OTU1OFwiLFwiQ09NUEFOWU5BTUVcIjpcIkxpbmNvbG4gTmF0aW9uYWwgQ29ycG9yYXRpb25cIixcIkRFU0NSSVBUSU9OXCI6XCJDT1JORUxJTyBDSEFSTEVTIENcIixcIkRPQ0lEXCI6XCIxMDMyMjU1MFwiLFwiRE9DVFlQRVwiOlwiNFwiLFwiRklEXCI6XCIxMjE0NjU5LTE0LTc5MjFcIixcIkZJTElOR0RBVEVcIjpcIjIwMTQtMTEtMjEgMDA6MDA6MDBcIixcIkhUTUxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL3ZpZXdlckNvbnRlbnQuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwMzIyNTUwXCIsXCJIVE1MU0laRVwiOlwiMjY0NjdcIixcIklEXCI6XCI0OVwiLFwiUERGTElOS1wiOlwiaHR0cDovL2ludmVzdG9yLnNoYXJlaG9sZGVyLmNvbS9jb21tb24vZG93bmxvYWQvc2VjLmNmbT9jb21wYW55aWQ9TE5DJmZpZD0xMjE0NjU5LTE0LTc5MjEmY2lrPTU5NTU4XCIsXCJQREZTSVpFXCI6XCIyMzI2MlwiLFwiUkVDRUlWRUREQVRFXCI6XCIyMDE0LTExLTIxIDE0OjExOjUzXCIsXCJSVEZcIjpcIlRydWVcIixcIlJURkxJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXJ0ZiZjb21wYW55aWQ9TE5DJmlkPTEwMzIyNTUwXCIsXCJTSVpFXCI6XCI1NDI4XCIsXCJUT1RBTFJFQ09SRFNcIjpcIjE0NTRcIixcIlhCUkxcIjpcIkZhbHNlXCIsXCJYQlJMTElOS1wiOlwiaHR0cDovL2FwcHMuc2hhcmVob2xkZXIuY29tL3NlYy9YQlJMTmF2LmFzcHg/Y29tcGFueWlkPUxOQyZkb2NpZD0xMDMyMjU1MFwiLFwiWExTXCI6XCJUcnVlXCIsXCJYTFNMSU5LXCI6XCJodHRwOi8vd3d3LnNoYXJlaG9sZGVyLmNvbS92aXNpdG9ycy9hY3RpdmVlZGdhcmRvYy5jZm0/Zj14bHMmY29tcGFueWlkPUxOQyZpZD0xMDMyMjU1MFwifSx7XCJDSUtcIjpcIjU5NTU4XCIsXCJDT01QQU5ZTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3Jwb3JhdGlvblwiLFwiREVTQ1JJUFRJT05cIjpcIkNPUk5FTElPIENIQVJMRVMgQ1wiLFwiRE9DSURcIjpcIjEwMjg2Njk5XCIsXCJET0NUWVBFXCI6XCI0XCIsXCJGSURcIjpcIjEyMTQ2NTktMTQtNzQ2MFwiLFwiRklMSU5HREFURVwiOlwiMjAxNC0xMS0wNiAwMDowMDowMFwiLFwiSFRNTExJTktcIjpcImh0dHA6Ly9hcHBzLnNoYXJlaG9sZGVyLmNvbS9zZWMvdmlld2VyQ29udGVudC5hc3B4P2NvbXBhbnlpZD1MTkMmZG9jaWQ9MTAyODY2OTlcIixcIkhUTUxTSVpFXCI6XCIyODEyMFwiLFwiSURcIjpcIjUwXCIsXCJQREZMSU5LXCI6XCJodHRwOi8vaW52ZXN0b3Iuc2hhcmVob2xkZXIuY29tL2NvbW1vbi9kb3dubG9hZC9zZWMuY2ZtP2NvbXBhbnlpZD1MTkMmZmlkPTEyMTQ2NTktMTQtNzQ2MCZjaWs9NTk1NThcIixcIlBERlNJWkVcIjpcIjI2MDg3XCIsXCJSRUNFSVZFRERBVEVcIjpcIjIwMTQtMTEtMDYgMTY6MDA6MTFcIixcIlJURlwiOlwiVHJ1ZVwiLFwiUlRGTElOS1wiOlwiaHR0cDovL3d3dy5zaGFyZWhvbGRlci5jb20vdmlzaXRvcnMvYWN0aXZlZWRnYXJkb2MuY2ZtP2Y9cnRmJmNvbXBhbnlpZD1MTkMmaWQ9MTAyODY2OTlcIixcIlNJWkVcIjpcIjYzNTRcIixcIlRPVEFMUkVDT1JEU1wiOlwiMTQ1NFwiLFwiWEJSTFwiOlwiRmFsc2VcIixcIlhCUkxMSU5LXCI6XCJodHRwOi8vYXBwcy5zaGFyZWhvbGRlci5jb20vc2VjL1hCUkxOYXYuYXNweD9jb21wYW55aWQ9TE5DJmRvY2lkPTEwMjg2Njk5XCIsXCJYTFNcIjpcIlRydWVcIixcIlhMU0xJTktcIjpcImh0dHA6Ly93d3cuc2hhcmVob2xkZXIuY29tL3Zpc2l0b3JzL2FjdGl2ZWVkZ2FyZG9jLmNmbT9mPXhscyZjb21wYW55aWQ9TE5DJmlkPTEwMjg2Njk5XCJ9XX0sXCJTVEFUVVNcIjpcIk5vIEVycm9yXCIsXCJTVEFUVVNDT0RFXCI6XCIwXCJ9fScsXHJcbiAgICAnZm9ybVBvc3RVcmwnICAgICAgIDogJy9wYmwtZW1haWwtc2VydmljZS1hcHAvcmVzdC9zZWN1cmVFbWFpbC9zZW5kRW1haWwnLFxyXG4gICAgJ3NlYXJjaFVSTCcgICAgICAgICA6ICcvc3RhdGljL3djcy9sZmcvbW9jay9kYXRhZmlsZV9hZHZpc29yRGF0YS54bWwnLFxyXG4gICAgJ2xpZmVFeHBlY3RhbmN5Q2FsYyc6ICcvcGJsLWNhbGMtc2VydmljZS1hcHAvcmVzdC9jYWxjL2xpZmVFeHBlY3RhbmN5JyxcclxuICAgICdsbGF2YVJlZGlyZWN0JzogJy9wdWJsaWMvbGV2ZWxhZHZhbnRhZ2UvcmVkaXJlY3QnLFxyXG4gICAgJ2xsYXZhVG9vbFJlZGlyZWN0JzogJy9wdWJsaWMvbGV2ZWxhZHZhbnRhZ2UvdG9vbC9yZWRpcmVjdCcsXHJcbiAgICAnaGlzdG9yaWNhbFByaWNlcycgIDogJ3tcIkhJU1RPUklDU1RPQ0tRVU9URVwiOntcIi1ST1dDT1VOVFwiOlwiMVwiLFwiUkVTVUxUXCI6e1wiUk9XXCI6e1wiQ0xPU0VcIjpcIjU4LjE0XCIsXCJDVVNJUFwiOlwiNTM0MTg3MTA5XCIsXCJFWEFDVERBVEVcIjpcIjBcIixcIkhJR0hcIjpcIjU4LjE5NVwiLFwiTE9XXCI6XCI1Ni45MlwiLFwiTUlOUFJJQ0VEQVRFXCI6XCIxOTgwLTA3LTI4IDAwOjAwOjAwXCIsXCJNSU5ZRUFSXCI6XCIxOTgwXCIsXCJPUEVOXCI6XCI1Ny42XCIsXCJQUklDRURBVEVcIjpcIjIwMTUtMDQtMjIgMDA6MDA6MDBcIixcIlZPTFVNRVwiOlwiMTUyOTU2NVwifX0sXCJTVEFUVVNcIjpcIk5vIEVycm9yXCIsXCJTVEFUVVNDT0RFXCI6XCIwXCJ9fScsXHJcbiAgICAncXVvdGVzQW5kQ2hhcnRzJyAgIDogJ3tcIlNUT0NLUVVPVEVcIjp7XCItUk9XQ09VTlRcIjpcIjFcIixcIlJFU1VMVFwiOntcIlJPV1wiOntcIkFTS1wiOlwiNjAuMzcwXCIsXCJCSURcIjpcIjU3LjM1MFwiLFwiQ0hBTkdFXCI6XCIwLjcyMFwiLFwiREFURVRJTUVcIjpcIjIwMTUtMDQtMjAgMTY6MDI6NDFcIixcIkRJVklERU5EXCI6XCIwLjIwMFwiLFwiRVBTXCI6XCI1LjgxMFwiLFwiRVhDSEFOR0VcIjpcIk5ZU0VcIixcIkhJR0hcIjpcIjU3LjY5MFwiLFwiTEFTVERBVEVUSU1FXCI6XCIyMDE1LTA0LTIwIDE2OjAyOjQxXCIsXCJMQVNUUFJJQ0VcIjpcIjU3LjUxMFwiLFwiTE9OR05BTUVcIjpcIkxpbmNvbG4gTmF0aW9uYWwgQ29ycG9yYXRpb25cIixcIkxPV1wiOlwiNTYuOTYwXCIsXCJPUEVOXCI6XCI1Ny4xMzBcIixcIlBDSEFOR0VcIjpcIjEuMjY4XCIsXCJQRVwiOlwiOS4wMDBcIixcIlBSRVZJT1VTQ0xPU0VcIjpcIjU2Ljc5MFwiLFwiU0hBUkVTXCI6XCIyNTYwNDRcIixcIlNIT1JUTkFNRVwiOlwiTGluY29sbiBOYXRpb25hbCBDb3JwXCIsXCJUSUNLRVJcIjpcIkxOQ1wiLFwiVFJBREVTXCI6XCI4Njg1XCIsXCJWT0xVTUVcIjpcIjExOTc1MDBcIixcIllFQVJISUdIXCI6XCI2MC44NDBcIixcIllFQVJMT1dcIjpcIjQ1LjI1MFwiLFwiWUlFTERcIjpcIjEuNDA5XCJ9fSxcIlNUQVRVU1wiOlwiTm8gRXJyb3JcIixcIlNUQVRVU0NPREVcIjpcIjBcIn19JyxcclxuICAgICdsZmdTaXRlUGF0aCcgICAgICAgOiAnaHR0cHM6Ly93d3cubGZnLmNvbScsXHJcbiAgICAnYW5udWFsRmlsaW5nc1BhdGgnIDogJy9sZmcvRE9DUy9wZGYvJyxcclxuICAgICdwcm9kdWN0VHlwZScgICAgICAgOiBbJ1ZhcmlhYmxlIEFubnVpdHknLCAnVmFyaWFibGUgVW5pdmVyc2FsIExpZmUgSW5zdXJhbmNlJ11cclxufTsiLCIvKiBnbG9iYWwgJDpmYWxzZSwgalF1ZXJ5OmZhbHNlLCBNb2Rlcm5penI6ZmFsc2UgKi9cblxuLy8gdmFyIHBsYWNlaG9sZGVyQ29uZmlnID0ge1xuLy8gICAgaGlkZU9uRm9jdXMgOiBmYWxzZVxuLy8gfTtcblxuJ3VzZSBzdHJpY3QnO1xuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgJC5tbHAgPSB7XG4gICAgJ3gnOiAwLFxuICAgICd5JzogMFxuICB9OyAvLyBNb3VzZSBMYXN0IFBvc2l0aW9uXG4gIGZ1bmN0aW9uIGRvY3VtZW50SGFuZGxlcigpIHtcbiAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgICBpZiAoISQodGhpcykuaXMoJ2lmcmFtZScpKSB7XG4gICAgICB2YXIgJGN1cnJlbnQgPSB0aGlzID09PSBkb2N1bWVudCA/ICQodGhpcykgOiAkKHRoaXMpLmNvbnRlbnRzKCk7XG5cbiAgICAgICRjdXJyZW50Lm1vdXNlbW92ZShmdW5jdGlvbihlKSB7XG4gICAgICAgIGpRdWVyeS5tbHAgPSB7XG4gICAgICAgICAgJ3gnOiBlLnBhZ2VYLFxuICAgICAgICAgICd5JzogZS5wYWdlWVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gICQoZG9jdW1lbnRIYW5kbGVyKTtcbiAgJC5mbi5pc21vdXNlb3ZlciA9IGZ1bmN0aW9uKC8qIG92ZXJUaGlzKi8pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICB0aGlzLmVxKDApLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgJGN1cnJlbnQgPSAkKHRoaXMpLmlzKCdpZnJhbWUnKSA/ICQodGhpcykuY29udGVudHMoKS5maW5kKCdib2R5JykgOiAkKHRoaXMpO1xuICAgICAgdmFyIG9mZnNldCA9ICRjdXJyZW50Lm9mZnNldCgpO1xuXG4gICAgICByZXN1bHQgPSBvZmZzZXQubGVmdCA8PSAkLm1scC54ICYmIG9mZnNldC5sZWZ0ICsgJGN1cnJlbnQub3V0ZXJXaWR0aCgpID4gJC5tbHAueFxuICAgICAgICAmJiBvZmZzZXQudG9wIDw9ICQubWxwLnkgJiYgb2Zmc2V0LnRvcCArICRjdXJyZW50Lm91dGVySGVpZ2h0KCkgPiAkLm1scC55O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgaW5pdERhdGFEcml2ZW5FbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgICQoJ1tkYXRhLXRvZ2dsZV0nKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRyaWdnZXIgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtdG9nZ2xlJyk7XG5cbiAgICAgIHN3aXRjaCAodHJpZ2dlcikge1xuICAgICAgICBjYXNlICdtYXRjaEhlaWdodHMnOlxuICAgICAgICAgICQodGhpcykuZmluZCgnPiAqJykubWF0Y2hIZWlnaHQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZXhwYW5kYWJsZS1zZWFyY2gtZmllbGQnOlxuICAgICAgICAgICQodGhpcykuZXhwYW5kYWJsZVNlYXJjaEZpZWxkKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2xpc3QtcHVsbGRvd24nOlxuICAgICAgICAgICQodGhpcykubGlzdFB1bGxkb3duKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2ltYWdlZmlsbCc6IC8vIG5vdCBjdXJyZW50bHkgdXNlZFxuICAgICAgICAgICQodGhpcykuaW1hZ2VGaWxsKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NvbnRlbnQtZXh0ZW5kZXInOlxuICAgICAgICAgICQodGhpcykuY29udGVudEV4dGVuZGVyKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Ryb3Bkb3duJzpcbiAgICAgICAgICAkKHRoaXMpLnVJRHJvcGRvd24oKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYWNjb3JkaW9uJzpcbiAgICAgICAgICAkKHRoaXMpLnVJQWNjb3JkaW9uKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RhYnNldCc6XG4gICAgICAgICAgJCh0aGlzKS51SVRhYlNldCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgdG9nZ2xlIGZvciB0cmlnZ2VyOicsIHRyaWdnZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBtb2Rlcm5pemUgPSBmdW5jdGlvbigpIHtcbiAgICBNb2Rlcm5penIuYWRkVGVzdCgncGljdHVyZScsICdIVE1MUGljdHVyZUVsZW1lbnQnIGluIHdpbmRvdyk7XG4gICAgTW9kZXJuaXpyLmFkZFRlc3QoJ3NyY3NldCcsICdzcmNzZXQnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpKTtcbiAgfTtcblxuICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICBpbml0RGF0YURyaXZlbkVsZW1lbnRzKCk7XG5cbiAgICBtb2Rlcm5pemUoKTtcblxuICAgIC8qIE1vZGVybml6ci5sb2FkKFtcbiAgICAgICAge1xuICAgICAgICAgICAgdGVzdDogTW9kZXJuaXpyLmlucHV0LnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgbm9wZTogW1xuICAgICAgICAgICAgICAgICdzY3JpcHRzL3ZlbmRvci9qcXVlcnkucGxhY2Vob2xkZXIubWluLmpzJ1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvKmpzaGludCAtVzAxOFxuICAgICAgICAgICAgICAgIC8vcHJldmVuZGluZyB0aGUgISEtcmVsYXRlZCBlcnJvciwgc2luY2Ugd2UgdXNlIGl0IGhlcmUgdGhlIHdheSB3ZSB3YW50XG4gICAgICAgICAgICAgICAgaWYgKCEhJC5mbi5wbGFjZWhvbGRlcj09PXRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnaW5wdXQsIHRleHRhcmVhJykucGxhY2Vob2xkZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlc3Q6IE1vZGVybml6ci5waWN0dXJlICYmIE1vZGVybml6ci5zcmNzZXQsXG4gICAgICAgICAgICBub3BlOiBbXG4gICAgICAgICAgICAgICAgJ3NjcmlwdHMvdmVuZG9yL3BpY3R1cmVmaWxsLm1pbi5qcydcbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgIF0pOyovXG5cbiAgICAvLyBpbWFnZSBmaWxsIGZvciBoZXJvIGltYWdlc1xuICAgIC8qICQoJy5IZXJvLWltYWdlLWhvbGRlcicpLmltZ0xpcXVpZCh7XG4gICAgICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgICAgICB1c2VCYWNrZ3JvdW5kU2l6ZTogZmFsc2UsXG4gICAgICAgIHJlc3BvbnNpdmVDaGVja1RpbWU6IDIwMDBcbiAgICB9KTsqL1xuXG4gICAgLy8gc2V0dGluZyB1cCBhdWRpZW5jZSBzZWxlY3RvciBwb3B1cFxuXG4gICAgLy8gYmVsb3cgaXMgZGVidWcgYW5kIGNvbmNlcHQvdGVzdGluZyBsZXZlbCBjb2RlLiBpdCBzaG91bGQgYmUgZGlzYWJsZWQgYmVmb3JlIGdvaW5nIGludG8gcHJvZHVjdGlvblxuICAgIC8vIHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgIC8vICAgIC8qanNoaW50IGRldmVsOnRydWUgKi9cbiAgICAvLyAgICBjb25zb2xlLmxvZygnRm9jdXM6JywgJCgnOmZvY3VzJylbMF0pO1xuICAgIC8vIH0sIDMwMDApO1xuXG4gICAgLy8gJCgnLlRvcGhlYWRlci1sb2dvJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgIC8vICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAvLyAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gJ3RlbXBsYXRlLWxhbmRpbmctJytkb2N1bWVudC5fX3NlY3Rpb24rJy5odG1sJztcbiAgICAvLyB9KTtcblxuICAgIC8qICQoJy5Ub3BoZWFkZXItbG9nbycpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gJ3RlbXBsYXRlLWxhbmRpbmctJytsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFzdC1zZWN0aW9uJykrJy5odG1sJztcbiAgICB9KTtcblxuICAgIGlmICghIWRvY3VtZW50Ll9fc2VjdGlvbikge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbGFzdC1zZWN0aW9uJywgZG9jdW1lbnQuX19zZWN0aW9uKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZygnU2V0dGluZyBsYXN0IHNlY3Rpb24gdG86JywgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhc3Qtc2VjdGlvbicpKTtcbiAgICB9Ki9cbiAgfSk7XG59KTsiLCIoZnVuY3Rpb24oJCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBfdW5pcXVlSUQgPSAwO1xuXG4gICAgJC5mbi5nZXRVbmlxdWVJRCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKCsrX3VuaXF1ZUlEKTtcbiAgICB9O1xuICAgICQuZm4uZ2V0TGFzdFVuaXF1ZUlEID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAoX3VuaXF1ZUlEKTtcbiAgICB9O1xufSkoalF1ZXJ5KTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBjYWxsb3V0R3JpZFdpdGhGaWx0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgVElMRVNfVE9fU0hPVyA9IDY7IC8vIGluY3JlbWVudCBieSB3aGljaCB0aWxlcyBhcmUgc2hvd25cbiAgICB2YXIgaXNNb2JpbGUgPSB3aW5kb3cubWF0Y2hNZWRpYSgnb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2MHB4KScpO1xuXG4gICAgLy8gcG9wdWxhdGUgZHJvcGRvd25cbiAgICB2YXIgX2NhdGVnb3J5TGlzdCA9IHdpbmRvdy5jYXRlZ29yeUxpc3QgPyB3aW5kb3cuY2F0ZWdvcnlMaXN0IDogW107XG4gICAgdmFyIF9zdWJDYXRlZ29yeUxpc3QgPSBbXTtcblxuICAgIC8vICQoXCIjc3ViQ2F0ZWdvcnlEaXZcIikuY3NzKHtcImRpc3BsYXlcIiA6IFwibm9uZVwifSk7XG5cbiAgICAkKCcuZ3JpZC1ibG9jay0yY29sdW1uIHVsLmN1c3RvbS1zZWxlY3Rib3gtbGlzdC1jb250JykuYXBwZW5kKCc8bGkgdGFiaW5kZXg9XCIwXCI+QWxsPC9saT4nKTsgLy8gQURBXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfY2F0ZWdvcnlMaXN0LnNvcnQoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoX2NhdGVnb3J5TGlzdFtpXSAhPSBfY2F0ZWdvcnlMaXN0W2kgLSAxXSkge1xuICAgICAgICAgICAgJCgnLmdyaWQtYmxvY2stMmNvbHVtbiB1bCNDYXRlZ29yeScpLmFwcGVuZCgnPGxpIHRhYmluZGV4PVwiMFwiPicgKyBfY2F0ZWdvcnlMaXN0W2ldICsgJzwvbGk+Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxsb3V0RmlsdGVyKGZpbHRlciwgZmlsdGVyU3ViQ2F0KSB7XG4gICAgICAgIHZhciB2aXNpYmxlVGlsZUNvdW50ID0gMDtcbiAgICAgICAgdmFyIG1hdGNoZWRDb3VudCA9IDA7XG5cbiAgICAgICAgJCgnLmdyaWQtYmxvY2stMmNvbHVtbi1jYXRlZ29yeSBkaXYuY2FsbG91dC1ncmlkLWl0ZW0nKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRpbGVDYXQgPSAkKHRoaXMpLmZpbmQoJ2hlYWRlcicpLnRleHQoKS50cmltKCk7XG4gICAgICAgICAgICB2YXIgc3ViVGlsZUNhdCA9ICQodGhpcykuZmluZCgnc3ViaGVhZGVyJykudGV4dCgpLnRyaW0oKTtcblxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJ2aXNpYmxlVGlsZUNvdW50XCIsdmlzaWJsZVRpbGVDb3VudCk7XG5cbiAgICAgICAgICAgIGlmIChmaWx0ZXIgPT0gJ2FsbCcgfHwgKHRpbGVDYXQudG9Mb3dlckNhc2UoKSA9PSBmaWx0ZXIgJiYgc3ViVGlsZUNhdC50b0xvd2VyQ2FzZSgpID09IGZpbHRlclN1YkNhdClcbiAgICB8fCAodGlsZUNhdC50b0xvd2VyQ2FzZSgpID09IGZpbHRlciAmJiBmaWx0ZXJTdWJDYXQgPT0gJ2FsbCcpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZpc2libGVUaWxlQ291bnQgPCBUSUxFU19UT19TSE9XKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01vYmlsZS5tYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgnbGknKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5JyAgIDogJ2Jsb2NrJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVyLXRvcCc6ICcxcHggc29saWQgI2RjZGVlMCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoJ2xpOmZpcnN0LWNoaWxkJykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVyLXRvcCc6ICdub25lJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmlzaWJsZVRpbGVDb3VudCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKCdmaWd1cmUnKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICdibG9jaydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKCdmaWd1cmUnKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgnbGknKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5JzogJ2xpc3QtaXRlbSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGVUaWxlQ291bnQrKztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgnbGknKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgnbGknKS5hZGRDbGFzcygncXVldWVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1hdGNoZWRDb3VudCsrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgnbGknKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCdsaScpLnJlbW92ZUNsYXNzKCdxdWV1ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghaXNNb2JpbGUubWF0Y2hlcykge1xuICAgICAgICAgICAgc2V0Um93SGVpZ2h0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoZWRDb3VudCA+IFRJTEVTX1RPX1NIT1cpIHtcbiAgICAgICAgICAgICQoJyNsb2FkTW9yZUNhdGVnb3JpZXMnKS5zaG93KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKCcjbG9hZE1vcmVDYXRlZ29yaWVzJykuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0Um93SGVpZ2h0KCkge1xuICAgICAgICAkKCcjY2F0ZWdvcnlUaWxlIGxpJykuY3NzKCdoZWlnaHQnLCAnJyk7XG4gICAgICAgICQoJyNjYXRlZ29yeVRpbGUgbGk6dmlzaWJsZScpLmVhY2goZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgIGlmICgoaW5kZXggKyAxKSAlIDIgPiAwKSB7XG4gICAgICAgICAgICAgICAgbGVmdFRpbGUgPSAkKHRoaXMpOyAvLyBvZGQgaXRlbXNcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmlnaHRUaWxlID0gJCh0aGlzKTsgLy8gZXZlbiBpdGVtc1xuXG4gICAgICAgICAgICAgICAgaWYgKHJpZ2h0VGlsZS5oZWlnaHQoKSA8IGxlZnRUaWxlLmhlaWdodCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0VGlsZS5jc3MoJ2hlaWdodCcsIGxlZnRUaWxlLmhlaWdodCgpICsgJ3B4Jyk7XG4gICAgICAgICAgICAgICAgICAgIGxlZnRUaWxlLmNzcygnaGVpZ2h0JywgbGVmdFRpbGUuaGVpZ2h0KCkgKyAncHgnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJpZ2h0VGlsZS5oZWlnaHQoKSA+IGxlZnRUaWxlLmhlaWdodCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnRUaWxlLmNzcygnaGVpZ2h0JywgcmlnaHRUaWxlLmhlaWdodCgpICsgJ3B4Jyk7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0VGlsZS5jc3MoJ2hlaWdodCcsIHJpZ2h0VGlsZS5oZWlnaHQoKSArICdweCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gbG9hZCBtb3JlIGJ1dHRvbiBmdW5jdGlvbmFsaXR5XG4gICAgZnVuY3Rpb24gbG9hZE1vcmUoKSB7XG4gICAgICAgIHZhciBzaG93UXR5ID0gVElMRVNfVE9fU0hPVztcblxuICAgICAgICAkKCcjY2F0ZWdvcnlUaWxlIGxpLnF1ZXVlZDpsdCgnICsgc2hvd1F0eSArICcpJykuc2hvdygpO1xuICAgICAgICAkKCcjY2F0ZWdvcnlUaWxlIGxpLnF1ZXVlZDpsdCgnICsgc2hvd1F0eSArICcpJykucmVtb3ZlQ2xhc3MoJ3F1ZXVlZCcpO1xuICAgICAgICBpZiAoIWlzTW9iaWxlLm1hdGNoZXMpIHtcbiAgICAgICAgICAgIHNldFJvd0hlaWdodCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkKCcjY2F0ZWdvcnlUaWxlIGxpLnF1ZXVlZCcpLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAkKCcjbG9hZE1vcmVDYXRlZ29yaWVzJykuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2VhcmNoIGZvciB1cmwgcHJlZmlsdGVyXG4gICAgdmFyIHVybFBhcmFtcyA9IGxvY2F0aW9uLnNlYXJjaC5zcGxpdCgnJicpO1xuXG4gICAgaWYgKHVybFBhcmFtcy5pbmRleE9mKCdwcmVmaWx0ZXInKSA+IC0xKSB7XG4gICAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgdXJsUGFyYW1zLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICBpZiAodXJsUGFyYW1zW3BdLmluZGV4T2YoJ3ByZWZpbHRlcicpID4gLTEpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFpciA9IHVybFBhcmFtc1twXS5zcGxpdCgnPScpO1xuICAgICAgICAgICAgICAgIHZhciB1cmxDYXQgPSBwYWlyWzFdO1xuXG4gICAgICAgICAgICAgICAgaWYgKHVybENhdCAhPSAnJykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsb3V0RmlsdGVyKHVybENhdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbG91dEZpbHRlcignYWxsJyk7XG4gICAgfVxuXG4gICAgLy8gYXR0YWNoIGNsaWNrIG9uIGRyb3Bkb3duIHNlbGVjdGlvbnNcbiAgICAkKCcuZ3JpZC1ibG9jay0yY29sdW1uIHVsI0NhdGVnb3J5IGxpJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkcm9wZG93bkNhdCA9ICQodGhpcykudGV4dCgpO1xuXG4gICAgICAgICQoJyNzdWJDYXRlZ29yeURpdicpLmNzcyh7XG4gICAgICAgICAgICAnZGlzcGxheSc6ICdub25lJ1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKF9jYXRlZ29yeUxpc3RbZHJvcGRvd25DYXRdICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKF9jYXRlZ29yeUxpc3RbZHJvcGRvd25DYXRdLmxlbmd0aCA+IDEgfHwgKF9jYXRlZ29yeUxpc3RbZHJvcGRvd25DYXRdLmxlbmd0aCA9PSAxICYmIF9jYXRlZ29yeUxpc3RbZHJvcGRvd25DYXRdXG4gICAgICAgICAgICAgICAgWzBdICE9ICdBbGwnKSkge1xuICAgICAgICAgICAgICAgIF9zdWJDYXRlZ29yeUxpc3QgPSBfY2F0ZWdvcnlMaXN0W2Ryb3Bkb3duQ2F0XTtcbiAgICAgICAgICAgICAgICAkKCcuZ3JpZC1ibG9jay0yY29sdW1uIHVsI3N1YkNhdGVnb3J5JykuZW1wdHkoKTtcbiAgICAgICAgICAgICAgICAkKCcjc3ViQ2F0ZWdvcnlEaXYnKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICdibG9jaydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAkKCcjc3ViQ2F0ZWdvcnlEaXYgZGl2LmN1c3RvbS1zZWxlY3Rib3guY29udGFjdFN0YXRlLm5nLXJlcHQtZWxlbWVudC1kaXYnKS5odG1sKCdBbGwnKTtcbiAgICAgICAgICAgICAgICAkKCcuZ3JpZC1ibG9jay0yY29sdW1uIHVsI3N1YkNhdGVnb3J5JykuYXBwZW5kKCc8bGkgdGFiaW5kZXg9XCIwXCI+QWxsPC9saT4nKTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3N1YkNhdGVnb3J5TGlzdC5zb3J0KCkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9zdWJDYXRlZ29yeUxpc3RbaV0gIT0gJ0FsbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5ncmlkLWJsb2NrLTJjb2x1bW4gdWwjc3ViQ2F0ZWdvcnknKS5hcHBlbmQoJzxsaSB0YWJpbmRleD1cIjBcIj4nICsgX3N1YkNhdGVnb3J5TGlzdFtpXSArICc8L2xpPicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJCgnLmdyaWQtYmxvY2stMmNvbHVtbiB1bCNzdWJDYXRlZ29yeSBsaScpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3ViRHJvcGRvd25DYXQgPSAkKHRoaXMpLnRleHQoKS50cmltKCkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgICAgICAgICBjYWxsb3V0RmlsdGVyKGRyb3Bkb3duQ2F0LnRyaW0oKS50b0xvd2VyQ2FzZSgpLCBzdWJEcm9wZG93bkNhdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJjbGlja2VkIGNhdDpcIitzdWJEcm9wZG93bkNhdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2FsbG91dEZpbHRlcihkcm9wZG93bkNhdC50cmltKCkudG9Mb3dlckNhc2UoKSwgJ2FsbCcpO1xuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiY2xpY2tlZCBjYXQ6XCIrZHJvcGRvd25DYXQpO1xuICAgIH0pO1xuXG4gICAgLy8gYWRkIGFuYWx5dGljcyB0byB0aWxlIGxpbmtzXG4gICAgJCgnLmNhbGxvdXQtZ3JpZC1pdGVtIGEnKS5jbGljayhmdW5jdGlvbihldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgY2xpY2tlZENhdCA9ICQodGhpcykuY2xvc2VzdCgnZGl2JykuZmluZCgnaGVhZGVyJykudGV4dCgpLnRyaW0oKTtcbiAgICAgICAgdmFyIHVybCA9ICQodGhpcykuYXR0cignaHJlZicpO1xuICAgICAgICBpZiAoJCh0aGlzKS5hdHRyKCd0YXJnZXQnKSA9PSAnX2JsYW5rJykge1xuICAgICAgICAgICAgd2luZG93Lm9wZW4odXJsLCAnX2JsYW5rJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvKiAkKCcuZ3JpZC1ibG9jay0yY29sdW1uIHVsI0NhdGVnb3J5IGxpOmxhc3QtY2hpbGQnKS5vbignYmx1cicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAkKHRoaXMpLm5leHQoKS5mb2N1cygpO1xuICAgICAgICAkKHRoaXMpLnBhcmVudCgpLnNsaWRlVXAoNjAwKTtcbiAgICB9KTtcblxuICAgICQoJy5ncmlkLWJsb2NrLTJjb2x1bW4gdWwjc3ViQ2F0ZWdvcnkgbGk6bGFzdC1jaGlsZCcpLm9uKCdibHVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICQodGhpcykubmV4dCgpLmZvY3VzKCk7XG4gICAgICAgICQodGhpcykucGFyZW50KCkuc2xpZGVVcCg2MDApO1xuICAgIH0pOyovXG5cbiAgICAkKCcjbG9hZE1vcmVDYXRlZ29yaWVzJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIGxvYWRNb3JlKCk7XG4gICAgfSk7XG5cbiAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIWlzTW9iaWxlLm1hdGNoZXMpIHtcbiAgICAgICAgICAgIHNldFJvd0hlaWdodCgpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICBpZiAoJCgnLmdyaWQtYmxvY2stMmNvbHVtbiAuY3VzdG9tLXNlbGVjdGJveCcpWzBdKSB7XG4gICAgICAgIGNhbGxvdXRHcmlkV2l0aEZpbHRlcigpO1xuICAgIH1cbn0pO1xuXG5cblxuJCh3aW5kb3cpLmxvYWQoZnVuY3Rpb24oKXtcdFx0XG5cdCB2YXIgaXNNb2JpbGUgPSB3aW5kb3cubWF0Y2hNZWRpYSgnb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2MHB4KScpO1xuXHRpZiAoIWlzTW9iaWxlLm1hdGNoZXMpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAkKCcjY2F0ZWdvcnlUaWxlIGxpJykuY3NzKCdoZWlnaHQnLCAnJyk7XG5cdFx0JCgnI2NhdGVnb3J5VGlsZSBsaTp2aXNpYmxlJykuZWFjaChmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgaWYgKChpbmRleCArIDEpICUgMiA+IDApIHtcbiAgICAgICAgICAgICAgICBsZWZ0VGlsZSA9ICQodGhpcyk7IC8vIG9kZCBpdGVtc1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByaWdodFRpbGUgPSAkKHRoaXMpOyAvLyBldmVuIGl0ZW1zXG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxlZnRUaWxlICE9ICd1bmRlZmluZWQnICYmIHR5cGVvZiByaWdodFRpbGUgIT0gJ3VuZGVmaW5lZCcgXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAmJiBsZWZ0VGlsZSAhPSBudWxsICYmIHJpZ2h0VGlsZSAhPSBudWxsICYmIChyaWdodFRpbGUuaGVpZ2h0KCkgPCBsZWZ0VGlsZS5oZWlnaHQoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRUaWxlLmNzcygnaGVpZ2h0JywgbGVmdFRpbGUuaGVpZ2h0KCkgKyAncHgnKTtcbiAgICAgICAgICAgICAgICAgICAgbGVmdFRpbGUuY3NzKCdoZWlnaHQnLCBsZWZ0VGlsZS5oZWlnaHQoKSArICdweCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxlZnRUaWxlICE9ICd1bmRlZmluZWQnICYmIHR5cGVvZiByaWdodFRpbGUgIT0gJ3VuZGVmaW5lZCcgXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAmJiBsZWZ0VGlsZSAhPSBudWxsICYmIHJpZ2h0VGlsZSAhPSBudWxsICYmIChyaWdodFRpbGUuaGVpZ2h0KCkgPiBsZWZ0VGlsZS5oZWlnaHQoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdFRpbGUuY3NzKCdoZWlnaHQnLCByaWdodFRpbGUuaGVpZ2h0KCkgKyAncHgnKTtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRUaWxlLmNzcygnaGVpZ2h0JywgcmlnaHRUaWxlLmhlaWdodCgpICsgJ3B4Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gICAgbGZnYXBwLmNvbnRyb2xsZXIoJ2NvbW1lcmNpYWxSZWFsRXN0YXRlQ29udHJsJywgWyckc2NvcGUnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbigkc2NvcGUsICR0aW1lb3V0KSB7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuaXNOb1Jlc3VsdHMnKS5oaWRlKCk7XHJcbiAgICAgICAgJHNjb3BlLmNpdHlDb2RlcyA9IFtdO1xyXG5cclxuICAgICAgICAvKiB2YXIgY29tbWVyY2lhbFJlYWxFc3RhdGUgPSB7XHJcbiAgICAgICAgXHRcImNpdHlDb2RlTGlzdFwiOlxyXG4gICAgICAgIFx0e1xyXG4gICAgICAgIFx0XHRcInRuXCI6W1xyXG4gICAgICAgIFx0XHRcdHtcclxuICAgICAgICBcdFx0XHRcdFwib3JnTmFtZVwiOlwicGhvdG9uXCIsXHJcbiAgICAgICAgXHRcdFx0XHRcImFkZHJlc3NcIjpcIkRMRlwiLFxyXG4gICAgICAgIFx0XHRcdFx0XCJzdGF0ZVwiOlwiVGFtaWxuYWR1XCIsXHJcbiAgICAgICAgXHRcdFx0XHRcInN0YXRlQ29kZVwiOlwidG5cIlxyXG4gICAgICAgIFx0XHRcdH0sXHJcbiAgICAgICAgXHRcdFx0e1xyXG4gICAgICAgIFx0XHRcdFx0XCJvcmdOYW1lXCI6XCJwaG90b25cIixcclxuICAgICAgICBcdFx0XHRcdFwiYWRkcmVzc1wiOlwic2lydXNlcmlcIixcclxuICAgICAgICBcdFx0XHRcdFwic3RhdGVcIjpcIlRhbWlsbmFkdVwiLFxyXG4gICAgICAgIFx0XHRcdFx0XCJzdGF0ZUNvZGVcIjpcInRuXCJcclxuICAgICAgICBcdFx0XHR9XHJcbiAgICAgICAgXHRcdF0sXHJcbiAgICAgICAgXHRcdFwia2FcIjpbXHJcbiAgICAgICAgXHRcdFx0e1xyXG4gICAgICAgIFx0XHRcdFx0XCJvcmdOYW1lXCI6XCJwaG90b24xXCIsXHJcbiAgICAgICAgXHRcdFx0XHRcImFkZHJlc3NcIjpcIjEyMzEyMzFcIixcclxuICAgICAgICBcdFx0XHRcdFwic3RhdGVcIjpcImFzZGFzZFwiLFxyXG4gICAgICAgIFx0XHRcdFx0XCJzdGF0ZUNvZGVcIjpcImFzXCJcclxuICAgICAgICBcdFx0XHR9XHJcbiAgICAgICAgXHRcdF0sXHJcbiAgICAgICAgXHRcdFwia2xcIjpbXHJcbiAgICAgICAgXHRcdFx0e1xyXG4gICAgICAgIFx0XHRcdFx0XCJvcmdOYW1lXCI6XCJwaG90b24yXCIsXHJcbiAgICAgICAgXHRcdFx0XHRcImFkZHJlc3NcIjpudWxsLFxyXG4gICAgICAgIFx0XHRcdFx0XCJzdGF0ZVwiOm51bGwsXHJcbiAgICAgICAgXHRcdFx0XHRcInN0YXRlQ29kZVwiOm51bGxcclxuICAgICAgICBcdFx0XHR9XHJcbiAgICAgICAgXHRcdF1cclxuICAgICAgICBcdH1cclxuICAgICAgICB9OyovXHJcbiAgICAgICAgdmFyIHN0YXRlTmFtZUNvbnRyb2wgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZU1vZHVsZSA9IHtcclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBzdGF0ZU1vZHVsZS5jaGVja1N0YXRlRGF0YSA9IGZ1bmN0aW9uKG5hbWUsIHNjb3BlKSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goY29tbWVyY2lhbFJlYWxFc3RhdGUuY2l0eUNvZGVMaXN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IG5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc3RhdGUgPSB2YWx1ZVswXS5zdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlWzBdLmFkZHJlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmlzTm9SZXN1bHRzJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc3RhdGVEYXRhcy5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmlzTm9SZXN1bHRzJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc3RhdGVEYXRhcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGVNb2R1bGU7XHJcbiAgICAgICAgfSkoKTtcclxuXHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKGNvbW1lcmNpYWxSZWFsRXN0YXRlLmNpdHlDb2RlTGlzdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XHJcbiAgICAgICAgICAgICRzY29wZS5jaXR5Q29kZXMucHVzaChpbmRleCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCd1bC5jdXN0b20tc2VsZWN0Ym94LWxpc3QtY29udCBsaScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlRGF0YXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5lbGVtZW50KCcjbmV0d29ya1N0YXRlJykudGV4dCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICE9PSAnU2VsZWN0IGEgU3RhdGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlTmFtZUNvbnRyb2wuY2hlY2tTdGF0ZURhdGEoYW5ndWxhci5lbGVtZW50KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyNuZXR3b3JrU3RhdGUnKS50ZXh0KCksICRzY29wZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmlzTm9SZXN1bHRzJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIDIwMCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG59KSgpOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmxmZ2FwcC5jb250cm9sbGVyKCdMb25nVGVybUNhcmVGb3Jtc0NvbnRybCcsIFsnJHNjb3BlJywgJyRodHRwJywgJyR0aW1lb3V0JywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCkge1xyXG4gICAgJHNjb3BlLmluaXQgPSBmdW5jdGlvbihjYXRlTmFtZSkge1xyXG4gICAgICAgIC8vIGNvbW1vbkZ1bmN0aW9ucy5sb2FkZXJTaG93KCk7XHJcbiAgICAgICAgJGh0dHAucG9zdCgnL3BibC1mb3Jtcy1zZXJ2aWNlLWFwcC9yZXN0L2Zvcm1zL3NlYXJjaEZvcm1zJywge1xyXG4gICAgICAgICAgICAnaWRlbnRpdHknOiBnbG9iYWxDb25zdGFudC5mb3JtVG9vbENhdGVnb3JpZXNbY2F0ZU5hbWVdXHJcbiAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLnN0YXR1c01lc3NhZ2UgPT09ICdTdWNjZXNzJykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNhdGVnb3J5Rm9ybUxpc3QgPSBkYXRhLmZvcm1EZXRhaWxMaXN0O1xyXG4gICAgICAgICAgICAgICAgY29tbW9uRnVuY3Rpb25zLmNhbGxBY2NvcmRpb24oY2F0ZU5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgOiAnLCBkYXRhKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLyogJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFx0JHNjb3BlLmNhdGVnb3J5Rm9ybUxpc3QgPSBnbG9iYWxDb25zdGFudFtjYXRlTmFtZV0uZm9ybURldGFpbExpc3Q7XHJcbiAgICAgICAgXHRjb21tb25GdW5jdGlvbnMuY2FsbEFjY29yZGlvbihjYXRlTmFtZSk7XHJcbiAgICAgICAgfSwgMzAwMCk7ICovXHJcbiAgICB9O1xyXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24oJCkge1xuICAgICQuUGFnZVRpbWVsaW5lID0gZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgdmFyIGJhc2UgPSB0aGlzO1xuXG4gICAgICAgIGJhc2UuJGVsID0gJChlbCk7XG4gICAgICAgIGJhc2UuZWwgPSBlbDtcblxuICAgICAgICBiYXNlLiRlbC5kYXRhKCdQYWdlVGltZWxpbmUnLCBiYXNlKTtcblxuICAgICAgICB2YXIgY3VycmVudEJyZWFrcG9pbnQgPSAnJztcbiAgICAgICAgdmFyICRibG9ja3MgPSAkKCcuUGFnZVRpbWVsaW5lIC5QYWdlVGltZWxpbmUtVGltZWxpbmUgPiBkZCA+IGZpZ3VyZScpO1xuXG4gICAgICAgIHZhciB0aHJvdHRsZWRVcGRhdGVUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgdmFyIHRocm90dGxpbmdJblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICAgICAgLy8gdGhyb3R0bGluZyB1cGRhdGVzIG9uIHJlc2l6ZVxuICAgICAgICB2YXIgVEhST1RUTEVfTVNFQyA9IDI1MDtcblxuICAgICAgICBiYXNlLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGN1cnJlbnRCcmVha3BvaW50ID0gZGV0ZWN0Q3VycmVudEJyZWFrcG9pbnQoKTtcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdyZXNwb25zaXZlOnN0YXRlY2hhbmdlZCcsIG9uUmVzcG9uc2l2ZVN0YXRlY2hhbmdlZCk7XG5cbiAgICAgICAgICAgIGlmICgkYmxvY2tzLmxlbmd0aCA+IDAgJiYgY3VycmVudEJyZWFrcG9pbnQgIT09ICdtb2JpbGUnKSB7XG4gICAgICAgICAgICAgICAgd2lyZSgpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZUhlaWdodHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgdGhyb3R0bGVkVXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhyb3R0bGVkVXBkYXRlVGltZW91dCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3R0bGVkVXBkYXRlVGltZW91dCA9IHNldFRpbWVvdXQoY2hlY2tBbmRVcGRhdGUsIFRIUk9UVExFX01TRUMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaGVja0FuZFVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhyb3R0bGluZ0luUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIHRocm90dGxlZFVwZGF0ZVRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgdXBkYXRlSGVpZ2h0cygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciB3aXJlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZScsIHRocm90dGxlZFVwZGF0ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHVud2lyZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJGJsb2Nrcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICQodGhpcykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZScsIHRocm90dGxlZFVwZGF0ZSk7XG5cbiAgICAgICAgICAgIGNsZWFyVGhyb3R0bGluZygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjbGVhclRocm90dGxpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRocm90dGxlZFVwZGF0ZVRpbWVvdXQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3R0bGVkVXBkYXRlVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICB1cGRhdGVIZWlnaHRzKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHVwZGF0ZUhlaWdodHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRibG9ja3MuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVIb2xkZXIgPSAkKHRoaXMpLmNsb3Nlc3QoJy5QYWdlVGltZWxpbmUtU2VjdGlvbicpLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgICcuUGFnZVRpbWVsaW5lLVRpbWVsaW5lJykubGFzdCgpO1xuICAgICAgICAgICAgICAgIHZhciBzZWN0aW9uSG9sZGVyID0gJCh0aGlzKS5jbG9zZXN0KCcuUGFnZVRpbWVsaW5lLVNlY3Rpb24nKTtcblxuICAgICAgICAgICAgICAgIGlmICghdGltZWxpbmVIb2xkZXIgfHwgIXNlY3Rpb25Ib2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBlcnJvciwgZWFjaCBzZWN0aW9uIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgVGltZWxpbmUuIElnbm9yaW5nLCBjb250aW51aW5nIGl0ZXJhdGluZy5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgaG9sZGVyQm90dG9tRWRnZVkgPSB0aW1lbGluZUhvbGRlci5vZmZzZXQoKS50b3AgKyB0aW1lbGluZUhvbGRlci5oZWlnaHQoKTtcbiAgICAgICAgICAgICAgICB2YXIgZmlndXJlQm90dG9tRWRnZVkgPSAkKHRoaXMpLm9mZnNldCgpLnRvcCArICQodGhpcykuaGVpZ2h0KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZmlndXJlQm90dG9tRWRnZVkgPiBob2xkZXJCb3R0b21FZGdlWSkge1xuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uSG9sZGVyLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogdGltZWxpbmVIb2xkZXIucG9zaXRpb24oKS50b3AgKyB0aW1lbGluZUhvbGRlci5oZWlnaHQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKGZpZ3VyZUJvdHRvbUVkZ2VZIC0gaG9sZGVyQm90dG9tRWRnZVkpICsgcGFyc2VJbnQoJCh0aGlzKS5jc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtYXJnaW4tYm90dG9tJykpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb25Ib2xkZXIuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgb25SZXNwb25zaXZlU3RhdGVjaGFuZ2VkID0gZnVuY3Rpb24oZSwgbmV3c3RhdGUpIHtcbiAgICAgICAgICAgIGlmIChuZXdzdGF0ZSA9PT0gY3VycmVudEJyZWFrcG9pbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnRCcmVha3BvaW50ID0gbmV3c3RhdGU7XG5cbiAgICAgICAgICAgIGlmICgkYmxvY2tzLmxlbmd0aCA+IDAgJiYgY3VycmVudEJyZWFrcG9pbnQgIT09ICdtb2JpbGUnKSB7XG4gICAgICAgICAgICAgICAgdW53aXJlKCk7XG4gICAgICAgICAgICAgICAgd2lyZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1bndpcmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZGV0ZWN0Q3VycmVudEJyZWFrcG9pbnQgPSBmdW5jdGlvbigpIHsgLy8gb2ggd2VsbCB0aGlzIG5lZWRzIHNvbWUgcmVmYWN0b3Jpbmc6IFRPRE9cbiAgICAgICAgICAgIGlmIChzc20uaXNBY3RpdmUoJ2Rlc2t0b3AnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGVza3RvcCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3NtLmlzQWN0aXZlKCd0YWJsZXQnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAndGFibGV0JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzc20uaXNBY3RpdmUoJ21vYmlsZScpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtb2JpbGUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGJhc2UuaW5pdCgpO1xuICAgIH07XG5cbiAgICAkLmZuLnBhZ2VUaW1lbGluZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLyoganNoaW50IG5vbmV3OmZhbHNlICovXG4gICAgICAgICAgICAobmV3ICQuUGFnZVRpbWVsaW5lKHRoaXMpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn0pKGpRdWVyeSk7XG5cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgICQoZG9jdW1lbnQpLnBhZ2VUaW1lbGluZSgpO1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uKCQpIHtcclxuICAkLmZuLmhhc1Njcm9sbEJhciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0KDApLnNjcm9sbEhlaWdodCA+IHRoaXMuaGVpZ2h0KCk7XHJcbiAgfTtcclxufSkoalF1ZXJ5KTtcclxuXHJcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG4gIC8vIFdoYXQncyBuZXcgb3ZlcmxheSBkaXNwbGF5IGxvZ2ljXHJcbiAgaWYgKCQoJyN3aGF0c05ld092ZXJsYXknKS5sZW5ndGggPiAwKSB7XHJcbiAgICB2YXIgd25vX3ZlcnNpb24gPSAkKCcjY29udGludWVUb1NpdGVDbG9zZScpLmRhdGEoJ3ZlcnNpb24nKTtcclxuXHJcbiAgICBpZiAoYXVkaWVuY2VfdG9wX25hdl9pZCAhPT0gdW5kZWZpbmVkICYmIGF1ZGllbmNlX3RvcF9uYXZfaWQgIT09IG51bGwpIHtcclxuICAgICAgdmFyIHdub19jb29raWVfdmFsID0gZ2V0Q29va2llKCdXTk9fJyArIGF1ZGllbmNlX3RvcF9uYXZfaWQpO1xyXG5cclxuICAgICAgaWYgKHdub19jb29raWVfdmFsICE9PSB1bmRlZmluZWQgJiYgd25vX2Nvb2tpZV92YWwgIT09IG51bGwgJiYgd25vX2Nvb2tpZV92YWwgIT09ICcnKSB7XHJcbiAgICAgICAgaWYgKHdub19jb29raWVfdmFsICE9PSB3bm9fdmVyc2lvbikge1xyXG4gICAgICAgICAgLy8gQURBIGhpZGUgdGhlIGVudGlyZSBwYWdlXHJcbiAgICAgICAgICAkKCcuYngtd3JhcHBlcicpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcclxuICAgICAgICAgICQoJy5Ub3BoZWFkZXInKS5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XHJcbiAgICAgICAgICAkKCcubG9naW4tcXVpY2tsaW5rLWNvbnRhaW5lcicpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcclxuICAgICAgICAgICQoJ21haW4nKS5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XHJcbiAgICAgICAgICAkKCdmb290ZXInKS5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XHJcblxyXG4gICAgICAgICAgLy8gRGlzcGxheSBvdmVybGF5XHJcbiAgICAgICAgICAkKCcjd2hhdHNOZXdPdmVybGF5Jykuc2hvdygpO1xyXG5cclxuICAgICAgICAgIC8vIEFkZCBhZGRpdGlvbmFsIDIwcHggcmlnaHQgc2luY2Ugc2Nyb2xsYmFyIHRha2VzIHVwIHRoZSBhbiBhZGRpdGlvbmFsIDIwcHhcclxuICAgICAgICAgIGlmICgkKCcjd2hhdHNOZXdPdmVybGF5JykuaGFzU2Nyb2xsQmFyKCkpIHtcclxuICAgICAgICAgICAgJCgnLmNvbnRpbnVlLXRvLXNpdGUtY2xvc2UnKS5jc3MoJ3JpZ2h0JywgJzQwcHgnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gQURBIGhpZGUgdGhlIGVudGlyZSBwYWdlXHJcbiAgICAgICAgJCgnLmJ4LXdyYXBwZXInKS5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XHJcbiAgICAgICAgJCgnLlRvcGhlYWRlcicpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcclxuICAgICAgICAkKCcubG9naW4tcXVpY2tsaW5rLWNvbnRhaW5lcicpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcclxuICAgICAgICAkKCdtYWluJykuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xyXG4gICAgICAgICQoJ2Zvb3RlcicpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcclxuXHJcbiAgICAgICAgLy8gRGlzcGxheSBvdmVybGF5XHJcbiAgICAgICAgJCgnI3doYXRzTmV3T3ZlcmxheScpLnNob3coKTtcclxuXHJcbiAgICAgICAgLy8gQWRkIGFkZGl0aW9uYWwgMjBweCByaWdodCBzaW5jZSBzY3JvbGxiYXIgdGFrZXMgdXAgdGhlIGFuIGFkZGl0aW9uYWwgMjBweFxyXG4gICAgICAgIGlmICgkKCcjd2hhdHNOZXdPdmVybGF5JykuaGFzU2Nyb2xsQmFyKCkpIHtcclxuICAgICAgICAgICQoJy5jb250aW51ZS10by1zaXRlLWNsb3NlJykuY3NzKCdyaWdodCcsICc0MHB4Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBXaGF0J3MgbmV3IG92ZXJsYXkgY2xpY2sgZXZlbnRcclxuICAkKCcjY29udGludWVUb1NpdGVDbG9zZSwgI2NvbnRpbnVlVG9TaXRlQnRuJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgd25vX3ZlcnNpb24gPSAkKHRoaXMpLmRhdGEoJ3ZlcnNpb24nKTtcclxuXHJcbiAgICAkKCcjd2hhdHNOZXdPdmVybGF5JykuaGlkZSgpO1xyXG5cclxuICAgIC8vIEVuYWJsZSB0aGUgcGFnZSB2ZXJ0aWNhbCBzY3JvbGxcclxuICAgICQoJ2JvZHknKS5jc3Moe1xyXG4gICAgICAnaGVpZ2h0JyAgOiAnYXV0bydcclxuICAgICAgLy8nb3ZlcmZsb3cnOiAnYXV0bycsXHJcbiAgICAgIC8vJ3Bvc2l0aW9uJzogJ3N0YXRpYydcclxuICAgIH0pO1xyXG4gICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCcud2hhdHMtbmV3LW92ZXJsYXktb3BlbicpO1xyXG5cclxuICAgIC8vIEFEQSBoaWRlIHRoZSBlbnRpcmUgcGFnZVxyXG4gICAgJCgnLmJ4LXdyYXBwZXInKS5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xyXG4gICAgJCgnLlRvcGhlYWRlcicpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XHJcbiAgICAkKCcubG9naW4tcXVpY2tsaW5rLWNvbnRhaW5lcicpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XHJcbiAgICAkKCdtYWluJykuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuICAgICQoJ2Zvb3RlcicpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XHJcblxyXG4gICAgaWYgKGF1ZGllbmNlX3RvcF9uYXZfaWQgIT09IHVuZGVmaW5lZCAmJiBhdWRpZW5jZV90b3BfbmF2X2lkICE9PSBudWxsKSB7XHJcbiAgICAgIHNldENvb2tpZSgnV05PXycgKyBhdWRpZW5jZV90b3BfbmF2X2lkLCB3bm9fdmVyc2lvbiwgMzApO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAkLmZuLmdldEZvY3VzYWJsZUNoaWxkcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuICQodGhpcylcclxuICAgICAgLmZpbmQoXHJcbiAgICAgICAgJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdKSwgc2VsZWN0Om5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBidXR0b246bm90KFtkaXNhYmxlZF0pLCBpZnJhbWUsIG9iamVjdDpub3QoW2Rpc2FibGVkXSksIGVtYmVkLCAqW3RhYmluZGV4XSwgKltjb250ZW50ZWRpdGFibGVdJ1xyXG4gICAgICApXHJcbiAgICAgIC5maWx0ZXIoJzp2aXNpYmxlJyk7XHJcbiAgfTtcclxuXHJcbiAgJCgnI2NvbnRpbnVlVG9TaXRlQ2xvc2UnKS5vbignYmx1cicsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgJCgnI3doYXRzTmV3T3ZlcmxheScpLmdldEZvY3VzYWJsZUNoaWxkcygpLmZpbHRlcignOmZpcnN0JykuZm9jdXMoKTtcclxuICB9KTtcclxuXHJcbiAgJCgnI3doYXRzTmV3T3ZlcmxheScpLm9uKCdtb3VzZWRvd24nLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG4gIH0pO1xyXG5cclxuICAkKGRvY3VtZW50KS5vbignZm9jdXMnLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICQoJyN3aGF0c05ld092ZXJsYXknKS5nZXRGb2N1c2FibGVDaGlsZHMoKS5maWx0ZXIoJzpmaXJzdCcpLmZvY3VzKCk7XHJcbiAgfSk7XHJcblxyXG4gICQoJy53aGF0cy1uZXctdGl0bGUnKS5hdHRyKCd0YWJpbmRleCcsICcwJyk7XHJcbn0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG4gICQoJy52aWRlby10aHVtYi1qcycpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGJyaWdodGNvdmVQbGF5ZXJJRCA9ICdsZmdfYnJpZ2h0Y292ZV8nICsgJCh0aGlzKS5kYXRhKCd2aWRlb2lkJyksXHJcbiAgICAgIGJyaWdodGNvdmVXaWQgPSAkKHRoaXMpLmRhdGEoJ3dpZHRoJyksXHJcbiAgICAgIGJyaWdodGNvdmVIZ3QgPSAkKHRoaXMpLmRhdGEoJ2hlaWdodCcpIC0gMzA7XHJcbiAgICB2YXIgdmlkZW8gPSAnPHZpZGVvIGlkPVwibGZnX2JyaWdodGNvdmVfJyArICQodGhpcykuZGF0YSgndmlkZW9pZCcpICsgJ1wiIHN0eWxlPVwid2lkdGg6ICcgKyBicmlnaHRjb3ZlV2lkICsgJ3B4O2hlaWdodDogJyArIGJyaWdodGNvdmVIZ3RcclxuICAgICAgKyAncHg7XCIgZGF0YS12aWRlby1pZD1cIicgKyAkKHRoaXMpLmRhdGEoJ3ZpZGVvaWQnKVxyXG4gICAgICArICdcIiBkYXRhLWFjY291bnQ9XCIxMTM0ODQ5MTcxMDAxXCJkYXRhLXBsYXllcj1cImQwYjQ4OWUyLTUwZWYtNDAwYy1hOWIxLTgzOTg1Y2M3YjRlZlwiIGRhdGEtZW1iZWQ9XCJkZWZhdWx0XCIgY2xhc3M9XCJ2aWRlby1qc1wiIGNvbnRyb2xzPjwvdmlkZW8+PHNjcmlwdCBzcmM9XCIvL3BsYXllcnMuYnJpZ2h0Y292ZS5uZXQvMTEzNDg0OTE3MTAwMS9kMGI0ODllMi01MGVmLTQwMGMtYTliMS04Mzk4NWNjN2I0ZWZfZGVmYXVsdC9pbmRleC5taW4uanNcIj48L3NjcmlwdD5cdCc7XHJcblxyXG4gICAgaWYgKCQoJyMnICsgYnJpZ2h0Y292ZVBsYXllcklEKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgJCgnLnZpZGVvLXdyYXAgLnZpZGVvLWNvbnQtanMgb2JqZWN0LCAudmlkZW8td3JhcCAudmlkZW8tY29udC1qcyBzY3JpcHQsIC52aWRlby13cmFwIC52aWRlby1jb250LWpzIGRpdicpLnJlbW92ZSgpO1xyXG4gICAgICAkKCcudmlkZW8td3JhcCAudmlkZW8tY29udC1qcycpLmFwcGVuZCh2aWRlbykucHJvbWlzZSgpLmRvbmUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgYnJpZ2h0Y292ZVZpZGVvUmF0aW8oYnJpZ2h0Y292ZVdpZCwgYnJpZ2h0Y292ZUhndCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgJCgnLnZpZGVvLXdyYXAgLnZpZGVvLWNvbnQtanMsICNmYWRlJykuc2hvdygpO1xyXG5cclxuICAgIC8qIGJyaWdodGNvdmUgd2lkdGggYW5kIGhlaWdodCB2YWwgKi9cclxuICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBteUJyaWdodGNvdmVQbGF5ZXIgPSB2aWRlb2pzKGJyaWdodGNvdmVQbGF5ZXJJRCk7XHJcblxyXG4gICAgICBpZiAoIW15QnJpZ2h0Y292ZVBsYXllci5pc0Z1bGxTY3JlZW4oKSkge1xyXG4gICAgICAgIGJyaWdodGNvdmVWaWRlb1JhdGlvKGJyaWdodGNvdmVXaWQsIGJyaWdodGNvdmVIZ3QpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgJCgnLnUtcGxheS1pY29uJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICQodGhpcykubmV4dCgpLmZpbmQoJy52aWRlby10aHVtYi1qcycpLnRyaWdnZXIoJ2NsaWNrJyk7XHJcbiAgfSk7XHJcblxyXG4gIC8qIGJyaWdodGNvdmUgaW5saW5lIHZpZGVvICovXHJcbiAgYnJpZ2h0Y292ZUlubGluZVZpZGVvUmF0aW8oKTtcclxuICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCkge1xyXG4gICAgYnJpZ2h0Y292ZUlubGluZVZpZGVvUmF0aW8oKTtcclxuICB9KTtcclxuXHJcbiAgJCgnLnZkby1jbG9zZS1pY29uJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgdmlkZW9PYmplY3QgPSAkKCQoJy52ZG8tY2xvc2UtaWNvbicpLnBhcmVudCgpLmZpbmQoJ2RpdicpWzBdKTtcclxuICAgIHZhciBwbGF5ZXJJRCA9ICdsZmdfYnJpZ2h0Y292ZV8nICsgJCh2aWRlb09iamVjdCkuZGF0YSgndmlkZW8taWQnKTtcclxuICAgIHZhciBteVBsYXllciA9IHZpZGVvanMocGxheWVySUQpO1xyXG5cclxuICAgIG15UGxheWVyLmRpc3Bvc2UoKTtcclxuICAgICQoJy52aWRlby13cmFwIC52aWRlby1jb250LWpzLCAjZmFkZScpLmhpZGUoKTtcclxuICB9KTtcclxuXHJcbiAgLyogYnJpZ2h0Y292ZSB3aWR0aCBhbmQgaGVpZ2h0IHZhbCAqL1xyXG4gIGZ1bmN0aW9uIGJyaWdodGNvdmVWaWRlb1JhdGlvKGJyaWdodGNvdmVXaWQsIGJyaWdodGNvdmVIZ3QpIHtcclxuICAgIHZhciB2aWRFbGVtV2lkLCBicmlnaHRjb3ZlQ29udFRvcDtcclxuXHJcbiAgICBpZiAoJCgnLnZpZGVvLWpzJykuaGFzQ2xhc3MoJ25vRGltZW5zaW9ucycpIHx8ICQod2luZG93KS53aWR0aCgpIDwgMTAwMCkge1xyXG4gICAgICB2aWRFbGVtV2lkID0gJzcwJSc7XHJcbiAgICAgICQoJy52aWRlby1jb250LWpzJykuY3NzKHtcclxuICAgICAgICAnd2lkdGgnOiB2aWRFbGVtV2lkXHJcbiAgICAgIH0pLnByb21pc2UoKS5kb25lKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBicmlnaHRjb3ZlVmlkZW9XaWR0aCwgYnJpZ2h0Y292ZVZpZGVvSGVpZ2h0LCBicmlnaHRjb3ZlVmlkZW9IZWlnaHRWYWwsIGJyaWdodGNvdmVDb250VG9wLCBicmlnaHRjb3ZlQ29udExlZnQsXHJcbiAgICAgICAgICBicmlnaHRjb3ZlVmlkZW9XaWR0aElucHV0ID0gJCgnLnZpZGVvLXdyYXAgLnZpZGVvLWNvbnQtanMnKS5maW5kKCcuYnJpZ2h0Y292ZVZpZGVvV2lkdGhJbnB1dCcpLnZhbCgpLFxyXG4gICAgICAgICAgYnJpZ2h0Y292ZVZpZGVvSGd0SW5wdXQgPSAkKCcudmlkZW8td3JhcCAudmlkZW8tY29udC1qcycpLmZpbmQoJy5icmlnaHRjb3ZlVmlkZW9IZ3RJbnB1dCcpLnZhbCgpO1xyXG5cclxuICAgICAgICBicmlnaHRjb3ZlVmlkZW9XaWR0aCA9ICQoJy52aWRlby13cmFwIC52aWRlby1jb250LWpzJykud2lkdGgoKTtcclxuICAgICAgICBicmlnaHRjb3ZlVmlkZW9IZWlnaHRWYWwgPSBicmlnaHRjb3ZlVmlkZW9XaWR0aDtcclxuICAgICAgICBicmlnaHRjb3ZlVmlkZW9IZWlnaHRWYWwgKj0gMTtcclxuICAgICAgICBicmlnaHRjb3ZlVmlkZW9IZWlnaHQgPSBNYXRoLnJvdW5kKChicmlnaHRjb3ZlVmlkZW9IZWlnaHRWYWwgLyA0KSAqIDMpO1xyXG5cclxuICAgICAgICAkKCcudmlkZW8td3JhcCAudmlkZW8tY29udC1qcyAudmpzLXRlY2gnKS53aWR0aChicmlnaHRjb3ZlVmlkZW9XaWR0aCkuaGVpZ2h0KGJyaWdodGNvdmVWaWRlb0hlaWdodCk7XHJcbiAgICAgICAgYnJpZ2h0Y292ZUNvbnRUb3AgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSBicmlnaHRjb3ZlVmlkZW9IZWlnaHQ7XHJcbiAgICAgICAgYnJpZ2h0Y292ZUNvbnRUb3AgPSAoYnJpZ2h0Y292ZUNvbnRUb3AgLyAyKSArIDMwO1xyXG4gICAgICAgICQoJy52aWRlby13cmFwIC52aWRlby1qcycpLndpZHRoKGJyaWdodGNvdmVWaWRlb1dpZHRoKS5oZWlnaHQoYnJpZ2h0Y292ZVZpZGVvSGVpZ2h0IC0gMzApO1xyXG4gICAgICAgICQoJy52aWRlby13cmFwIC52aWRlby1jb250LWpzJykud2lkdGgoYnJpZ2h0Y292ZVZpZGVvV2lkdGgpLmhlaWdodChicmlnaHRjb3ZlVmlkZW9IZWlnaHQgLSAzMCkuY3NzKHtcclxuICAgICAgICAgICd0b3AnOiBicmlnaHRjb3ZlQ29udFRvcCArICdweCdcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAkKCcudmlkZW8td3JhcCAudmlkZW8tY29udC1qcyAudmpzLXRlY2gnKS53aWR0aChicmlnaHRjb3ZlV2lkKS5oZWlnaHQoYnJpZ2h0Y292ZUhndCk7XHJcbiAgICAgICQoJy52aWRlby13cmFwIC52aWRlby1qcycpLmNzcyh7XHJcbiAgICAgICAgJ3dpZHRoJyA6IGJyaWdodGNvdmVXaWQgKyAncHgnLFxyXG4gICAgICAgICdoZWlnaHQnOiBicmlnaHRjb3ZlSGd0ICsgJ3B4J1xyXG4gICAgICB9KTtcclxuICAgICAgYnJpZ2h0Y292ZUNvbnRUb3AgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSBicmlnaHRjb3ZlSGd0O1xyXG4gICAgICBicmlnaHRjb3ZlQ29udFRvcCA9IGJyaWdodGNvdmVDb250VG9wIC8gMjtcclxuICAgICAgJCgnLnZpZGVvLXdyYXAgLnZpZGVvLWNvbnQtanMnKS53aWR0aChicmlnaHRjb3ZlV2lkKS5oZWlnaHQoYnJpZ2h0Y292ZUhndCkuY3NzKHtcclxuICAgICAgICAndG9wJzogYnJpZ2h0Y292ZUNvbnRUb3AgKyAncHgnXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYnJpZ2h0Y292ZUlubGluZVZpZGVvUmF0aW8oKSB7XHJcbiAgICB2YXIgYnJpZ2h0Y292ZVZpZGVvSW5saW5lV2lkdGgsIGJyaWdodGNvdmVWaWRlb0lubGluZUhlaWdodCwgYnJpZ2h0Y292ZVZpZGVvSW5saW5lSGVpZ2h0VmFsLCB2aWQ7XHJcblxyXG4gICAgZm9yICh2aWQgPSAwOyB2aWQgPCAkKCcuaW5saW5lLXZpZGVvLWpzJykubGVuZ3RoOyB2aWQrKykge1xyXG4gICAgICBpZiAoJCgnLmlubGluZS12aWRlby1qcycpLmVxKHZpZCkuaGFzQ2xhc3MoJ25vRGltZW5zaW9ucycpIHx8ICQod2luZG93KS53aWR0aCgpIDwgNzUwKSB7XHJcbiAgICAgICAgYnJpZ2h0Y292ZVZpZGVvSW5saW5lV2lkdGggPSAkKCcuaW5saW5lLXZpZGVvLWpzJykuZXEodmlkKS5wYXJlbnQoKS53aWR0aCgpO1xyXG4gICAgICAgIGJyaWdodGNvdmVWaWRlb0lubGluZUhlaWdodFZhbCA9IGJyaWdodGNvdmVWaWRlb0lubGluZVdpZHRoO1xyXG4gICAgICAgIGJyaWdodGNvdmVWaWRlb0lubGluZUhlaWdodFZhbCAqPSAxO1xyXG4gICAgICAgIGJyaWdodGNvdmVWaWRlb0lubGluZUhlaWdodCA9IE1hdGgucm91bmQoKGJyaWdodGNvdmVWaWRlb0lubGluZUhlaWdodFZhbCAvIDQpICogMyk7XHJcbiAgICAgICAgJCgnLmlubGluZS12aWRlby1qcycpLmVxKHZpZCkuY3NzKHtcclxuICAgICAgICAgICd3aWR0aCcgOiBicmlnaHRjb3ZlVmlkZW9JbmxpbmVXaWR0aCArICdweCcsXHJcbiAgICAgICAgICAnaGVpZ2h0JzogYnJpZ2h0Y292ZVZpZGVvSW5saW5lSGVpZ2h0ICsgJ3B4J1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoJy5pbmxpbmUtdmlkZW8tanMnKS5lcSh2aWQpLmZpbmQoJy52anMtdGVjaCcpLndpZHRoKGJyaWdodGNvdmVWaWRlb0lubGluZVdpZHRoKS5oZWlnaHQoYnJpZ2h0Y292ZVZpZGVvSW5saW5lSGVpZ2h0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gbW9kYWwgdmlldyB2aWRlbyBmdWxsIHdpZHRoIHN0YXJ0c1xyXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcudmpzLWZ1bGxzY3JlZW4tY29udHJvbCcsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICB2YXIgdmlkZW9JZCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50KCkucGFyZW50KCkuYXR0cignZGF0YS12aWRlby1pZCcpO1xyXG4gICAgdmFyIHZpZGVvU3R5bGU7XHJcblxyXG4gICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsZmdfYnJpZ2h0Y292ZV8nICsgdmlkZW9JZCArICdfaHRtbDVfYXBpJykpIHtcclxuICAgICAgdmlkZW9TdHlsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsZmdfYnJpZ2h0Y292ZV8nICsgdmlkZW9JZCArICdfaHRtbDVfYXBpJykuc3R5bGU7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCQoJy52aWRlby1qcycpLmhhc0NsYXNzKCd2anMtZnVsbHNjcmVlbicpKSB7XHJcbiAgICAgICAgICB2aWRlb1N0eWxlLndpZHRoID0gJzEwMCUnO1xyXG4gICAgICAgICAgdmlkZW9TdHlsZS5oZWlnaHQgPSAnMTAwJSc7XHJcbiAgICAgICAgICAkKCcudmlkZW8tanMnKS5jc3MoJ21pbi13aWR0aCcsICcxMDAlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCAxMDApO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAvLyBtb2RhbCB2aWV3IHZpZGVvIGZ1bGwgd2lkdGggZW5kc1xyXG59KTsiLCIvKiBnbG9iYWxzIHNldFVzZXJDb29raWUgKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbihmdW5jdGlvbigpIHtcclxuICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuICAgIC8vIExvZ2luIGJ1dHRvbiBldmVudHNcclxuICAgICQoJyNzYmI0LWxvZ2luJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciB1c2VyTmFtZSA9ICQoJyNzYmI0LXVzZXJuYW1lJykudmFsKCk7XHJcblxyXG4gICAgICBzZXRVc2VyQ29va2llKHVzZXJOYW1lKTtcclxuICAgIH0pO1xyXG4gICAgJCgnI3NiYjQtdXNlcm5hbWUnKS5rZXlwcmVzcyhmdW5jdGlvbihlKSB7XHJcbiAgICAgIGlmIChlLndoaWNoID09PSAxMykge1xyXG4gICAgICAgIHZhciB1c2VyTmFtZSA9ICQoJyNzYmI0LXVzZXJuYW1lJykudmFsKCk7XHJcblxyXG4gICAgICAgIHNldFVzZXJDb29raWUodXNlck5hbWUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgICQoJyNsb2dpbi1kcm9wZG93bicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAoISQodGhpcykuaGFzQ2xhc3MoJ2Rpc2FibGUnKSkge1xyXG4gICAgICAgIHZhciB1c2VyTmFtZSA9ICQoJyNkcm9wZG93bi11c2VybmFtZScpLnZhbCgpO1xyXG5cclxuICAgICAgICBzZXRVc2VyQ29va2llKHVzZXJOYW1lKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAkKCcjZHJvcGRvd24tdXNlcm5hbWUnKS5rZXlwcmVzcyhmdW5jdGlvbihlKSB7XHJcbiAgICAgIGlmIChlLndoaWNoID09PSAxMykge1xyXG4gICAgICAgIHZhciB1c2VyTmFtZSA9ICQoJyNkcm9wZG93bi11c2VybmFtZScpLnZhbCgpO1xyXG5cclxuICAgICAgICBzZXRVc2VyQ29va2llKHVzZXJOYW1lKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAkKCcjbmV4dC1idG4tYmFubmVyJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICghJCh0aGlzKS5oYXNDbGFzcygnZGlzYWJsZScpKSB7XHJcbiAgICAgICAgdmFyIHVzZXJOYW1lID0gJCgnI2Jhbm5lci11c2VybmFtZScpLnZhbCgpO1xyXG5cclxuICAgICAgICBzZXRVc2VyQ29va2llKHVzZXJOYW1lKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAkKCcjYmFubmVyLXVzZXJuYW1lJykua2V5cHJlc3MoZnVuY3Rpb24oZSkge1xyXG4gICAgICBpZiAoZS53aGljaCA9PT0gMTMpIHtcclxuICAgICAgICB2YXIgdXNlck5hbWUgPSAkKCcjYmFubmVyLXVzZXJuYW1lJykudmFsKCk7XHJcblxyXG4gICAgICAgIHNldFVzZXJDb29raWUodXNlck5hbWUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBFbmFibGUgdGhlIE5leHQgYnV0dG9uIGFmdGVyIHRoZSBkb2N1bWVudCBpcyByZWFkeSAmIGV2ZW50cyBhcmUgcmVnaXN0ZXJlZFxyXG4gICAgaWYgKCQoJyNsb2dpbi1kcm9wZG93bicpLmxlbmd0aCA+IDApIHtcclxuICAgICAgJCgnI2xvZ2luLWRyb3Bkb3duJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGUnKTtcclxuICAgICAgJCgnI2Ryb3Bkb3duLXVzZXJuYW1lJykucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCQoJyNuZXh0LWJ0bi1iYW5uZXInKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICQoJyNuZXh0LWJ0bi1iYW5uZXInKS5yZW1vdmVDbGFzcygnZGlzYWJsZScpO1xyXG4gICAgICAkKCcjYmFubmVyLXVzZXJuYW1lJykucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVnaXN0ZXIgYnV0dG9uIGV2ZW50c1xyXG4gICAgLyogcGFzc2luZyBxdWVyeSBzdHJpbmcgdG8gVVJMIHdoaWxlIGNoYW5naW5nIHJlZ2lzdGVyIGRyb3Bkb3duIGluIExPRyBJTi9SRUdJU1RFUiovXHJcbiAgICAkKCcjeW91ckF1ZGllbmNlUmVkaXJlY3QnKS5jbGljayhmdW5jdGlvbihlKSB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgJCgnI3lvdXJBdWRpZW5jZSBsaScpLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB7XHJcbiAgICAgICAgICB2YXIgdXJsID0gJCh0aGlzKS5hdHRyKCdhdHRyLWhyZWYnKTtcclxuICAgICAgICAgIHZhciBzZWFyY2hTdHJpbmcgPSB1cmwgKyAoKHVybC5pbmRleE9mKCc/JykgPT09IC0xKSA/ICc/YXVkaWVuY2U9JyA6ICcmYXVkaWVuY2U9Jyk7XHJcblxyXG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBzZWFyY2hTdHJpbmcgKyAkKHRoaXMpLmZpbmQoJ2EnKS50ZXh0KCkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgJy0nKTtcclxuICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oJ2xhc3RuYW1lJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KSgpOyIsIi8qIFVJQWNjb3JkaW9uICovXG5cbi8qXG4gQWNjb3JkaW9uIG11c3QgYmUgaWRlbnRpZmllZCBieTogZGF0YS10YXJnZXQ9J2FjY29yZGlvbicgYW5kIGhhdmUgdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmU6XG5cbiA8ZGl2IGNsYXNzPSdVSUFjY29yZGlvbicgZGF0YS10b2dnbGU9J3VpLWFjY29yZGlvbic+XG4gPHNlY3Rpb24+XG4gPGhlYWRlcj5BY2NvcmRpb24gc2VjdGlvbiBoZWFkZXI8L2hlYWRlcj5cbiA8YXJ0aWNsZT5cbiBDb250ZW50XG4gPC9hcnRpY2xlPlxuIDwvc2VjdGlvbj5cbiAuLi5cbiA8L2Rpdj5cblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uKCQpIHtcbiAgICB2YXIgcGFyYW1TdGF0ZTtcblxuICAgICQoZG9jdW1lbnQpLm9uKCdyZXNwb25zaXZlOnN0YXRlY2hhbmdlZCcsIGZ1bmN0aW9uKGUsIHBhcmFtKSB7XG4gICAgICAgIHBhcmFtU3RhdGUgPSBwYXJhbTtcbiAgICB9KTtcbiAgICAkLlVJQWNjb3JkaW9uID0gZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgLy8gQWRkZWQgZm9yIFN0aWNreSBDVEFcbiAgICAgICAgdmFyIHMgPSB7XG4gICAgICAgICAgICAnZWFzaW5nJyAgICAgICA6ICdzd2luZycsXG4gICAgICAgICAgICAnb3BlbkR1cmF0aW9uJyA6IDIwMCxcbiAgICAgICAgICAgICdjbG9zZUR1cmF0aW9uJzogMzUwLFxuICAgICAgICAgICAgJ2Nsb3NlQnV0dG9uJyAgOiBmYWxzZSxcbiAgICAgICAgICAgICdjbG9zZUNoYXInICAgIDogJ+KTpycsXG4gICAgICAgICAgICAnY2xvc2VUb3AnICAgICA6IDAsXG4gICAgICAgICAgICAnY2xvc2VSaWdodCcgICA6IDAsXG4gICAgICAgICAgICAnY2xvc2VzdCcgICAgICA6IG51bGwsXG4gICAgICAgICAgICAnb2Zmc2V0VG9wJyAgICA6IDEwMCxcbiAgICAgICAgICAgICdvZmZzZXRCb3R0b20nIDogLTEwMCxcbiAgICAgICAgICAgICdxdWV1ZScgICAgICAgIDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHByZXZIZWlnaHQgPSAwO1xuICAgICAgICB2YXIgc3RpY2t5RWwgPSAkKCcjc3RpY2tyJyk7XG4gICAgICAgIHZhciBzdGlja3lQYXJlbnRFbCA9IG51bGw7XG4gICAgICAgIHZhciByZWxhdGl2ZU9mZnNldCA9IG51bGw7XG5cbiAgICAgICAgaWYgKHN0aWNreUVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHN0aWNreVBhcmVudEVsID0gcy5jbG9zZXN0ID8gc3RpY2t5RWwuY2xvc2VzdChzLmNsb3Nlc3QpIDogc3RpY2t5RWwucGFyZW50KCk7XG4gICAgICAgICAgICByZWxhdGl2ZU9mZnNldCA9IChzdGlja3lFbC5vZmZzZXQoKS50b3AgLSBzdGlja3lQYXJlbnRFbC5vZmZzZXQoKS50b3ApIC0gcy5vZmZzZXRUb3A7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYmFzZSA9IHRoaXM7XG5cbiAgICAgICAgYmFzZS4kZWwgPSAkKGVsKTtcbiAgICAgICAgYmFzZS5lbCA9IGVsO1xuXG4gICAgICAgIGJhc2UuJGVsLmRhdGEoJ1VJQWNjb3JkaW9uJywgYmFzZSk7XG5cbiAgICAgICAgLy8gY29sbGFwc2libGUgaXRlbXNcbiAgICAgICAgYmFzZS4kaXRlbXMgPSBudWxsO1xuXG4gICAgICAgIC8vIGNvbnRlbnQgaG9sZGVycyBmb3IgZWFjaCBvZiBhY2NvcmRpb24gYmxvY2tcbiAgICAgICAgYmFzZS4kY29udGVudEhvbGRlcnMgPSBudWxsO1xuXG4gICAgICAgIC8vIG1zZWNcbiAgICAgICAgYmFzZS5leHBhbmRTcGVlZCA9IDcwMDtcbiAgICAgICAgYmFzZS5jb2xsYXBzZVNwZWVkID0gMjAwO1xuXG4gICAgICAgIHZhciAkc2VsZWN0ZWRIZWFkZXIgPSBudWxsO1xuICAgICAgICB2YXIgc2VsZWN0ZWRIZWFkZXJJZHggPSAtMTtcblxuICAgICAgICBiYXNlLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGJhc2UuJGl0ZW1zID0gYmFzZS4kZWwuZmluZCgnPiBzZWN0aW9uJykuYXR0cigncm9sZScsICd0YWInKTtcbiAgICAgICAgICAgIGJhc2UuJGhlYWRlcnMgPSBiYXNlLiRpdGVtcy5maW5kKCc+IGhlYWRlcicpO1xuICAgICAgICAgICAgYmFzZS4kY29udGVudEhvbGRlcnMgPSBiYXNlLiRlbC5maW5kKCc+IHNlY3Rpb24gPiBhcnRpY2xlJyk7XG4gICAgICAgICAgICBiYXNlLiRjb250ZW50SG9sZGVycy5hdHRyKCdyb2xlJywgJ3RhYnBhbmVsJyk7XG4gICAgICAgICAgICBiYXNlLiRpdGVtcy5lYWNoKGZ1bmN0aW9uKGlkeCkge1xuICAgICAgICAgICAgICAgIC8vIGFjY29yZGlvbiBncm91cCBlbGVtZW50XG4gICAgICAgICAgICAgICAgdmFyICRlbHQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgIHZhciB0b2dnbGUgPSAkZWx0LmZpbmQoJz4gaGVhZGVyJyk7XG5cbiAgICAgICAgICAgICAgICAvLyB2YXIgY29udGVudGhvbGRlciA9ICRlbHQuZmluZCgnPiBhcnRpY2xlJyk7XG5cbiAgICAgICAgICAgICAgICAkZWx0LmF0dHIoJ2RhdGEtYWNjb3JkaW9uLWlkeCcsIGlkeCk7XG5cbiAgICAgICAgICAgICAgICB0b2dnbGUub24oJ2NsaWNrJywgYmFzZS50b2dnbGUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGJhc2UuJGhlYWRlcnMuYXR0cigndGFiaW5kZXgnLCAwKTtcbiAgICAgICAgICAgIGJhc2UuJGhlYWRlcnMub24oJ2ZvY3VzJywgYmFzZS5vbkhlYWRlckZvY3VzKTtcbiAgICAgICAgICAgIGJhc2UuJGhlYWRlcnMub24oJ2JsdXInLCBiYXNlLm9uSGVhZGVyQmx1cik7XG5cbiAgICAgICAgICAgIC8vIEFEQSBzZXR1cFxuICAgICAgICAgICAgYmFzZS4kZWwuYXR0cigncm9sZScsICd0YWJsaXN0JylcbiAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1tdWx0aXNlbGVjdGFibGUnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgYmFzZS4kaGVhZGVycy5lYWNoKGZ1bmN0aW9uKGlkeCkge1xuICAgICAgICAgICAgICAgIHZhciAkaGVhZGVyID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICB2YXIgJHBhbmVsID0gYmFzZS4kY29udGVudEhvbGRlcnMuZXEoaWR4KTtcblxuICAgICAgICAgICAgICAgIHZhciB1aWQgPSAkKGRvY3VtZW50KS5nZXRVbmlxdWVJRCgpO1xuXG4gICAgICAgICAgICAgICAgJGhlYWRlci5hdHRyKCdyb2xlJywgJ3RhYicpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLXNlbGVjdGVkJywgJ2ZhbHNlJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1jb250cm9scycsICdhY2NvcmRpb24tcGFuZWwtJyArIHVpZClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2lkJywgJ2FjY29yZGlvbi10YWItJyArIHVpZClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3RhYmluZGV4JywgJzAnKVxuICAgICAgICAgICAgICAgICAgICAuZGF0YSgnaWR4JywgaWR4KTtcblxuICAgICAgICAgICAgICAgICRoZWFkZXIuYmluZCgna2V5ZG93bi5yZXR1cm4nLCBiYXNlLnRvZ2dsZSk7XG4gICAgICAgICAgICAgICAgJGhlYWRlci5iaW5kKCdrZXlkb3duLnNwYWNlJywgYmFzZS50b2dnbGUpO1xuICAgICAgICAgICAgICAgICRoZWFkZXIuYmluZCgna2V5ZG93bi51cCcsIGJhc2Uuc2VsZWN0UHJldik7XG4gICAgICAgICAgICAgICAgJGhlYWRlci5iaW5kKCdrZXlkb3duLmRvd24nLCBiYXNlLnNlbGVjdE5leHQpO1xuXG4gICAgICAgICAgICAgICAgJHBhbmVsLmF0dHIoJ3JvbGUnLCAndGFicGFuZWwnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1sYWJlbGxlZGJ5JywgJ2FjY29yZGlvbi10YWItJyArIHVpZClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCAnYWNjb3JkaW9uLXBhbmVsLScgKyB1aWQpXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKCdpZHgnLCBpZHgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgYmFzZS5vbkhlYWRlckZvY3VzID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyICRlbHQgPSAkKGUudGFyZ2V0KTtcblxuICAgICAgICAgICAgYmFzZS5zZWxlY3RIZWFkZXJJZHgoJGVsdC5kYXRhKCdpZHgnKSk7XG4gICAgICAgIH07XG4gICAgICAgIGJhc2Uub25IZWFkZXJCbHVyID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyICRlbHQgPSAkKGUudGFyZ2V0KTtcblxuICAgICAgICAgICAgYmFzZS5kZXNlbGVjdEhlYWRlcklkeCgkZWx0LmRhdGEoJ2lkeCcpKTtcbiAgICAgICAgfTtcblxuICAgICAgICBiYXNlLnNlbGVjdE5leHQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIC8vIGNhbGxlZCBmcm9tIGhlYWRlclxuICAgICAgICAgICAgdmFyICRlbHQgPSAkKGUudGFyZ2V0KTtcbiAgICAgICAgICAgIHZhciBpZHggPSAkZWx0LmRhdGEoJ2lkeCcpO1xuXG4gICAgICAgICAgICBpZiAoaWR4IDwgYmFzZS4kaGVhZGVycy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkSGVhZGVySWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBiYXNlLmRlc2VsZWN0SGVhZGVySWR4KHNlbGVjdGVkSGVhZGVySWR4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYmFzZS5zZWxlY3RIZWFkZXJJZHgoaWR4ICsgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgYmFzZS5zZWxlY3RQcmV2ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAvLyBjYWxsZWQgZnJvbSBoZWFkZXJcbiAgICAgICAgICAgIHZhciAkZWx0ID0gJChlLnRhcmdldCk7XG4gICAgICAgICAgICB2YXIgaWR4ID0gJGVsdC5kYXRhKCdpZHgnKTtcblxuICAgICAgICAgICAgaWYgKGlkeCA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRIZWFkZXJJZHggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGJhc2UuZGVzZWxlY3RIZWFkZXJJZHgoc2VsZWN0ZWRIZWFkZXJJZHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBiYXNlLnNlbGVjdEhlYWRlcklkeChpZHggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBoYXBwZW5zIGR1cmluZyBrZXlib2FyZCBvcGVyYXRpb25zIG9uIGp1bXBpbmcgYWNyb3NzIHRoZSBoZWFkZXJzIGFuZCB3aGVuIGZvY3VzaW5nIG9uIHRhYmJpbmcgdGhyb3VnaCB0aGUgcGFnZVxuICAgICAgICBiYXNlLnNlbGVjdEhlYWRlcklkeCA9IGZ1bmN0aW9uKGlkeCkge1xuICAgICAgICAgICAgdmFyICRlbHQgPSBiYXNlLiRoZWFkZXJzLmVxKGlkeCk7XG5cbiAgICAgICAgICAgICRlbHQuYWRkQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAkc2VsZWN0ZWRIZWFkZXIgPSAkZWx0O1xuICAgICAgICAgICAgJHNlbGVjdGVkSGVhZGVyLmF0dHIoJ2FyaWEtc2VsZWN0ZWQnLCB0cnVlKTtcblxuICAgICAgICAgICAgc2VsZWN0ZWRIZWFkZXJJZHggPSBpZHg7XG4gICAgICAgICAgICBiYXNlLiRoZWFkZXJzLm9mZignZm9jdXMnLCBiYXNlLm9uSGVhZGVyRm9jdXMpO1xuICAgICAgICAgICAgJGVsdC5mb2N1cygpO1xuICAgICAgICAgICAgYmFzZS4kaGVhZGVycy5vbignZm9jdXMnLCBiYXNlLm9uSGVhZGVyRm9jdXMpO1xuICAgICAgICB9O1xuICAgICAgICBiYXNlLmRlc2VsZWN0SGVhZGVySWR4ID0gZnVuY3Rpb24oaWR4KSB7XG4gICAgICAgICAgICB2YXIgJGVsdCA9IGJhc2UuJGhlYWRlcnMuZXEoaWR4KTtcblxuICAgICAgICAgICAgJGVsdC5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgIGlmICgkc2VsZWN0ZWRIZWFkZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAkc2VsZWN0ZWRIZWFkZXIuYXR0cignYXJpYS1zZWxlY3RlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRzZWxlY3RlZEhlYWRlciA9IG51bGw7XG4gICAgICAgICAgICBzZWxlY3RlZEhlYWRlcklkeCA9IC0xO1xuICAgICAgICB9O1xuXG4gICAgICAgIGJhc2UudG9nZ2xlID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHZhciAkZWx0ID0gJCh0aGlzKS5jbG9zZXN0KCdzZWN0aW9uJyk7XG4gICAgICAgICAgICB2YXIgY2xpY2tlZGlkeCA9IHBhcnNlSW50KCRlbHQuYXR0cignZGF0YS1hY2NvcmRpb24taWR4JykpO1xuXG4gICAgICAgICAgICBpZiAoJGVsdC5oYXNDbGFzcygnaXMtZXhwYW5kZWQnKSkge1xuICAgICAgICAgICAgICAgIC8vIGp1c3QgY2xvc2luZyB0aGlzIGVsZW1lbnRcbiAgICAgICAgICAgICAgICBiYXNlLmNsb3NlSWR4KGNsaWNrZWRpZHgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBiYXNlLiRpdGVtcy5lYWNoKGZ1bmN0aW9uKGlkeCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWR4ID09PSBjbGlja2VkaWR4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYXNlLm9wZW5JZHgoaWR4KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2UuY2xvc2VJZHgoaWR4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGJhc2Uub3BlbklkeCA9IGZ1bmN0aW9uKGlkeCkge1xuICAgICAgICAgICAgdmFyICRjdXJpdGVtID0gYmFzZS4kaXRlbXMuZXEoaWR4KTtcblxuICAgICAgICAgICAgcHJldkhlaWdodCA9ICRjdXJpdGVtLmhlaWdodCgpO1xuICAgICAgICAgICAgdmFyIGN1cnJXaW5TY3JUcCA9ICQod2luZG93KS5zY3JvbGxUb3AoKTtcblxuICAgICAgICAgICAgaWYgKCRjdXJpdGVtLmhhc0NsYXNzKCdpcy1leHBhbmRlZCcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJGN1cml0ZW0uYWRkQ2xhc3MoJ2lzLWV4cGFuZGVkJyk7XG4gICAgICAgICAgICAkKCcubGZnQW5hbHl0aWNzOmZpcnN0JywgJGN1cml0ZW0pLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAgICAgICBiYXNlLiRoZWFkZXJzLmVxKGlkeCkuYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICBiYXNlLiRjb250ZW50SG9sZGVycy5lcShpZHgpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICBiYXNlLiRjb250ZW50SG9sZGVycy5lcShpZHgpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgYmFzZS4kY29udGVudEhvbGRlcnMuZXEoaWR4KS5hdHRyKCd0YWJpbmRleCcsICcwJyk7XG5cbiAgICAgICAgICAgIGJhc2UuJGNvbnRlbnRIb2xkZXJzLmVxKGlkeCkuc3RvcCgpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICdtYXgtaGVpZ2h0JzogMzAwMFxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYmFzZS4kY29udGVudEhvbGRlcnMuZXEoaWR4KS5jc3MoJ21heC1oZWlnaHQnLCAnYXV0bycpO1xuICAgICAgICAgICAgfSkucHJvbWlzZSgpLmRvbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbFRwVmFsLCBib2R5O1xuXG4gICAgICAgICAgICAgICAgc2Nyb2xsVHBWYWwgPSAkKCcjJyArIGJhc2UuJGhlYWRlcnMuZXEoaWR4KS5hdHRyKCdpZCcpKS5vZmZzZXQoKS50b3A7XG4gICAgICAgICAgICAgICAgYm9keSA9ICQoJ2h0bWwsIGJvZHknKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1TdGF0ZSA9PT0gJ21vYmlsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgYm9keS5zY3JvbGxUb3Aoc2Nyb2xsVHBWYWwpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGJvZHkuc3RvcCgpLmFuaW1hdGUoe3Njcm9sbFRvcDpzY3JvbGxUcFZhbH0sICc1MDAnLCAnc3dpbmcnLCBmdW5jdGlvbigpIHt9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBzY3JvbGxUcFZhbCA9IChzY3JvbGxUcFZhbCAtIDEwKSAtICQoJy5Ub3BoZWFkZXInKS5oZWlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJCgnaGVhZGVyJykuaGVpZ2h0KCkpO1xuXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFRwVmFsID0gKHNjcm9sbFRwVmFsIC0gMTApIC0gJCgnaGVhZGVyJykuaGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJvZHkuc2Nyb2xsVG9wKHNjcm9sbFRwVmFsKTtcbiAgICAgICAgICAgICAgICAgICAgYmFzZS5zdGlja3IoJ09wZW4nLCAkY3VyaXRlbS5oZWlnaHQoKSwgY3VycldpblNjclRwLCBzY3JvbGxUcFZhbCk7XG4gICAgICAgICAgICAgICAgICAgIC8vdXNlZCB0byBkZXRlcm1pbmUgaWYgdGhlIHVzZXJBZ2VudCBpcyBJRVxuICAgICAgICAgICAgICAgICAgICAvLyB2YXIgaXNJRU9yRWRnZSA9IC9tc2llXFxzfGVkZ2VcXC8vaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KVxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpc0lFT3JFZGdlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gYm9keS5zdG9wKCkuYW5pbWF0ZSh7c2Nyb2xsVG9wOnNjcm9sbFRwVmFsfSwgJzUwMCcsICdzd2luZycsIGZ1bmN0aW9uKCkge30pO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIGJhc2UuY2xvc2VJZHggPSBmdW5jdGlvbihpZHgpIHtcbiAgICAgICAgICAgIHZhciAkY3VyaXRlbSA9IGJhc2UuJGl0ZW1zLmVxKGlkeCk7XG5cbiAgICAgICAgICAgIGlmICghJGN1cml0ZW0uaGFzQ2xhc3MoJ2lzLWV4cGFuZGVkJykpIHtcbiAgICAgICAgICAgICAgICAvLyBhbHJlYWR5IGNsb3NlZFxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYmFzZS4kaGVhZGVycy5lcShpZHgpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIGJhc2UuJGNvbnRlbnRIb2xkZXJzLmVxKGlkeCkuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICAgICAgYmFzZS4kY29udGVudEhvbGRlcnMuZXEoaWR4KS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICBiYXNlLiRjb250ZW50SG9sZGVycy5lcShpZHgpLmF0dHIoJ2RhdGEtaW5mbycsICcnKTtcbiAgICAgICAgICAgIGJhc2UuJGNvbnRlbnRIb2xkZXJzLmVxKGlkeCkuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgICAgIGlmIChwYXJhbVN0YXRlICE9PSAnbW9iaWxlJykge1xuICAgICAgICAgICAgICAgIGJhc2Uuc3RpY2tyKCdDbG9zZScsICRjdXJpdGVtLmhlaWdodCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJhc2UuJGNvbnRlbnRIb2xkZXJzLmVxKGlkeCkuc3RvcCgpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICdtYXgtaGVpZ2h0JzogMFxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYmFzZS4kY29udGVudEhvbGRlcnMuZXEoaWR4KS5jc3MoJ21heC1oZWlnaHQnLCAnJyk7XG4gICAgICAgICAgICAgICAgJGN1cml0ZW0ucmVtb3ZlQ2xhc3MoJ2lzLWV4cGFuZGVkJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBiYXNlLnN0aWNrciA9IGZ1bmN0aW9uKGV2ZW50VHlwZSwgZHluYW1pY0hlaWdodCwgY3VycldpblNjclRwLCBzY3JvbGxUcFZhbCkge1xuICAgICAgICAgICAgaWYgKHN0aWNreUVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RpY2t5UGFkZGluZyA9IHBhcnNlSW50KHN0aWNreUVsLmNzcygncGFkZGluZy10b3AnKSk7XG4gICAgICAgICAgICAgICAgdmFyIHN0aWNreVBybnRQb3NpdGlvbiA9IHN0aWNreVBhcmVudEVsLmhlaWdodCgpICsgc3RpY2t5UGFyZW50RWwucG9zaXRpb24oKS50b3AgKyBzLm9mZnNldEJvdHRvbTtcbiAgICAgICAgICAgICAgICB2YXIgcmlnaHROYXZIZWlnaHQgPSAwO1xuXG4gICAgICAgICAgICAgICAgaWYgKCQoJy5yaWdodC1yYWlsLW5hdicpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHROYXZIZWlnaHQgPSAkKCcucmlnaHQtcmFpbC1uYXYnKS5oZWlnaHQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRUeXBlID09PSAnQ2xvc2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0aWNreVBybnRQb3NpdGlvbiA9IHN0aWNreVBybnRQb3NpdGlvbiAtIGR5bmFtaWNIZWlnaHQgKyBwcmV2SGVpZ2h0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnRUeXBlID09PSAnT3BlbicpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RpY2t5UHJudFBvc2l0aW9uID0gc3RpY2t5UHJudFBvc2l0aW9uO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciB3aW5TY3JsVG9wID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xuICAgICAgICAgICAgICAgIHZhciBzdGlja3lQcm50VG9wID0gc3RpY2t5UGFyZW50RWwub2Zmc2V0KCkudG9wO1xuICAgICAgICAgICAgICAgIHZhciBzdGlja3lIZWlnaHQgPSBzdGlja3lFbC5oZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgIGlmICh3aW5TY3JsVG9wID4gKHN0aWNreVBybnRUb3AgKyByZWxhdGl2ZU9mZnNldCAtIHJpZ2h0TmF2SGVpZ2h0KSAmJiBzdGlja3lQcm50UG9zaXRpb24gPj0gKHdpblNjcmxUb3AgKyBzdGlja3lIZWlnaHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudFR5cGUgPT09ICdDbG9zZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKCcucmlnaHQtcmFpbC1uYXYnKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoKHN0aWNreVBybnRUb3AgKyByZWxhdGl2ZU9mZnNldCAtIHJpZ2h0TmF2SGVpZ2h0KSAtIHJpZ2h0TmF2SGVpZ2h0KSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RpY2t5RWwuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndG9wJzogKChzdGlja3lQcm50VG9wICsgcmVsYXRpdmVPZmZzZXQgLSByaWdodE5hdkhlaWdodCkgLSByaWdodE5hdkhlaWdodCkgKyAncHgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdxdWV1ZScgICA6IHMucXVldWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZWFzaW5nJyAgOiBzLmVhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkdXJhdGlvbic6IHMuZHVyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGlja3lFbC5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvcCc6ICgkKHdpbmRvdykuc2Nyb2xsVG9wKCkgLSAoc3RpY2t5UHJudFRvcCArIHJlbGF0aXZlT2Zmc2V0KSkgKyAncHgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncXVldWUnICAgOiBzLnF1ZXVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZWFzaW5nJyAgOiBzLmVhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2R1cmF0aW9uJzogcy5kdXJhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChNYXRoLmNlaWwoY3VycldpblNjclRwIC8gMTApICogMTApID09PSAoTWF0aC5jZWlsKHNjcm9sbFRwVmFsIC8gMTApICogMTApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCgnLnJpZ2h0LXJhaWwtbmF2JykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKChzdGlja3lQcm50VG9wICsgcmVsYXRpdmVPZmZzZXQgLSByaWdodE5hdkhlaWdodCkgLSByaWdodE5hdkhlaWdodCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0aWNreUVsLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvcCc6ICgkKHdpbmRvdykuc2Nyb2xsVG9wKCkgLSAoc3RpY2t5UHJudFRvcCArIHJlbGF0aXZlT2Zmc2V0KSkgKyAncHgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdxdWV1ZScgICA6IHMucXVldWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZWFzaW5nJyAgOiBzLmVhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkdXJhdGlvbic6IHMuZHVyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGlja3lFbC5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvcCc6ICgkKHdpbmRvdykuc2Nyb2xsVG9wKCkgLSAoc3RpY2t5UHJudFRvcCArIHJlbGF0aXZlT2Zmc2V0KSkgKyAncHgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncXVldWUnICAgOiBzLnF1ZXVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZWFzaW5nJyAgOiBzLmVhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2R1cmF0aW9uJzogcy5kdXJhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbFRvcCA9IHN0aWNreVBhcmVudEVsLmhlaWdodCgpIC0gc3RpY2t5RWwuaGVpZ2h0KCkgKyBzLm9mZnNldEJvdHRvbSArIHN0aWNreVBhZGRpbmc7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50VHlwZSA9PT0gJ0Nsb3NlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wID0gc2Nyb2xsVG9wIC0gZHluYW1pY0hlaWdodCArIHByZXZIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCgnLnJpZ2h0LXJhaWwtbmF2JykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcCA9IHNjcm9sbFRvcCAtIHJpZ2h0TmF2SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCQoJy5yaWdodC1yYWlsLW5hdicpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcCA9IHNjcm9sbFRvcCAtIHJpZ2h0TmF2SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0aWNreUVsLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3RvcCc6IHNjcm9sbFRvcCArICdweCdcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3F1ZXVlJyAgIDogcy5xdWV1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdlYXNpbmcnICA6IHMuZWFzaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2R1cmF0aW9uJzogcy5kdXJhdGlvblxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgYmFzZS5pbml0KCk7XG4gICAgfTtcblxuICAgICQuZm4udUlBY2NvcmRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8qIGpzaGludCBub25ldzpmYWxzZSAqL1xuICAgICAgICAgICAgKG5ldyAkLlVJQWNjb3JkaW9uKHRoaXMpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn0pKGpRdWVyeSk7IiwiLyogZ2xvYmFsICQ6ZmFsc2UsIHNzbTpmYWxzZSwgalF1ZXJ5OmZhbHNlICovXG5cbi8vIGJyb2FkY2FzdGluZyBldmVudCB3aGVuZXZlciBicmVha3BvaW50IGNoYW5nZXNcbi8vIG1haW5seSB0YXJnZXRlZCBhdCBwbHVnaW5zIHdoaWNoIG11c3QgYmVoYXZlIGRpZmZlcmVudGx5IGF0IGRpZmZlcmVudCBicmVha3BvaW50c1xuLy8gdGhleSB3b3VsZCBoYXZlIHRvIGxpc3RlbiBhcyBpbjpcbi8vICAkKGRvY3VtZW50KS5vbigncmVzcG9uc2l2ZTpzdGF0ZWNoYW5nZWQnLCBmdW5jdGlvbihlLCBwYXJhbSkge1xuLy8gICAgICBjb25zb2xlLmxvZygnU3dpdGNoZWQgdG8gYnJlYWtwb2ludDonLCBwYXJhbSk7XG4vLyAgfSlcblxuJ3VzZSBzdHJpY3QnO1xuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICBzc20uYWRkU3RhdGUoe1xuICAgICAgICAnaWQnICAgICAgOiAnbW9iaWxlJyxcbiAgICAgICAgJ21heFdpZHRoJzogNzUwLFxuICAgICAgICAnb25FbnRlcicgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGpRdWVyeS5ldmVudC50cmlnZ2VyKCdyZXNwb25zaXZlOnN0YXRlY2hhbmdlZCcsIFsnbW9iaWxlJ10pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgc3NtLmFkZFN0YXRlKHtcbiAgICAgICAgJ2lkJyAgICAgIDogJ3RhYmxldCcsXG4gICAgICAgICdtaW5XaWR0aCc6IDc1MSxcbiAgICAgICAgJ21heFdpZHRoJzogOTk5LFxuICAgICAgICAnb25FbnRlcicgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGpRdWVyeS5ldmVudC50cmlnZ2VyKCdyZXNwb25zaXZlOnN0YXRlY2hhbmdlZCcsIFsndGFibGV0J10pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgc3NtLmFkZFN0YXRlKHtcbiAgICAgICAgJ2lkJyAgICAgIDogJ2Rlc2t0b3AnLFxuICAgICAgICAnbWluV2lkdGgnOiAxMDAwLFxuICAgICAgICAnb25FbnRlcicgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGpRdWVyeS5ldmVudC50cmlnZ2VyKCdyZXNwb25zaXZlOnN0YXRlY2hhbmdlZCcsIFsnZGVza3RvcCddKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHNzbS5yZWFkeSgpO1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gICAgZnVuY3Rpb24gbGZnQmFja1RvVG9wKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgbGFzdFNjcm9sbFkgPSAwO1xyXG4gICAgICAgIHZhciBidHRFbGUgPSBudWxsO1xyXG4gICAgICAgIHZhciBpbnRlcnZhbElkID0gbnVsbDtcclxuICAgICAgICB2YXIgc2Nyb2xsWURpZmYgPSAxMDA7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdpbmRvd09uU2Nyb2xsTGlzdGVuZXIoKSB7XHJcbiAgICAgICAgICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgPCBsYXN0U2Nyb2xsWSkge1xyXG4gICAgICAgICAgICAgICAgYnR0RWxlLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnR0RWxlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGFzdFNjcm9sbFkgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XHJcbiAgICAgICAgICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGJ0dEVsZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBhbmltYXRlU2Nyb2xsKCkge1xyXG4gICAgICAgICAgICBpZiAod2luZG93LnBhZ2VZT2Zmc2V0ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xyXG4gICAgICAgICAgICAgICAgaW50ZXJ2YWxJZCA9IG51bGw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgd2luZG93LnBhZ2VZT2Zmc2V0IC0gc2Nyb2xsWURpZmYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBidHRPbkNsaWNrTGlzdGVuZXIoKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnRlcnZhbElkID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoYW5pbWF0ZVNjcm9sbCwgb3B0aW9ucy5pbnRlcnZhbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyRXZlbnRzKCkge1xyXG4gICAgICAgICAgICB3aW5kb3cub25zY3JvbGwgPSB3aW5kb3dPblNjcm9sbExpc3RlbmVyO1xyXG4gICAgICAgICAgICBidHRFbGUub25jbGljayA9IGJ0dE9uQ2xpY2tMaXN0ZW5lcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlkICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5pZCAhPT0gbnVsbCAmJiBvcHRpb25zLmlkLnRyaW0oKSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIGJ0dEVsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG9wdGlvbnMuaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChidHRFbGUgIT09IHVuZGVmaW5lZCAmJiBidHRFbGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJlZ2lzdGVyRXZlbnRzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaW5pdCgpO1xyXG4gICAgfVxyXG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gQmFjayB0byB0b3AgaW5pdGlhbGl6YXRpb25cclxuICAgICAgICBpZiAoJCgnI2JhY2tUb1RvcCcpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbGZnQmFja1RvVG9wKHtcclxuICAgICAgICAgICAgICAgICdpZCcgICAgICA6ICdiYWNrVG9Ub3AnLFxyXG4gICAgICAgICAgICAgICAgJ2ludGVydmFsJzogMTVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0pKCk7IiwiLyogZ2xvYmFsIHNzbTpmYWxzZSAqL1xuXG4vLyBieSB1c2luZyBuZWdhdmlnZSBtYXJnaW5zLCBleHRlbmRzIHNwZWNpZmllZCBkaXYgdG8gY292ZXIgd2lsbCB3aW5kb3cgd2lkdGhcbi8vIHRoZSBlbGVtZW50cyBtdXN0IGJlIGNlbnRlcmVkIGluIHRoZSBmaXJzdCBwbGFjZSFcblxuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24oJCkge1xuICAgICQuQ29udGVudEV4dGVuZGVyID0gZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGJhc2UgPSB0aGlzO1xuXG4gICAgICAgIGJhc2UuJGVsID0gJChlbCk7XG4gICAgICAgIGJhc2UuZWwgPSBlbDtcblxuICAgICAgICBiYXNlLiRlbC5kYXRhKCdDb250ZW50RXh0ZW5kZXInLCBiYXNlKTtcblxuICAgICAgICB2YXIgY3VycmVudEJyZWFrcG9pbnQgPSAnJztcbiAgICAgICAgdmFyIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHZhciBkZWZlclVwZGF0ZVRpbW91dCA9IG51bGw7XG5cbiAgICAgICAgYmFzZS5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBiYXNlLm9wdGlvbnMgPSAkLmV4dGVuZCh7XG5cbiAgICAgICAgICAgIH0sICQuQ29udGVudEV4dGVuZGVyLmRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgaWYgKGJhc2UuJGVsLmF0dHIoJ2RhdGEtZGlzYWJsZS1mb3ItYnJlYWtwb2ludHMnKSkge1xuICAgICAgICAgICAgICAgIGJhc2Uub3B0aW9ucy5kaXNhYmxlRm9yQnJlYWtwb2ludHMgPSBiYXNlLiRlbC5hdHRyKCdkYXRhLWRpc2FibGUtZm9yLWJyZWFrcG9pbnRzJykuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICcsJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnRCcmVha3BvaW50ID0gZGV0ZWN0Q3VycmVudEJyZWFrcG9pbnQoKTtcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdyZXNwb25zaXZlOnN0YXRlY2hhbmdlZCcsIG9uUmVzcG9uc2l2ZVN0YXRlY2hhbmdlZCk7XG5cbiAgICAgICAgICAgIGhhbmRsZUFjdGl2ZVN0YXRlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGRldGVjdEN1cnJlbnRCcmVha3BvaW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoc3NtLmlzQWN0aXZlKCdkZXNrdG9wJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Rlc2t0b3AnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNzbS5pc0FjdGl2ZSgndGFibGV0JykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RhYmxldCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3NtLmlzQWN0aXZlKCdtb2JpbGUnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnbW9iaWxlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgaGFuZGxlQWN0aXZlU3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChpc0FjdGl2ZUZvckN1cnJlbnRCcmVha3BvaW50KCkpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmF0ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGFjdGl2YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZScsIHVwZGF0ZSk7XG4gICAgICAgICAgICBpc0FjdGl2ZSA9IHRydWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGRlYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZScsIHVwZGF0ZSk7XG4gICAgICAgICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChkZWZlclVwZGF0ZVRpbW91dCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJhc2UuJGVsLmNzcyh7XG4gICAgICAgICAgICAgICAgJ21hcmdpbi1sZWZ0JyA6ICcnLFxuICAgICAgICAgICAgICAgICdtYXJnaW4tcmlnaHQnOiAnJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoZGVmZXJVcGRhdGVUaW1vdXQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWZlclVwZGF0ZVRpbW91dCA9IHNldFRpbWVvdXQoZGVmZXJyZWRVcGRhdGUsIGJhc2Uub3B0aW9ucy5kZWZlclVwZGF0ZU1zZWNzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZGVmZXJyZWRVcGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB3aW5XID0gJCh3aW5kb3cpLndpZHRoKCk7XG4gICAgICAgICAgICB2YXIgZWx0VyA9IGJhc2UuJGVsLm91dGVyV2lkdGgoKTtcblxuICAgICAgICAgICAgdmFyIGRlbHRhID0gTWF0aC5jZWlsKE1hdGguYWJzKCh3aW5XIC0gZWx0VykgLyAyKSk7XG5cbiAgICAgICAgICAgIGJhc2UuJGVsLmNzcyh7XG4gICAgICAgICAgICAgICAgJ21hcmdpbi1sZWZ0JyA6IC1kZWx0YSxcbiAgICAgICAgICAgICAgICAnbWFyZ2luLXJpZ2h0JzogLWRlbHRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgb25SZXNwb25zaXZlU3RhdGVjaGFuZ2VkID0gZnVuY3Rpb24oZSwgbmV3c3RhdGUpIHtcbiAgICAgICAgICAgIGlmIChuZXdzdGF0ZSA9PT0gY3VycmVudEJyZWFrcG9pbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnRCcmVha3BvaW50ID0gbmV3c3RhdGU7XG4gICAgICAgICAgICBoYW5kbGVBY3RpdmVTdGF0ZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBpc0FjdGl2ZUZvckN1cnJlbnRCcmVha3BvaW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gKGJhc2Uub3B0aW9ucy5kaXNhYmxlRm9yQnJlYWtwb2ludHMuaW5kZXhPZihjdXJyZW50QnJlYWtwb2ludCkgPT09IC0xKTtcbiAgICAgICAgfTtcblxuICAgICAgICBiYXNlLmluaXQoKTtcbiAgICB9O1xuXG4gICAgJC5Db250ZW50RXh0ZW5kZXIuZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgICdkaXNhYmxlRm9yQnJlYWtwb2ludHMnOiBbJ21vYmlsZScsICd0YWJsZXQnXSxcbiAgICAgICAgJ2RlZmVyVXBkYXRlTXNlY3MnICAgICA6IDUwMFxuICAgIH07XG5cbiAgICAkLmZuLmNvbnRlbnRFeHRlbmRlciA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8qIGpzaGludCBub25ldzpmYWxzZSAqL1xuICAgICAgICAgICAgKG5ldyAkLkNvbnRlbnRFeHRlbmRlcih0aGlzLCBvcHRpb25zKSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkLmZuLmdldENvbnRlbnRFeHRlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmRhdGEoJ0NvbnRlbnRFeHRlbmRlcicpO1xuICAgIH07XG59KShqUXVlcnkpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1c3RvbVNlbGVjdGJveCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY2xpY2tlZE9uSW1tZWRpYXRlRHJvcERvd24gPSBmYWxzZTtcblxuICAkKCcuY3VzdG9tLXNlbGVjdGJveCcpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZpcnN0VmFsO1xuXG4gICAgaWYgKCQodGhpcykubmV4dCgpLmZpbmQoJ2xpJykuaGFzQ2xhc3MoJ2FjdGl2ZUxpc3QnKSkge1xuICAgICAgZmlyc3RWYWwgPSAkKHRoaXMpLm5leHQoKS5maW5kKCdsaS5hY3RpdmVMaXN0JykudGV4dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmaXJzdFZhbCA9ICQodGhpcykubmV4dCgpLmZpbmQoJ2xpOmZpcnN0LWNoaWxkJykudGV4dCgpO1xuICAgIH1cbiAgICBmaXJzdFZhbCA9IGZpcnN0VmFsLnRyaW0oKTtcbiAgICBpZiAoISgkKCcuY3VzdG9tLXNlbGVjdGJveCcpLmhhc0NsYXNzKCduZy1yZXB0LWVsZW1lbnQtaW5wdXQnKSB8fCAkKCcuY3VzdG9tLXNlbGVjdGJveCcpLmhhc0NsYXNzKFxuICAgICAgJ25nLXJlcHQtZWxlbWVudC1kaXYnKSkpIHtcbiAgICAgICQodGhpcykudmFsKGZpcnN0VmFsKS5hdHRyKCdkYXRhLXZhbCcsIGZpcnN0VmFsKTtcbiAgICB9XG4gIH0pO1xuICAkKGRvY3VtZW50KS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICBjbGlja2VkT25JbW1lZGlhdGVEcm9wRG93biA9IGZhbHNlO1xuICAgICQoJy5jdXN0b20tc2VsZWN0Ym94JykucmVtb3ZlQ2xhc3MoJ2N1c3RvbS1zZWxlY3Rib3gtYWN0aXZlJyk7XG4gICAgJCgnLmN1c3RvbS1zZWxlY3Rib3gtbGlzdC1jb250JykuaGlkZSgpO1xuICB9KTtcblxuICAkKCcuY3VzdG9tLXNlbGVjdGJveCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgLy8gdGhpcy5mb2N1cygpO1xuICAgIC8vICQoJy5jdXN0b20tc2VsZWN0Ym94IGxpJykuYmx1cigpO1xuICAgIC8vIGlmKCEkKCcuY3VzdG9tLXNlbGVjdGJveC1saXN0LWNvbnQgbGknKS5pcygnOmZvY3VzJykpe1xuICAgIC8vICQoJy5jdXN0b20tc2VsZWN0Ym94JykucmVtb3ZlQ2xhc3MoJ2N1c3RvbS1zZWxlY3Rib3gtYWN0aXZlJykubmV4dCgpLmhpZGUoKTtcbiAgICAvLyB9XG4gICAgY2xpY2tlZE9uSW1tZWRpYXRlRHJvcERvd24gPSB0cnVlO1xuICAgIGlmICgkKHRoaXMpLm5leHQoKS5pcygnOnZpc2libGUnKSkge1xuICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnY3VzdG9tLXNlbGVjdGJveC1hY3RpdmUnKS5uZXh0KCkuc2xpZGVVcCgpO1xuICAgIH0gZWxzZSBpZiAoJCh0aGlzKS5oYXNDbGFzcygnY3VzdG9tLXNlbGVjdGJveC1lbGVtZW50LWRvd24nKSkge1xuICAgICAgJCgnLmN1c3RvbS1zZWxlY3Rib3gtbGlzdC1jb250JykucmVtb3ZlQ2xhc3MoJ2N1c3RvbS1zZWxlY3Rib3gtYWN0aXZlJykuaGlkZSgpO1xuICAgICAgJCh0aGlzKS5hZGRDbGFzcygnY3VzdG9tLXNlbGVjdGJveC1hY3RpdmUnKS5uZXh0KCkuY3NzKHtcbiAgICAgICAgJ3Bvc2l0aW9uJzogJ3N0YXRpYydcbiAgICAgIH0pLnNsaWRlRG93bihmdW5jdGlvbigpIHtcbiAgICAgICAgJCh0aGlzKS5jc3MoJ292ZXJmbG93JywgJ2F1dG8nKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAkKCcuY3VzdG9tLXNlbGVjdGJveC1saXN0LWNvbnQnKS5yZW1vdmVDbGFzcygnY3VzdG9tLXNlbGVjdGJveC1hY3RpdmUnKS5oaWRlKCk7XG4gICAgICAkKHRoaXMpLmFkZENsYXNzKCdjdXN0b20tc2VsZWN0Ym94LWFjdGl2ZScpLm5leHQoKS5zbGlkZURvd24oZnVuY3Rpb24oKSB7XG4gICAgICAgICQodGhpcykuY3NzKCdvdmVyZmxvdycsICdhdXRvJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gICQoJy5jdXN0b20tc2VsZWN0Ym94LWFycm93Jykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgJCh0aGlzKS5uZXh0KCkudHJpZ2dlcignY2xpY2snKTtcbiAgfSk7XG4gICQoJy5jdXN0b20tc2VsZWN0Ym94Jykua2V5cHJlc3MoZnVuY3Rpb24oZSkge1xuICAgIGlmIChlLmtleUNvZGUgPT09IDEzKSB7XG4gICAgICAkKHRoaXMpLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgfVxuICB9KTtcbiAgJCgnYm9keScpLm9uKCdjbGljaycsICcuY3VzdG9tLXNlbGVjdGJveC1saXN0LWNvbnQgbGknLCBmdW5jdGlvbihlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgY2xpY2tlZE9uSW1tZWRpYXRlRHJvcERvd24gPSBmYWxzZTtcbiAgICBpZiAoJCh0aGlzKS5kYXRhKCdsaW5rJykgIT09IG51bGwgJiYgJCh0aGlzKS5kYXRhKCdsaW5rJykgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbG9jYXRpb24uaHJlZiA9ICQodGhpcykuZGF0YSgnbGluaycpO1xuICAgIH1cbiAgICB2YXIgc2VsZWN0ZWRWYWw7XG4gICAgdmFyIHNlbGVjdGVkRGF0YVZhbDtcblxuICAgIHNlbGVjdGVkVmFsID0gJCh0aGlzKS50ZXh0KCk7XG4gICAgc2VsZWN0ZWREYXRhVmFsID0gJCh0aGlzKS5hdHRyKCdkYXRhLXZhbCcpO1xuXG4gICAgLy8gaWYgKHNlbGVjdGVkRGF0YVZhbCA9PT0gdW5kZWZpbmVkIHx8IHNlbGVjdGVkRGF0YVZhbCA9PT0gbnVsbCkge31cbiAgICBzZWxlY3RlZERhdGFWYWwgPSAoc2VsZWN0ZWREYXRhVmFsID09PSB1bmRlZmluZWQgfHwgc2VsZWN0ZWREYXRhVmFsID09PSBudWxsKSA/ICcnXG4gICAgICA6IHNlbGVjdGVkRGF0YVZhbDtcbiAgICBzZWxlY3RlZFZhbCA9IHNlbGVjdGVkVmFsLnRyaW0oKTtcbiAgICBpZiAoJCgnLmN1c3RvbS1zZWxlY3Rib3gnKS5oYXNDbGFzcygnbmctcmVwdC1lbGVtZW50LWRpdicpKSB7XG4gICAgICAkKHRoaXMpLnBhcmVudCgpLnByZXYoKS5odG1sKHNlbGVjdGVkVmFsKS5hdHRyKCdkYXRhLXZhbCcsIHNlbGVjdGVkRGF0YVZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQodGhpcykucGFyZW50KCkucHJldigpLnZhbChzZWxlY3RlZFZhbCkuYXR0cignZGF0YS12YWwnLCBzZWxlY3RlZERhdGFWYWwpO1xuICAgIH1cbiAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdjdXN0b20tc2VsZWN0Ym94LWFjdGl2ZScpLnBhcmVudCgpLmhpZGUoKTtcblxuICAgIC8qIEN1c3RvbSBkYXRlIGRyb3Bkb3duICBEb250IHJlbW92ZSB0aGlzIGNvZGUgKi9cbiAgICBpZiAoJCh0aGlzKS5wYXJlbnQoKS5wYXJlbnQoKS5oYXNDbGFzcygnY3VzdG9tLWRhdGUtZHJvcGRvd24nKSkge1xuICAgICAgdmFyIGN1c3RNb250aCA9ICQodGhpcykuY2xvc2VzdCgnLmRhdGUtd3JhcHBlcicpLmZpbmQoJ3VsJykuZXEoMCkuYXR0cignaWQnKSxcbiAgICAgICAgY3VzdERhdGUgPSAkKHRoaXMpLmNsb3Nlc3QoJy5kYXRlLXdyYXBwZXInKS5maW5kKCd1bCcpLmVxKDEpLmF0dHIoJ2lkJyksXG4gICAgICAgIGN1c3RZZWFyID0gJCh0aGlzKS5jbG9zZXN0KCcuZGF0ZS13cmFwcGVyJykuZmluZCgndWwnKS5lcSgyKS5hdHRyKCdpZCcpLFxuICAgICAgICBjdXN0SGlkZG4gPSAkKHRoaXMpLmNsb3Nlc3QoJy5kYXRlLXdyYXBwZXInKS5maW5kKCcuY3VzdG9tLWRhdGUtZHJvcGRvd24tZmxkJykuYXR0cignaWQnKSxcbiAgICAgICAgZGl2RGF0ZSA9ICQodGhpcykuY2xvc2VzdCgnLmRhdGUtd3JhcHBlcicpLmZpbmQoJy5jdXN0b20tZGl2LWRhdGUtZHJvcGRvd24nKS50ZXh0KCksXG4gICAgICAgIGRpdk1vbnRoID0gJCh0aGlzKS5jbG9zZXN0KCcuZGF0ZS13cmFwcGVyJykuZmluZCgnLmN1c3RvbS1kaXYtbW9udGgtZHJvcGRvd24nKS5hdHRyKFxuICAgICAgICAgICdkYXRhLXZhbCcpLFxuICAgICAgICBkaXZZZWFyID0gJCh0aGlzKS5jbG9zZXN0KCcuZGF0ZS13cmFwcGVyJykuZmluZCgnLmN1c3RvbS1kaXYteWVhci1kcm9wZG93bicpLnRleHQoKSxcbiAgICAgICAgZXJyID0gJCh0aGlzKS5jbG9zZXN0KCcuZGF0ZS13cmFwcGVyJykuZmluZCgnLmRhdGUtZmllbGQtY29udGFpbmVyJyk7XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKGN1c3REYXRlLCBjdXN0TW9udGgsIGN1c3RZZWFyLCBjdXN0SGlkZG4sIGRpdkRhdGUsIGRpdk1vbnRoLCBkaXZZZWFyKTtcblxuICAgICAgY2FsY0RhdGUoY3VzdERhdGUsIGN1c3RNb250aCwgY3VzdFllYXIsIGN1c3RIaWRkbiwgZGl2RGF0ZSwgZGl2TW9udGgsIGRpdlllYXIsIGVyciwgJCh0aGlzKS5jbG9zZXN0KFxuICAgICAgICAndWwnKS5hdHRyKCdpZCcpLCAkKHRoaXMpLmNsb3Nlc3QoJy5kYXRlLXdyYXBwZXInKS5maW5kKCcuY3VzdG9tLWRpdi1kYXRlLWRyb3Bkb3duJykpO1xuICAgIH1cbiAgfSk7XG4gICQoJ2JvZHknKS5vbigna2V5cHJlc3MnLCAnLmN1c3RvbS1zZWxlY3Rib3gtbGlzdC1jb250IGxpJywgZnVuY3Rpb24oZSkge1xuICAgIGlmIChlLmtleUNvZGUgPT09IDEzKSB7XG4gICAgICAkKHRoaXMpLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5jdXN0b20tc2VsZWN0Ym94LXdyYXAnKS5maW5kKCcuY3VzdG9tLXNlbGVjdGJveCcpLmZvY3VzKCk7XG4gICAgfVxuICB9KTtcbiAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpIHtcbiAgICAkKCcuY3VzdG9tLXNlbGVjdGJveCcpLnJlbW92ZUNsYXNzKCdjdXN0b20tc2VsZWN0Ym94LWFjdGl2ZScpLm5leHQoKS5oaWRlKCk7XG4gIH0pO1xuXG4gICQoJy5jdXN0b20tc2VsZWN0Ym94Jykub24oJ2JsdXInLCBmdW5jdGlvbigpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFjbGlja2VkT25JbW1lZGlhdGVEcm9wRG93bikge1xuICAgICAgICBpZiAoISQoJy5jdXN0b20tc2VsZWN0Ym94LWxpc3QtY29udCBsaScpLmlzKCc6Zm9jdXMnKSkge1xuICAgICAgICAgICQoJy5jdXN0b20tc2VsZWN0Ym94JykucmVtb3ZlQ2xhc3MoJ2N1c3RvbS1zZWxlY3Rib3gtYWN0aXZlJykubmV4dCgpLmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIDUwMCk7XG4gIH0pO1xuXG4gIC8qICQoJy5jdXN0b20tc2VsZWN0Ym94LWxpc3QtY29udCBsaTpsYXN0LWNoaWxkJykub24oJ2JsdXInLCBmdW5jdGlvbigpIHtcbiAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBpZiAoJCh0aGlzKS5wYXJlbnQoKS5wcmV2KCkuZmluZCgnOmZvY3VzJykubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgICAgICQoJy5jdXN0b20tc2VsZWN0Ym94JykucmVtb3ZlQ2xhc3MoJ2N1c3RvbS1zZWxlY3Rib3gtYWN0aXZlJykubmV4dCgpLmhpZGUoKTtcbiAgICAgICAgICAgfVxuICAgICAgIH0sIDUwMCk7XG4gICB9KTsqL1xufTtcblxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gIGN1c3RvbVNlbGVjdGJveCgpO1xufSk7IiwiLy8gU3ByaW50LTUyOiBCLTE3NTUwOiBFbG9xdWEgaW4tcGFnZSBEcm9wZG93biBmaWVsZCBhbmQgdmFsaWRhdGlvblxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICB2YXIgbXVsdGlkZEh0bWwgPSAnPGRsIGNsYXNzPVwiZHJvcGRvd25cIj48ZHQ+PGEgaHJlZj1cIiNcIj48c3BhbiBjbGFzcz1cInNlbGVjdC1sYWJlbCBmbG9hdGluZy1sYWJlbCBoaWRlXCI+J1xuICAgICsgJ1NlbGVjdCBwcm9kdWN0IHR5cGU8L3NwYW4+PGkgY2xhc3M9XCJmYSBmYS1zb3J0LWRlc2MgY3VzdG9tLWRyb3Bkb3duXCI+PC9pPidcbiAgICArICc8cCBjbGFzcz1cIm11bHRpU2VsXCI+PHNwYW4gY2xhc3M9XCJzZWxlY3RlZE9wdGlvbnNcIj48L3NwYW4+PC9wPjwvYT48L2R0PjxkZD48ZGl2IGNsYXNzPVwibXVsdGlTZWxlY3RcIj48dWw+J1xuICAgICsgJzxsaT48bGFiZWwgY2xhc3M9XCJ1bkNoZWNrQWxsXCI+Q2xlYXIgYWxsPC9sYWJlbD48L2xpPic7XG5cbiAgJCgnZm9ybS5lbHEtaW5saW5lIC5lbG9xdWFNdWx0aVNlbGVjdERyb3BEb3duX19TZWxlY3Qgb3B0aW9uJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgbXVsdGlkZEh0bWwgKz0gJzxsaSBjbGFzcz1cImxmZ2NoZWNrLWJveFwiPjxkaXYgY2xhc3M9XCJjaGVja2JveFwiPjxzcGFuIGNsYXNzPVwiY2hlY2tlZFZhbFwiIHN0eWxlPVwiZGlzcGxheTogbm9uZTtcIj4nICsgJCh0aGlzKS52YWwoKSArICc8L3NwYW4+PC9kaXY+J1xuICAgICAgKyAnPGxhYmVsIGNsYXNzPVwiaW5wLWxibCBpbnAtbGJsLS1jaGtib3hcIj4nICsgJCh0aGlzKS52YWwoKSArICc8L2xhYmVsPjwvbGk+JztcbiAgfSk7XG5cbiAgbXVsdGlkZEh0bWwgKz0gJzwvdWw+PC9kaXY+PC9kZD48L2RsPic7XG4gICQoJ2Zvcm0uZWxxLWlubGluZSAuZWxvcXVhTXVsdGlTZWxlY3REcm9wRG93bl9fU2VsZWN0JykucGFyZW50KCkuYXBwZW5kKG11bHRpZGRIdG1sKTtcbiAgJCgnZm9ybS5lbHEtaW5saW5lIC5lbG9xdWFNdWx0aVNlbGVjdERyb3BEb3duX19TZWxlY3QnKS5oaWRlKCk7XG4gICQoXCJmb3JtLmVscS1pbmxpbmUgLmRyb3Bkb3duIGRkIHVsXCIpLmhpZGUoKTtcblxuICAkKFwiZm9ybS5lbHEtaW5saW5lIC5kcm9wZG93biBkdFwiKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICQoXCJmb3JtLmVscS1pbmxpbmUgLmRyb3Bkb3duIGRkIHVsXCIpLnNsaWRlVG9nZ2xlKCdmYXN0Jyk7XG4gIH0pO1xuXG4gICQoXCJmb3JtLmVscS1pbmxpbmUgLmRyb3Bkb3duIGRkIHVsIGxpIGFcIikub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICQoXCJmb3JtLmVscS1pbmxpbmUgLmRyb3Bkb3duIGRkIHVsXCIpLmhpZGUoKTtcbiAgfSk7XG5cbiAgJChkb2N1bWVudCkuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkY2xpY2tlZCA9ICQoZS50YXJnZXQpO1xuICAgIGlmICghJGNsaWNrZWQucGFyZW50cygpLmhhc0NsYXNzKFwiZHJvcGRvd25cIikpICQoXCJmb3JtLmVscS1pbmxpbmUgLmRyb3Bkb3duIGRkIHVsXCIpLmhpZGUoKTtcbiAgfSk7XG4gIHZhciBzZWxlY3RlZE9wdGlvbkNvdW50ID0gMDtcbiAgdmFyIHNlbGVjdGVkVGV4dHMgPSBcIlwiO1xuICAkKFwiZm9ybS5lbHEtaW5saW5lIGxhYmVsLnVuQ2hlY2tBbGxcIikub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ2Zvcm0uZWxxLWlubGluZSAuZWxvcXVhTXVsdGlTZWxlY3REcm9wRG93bl9fU2VsZWN0IG9wdGlvbicpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgJChcImZvcm0uZWxxLWlubGluZSAubXVsdGlTZWxlY3QgZGl2LmNoZWNrYm94XCIpLnJlbW92ZUNsYXNzKCdjaGVja2VkJyk7XG4gICAgICAkKFwiZm9ybS5lbHEtaW5saW5lIC5lbG9xdWFNdWx0aVNlbGVjdERyb3BEb3duX19TZWxlY3Qgb3B0aW9uXCIpLnByb3AoJ3NlbGVjdGVkJywgZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgc2VsZWN0ZWRPcHRpb25Db3VudCA9IDA7XG4gICAgc2VsZWN0ZWRUZXh0cyA9IFwiXCI7XG4gICAgJCgnZm9ybS5lbHEtaW5saW5lIC5zZWxlY3RlZE9wdGlvbnMnKS50ZXh0KHNlbGVjdGVkVGV4dHMpO1xuICAgICQoXCJmb3JtLmVscS1pbmxpbmUgLmRyb3Bkb3duIGR0IGEgc3Bhbi5zZWxlY3QtbGFiZWxcIikucmVtb3ZlQ2xhc3MoXCJwdWxsLXVwXCIpO1xuICAgICQoXCJmb3JtLmVscS1pbmxpbmUgLmRyb3Bkb3duIGR0IGEgc3Bhbi5zZWxlY3QtbGFiZWxcIikucmVtb3ZlQ2xhc3MoXCJwdWxsLXVwLWV4dHJhXCIpO1xuICB9KTtcblxuXG5cbiAgJChcImZvcm0uZWxxLWlubGluZSAubXVsdGlTZWxlY3QgZGl2LmNoZWNrYm94XCIpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcblxuICAgICQoXCJmb3JtLmVscS1pbmxpbmUgLmRyb3Bkb3duIGR0IGEgc3Bhbi5zZWxlY3QtbGFiZWxcIikuYWRkQ2xhc3MoXCJwdWxsLXVwXCIpO1xuICAgICQoXCJmb3JtLmVscS1pbmxpbmUgLmRyb3Bkb3duIGR0IGEgc3Bhbi5zZWxlY3QtbGFiZWxcIikuYWRkQ2xhc3MoXCJwdWxsLXVwLWV4dHJhXCIpO1xuICAgICQodGhpcykudG9nZ2xlQ2xhc3MoJ2NoZWNrZWQnKTtcblxuICAgIHZhciB0aXRsZSA9ICQodGhpcykuZmluZCgnc3Bhbi5jaGVja2VkVmFsJykuaHRtbCgpLFxuICAgICAgdGl0bGUgPSAkKHRoaXMpLmZpbmQoJ3NwYW4uY2hlY2tlZFZhbCcpLmh0bWwoKSArIFwiLFwiO1xuICAgIHZhciB0aXRsZU5ldyA9ICQodGhpcykuZmluZCgnc3Bhbi5jaGVja2VkVmFsJykuaHRtbCgpO1xuXG4gICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoXCJjaGVja2VkXCIpKSB7XG4gICAgICB2YXIgdGl0bGVIdG1sID0gJzxzcGFuIHN0eWxlPVwiZGlzcGxheTogbm9uZTtcIiB0aXRsZT1cIicgKyB0aXRsZSArICdcIj4nICsgdGl0bGUgKyAnPC9zcGFuPic7XG4gICAgICAkKCdmb3JtLmVscS1pbmxpbmUgLm11bHRpU2VsJykuYXBwZW5kKHRpdGxlSHRtbCk7XG4gICAgICAkKFwiZm9ybS5lbHEtaW5saW5lIC5lbG9xdWFNdWx0aVNlbGVjdERyb3BEb3duX19TZWxlY3Qgb3B0aW9uW3ZhbHVlPSdcIiArIHRpdGxlLnJlcGxhY2UoXCIsXCIsIFwiXCIpICsgXCInXVwiKS5wcm9wKCdzZWxlY3RlZCcsIHRydWUpO1xuICAgICAgLy8gTW9kaWZpY2F0aW9uIHRvIGFkZCBzaW1wbGUgdGV4dCByYXRoZXIgdGhhbiBzcGFuXG4gICAgICBpZiAoc2VsZWN0ZWRUZXh0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNlbGVjdGVkVGV4dHMgKz0gXCIsIFwiICsgdGl0bGVOZXc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZFRleHRzID0gdGl0bGVOZXc7XG4gICAgICB9XG5cbiAgICAgIC8vIE1hdGNoIHRoZSBcIixcIiBpbiB0aGUgc2VsZWN0ZWRUZXh0cyB0byBnZXQgdGhlIGNvdW50IG9mIG9wdGlvbnMgc2VsZWN0ZWRcbiAgICAgIHNlbGVjdGVkT3B0aW9uQ291bnQgPSBzZWxlY3RlZFRleHRzLm1hdGNoKC8sL2lnbSk7XG4gICAgICBzZWxlY3RlZE9wdGlvbkNvdW50ID0gc2VsZWN0ZWRPcHRpb25Db3VudCA/IHNlbGVjdGVkT3B0aW9uQ291bnQubGVuZ3RoICsgMSA6IDA7XG4gICAgICBpZiAoc2VsZWN0ZWRPcHRpb25Db3VudCA+IDMpIHtcbiAgICAgICAgJCgnZm9ybS5lbHEtaW5saW5lIC5zZWxlY3RlZE9wdGlvbnMnKS50ZXh0KHNlbGVjdGVkT3B0aW9uQ291bnQgKyBcIiBzZWxlY3RlZFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoJ2Zvcm0uZWxxLWlubGluZSAuc2VsZWN0ZWRPcHRpb25zJykudGV4dChzZWxlY3RlZFRleHRzKTtcbiAgICAgIH1cbiAgICAgIC8vJChcIi5oaWRlXCIpLmhpZGUoKTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICAkKCdzcGFuW3RpdGxlPVwiJyArIHRpdGxlICsgJ1wiXScpLnJlbW92ZSgpO1xuICAgICAgJChcImZvcm0uZWxxLWlubGluZSAuZWxvcXVhTXVsdGlTZWxlY3REcm9wRG93bl9fU2VsZWN0IG9wdGlvblt2YWx1ZT0nXCIgKyB0aXRsZS5yZXBsYWNlKFwiLFwiLCBcIlwiKSArIFwiJ11cIikucHJvcCgnc2VsZWN0ZWQnLCBmYWxzZSk7XG4gICAgICAkKCdmb3JtLmVscS1pbmxpbmUgLm11bHRpU2VsJykuY3NzKCd3aGl0ZS1zcGFjZScsICdub3JtYWwnKTtcblxuICAgICAgc2VsZWN0ZWRUZXh0cyA9IHNlbGVjdGVkVGV4dHMucmVwbGFjZSh0aXRsZU5ldywgXCJcIik7XG4gICAgICBzZWxlY3RlZFRleHRzID0gc2VsZWN0ZWRUZXh0cy5yZXBsYWNlKFwiLCAsIFwiLCBcIiwgXCIpO1xuICAgICAgaWYgKHNlbGVjdGVkVGV4dHMuc3Vic3RyaW5nKDAsIDIpID09IFwiLCBcIikgc2VsZWN0ZWRUZXh0cyA9IHNlbGVjdGVkVGV4dHMuc3Vic3RyaW5nKDIpO1xuICAgICAgLy9pZiAoc2VsZWN0ZWRUZXh0cy5zdGFydHNXaXRoKFwiLCBcIikpIHNlbGVjdGVkVGV4dHMgPSBzZWxlY3RlZFRleHRzLnN1YnN0cmluZygyKTtcbiAgICAgIGlmIChzZWxlY3RlZFRleHRzLnN1YnN0cmluZyhzZWxlY3RlZFRleHRzLmxlbmd0aCAtIDIpID09IFwiLCBcIikgc2VsZWN0ZWRUZXh0cyA9IHNlbGVjdGVkVGV4dHMuc3Vic3RyaW5nKDAsIHNlbGVjdGVkVGV4dHMubGVuZ3RoIC0gMik7XG4gICAgICAvL2lmIChzZWxlY3RlZFRleHRzLmVuZHNXaXRoKFwiLCBcIikpIHNlbGVjdGVkVGV4dHMgPSBzZWxlY3RlZFRleHRzLnN1YnN0cmluZygwLCBzZWxlY3RlZFRleHRzLmxlbmd0aC0yKTtcbiAgICAgIHNlbGVjdGVkT3B0aW9uQ291bnQgPSBzZWxlY3RlZFRleHRzLm1hdGNoKC8sL2lnbSk7XG4gICAgICBzZWxlY3RlZE9wdGlvbkNvdW50ID0gc2VsZWN0ZWRPcHRpb25Db3VudCA/IHNlbGVjdGVkT3B0aW9uQ291bnQubGVuZ3RoICsgMSA6IDA7XG4gICAgICBpZiAoc2VsZWN0ZWRPcHRpb25Db3VudCA8PSAzKSB7XG4gICAgICAgICQoJ2Zvcm0uZWxxLWlubGluZSAuc2VsZWN0ZWRPcHRpb25zJykudGV4dChzZWxlY3RlZFRleHRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoJ2Zvcm0uZWxxLWlubGluZSAuc2VsZWN0ZWRPcHRpb25zJykudGV4dChzZWxlY3RlZE9wdGlvbkNvdW50ICsgXCIgc2VsZWN0ZWRcIik7XG4gICAgICB9XG5cbiAgICAgIC8vaWYgKCQoJ2Zvcm0uZWxxLWlubGluZSAubXVsdGlTZWw6bm90KDpoYXMoc3BhbikpJykubGVuZ3RoID09PSAwKSB7XG4gICAgICBpZiAoc2VsZWN0ZWRUZXh0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICQoXCJmb3JtLmVscS1pbmxpbmUgLmRyb3Bkb3duIGR0IGEgc3Bhbi5zZWxlY3QtbGFiZWxcIikuYWRkQ2xhc3MoXCJwdWxsLXVwXCIpO1xuICAgICAgICAkKFwiZm9ybS5lbHEtaW5saW5lIC5kcm9wZG93biBkdCBhIHNwYW4uc2VsZWN0LWxhYmVsXCIpLmFkZENsYXNzKFwicHVsbC11cC1leHRyYVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoXCJmb3JtLmVscS1pbmxpbmUgLmRyb3Bkb3duIGR0IGEgc3Bhbi5zZWxlY3QtbGFiZWxcIikucmVtb3ZlQ2xhc3MoXCJwdWxsLXVwXCIpO1xuICAgICAgICAkKFwiZm9ybS5lbHEtaW5saW5lIC5kcm9wZG93biBkdCBhIHNwYW4uc2VsZWN0LWxhYmVsXCIpLnJlbW92ZUNsYXNzKFwicHVsbC11cC1leHRyYVwiKTtcbiAgICAgIH1cbiAgICAgICQoJ2Zvcm0uZWxxLWlubGluZSAubXVsdGlTZWwnKS5jc3MoJ3doaXRlLXNwYWNlJywgJ25vd3JhcCcpO1xuICAgIH1cbiAgfSk7XG59KTtcbi8vIEVuZCBvZiBTcHJpbnQtNTI6IEItMTc1NTA6IEVsb3F1YSBpbi1wYWdlIERyb3Bkb3duIGZpZWxkIGFuZCB2YWxpZGF0aW9uXG5cbiIsIid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uKCQpIHtcbiAgICB2YXIgd2hpY2hEZXZpY2U7XG5cbiAgICAkKGRvY3VtZW50KS5vbigncmVzcG9uc2l2ZTpzdGF0ZWNoYW5nZWQnLCBmdW5jdGlvbihlLCBwYXJhbSkge1xuICAgICAgICB3aGljaERldmljZSA9IHBhcmFtO1xuICAgIH0pO1xuICAgIHZhciB3aW5XaWQsIHR4dEVsZW1MZWZ0LFxuICAgICAgICBsZWZ0VmFsdWUgPSAxMjUsXG4gICAgICAgIGVsZW1Qb3NWYWx1ZSA9IDI0MCxcbiAgICAgICAgZWxlbVBvc1ZhbHVlQiA9IDE1MCxcbiAgICAgICAgZWxlbVBvcztcblxuICAgIGFuZ3VsYXIuZWxlbWVudCgnLmZvcm0tdHh0aGVscCcpLm9uKCdtb3VzZW92ZXIgZm9jdXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgd2luV2lkID0gYW5ndWxhci5lbGVtZW50KHdpbmRvdykud2lkdGgoKTtcblxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQodGhpcykuZmluZCgnLmZvcm0tdHh0aGVscC13cmFwJykuc2hvdygpLnByb21pc2UoKS5kb25lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdHh0RWxlbUxlZnQgPSBhbmd1bGFyLmVsZW1lbnQodGhpcykub2Zmc2V0KCkubGVmdDtcbiAgICAgICAgICAgIGVsZW1Qb3MgPSAod2luV2lkIC0gdHh0RWxlbUxlZnQpO1xuICAgICAgICAgICAgaWYgKHR4dEVsZW1MZWZ0IDwgbGVmdFZhbHVlICYmIGVsZW1Qb3MgPiBlbGVtUG9zVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQodGhpcykuZmluZCgnLmZvcm0tdHh0aGVscC1jb250JykuY3NzKCdsZWZ0JywgJy0xNXB4Jyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR4dEVsZW1MZWZ0ID4gbGVmdFZhbHVlICYmIGVsZW1Qb3MgPCBlbGVtUG9zVmFsdWVCKSB7XG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KHRoaXMpLmZpbmQoJy5mb3JtLXR4dGhlbHAtY29udCcpLmNzcygnbGVmdCcsICctMjE1cHgnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAod2hpY2hEZXZpY2UgPT09ICdtb2JpbGUnKSB7XG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KHRoaXMpLmZpbmQoJy5mb3JtLXR4dGhlbHAtY29udCcpLmNzcygnbGVmdCcsIC0odHh0RWxlbUxlZnQgLyAyKVxuICAgICAgICAgICAgICAgICAgICArICdweCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQodGhpcykuYWRkQ2xhc3MoJ3Zpc2libGUtZWxlbScpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGFuZ3VsYXIuZWxlbWVudCgnLmZvcm0tdHh0aGVscCcpLm9uKCdtb3VzZW91dCBibHVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCh0aGlzKS5maW5kKCcuZm9ybS10eHRoZWxwLXdyYXAnKS5oaWRlKCk7XG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCh0aGlzKS5yZW1vdmVDbGFzcygndmlzaWJsZS1lbGVtJyk7XG4gICAgfSk7XG4gICAgYW5ndWxhci5lbGVtZW50KCcuZm9ybS10eHRoZWxwJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSk7XG4gICAgYW5ndWxhci5lbGVtZW50KCcuZm9ybS10b29sdGlwLWNsb3NlJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmZvcm0tdHh0aGVscC13cmFwJykucmVtb3ZlQ2xhc3MoJ3Zpc2libGUtZWxlbScpO1xuICAgIH0pO1xufSkoalF1ZXJ5KTsiLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgdmFyICRjYXJvdXNlbFRvcENvbnRXaWQgPSAkKCcuY2Fyb3VzZWwtdG9wLWNvbnQnKS5wYXJlbnQoKSxcbiAgICAgICAgY291bnRUb3AgPSAwLFxuICAgICAgICBtb2JpbGVXaWQgPSA3NjcsXG4gICAgICAgIHRhYmxldFdpZCA9IDEwMjMsXG4gICAgICAgIHNob3dMaXN0VG9wLCB1cGRhdGVkV2lkVG9wLFxuICAgICAgICAkY2Fyb3VzZWxUb3BDb250V2lkTGlzdCA9ICQoJy5jYXJvdXNlbC10b3AtY29udCBsaScpLmVxKDApLFxuICAgICAgICBjYXJvdXNlbFRvcENvbnRMZW5ndGggPSAkKCcuY2Fyb3VzZWwtdG9wLWNvbnQgbGknKS5sZW5ndGgsXG4gICAgICAgIGNhcm91c2VsVG9wQ29udFdpZExpc3RMZW5ndGgsIGNhcm91c2VsVG9wQ29udFVMV2lkO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gY2Fyb3VzZWxUb3BDb250TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2Fyb3VzZWxUb3ByZXNpemUoaSk7XG4gICAgfVxuICAgICQoJy5jYXJvdXNlbC10b3AtY291bnQnKS52YWwoMCk7XG4gICAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPD0gY2Fyb3VzZWxUb3BDb250TGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBlbGVtSW5kZXggPSBqO1xuXG4gICAgICAgICAgICBjYXJvdXNlbFRvcHJlc2l6ZShlbGVtSW5kZXgpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgJCgnLmNhcm91c2VsLXRvcC1yaWdodC1hcnJvdycpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgJHRvdGFsVG9wQ2Fyb3VzZWxMaXN0ID0gJCh0aGlzKS5jbG9zZXN0KCcuYmlvU2xpZGVyJykuZmluZCgnLmNhcm91c2VsLXRvcC1jb250IGxpJyk7XG5cbiAgICAgICAgY291bnRUb3AgPSBwYXJzZUludCgkKHRoaXMpLmNsb3Nlc3QoJ3NwYW4nKS5maW5kKCdpbnB1dCcpLnZhbCgpKTtcbiAgICAgICAgaWYgKChjb3VudFRvcCA+PSAwKSAmJiBjb3VudFRvcCA8ICgoJHRvdGFsVG9wQ2Fyb3VzZWxMaXN0Lmxlbmd0aCAtIHNob3dMaXN0VG9wKSkpIHtcbiAgICAgICAgICAgIGNvdW50VG9wID0gcGFyc2VJbnQoJCh0aGlzKS5jbG9zZXN0KCdzcGFuJykuZmluZCgnaW5wdXQnKS52YWwoKSkgKyAxO1xuICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCdzcGFuJykuZmluZCgnaW5wdXQnKS52YWwoY291bnRUb3ApO1xuICAgICAgICAgICAgdmFyIGxlZnRWYWxUb3BDYXJvdXMgPSAoY291bnRUb3AgKiB1cGRhdGVkV2lkVG9wKSArIChjb3VudFRvcCAqIHBhcnNlSW50KFxuICAgICAgICAgICAgICAgICRjYXJvdXNlbFRvcENvbnRXaWRMaXN0LmNzcygnbWFyZ2luLXJpZ2h0JykpKSArIChjb3VudFRvcCAqIHBhcnNlSW50KFxuICAgICAgICAgICAgICAgICRjYXJvdXNlbFRvcENvbnRXaWRMaXN0LmNzcygnbWFyZ2luLWxlZnQnKSkpO1xuXG4gICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5iaW9TbGlkZXInKS5maW5kKCcuY2Fyb3VzZWwtdG9wLWNvbnQnKS5zdG9wKCkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgJ2xlZnQnOiAtbGVmdFZhbFRvcENhcm91cyArICdweCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJCh0aGlzKS5wcmV2KCkuYWRkQ2xhc3MoJ2Nhcm91c2VsLXRvcC1sZWZ0LWFycm93Jyk7XG4gICAgICAgICAgICBpZiAoY291bnRUb3AgPj0gKCgkdG90YWxUb3BDYXJvdXNlbExpc3QubGVuZ3RoIC0gc2hvd0xpc3RUb3ApKSkge1xuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2Nhcm91c2VsLXRvcC1yaWdodC1hcnJvdycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgJCgnLmNhcm91c2VsLXRvcC1sZWZ0LWFycm93Jykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvdW50VG9wID0gcGFyc2VJbnQoJCh0aGlzKS5jbG9zZXN0KCdzcGFuJykuZmluZCgnaW5wdXQnKS52YWwoKSk7XG4gICAgICAgIHZhciAkdG90YWxUb3BDYXJvdXNlbExpc3QgPSAkKHRoaXMpLmNsb3Nlc3QoJy5iaW9TbGlkZXInKS5maW5kKCcuY2Fyb3VzZWwtdG9wLWNvbnQgbGknKTtcblxuICAgICAgICBpZiAoKGNvdW50VG9wID4gMCkgJiYgY291bnRUb3AgPD0gKCR0b3RhbFRvcENhcm91c2VsTGlzdC5sZW5ndGggLSBzaG93TGlzdFRvcCkpIHtcbiAgICAgICAgICAgIGNvdW50VG9wID0gcGFyc2VJbnQoJCh0aGlzKS5jbG9zZXN0KCdzcGFuJykuZmluZCgnaW5wdXQnKS52YWwoKSkgLSAxO1xuICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCdzcGFuJykuZmluZCgnaW5wdXQnKS52YWwoY291bnRUb3ApO1xuICAgICAgICAgICAgdmFyIGxlZnRWYWxUb3BDYXJvdXMgPSAoY291bnRUb3AgKiB1cGRhdGVkV2lkVG9wKSArIChjb3VudFRvcCAqIHBhcnNlSW50KFxuICAgICAgICAgICAgICAgICRjYXJvdXNlbFRvcENvbnRXaWRMaXN0LmNzcygnbWFyZ2luLXJpZ2h0JykpKSArIChjb3VudFRvcCAqIHBhcnNlSW50KFxuICAgICAgICAgICAgICAgICRjYXJvdXNlbFRvcENvbnRXaWRMaXN0LmNzcygnbWFyZ2luLWxlZnQnKSkpO1xuXG4gICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5iaW9TbGlkZXInKS5maW5kKCcuY2Fyb3VzZWwtdG9wLWNvbnQnKS5zdG9wKHRydWUsIGZhbHNlKS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAnbGVmdCc6IC1sZWZ0VmFsVG9wQ2Fyb3VzICsgJ3B4J1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkKHRoaXMpLm5leHQoKS5hZGRDbGFzcygnY2Fyb3VzZWwtdG9wLXJpZ2h0LWFycm93Jyk7XG4gICAgICAgICAgICBpZiAoY291bnRUb3AgPD0gMCkge1xuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2Nhcm91c2VsLXRvcC1sZWZ0LWFycm93Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGNhcm91c2VsVG9wcmVzaXplKGVsZW1JbmRleCkge1xuICAgICAgICBjYXJvdXNlbFRvcENvbnRXaWRMaXN0TGVuZ3RoID0gJCgnLmNhcm91c2VsLXRvcC1jb250JykuZXEoZWxlbUluZGV4KS5maW5kKCdsaScpLmxlbmd0aDtcbiAgICAgICAgJCgnLmxlZnQuY2Fyb3VzZWwtdG9wLWNvbnRyb2wnKS5yZW1vdmVDbGFzcygnY2Fyb3VzZWwtdG9wLWxlZnQtYXJyb3cnKTtcbiAgICAgICAgJCgnLmNhcm91c2VsLXRvcC1jb250JykuY3NzKCdsZWZ0JywgJzAnKTtcbiAgICAgICAgJCgnLmNhcm91c2VsLXRvcC1jb3VudCcpLnZhbCgwKTtcbiAgICAgICAgY291bnRUb3AgPSAwO1xuICAgICAgICB2YXIgd2luZFdpZCA9ICQod2luZG93KS53aWR0aCgpLFxuICAgICAgICAgICAgbGlzdE1hcmdpblRvcENhcm91cyA9IHBhcnNlSW50KCRjYXJvdXNlbFRvcENvbnRXaWRMaXN0LmNzcygnbWFyZ2luLXJpZ2h0JykpO1xuXG4gICAgICAgICQoJy5sZWZ0LmNhcm91c2VsLXRvcC1jb250cm9sJykucmVtb3ZlQ2xhc3MoJ2Nhcm91c2VsLXRvcC1sZWZ0LWFycm93Jyk7XG4gICAgICAgICQoJy5yaWdodC5jYXJvdXNlbC10b3AtY29udHJvbCcpLmFkZENsYXNzKCdjYXJvdXNlbC10b3AtcmlnaHQtYXJyb3cnKTtcbiAgICAgICAgaWYgKHdpbmRXaWQgPD0gbW9iaWxlV2lkKSB7XG4gICAgICAgICAgICBzaG93TGlzdFRvcCA9IDI7XG4gICAgICAgICAgICB1cGRhdGVkV2lkVG9wID0gJGNhcm91c2VsVG9wQ29udFdpZC53aWR0aCgpIC8gc2hvd0xpc3RUb3A7XG4gICAgICAgICAgICB1cGRhdGVkV2lkVG9wID0gdXBkYXRlZFdpZFRvcCAtIGxpc3RNYXJnaW5Ub3BDYXJvdXM7XG4gICAgICAgICAgICB1cGRhdGVkV2lkVG9wID0gdXBkYXRlZFdpZFRvcCArIDEwO1xuICAgICAgICB9IGVsc2UgaWYgKHdpbmRXaWQgPD0gdGFibGV0V2lkKSB7XG4gICAgICAgICAgICBzaG93TGlzdFRvcCA9IDQ7XG4gICAgICAgICAgICB1cGRhdGVkV2lkVG9wID0gJGNhcm91c2VsVG9wQ29udFdpZC53aWR0aCgpIC8gc2hvd0xpc3RUb3A7XG4gICAgICAgICAgICB1cGRhdGVkV2lkVG9wID0gdXBkYXRlZFdpZFRvcCAtIChsaXN0TWFyZ2luVG9wQ2Fyb3VzKTtcbiAgICAgICAgICAgIHVwZGF0ZWRXaWRUb3AgPSB1cGRhdGVkV2lkVG9wICsgMTA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaG93TGlzdFRvcCA9IDU7XG4gICAgICAgICAgICB1cGRhdGVkV2lkVG9wID0gJGNhcm91c2VsVG9wQ29udFdpZC53aWR0aCgpIC8gc2hvd0xpc3RUb3A7XG4gICAgICAgICAgICB1cGRhdGVkV2lkVG9wID0gdXBkYXRlZFdpZFRvcCAtIGxpc3RNYXJnaW5Ub3BDYXJvdXM7XG4gICAgICAgICAgICB1cGRhdGVkV2lkVG9wID0gdXBkYXRlZFdpZFRvcCArIDU7XG4gICAgICAgIH1cbiAgICAgICAgY2Fyb3VzZWxUb3BDb250VUxXaWQgPSAodXBkYXRlZFdpZFRvcCAqIGNhcm91c2VsVG9wQ29udFdpZExpc3RMZW5ndGgpICsgKGxpc3RNYXJnaW5Ub3BDYXJvdXNcbiAgICAgICAgICAgICogY2Fyb3VzZWxUb3BDb250V2lkTGlzdExlbmd0aCk7XG4gICAgICAgICQoJy5jYXJvdXNlbC10b3AtY29udCcpLmVxKGVsZW1JbmRleCkuY3NzKCd3aWR0aCcsIGNhcm91c2VsVG9wQ29udFVMV2lkICsgJ3B4JykuZmluZCgnbGknKS5jc3MoJ3dpZHRoJyxcbiAgICAgICAgICAgIHVwZGF0ZWRXaWRUb3AgKyAncHgnKTtcbiAgICB9XG59KTsiLCIvKmdsb2JhbCBzc206ZmFsc2UgKi9cbi8vYWN0aXZhdGVkIGJ5IGRhdGEtdG9nZ2xlPSdleHBhbmRhYmxlLXNlYXJjaC1maWVsZCdcbi8vYWx3YXlzIGV4cGFuZGVkIG9uIG1vYmlsZS5cblxuKGZ1bmN0aW9uKCQpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgJC5FeHBhbmRhYmxlU2VhcmNoRmllbGQgPSBmdW5jdGlvbihlbCwgb3B0aW9ucykge1xuXG4gICAgICAgIHZhciBiYXNlID0gdGhpcztcbiAgICAgICAgYmFzZS4kZWwgPSAkKGVsKTtcbiAgICAgICAgYmFzZS5lbCA9IGVsO1xuICAgICAgICBiYXNlLiRlbC5kYXRhKCdFeHBhbmRhYmxlU2VhcmNoRmllbGQnLCBiYXNlKTtcblxuICAgICAgICB2YXIgJGJ1dHRvbiA9IGJhc2UuJGVsLmZpbmQoJy5VSUJ1dHRvbicpO1xuICAgICAgICB2YXIgJHRleHRmaWVsZCA9IGJhc2UuJGVsLmZpbmQoJ2lucHV0W3R5cGU9c2VhcmNoXScpO1xuXG4gICAgICAgIGJhc2UuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBiYXNlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJC5FeHBhbmRhYmxlU2VhcmNoRmllbGQuZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAkYnV0dG9uLm9uKCdtb3VzZWRvd24gdG91Y2hkb3duJywgb25TZWFyY2hCdXR0b25DbGljayk7XG4gICAgICAgICAgICAkYnV0dG9uLmJpbmQoJ2tleWRvd24uc3BhY2UnLCBvblNlYXJjaEJ1dHRvbkNsaWNrKTtcbiAgICAgICAgICAgICRidXR0b24uYmluZCgna2V5ZG93bi5yZXR1cm4nLCBvblNlYXJjaEJ1dHRvbkNsaWNrKTtcbiAgICAgICAgICAgICR0ZXh0ZmllbGQub24oJ2ZvY3VzJywgb25UZXh0RmllbGRGb2N1cyk7XG5cbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdyZXNwb25zaXZlOnN0YXRlY2hhbmdlZCcsIGZ1bmN0aW9uKGUsIHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlID09PSAnbW9iaWxlJykge1xuICAgICAgICAgICAgICAgICAgICBiYXNlLiRlbC5yZW1vdmVDbGFzcygnaXMtY29sbGFwc2VkJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYmFzZS4kZWwuYWRkQ2xhc3MoJ2lzLWNvbGxhcHNlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWFyY2hGaWVsZFJld2lyZSgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChzc20uaXNBY3RpdmUoJ21vYmlsZScpKSB7XG4gICAgICAgICAgICAgICAgYmFzZS4kZWwucmVtb3ZlQ2xhc3MoJ2lzLWNvbGxhcHNlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBvblRleHRGaWVsZEZvY3VzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaXNDb2xsYXBzZWQoKSkge1xuICAgICAgICAgICAgICAgIHNlYXJjaEZpZWxkRXhwYW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB2YXIgcGVyZm9ybVNlYXJjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLypqc2hpbnQgZGV2ZWw6dHJ1ZSAqL1xuICAgICAgICAgICAgdmFyIHNlYXJoUGFyYW0gPSAkKFwiI3NlYXJjaFBhcmFtXCIpLnZhbCgpO1xuXG4gICAgICAgICAgICBpZiAoc2VhcmNoUGFnZVVSTCAhPT0gbnVsbCAmJiBzZWFyY2hQYWdlVVJMICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzZWFyY2hQYWdlVVJMID0gc2VhcmNoUGFnZVVSTCArIFwiJnE9XCIgKyBzZWFyaFBhcmFtO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gc2VhcmNoUGFnZVVSTDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgb25TZWFyY2hCdXR0b25DbGljayA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgIGlmIChzc20uaXNBY3RpdmUoJ21vYmlsZScpKSB7XG4gICAgICAgICAgICAgICAgcGVyZm9ybVNlYXJjaCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNDb2xsYXBzZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWFyY2hGaWVsZEV4cGFuZCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlcmZvcm1TZWFyY2goKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgb25TZWFyY2hLZXlwcmVzcyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDEzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIFwiZXZlbnRfbmFtZVwiOiBcInNlYXJjaFwiLFxuICAgICAgICAgICAgICAgICAgICBcImV2ZW50X2FjdGlvblwiOiBcInNlYXJjaFwiLFxuICAgICAgICAgICAgICAgICAgICBcImV2ZW50X3R5cGVcIjogXCJnbG9iYWxcIlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdXRhZy5saW5rKGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgLy9qdXN0IGZvciBkZW1vIHJpZ2h0IG5vd1xuICAgICAgICAgICAgICAgIHBlcmZvcm1TZWFyY2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgc2VhcmNoRmllbGRSZXdpcmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICR0ZXh0ZmllbGQub2ZmKCdibHVyJywgc2VhcmNoRmllbGRDb2xsYXBzZSk7XG4gICAgICAgICAgICAkdGV4dGZpZWxkLm9mZigna2V5cHJlc3MnLCBvblNlYXJjaEtleXByZXNzKTtcbiAgICAgICAgICAgICR0ZXh0ZmllbGQub24oJ2JsdXInLCBzZWFyY2hGaWVsZENvbGxhcHNlKTtcbiAgICAgICAgICAgICR0ZXh0ZmllbGQub24oJ2tleXByZXNzJywgb25TZWFyY2hLZXlwcmVzcyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHNlYXJjaEZpZWxkRXhwYW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvL2NvbW1lbnRpbmcgdGhpcyBhcyBvbiBwcmVzcyBvbiB0ZXh0IGZpZWxkIHdlIG5vIG5lZWQgdG8gc2VuZCBhbmFseXRpY3MuXG4gICAgICAgICAgICAvKnZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgIFwiZXZlbnRfbmFtZVwiIDogXCJzZWFyY2hcIixcbiAgICAgICAgICAgICAgICBcImV2ZW50X2FjdGlvblwiIDogXCJzZWFyY2hcIixcbiAgICAgICAgICAgICAgICBcImV2ZW50X3R5cGVcIiA6IFwiZ2xvYmFsXCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB1dGFnLmxpbmsoZGF0YSk7IFxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGJhc2UuJGVsLnJlbW92ZUNsYXNzKCdpcy1jb2xsYXBzZWQnKTtcbiAgICAgICAgICAgICR0ZXh0ZmllbGQuZm9jdXMoKTtcbiAgICAgICAgICAgICR0ZXh0ZmllbGQub24oJ2JsdXInLCBzZWFyY2hGaWVsZENvbGxhcHNlKTtcbiAgICAgICAgICAgICR0ZXh0ZmllbGQub24oJ2tleXByZXNzJywgb25TZWFyY2hLZXlwcmVzcyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHNlYXJjaEZpZWxkQ29sbGFwc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGJhc2UuJGVsLmFkZENsYXNzKCdpcy1jb2xsYXBzZWQnKTtcbiAgICAgICAgICAgICR0ZXh0ZmllbGQub2ZmKCdibHVyJywgc2VhcmNoRmllbGRDb2xsYXBzZSk7XG4gICAgICAgICAgICAkdGV4dGZpZWxkLm9mZigna2V5cHJlc3MnLCBvblNlYXJjaEtleXByZXNzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgaXNDb2xsYXBzZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlLiRlbC5oYXNDbGFzcygnaXMtY29sbGFwc2VkJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgYmFzZS5pbml0KCk7XG4gICAgfTtcblxuICAgICQuRXhwYW5kYWJsZVNlYXJjaEZpZWxkLmRlZmF1bHRPcHRpb25zID0ge307XG5cbiAgICAkLmZuLmV4cGFuZGFibGVTZWFyY2hGaWVsZCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8qanNoaW50IG5vbmV3OmZhbHNlICovXG4gICAgICAgICAgICAobmV3ICQuRXhwYW5kYWJsZVNlYXJjaEZpZWxkKHRoaXMsIG9wdGlvbnMpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICQuZm4uZ2V0RXhwYW5kYWJsZVNlYXJjaEZpZWxkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEoJ0V4cGFuZGFibGVTZWFyY2hGaWVsZCcpO1xuICAgIH07XG5cbn0pKCBqUXVlcnkgKTsiLCIndXNlIHN0cmljdCc7XG5cbi8vIG1ha2VzIGltYWdlcyAoID4gaW1nICkgaW5zaWRlIGRpdiB0byBmaWxsIHRoZSBkaXYsIG9ubHkgZmlyc3QgZm91bmQgaW1hZ2UgaXMgaGFuZGxlZCB0aGlzIHdheVxuKGZ1bmN0aW9uKCQpIHtcbiAgICAkLkltYWdlRmlsbCA9IGZ1bmN0aW9uKGVsLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBiYXNlID0gdGhpcztcblxuICAgICAgICBiYXNlLiRlbCA9ICQoZWwpO1xuICAgICAgICBiYXNlLmVsID0gZWw7XG5cbiAgICAgICAgYmFzZS4kZWwuZGF0YSgnSW1hZ2VGaWxsJywgYmFzZSk7XG5cbiAgICAgICAgdmFyICRpbWcgPSBiYXNlLiRlbC5maW5kKCdpbWcnKTtcbiAgICAgICAgdmFyIGltZ3csIGltZ2g7XG5cbiAgICAgICAgdmFyIGN1cnJlbnRCcmVha3BvaW50ID0gJyc7XG4gICAgICAgIHZhciBpc0FjdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIGJhc2UuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYmFzZS5vcHRpb25zID0gJC5leHRlbmQoe1xuXG4gICAgICAgICAgICB9LCAkLkltYWdlRmlsbC5kZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIGJhc2UuJGVsLmNzcyh7XG4gICAgICAgICAgICAgICAgJ292ZXJmbG93JzogJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzogJ3JlbGF0aXZlJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChiYXNlLiRlbC5hdHRyKCdkYXRhLWRpc2FibGUtZm9yLWJyZWFrcG9pbnRzJykpIHtcbiAgICAgICAgICAgICAgICBiYXNlLm9wdGlvbnMuZGlzYWJsZUZvckJyZWFrcG9pbnRzID0gYmFzZS4kZWwuYXR0cignZGF0YS1kaXNhYmxlLWZvci1icmVha3BvaW50cycpLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnLCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjdXJyZW50QnJlYWtwb2ludCA9IGRldGVjdEN1cnJlbnRCcmVha3BvaW50KCk7XG4gICAgICAgICAgICAkKGRvY3VtZW50KS5vbigncmVzcG9uc2l2ZTpzdGF0ZWNoYW5nZWQnLCBvblJlc3BvbnNpdmVTdGF0ZWNoYW5nZWQpO1xuXG4gICAgICAgICAgICBpZiAoJGltZy5wcm9wKCdjb21wbGV0ZScpKSB7XG4gICAgICAgICAgICAgICAgd2lyZUltZygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkaW1nLm9uKCdsb2FkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpcmVJbWcoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZGV0ZWN0Q3VycmVudEJyZWFrcG9pbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChzc20uaXNBY3RpdmUoJ2Rlc2t0b3AnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGVza3RvcCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3NtLmlzQWN0aXZlKCd0YWJsZXQnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAndGFibGV0JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzc20uaXNBY3RpdmUoJ21vYmlsZScpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtb2JpbGUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBvblJlc3BvbnNpdmVTdGF0ZWNoYW5nZWQgPSBmdW5jdGlvbihlLCBuZXdzdGF0ZSkge1xuICAgICAgICAgICAgaWYgKG5ld3N0YXRlID09PSBjdXJyZW50QnJlYWtwb2ludCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3VycmVudEJyZWFrcG9pbnQgPSBuZXdzdGF0ZTtcbiAgICAgICAgICAgIGhhbmRsZUFjdGl2ZVN0YXRlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGlzQWN0aXZlRm9yQ3VycmVudEJyZWFrcG9pbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAoYmFzZS5vcHRpb25zLmRpc2FibGVGb3JCcmVha3BvaW50cy5pbmRleE9mKGN1cnJlbnRCcmVha3BvaW50KSA9PT0gLTEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBoYW5kbGVBY3RpdmVTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGlzQWN0aXZlRm9yQ3VycmVudEJyZWFrcG9pbnQoKSkge1xuICAgICAgICAgICAgICAgIGFjdGl2YXRlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlYWN0aXZhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYmFzZS4kZWwuY3NzKHtcbiAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOiAnaGlkZGVuJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkaW1nLmNzcyh7XG4gICAgICAgICAgICAgICAgJ3dpZHRoJyAgIDogJycsXG4gICAgICAgICAgICAgICAgJ2hlaWdodCcgIDogJycsXG4gICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzogJ2Fic29sdXRlJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICQod2luZG93KS5vbigncmVzaXplJywgYmFzZS5yZXNpemUpO1xuICAgICAgICAgICAgYmFzZS5yZXNpemUoKTtcbiAgICAgICAgICAgIGlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCh3aW5kb3cpLm9mZigncmVzaXplJywgYmFzZS5yZXNpemUpO1xuICAgICAgICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcblxuICAgICAgICAgICAgYmFzZS4kZWwuY3NzKHtcbiAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOiAndmlzaWJsZSdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJGltZy5jc3Moe1xuICAgICAgICAgICAgICAgICd3aWR0aCcgICA6ICcnLFxuICAgICAgICAgICAgICAgICdoZWlnaHQnICA6ICcnLFxuICAgICAgICAgICAgICAgICdwb3NpdGlvbic6ICdyZWxhdGl2ZSdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciB3aXJlSW1nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbWd3ID0gJGltZy5nZXQoMCkubmF0dXJhbFdpZHRoO1xuICAgICAgICAgICAgaW1naCA9ICRpbWcuZ2V0KDApLm5hdHVyYWxIZWlnaHQ7XG5cbiAgICAgICAgICAgIC8vIGltZ3JhdGlvID0gaW1ndyAvIGltZ2g7XG5cbiAgICAgICAgICAgIGhhbmRsZUFjdGl2ZVN0YXRlKCk7XG5cbiAgICAgICAgICAgIHNldEludGVydmFsKGJhc2UucmVzaXplLCAxMDAwKTtcbiAgICAgICAgfTtcblxuICAgICAgICBiYXNlLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEhlaWdodCwgcmF0aW8sIHRhcmdldFdpZHRoO1xuXG4gICAgICAgICAgICBpZiAoaW1ndyAvIGltZ2ggPCBiYXNlLiRlbC5pbm5lcldpZHRoKCkgLyBiYXNlLiRlbC5pbm5lckhlaWdodCgpKSB7XG4gICAgICAgICAgICAgICAgLy8gYWRqdXN0aW5nIGJ5IGhlaWdodFxuICAgICAgICAgICAgICAgIHRhcmdldEhlaWdodCA9IGJhc2UuJGVsLmlubmVySGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgcmF0aW8gPSB0YXJnZXRIZWlnaHQgLyBpbWdoO1xuICAgICAgICAgICAgICAgIHRhcmdldFdpZHRoID0gaW1ndyAqIHJhdGlvO1xuXG4gICAgICAgICAgICAgICAgJGltZy5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAnd2lkdGgnIDogdGFyZ2V0V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiB0YXJnZXRIZWlnaHRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0FkanVzdCB3aWR0aCcpO1xuICAgICAgICAgICAgICAgIHRhcmdldFdpZHRoID0gYmFzZS4kZWwuaW5uZXJXaWR0aCgpO1xuICAgICAgICAgICAgICAgIHJhdGlvID0gdGFyZ2V0V2lkdGggLyBpbWd3O1xuICAgICAgICAgICAgICAgIHRhcmdldEhlaWdodCA9IGltZ2ggKiByYXRpbztcblxuICAgICAgICAgICAgICAgICRpbWcuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJyA6IHRhcmdldFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogdGFyZ2V0SGVpZ2h0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgYmFzZS5pbml0KCk7XG4gICAgfTtcblxuICAgICQuSW1hZ2VGaWxsLmRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgICAvLyBjb3VsZCBiZSAnbW9iaWxlJywgJ3RhYmxldCcgYW5kICdkZXNrdG9wJ1xuICAgICAgICAnZGlzYWJsZUZvckJyZWFrcG9pbnRzJzogW11cbiAgICB9O1xuXG4gICAgJC5mbi5pbWFnZUZpbGwgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvKiBqc2hpbnQgbm9uZXc6ZmFsc2UgKi9cbiAgICAgICAgICAgIChuZXcgJC5JbWFnZUZpbGwodGhpcywgb3B0aW9ucykpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJC5mbi5nZXRJbWFnZUZpbGwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YSgnSW1hZ2VGaWxsJyk7XG4gICAgfTtcbn0pKGpRdWVyeSk7IiwiLyoqXG4gKiAgY29udmVydHMgYW55IHNpbmdsZS1sZXZlbCBVTCB3aXRoIExJID4gYSBpbnRvIGEgcHVsbGRvd24gbWVudVxuICogICBnZXR0aW5nIGluc3RhbmNlOiAkKCd1bCcpLmdldExpc3RQdWxsZG93bigpO1xuICogICBnZXR0aW5nIGN1cnJlbnQgc2VsZWN0aW9uIGluZGV4OiAkKCd1bCcpLmdldExpc3RQdWxsZG93bigpLmdldEN1cnJlbnRJZHgoKTtcbiAqICAgc2V0dGluZyBjdXJyZW50IHNlbGVjdGlvbiBpbmRleDogJCgndWwnKS5nZXRMaXN0UHVsbGRvd24oKS5zZXRDdXJyZW50SWR4KGlkeCk7XG4gKiAgICggaW5kZXhlcyBhcmUgemVyby1iYXNlZCApXG4gKlxuICogICBUbyBhcHBseSBkZWZhdWx0IGNvbG9yIHNjaGVtZSB0byB0aGUgbGlzdCwgdXNlIGNsYXNzIC5VTExpc3RQdWxsZG93biBvbiA8dWw+XG4gKlxuICogICBFdmVudHM6XG4gKiAgICAgIC0gd2hlbmV2ZXIgc2VsZWN0aW9uIGNoYW5nZXMsIHRoZSBmb2xsb3dpbmcgZXZlbnQgaXMgZmlyZWRcbiAqICAgICAgQGV2ZW50IGxpc3RwdWxsZG93bjpjaGFuZ2VkXG4gKiAgICAgIHRoZSBldmVudCdzIHBhcmFtMSBpcyB0aGUgbmV3IGlkeFxuICpcbiAqICAgICAgLSB3aGVuZXZlciBhIHB1bGxkb3duIGlzIGV4cGFuZGVkL3Nob3duLCB0aGUgZm9sbG93aW5nIGV2ZW50IGlzIGZpcmVkXG4gKiAgICAgIEBldmVudCBsaXN0cHVsbGRvd246b3BlbmVkXG4gKlxuICogICBFeGFtcGxlOlxuICpcbiAqICAgPHVsIGNsYXNzPVwiVUlMaXN0UHVsbGRvd25cIiBpZD1cImxpc3QtcHVsbGRvd24tdGVzdFwiPlxuICogICAgICA8bGk+SXRlbSAxPC9saT5cbiAqICAgICAgPGxpPkl0ZW0gMjwvbGk+XG4gKiAgICAgIDxsaT5JdGVtIDM8L2xpPlxuICogICA8L3VsXG4gKlxuICogICAkKFwiI2xpc3QtcHVsbGRvd24tdGVzdFwiKS5saXN0UHVsbGRvd24oKTtcbiAqICAgJChcIiNsaXN0LXB1bGxkb3duLXRlc3RcIikub24oXCJsaXN0cHVsbGRvd246Y2hhbmdlZFwiLCBmdW5jdGlvbihlLCBuZXdJZHgpIHtcbiAqICAgICAgY29uc29sZS5sb2coXCJMaXN0IHB1bGxkb3duIGNoYW5nZWQsIG5ldyBJRFggaXM6XCIsIG5ld0lkeCk7XG4gKiAgIH0pO1xuICpcbiAqICAgU3BlY2lmaWMgc3R5bGVzIGNhbiBiZSBnZW5lcmF0ZWQgdXNpbmcgcHVsbGRvd24tbGlzdCgpIFN0eWx1cyBtaXhpbiAoc2VlOiBzdHlsZXMvbWl4aW5zL19saXN0X3B1bGxkb3duX2dlbmVyYXRvci5zdHlsKVxuICpcbiAqICAgZGF0YS0qIHBhcmFtZXRlcnM6XG4gKiAgIC0gZGF0YS1kZWZhdWx0LXByb21wdFxuICogICAtIGRhdGEtZGlzYWJsZS1mb3ItYnJlYWtwb2ludHNcbiAqICAgLSBkYXRhLWVtcHR5LXByb21wdFxuICpcbiAqL1xuXG4vLyByZWFkcyBpbiBkYXRhLWRpc2FibGUtc3RhdGVzIGF0dHJpYnV0ZSBmcm9tIHRoZSBob2xkZXIgZWxlbWVudCAoPHVsPilcbi8vIGV4YW1wbGU6IDx1bCBkYXRhLXRvZ2dsZT0nbGlzdC1wdWxsZG93bicgZGF0YS1kaXNhYmxlLWZvci1icmVha3BvaW50cz0nZGVza3RvcCx0YWJsZXQnPlxuLy8gIG11c3QgYmUgY29tbWEtc2VwYXJhdGVkLCBubyBleHRyYSBzcGFjZXNcbi8vICBpZiBub3QgcHJlc2VudCwgYWN0aXZlIGZvciBhbGwgcmVzcG9uc2l2ZSBicmVha3BvaW50c1xuXG4ndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbigkKSB7XG4gICQuTGlzdFB1bGxkb3duID0gZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgYmFzZSA9IHRoaXM7XG5cbiAgICBiYXNlLiRlbCA9ICQoZWwpO1xuICAgIGJhc2UuZWwgPSBlbDtcblxuICAgIGJhc2UuJGVsLmRhdGEoJ0xpc3RQdWxsZG93bicsIGJhc2UpO1xuXG4gICAgLy8gdGhlIGV2ZW50IGZpcmVkIG9uY2UgdGhlIGxpc3Qgc2VsZWN0aW9uIGhhcyBjaGFuZ2VkXG4gICAgdmFyIENIQU5HRV9FVkVOVCA9ICdsaXN0cHVsbGRvd246Y2hhbmdlZCc7XG4gICAgdmFyIE9QRU5fRVZFTlQgPSAnbGlzdHB1bGxkb3duOm9wZW5lZCc7XG5cbiAgICB2YXIgY3VycmVudEJyZWFrcG9pbnQgPSAnJztcbiAgICB2YXIgJGxpc3RUaXRsZSA9ICQoJzxsaSBjbGFzcz1cImxpc3QtdGl0bGVcIj48YSBocmVmPVwiI1wiPihzZWxlY3Qgb3B0aW9uKTwvYT48L2xpPicpO1xuICAgIHZhciAkbGlzdEl0ZW1zID0gYmFzZS4kZWwuZmluZCgnPmxpJyk7XG5cbiAgICAvLyB3aGljaCBpZHggaXMgY3VycmVudGx5IGJlaW5nIGZvY3VzZWQgb3IgbW91c2Utb3ZlcmVkXG4gICAgdmFyIGN1ckFjdGl2ZUlkeCA9IC0xO1xuXG4gICAgYmFzZS5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygnTGlzdFB1bGxkb3duIGluaXR0aW5nIGZvcjonLCBiYXNlLiRlbCk7XG5cbiAgICAgIGlmIChiYXNlLiRlbC5oYXNDbGFzcygnbGlzdC1wdWxsZG93bi1pbml0aWFsaXplZCcpKSB7XG4gICAgICAgIC8vIG5vIGRvdWJsZSBpbml0c1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBiYXNlLiRlbC5hZGRDbGFzcygnbGlzdC1wdWxsZG93bi1pbml0aWFsaXplZCcpO1xuICAgICAgYmFzZS4kZWwuYWRkQ2xhc3MoJ0xpc3RQdWxsZG93bi1iYXNlJyk7XG5cbiAgICAgIGJhc2Uub3B0aW9ucyA9ICQuZXh0ZW5kKHtcblxuICAgICAgfSwgJC5MaXN0UHVsbGRvd24uZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoYmFzZS4kZWwuYXR0cignZGF0YS1kaXNhYmxlLWZvci1icmVha3BvaW50cycpKSB7XG4gICAgICAgIGJhc2Uub3B0aW9ucy5kaXNhYmxlRm9yQnJlYWtwb2ludHMgPSBiYXNlLiRlbC5hdHRyKCdkYXRhLWRpc2FibGUtZm9yLWJyZWFrcG9pbnRzJykuc3BsaXQoXG4gICAgICAgICAgJywnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJhc2UuJGVsLmF0dHIoJ2RhdGEtZGVmYXVsdC1wcm9tcHQnKSkge1xuICAgICAgICBiYXNlLm9wdGlvbnMuZGVmYXVsdFByb21wdCA9IGJhc2UuJGVsLmF0dHIoJ2RhdGEtZGVmYXVsdC1wcm9tcHQnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRhdGFFbXB0eVByb21wdEF0dHIgPSBiYXNlLiRlbC5hdHRyKCdkYXRhLWVtcHR5LXByb21wdCcpO1xuXG4gICAgICBpZiAoZGF0YUVtcHR5UHJvbXB0QXR0ciA9PT0gJycpIHtcbiAgICAgICAgYmFzZS5vcHRpb25zLmRlZmF1bHRQcm9tcHQgPSAnJztcbiAgICAgIH1cblxuICAgICAgJGxpc3RJdGVtcy5lYWNoKGZ1bmN0aW9uKGlkeCkge1xuICAgICAgICAkKHRoaXMpLmRhdGEoJ2lkeCcsIGlkeCkuYWRkQ2xhc3MoJ2xpc3QtaXRlbScpO1xuICAgICAgICAkKHRoaXMpLmF0dHIoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgICQodGhpcykuYXR0cignYXJpYS1sYWJlbCcsICQodGhpcykuZmluZCgnYScpLmh0bWwoKSk7XG5cbiAgICAgICAgaWYgKCQodGhpcykuZmluZCgnPmEnKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAkKHRoaXMpLmh0bWwoJzxzcGFuPicgKyAkKHRoaXMpLmh0bWwoKSArICc8L3NwYW4+Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBjdXJyZW50QnJlYWtwb2ludCA9IGRldGVjdEN1cnJlbnRCcmVha3BvaW50KCk7XG4gICAgICAkKGRvY3VtZW50KS5vbigncmVzcG9uc2l2ZTpzdGF0ZWNoYW5nZWQnLCBvblJlc3BvbnNpdmVTdGF0ZWNoYW5nZWQpO1xuXG4gICAgICBzZXRDdXJyZW50SWR4KGRldGVjdEN1cnJlbnRJZHgoKSk7XG5cbiAgICAgIGJhc2UuJGVsLnByZXBlbmQoJGxpc3RUaXRsZSk7XG5cbiAgICAgIGJhc2Uuc2V0dXBBY2Nlc3NpYmlsaXR5KCk7XG5cbiAgICAgIGhhbmRsZUFjdGl2ZVN0YXRlKCk7XG5cbiAgICAgIC8vIG9wZW5NZW51KCk7XG4gICAgfTtcblxuICAgIGJhc2UuaXNMaXN0T3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGJhc2UuJGVsLmhhc0NsYXNzKCdpcy1vcGVuJyk7XG4gICAgfTtcblxuICAgIGJhc2Uuc2V0dXBBY2Nlc3NpYmlsaXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgICBiYXNlLiRlbC5hdHRyKCdyb2xlJywgJ2xpc3Rib3gnKTtcbiAgICAgIGJhc2UuJGVsLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICRsaXN0SXRlbXMuYXR0cigncm9sZScsICdvcHRpb24nKTtcblxuICAgICAgdmFyIGxpc3RpZCA9ICdhcmlhLWxpc3QtJyArICQoZG9jdW1lbnQpLmdldFVuaXF1ZUlEKCk7XG5cbiAgICAgIGJhc2UuJGVsLmF0dHIoJ2FyaWEtbGFiZWxsZWRieScsIGxpc3RpZCk7XG4gICAgICAkbGlzdFRpdGxlLmF0dHIoJ2lkJywgbGlzdGlkKTtcblxuICAgICAgJGxpc3RUaXRsZS5maW5kKCdhJykub24oJ2ZvY3VzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGJhc2UuJGVsLmFkZENsYXNzKCdpcy1mb2N1c2VkJyk7XG4gICAgICB9KTtcbiAgICAgICRsaXN0VGl0bGUuZmluZCgnYScpLm9uKCdibHVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGJhc2UuJGVsLnJlbW92ZUNsYXNzKCdpcy1mb2N1c2VkJyk7XG4gICAgICB9KTtcbiAgICAgICRsaXN0SXRlbXMub24oJ21vdXNlZW50ZXInLCBiYXNlLm9uSXRlbU1vdXNlZW50ZXIpO1xuICAgICAgJGxpc3RJdGVtcy5vbignbW91c2VsZWF2ZScsIGJhc2Uub25JdGVtTW91c2VsZWF2ZSk7XG4gICAgfTtcblxuICAgIGJhc2Uuc2V0QWN0aXZlSWR4ID0gZnVuY3Rpb24oaWR4KSB7XG4gICAgICBiYXNlLmNsZWFyQWN0aXZlSWR4KCk7XG4gICAgICAkbGlzdEl0ZW1zLnJlbW92ZUNsYXNzKCdpcy1jdXJyZW50JykuZXEoaWR4KS5hZGRDbGFzcygnaXMtY3VycmVudCcpLmZpbmQoJz5hJykuYWRkQ2xhc3MoXG4gICAgICAgICdpcy1jdXJyZW50Jyk7XG4gICAgICAkbGlzdEl0ZW1zLmVxKGlkeCkuZm9jdXMoKTtcbiAgICAgIGN1ckFjdGl2ZUlkeCA9IGlkeDtcbiAgICB9O1xuICAgIGJhc2UuY2xlYXJBY3RpdmVJZHggPSBmdW5jdGlvbigpIHtcbiAgICAgICRsaXN0SXRlbXMuZmluZCgnLmlzLWN1cnJlbnQnKS5yZW1vdmVDbGFzcygnaXMtY3VycmVudCcpO1xuICAgICAgY3VyQWN0aXZlSWR4ID0gLTE7XG4gICAgfTtcblxuICAgIGJhc2Uub25JdGVtTW91c2VlbnRlciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciAkZWx0ID0gJChlLnRhcmdldCk7XG4gICAgICB2YXIgJGxpID0gJGVsdC5jbG9zZXN0KCdsaScpO1xuICAgICAgdmFyIGVsdGlkeCA9ICRsaS5kYXRhKCdpZHgnKTtcblxuICAgICAgYmFzZS5zZXRBY3RpdmVJZHgoZWx0aWR4KTtcbiAgICB9O1xuICAgIGJhc2Uub25JdGVtTW91c2VsZWF2ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgYmFzZS5jbGVhckFjdGl2ZUlkeCgpO1xuICAgIH07XG5cbiAgICBiYXNlLm9uS2V5VXAgPSBmdW5jdGlvbihlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmIChjdXJBY3RpdmVJZHggPT09IC0xKSB7XG4gICAgICAgIGN1ckFjdGl2ZUlkeCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGN1ckFjdGl2ZUlkeCA+IDApIHtcbiAgICAgICAgY3VyQWN0aXZlSWR4IC09IDE7XG4gICAgICB9XG4gICAgICBiYXNlLnNldEFjdGl2ZUlkeChjdXJBY3RpdmVJZHgpO1xuICAgIH07XG5cbiAgICBiYXNlLm9uS2V5RG93biA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgaWYgKCFiYXNlLmlzTGlzdE9wZW4oKSkge1xuICAgICAgICBvcGVuTWVudSgpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1ckFjdGl2ZUlkeCA9PT0gLTEpIHtcbiAgICAgICAgY3VyQWN0aXZlSWR4ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoY3VyQWN0aXZlSWR4IDwgKCRsaXN0SXRlbXMubGVuZ3RoIC0gMSkpIHtcbiAgICAgICAgY3VyQWN0aXZlSWR4ICs9IDE7XG4gICAgICB9XG4gICAgICBiYXNlLnNldEFjdGl2ZUlkeChjdXJBY3RpdmVJZHgpO1xuICAgIH07XG5cbiAgICBiYXNlLm9uRXNjYXBlID0gZnVuY3Rpb24oZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY2xvc2VNZW51KCk7XG4gICAgfTtcblxuICAgIGJhc2Uub25SZXR1cm4gPSBmdW5jdGlvbihlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmICghYmFzZS5pc0xpc3RPcGVuKCkpIHtcbiAgICAgICAgb3Blbk1lbnUoKTtcbiAgICAgICAgYmFzZS5zZXRBY3RpdmVJZHgoY3VyQWN0aXZlSWR4KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJBY3RpdmVJZHggIT09IC0xKSB7XG4gICAgICAgIC8vIGJhc2Uuc2V0QWN0aXZlSWR4KCRsaS5kYXRhKCdpZHgnKSk7XG4gICAgICAgIC8vIGVudGVyIGtleSBzZWxlY3Rpb24gYW5kIHJlZGlyZWN0IHRvIHBhZ2VcbiAgICAgICAgdmFyICRlbHQgPSAkKGUudGFyZ2V0KTtcbiAgICAgICAgdmFyICRsaSA9ICRlbHQuY2xvc2VzdCgnbGknKTtcblxuICAgICAgICBpZiAoJGxpLmZpbmQoJz4gYScpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gJGxpLmZpbmQoJ2EnKS5hdHRyKCdocmVmJyk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0Q3VycmVudElkeCgkbGkuZGF0YSgnaWR4JykpO1xuICAgICAgICBjbG9zZU1lbnUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHNldEN1cnJlbnRJZHggPSBmdW5jdGlvbihpZHgpIHtcbiAgICAgIHZhciBvcmlnaW5hbElkeCA9IGJhc2UuZ2V0Q3VycmVudElkeCgpO1xuXG4gICAgICB2YXIgdGl0bGU7XG5cbiAgICAgIGlmIChpZHggPT09IC0xKSB7XG4gICAgICAgIGlmIChiYXNlLm9wdGlvbnMuZm9yY2VTZWxlY3Rpb24gPT09IHRydWUpIHtcbiAgICAgICAgICB0aXRsZSA9IGJhc2Uub3B0aW9ucy5kZWZhdWx0UHJvbXB0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlkeCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpZHggPiAkbGlzdEl0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgaWR4ID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgICAgaWYgKCRsaXN0SXRlbXMuZXEoaWR4KS5maW5kKCdhJykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGl0bGUgPSAkbGlzdEl0ZW1zLmVxKGlkeCkuaHRtbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpdGxlID0gJGxpc3RJdGVtcy5lcShpZHgpLmZpbmQoJ2EnKS5odG1sKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJGxpc3RJdGVtcy5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XG4gICAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgICAkbGlzdEl0ZW1zLmVxKGlkeCkuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuICAgICAgfVxuICAgICAgJGxpc3RUaXRsZS5maW5kKCdhJykuaHRtbCh0aXRsZSk7XG4gICAgICAkbGlzdFRpdGxlLmF0dHIoJ2FyaWEtbGFiZWwnLCB0aXRsZSk7XG5cbiAgICAgIGlmIChvcmlnaW5hbElkeCAhPT0gaWR4KSB7XG4gICAgICAgIGJhc2UuJGVsLnRyaWdnZXIoQ0hBTkdFX0VWRU5ULCBbaWR4XSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBkZXRlY3RDdXJyZW50SWR4ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZm91bmRpZHggPSAtMTtcblxuICAgICAgJGxpc3RJdGVtcy5lYWNoKGZ1bmN0aW9uKGlkeCkge1xuICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnaXMtYWN0aXZlJykgPT09IHRydWUpIHtcbiAgICAgICAgICBmb3VuZGlkeCA9IGlkeDtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBmb3VuZGlkeDtcbiAgICB9O1xuXG4gICAgdmFyIG9uUmVzcG9uc2l2ZVN0YXRlY2hhbmdlZCA9IGZ1bmN0aW9uKGUsIG5ld3N0YXRlKSB7XG4gICAgICBpZiAobmV3c3RhdGUgPT09IGN1cnJlbnRCcmVha3BvaW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2xvc2VNZW51KCk7XG5cbiAgICAgIGN1cnJlbnRCcmVha3BvaW50ID0gbmV3c3RhdGU7XG4gICAgICBiYXNlLnVud2lyZSgpO1xuICAgICAgaGFuZGxlQWN0aXZlU3RhdGUoKTtcbiAgICB9O1xuXG4gICAgdmFyIGhhbmRsZUFjdGl2ZVN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoaXNBY3RpdmVGb3JDdXJyZW50QnJlYWtwb2ludCgpKSB7XG4gICAgICAgIGJhc2Uud2lyZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZS51bndpcmUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGlzQWN0aXZlRm9yQ3VycmVudEJyZWFrcG9pbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAoYmFzZS5vcHRpb25zLmRpc2FibGVGb3JCcmVha3BvaW50cy5pbmRleE9mKGN1cnJlbnRCcmVha3BvaW50KSA9PT0gLTEpO1xuICAgIH07XG5cbiAgICB2YXIgZGV0ZWN0Q3VycmVudEJyZWFrcG9pbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzc20uaXNBY3RpdmUoJ2Rlc2t0b3AnKSkge1xuICAgICAgICByZXR1cm4gJ2Rlc2t0b3AnO1xuICAgICAgfVxuICAgICAgaWYgKHNzbS5pc0FjdGl2ZSgndGFibGV0JykpIHtcbiAgICAgICAgcmV0dXJuICd0YWJsZXQnO1xuICAgICAgfVxuICAgICAgaWYgKHNzbS5pc0FjdGl2ZSgnbW9iaWxlJykpIHtcbiAgICAgICAgcmV0dXJuICdtb2JpbGUnO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgb25MaXN0VGl0bGVDbGljayA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgIGlmIChpc01lbnVPcGVuKCkpIHtcbiAgICAgICAgY2xvc2VNZW51KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcGVuTWVudSgpO1xuXG4gICAgICAgIC8vIGNoZWNrIGlmIGdlbmVyYXRpb25hbCBwb3B1cCBpcyBhbHJlYWR5IG9wZW4gb3Igbm90LlxuICAgICAgICAvLyBpZiBvcGVuZWQgY2xvc2UgaXQuXG4gICAgICAgIGlmICgkKCd1bC5Ub3BoZWFkZXItbmF2aWdhdGlvbi1zZWN0aW9ucycpLmhhc0NsYXNzKCdnZW5kcnAtb3BlbicpKSB7XG4gICAgICAgICAgJCgndWwuVG9waGVhZGVyLW5hdmlnYXRpb24tc2VjdGlvbnMnKS5yZW1vdmVDbGFzcygnZ2VuZHJwLW9wZW4nKTtcbiAgICAgICAgfVxuICAgICAgICAkKCcubGlzdC13cmFwcGVyIC5BdWRpZW5jZS1hZ2Utc2VsZWN0b3InKS5oaWRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBpc01lbnVPcGVuID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYmFzZS4kZWwuaGFzQ2xhc3MoJ2lzLW9wZW4nKTtcbiAgICB9O1xuXG4gICAgdmFyIG9uTGlzdEl0ZW1DbGljayA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmICghaXNNZW51T3BlbigpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyICRlbHQgPSAkKGUudGFyZ2V0KTtcblxuICAgICAgaWYgKCRlbHQuaGFzQ2xhc3MoJ2Zvcm0tbGlzdC10eHRoZWxwJykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGVsdC5oYXNDbGFzcygnYWdlc2VsZWN0b3JsaW5rJykpIHtcbiAgICAgICAgJCgnLmxpc3Qtd3JhcHBlciAuQXVkaWVuY2UtYWdlLXNlbGVjdG9yJykuc2hvdygpO1xuICAgICAgICAkKHRoaXMpLnBhcmVudCgpLmFkZENsYXNzKCdnZW5kcnAtb3BlbicpO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyICRsaSA9ICRlbHQuY2xvc2VzdCgnbGknKTtcblxuICAgICAgaWYgKCRsaS5maW5kKCc+IGEnKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSAkbGkuZmluZCgnYScpLmF0dHIoJ2hyZWYnKTtcbiAgICAgIH1cbiAgICAgIHNldEN1cnJlbnRJZHgoJGxpLmRhdGEoJ2lkeCcpKTtcbiAgICB9O1xuXG4gICAgdmFyIG9wZW5NZW51ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyB0YWdnZXJpbmcgdGhlbVxuICAgICAgdmFyIHN0YWdnZXJkZWxheSA9IDI1O1xuICAgICAgdmFyIGFuaW1hdGVzcGVlZCA9IDcwO1xuXG4gICAgICBiYXNlLiRlbC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcbiAgICAgICRsaXN0VGl0bGUuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgICAkbGlzdEl0ZW1zLmVhY2goZnVuY3Rpb24oaWR4KSB7XG4gICAgICAgICQodGhpcykuc3RvcCgpLmNzcyh7XG4gICAgICAgICAgJ29wYWNpdHknICAgOiAnMCcsXG4gICAgICAgICAgJ2ZpbHRlcicgICAgOiAnYWxwaGEob3BhY2l0eT0wKScsXG4gICAgICAgICAgJ3Zpc2liaWxpdHknOiAnaGlkZGVuJ1xuICAgICAgICB9KTtcbiAgICAgICAgJCh0aGlzKS5kZWxheShpZHggKiBzdGFnZ2VyZGVsYXkpXG4gICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAndmlzaWJpbGl0eSc6ICd2aXNpYmxlJ1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmFuaW1hdGUoe1xuICAgICAgICAgICAgJ29wYWNpdHknOiAxLFxuICAgICAgICAgICAgJ2ZpbHRlcicgOiAnYWxwaGEob3BhY2l0eT0xMDApJ1xuICAgICAgICAgIH0sIGFuaW1hdGVzcGVlZCk7XG4gICAgICB9KTtcblxuICAgICAgYmFzZS4kZWwuYWRkQ2xhc3MoJ2lzLW9wZW4nKTtcblxuICAgICAgd2lyZU1lbnVDbG9zZSgpO1xuXG4gICAgICBiYXNlLiRlbC50cmlnZ2VyKE9QRU5fRVZFTlQpO1xuICAgIH07XG5cbiAgICB2YXIgY2xvc2VNZW51ID0gZnVuY3Rpb24oKSB7XG4gICAgICBiYXNlLiRlbC5yZW1vdmVDbGFzcygnaXMtb3BlbicpO1xuICAgICAgdW53aXJlTWVudUNsb3NlKCk7XG5cbiAgICAgIGJhc2UuJGVsLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICRsaXN0VGl0bGUuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcbiAgICAgICRsaXN0VGl0bGUuZmluZCgnYScpLmZvY3VzKCk7XG4gICAgfTtcblxuICAgIGJhc2Uuc2V0U2VsZWN0b3JQb3B1cFN0YXRlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICBiYXNlLiRlbC5hZGRDbGFzcygnaXMtaGlsaXRlZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZS4kZWwucmVtb3ZlQ2xhc3MoJ2lzLWhpbGl0ZWQnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgYmFzZS53aXJlID0gZnVuY3Rpb24oKSB7XG4gICAgICBiYXNlLiRlbC5hZGRDbGFzcygnTGlzdFB1bGxkb3duLWFjdGl2ZScpO1xuICAgICAgYmFzZS4kZWwub24oJ2NsaWNrICB0b3VjaHN0YXJ0Jywgb25MaXN0VGl0bGVDbGljayk7XG4gICAgICAkbGlzdEl0ZW1zLm9uKCdjbGljayAgdG91Y2hzdGFydCcsIG9uTGlzdEl0ZW1DbGljayk7XG5cbiAgICAgIGJhc2UuJGVsLmJpbmQoJ2tleWRvd24udXAnLCBiYXNlLm9uS2V5VXApO1xuICAgICAgYmFzZS4kZWwuYmluZCgna2V5ZG93bi5kb3duJywgYmFzZS5vbktleURvd24pO1xuICAgICAgYmFzZS4kZWwuYmluZCgna2V5ZG93bi5lc2MnLCBiYXNlLm9uRXNjYXBlKTtcbiAgICAgIGJhc2UuJGVsLmJpbmQoJ2tleWRvd24ucmV0dXJuJywgYmFzZS5vblJldHVybik7XG4gICAgfTtcblxuICAgIGJhc2UudW53aXJlID0gZnVuY3Rpb24oKSB7XG4gICAgICBiYXNlLiRlbC5yZW1vdmVDbGFzcygnTGlzdFB1bGxkb3duLWFjdGl2ZScpO1xuICAgICAgYmFzZS4kZWwub2ZmKCdjbGljayAgdG91Y2hzdGFydCcsIG9uTGlzdFRpdGxlQ2xpY2spO1xuICAgICAgJGxpc3RJdGVtcy5vZmYoJ2NsaWNrICB0b3VjaHN0YXJ0Jywgb25MaXN0SXRlbUNsaWNrKTtcbiAgICAgIHVud2lyZU1lbnVDbG9zZSgpO1xuXG4gICAgICBiYXNlLiRlbC51bmJpbmQoJ2tleWRvd24udXAnLCBiYXNlLm9uS2V5VXApO1xuICAgICAgYmFzZS4kZWwudW5iaW5kKCdrZXlkb3duLmRvd24nLCBiYXNlLm9uS2V5RG93bik7XG4gICAgICBiYXNlLiRlbC51bmJpbmQoJ2tleWRvd24uZXNjJywgYmFzZS5vbkVzY2FwZSk7XG4gICAgICBiYXNlLiRlbC51bmJpbmQoJ2tleWRvd24ucmV0dXJuJywgYmFzZS5vblJldHVybik7XG4gICAgfTtcblxuICAgIHZhciB3aXJlTWVudUNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICAkKHdpbmRvdykub24oJ2NsaWNrIHRvdWNoc3RhcnQnLCBjaGVja091dHNpZGVDbGljayk7XG4gICAgfTtcblxuICAgIHZhciB1bndpcmVNZW51Q2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICQod2luZG93KS5vZmYoJ2NsaWNrIHRvdWNoc3RhcnQnLCBjaGVja091dHNpZGVDbGljayk7XG4gICAgfTtcblxuICAgIHZhciBjaGVja091dHNpZGVDbGljayA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgaWYgKCEkKGV2dC50YXJnZXQpLmhhc0NsYXNzKCdMaXN0UHVsbGRvd24nKSAmJiAkKGV2dC50YXJnZXQpLmNsb3Nlc3QoJy5MaXN0UHVsbGRvd24nKS5sZW5ndGhcbiAgICAgICAgPT09IDApIHtcbiAgICAgICAgaWYgKCEkKGV2dC50YXJnZXQpLmlzKCcuTGlzdFB1bGxkb3duLS1yZWdpc3Rlci1hY2NvdW50IC5mb3JtLWxpc3QtdHh0aGVscCcpICYmICQoZXZ0LnRhcmdldClcbiAgICAgICAgICAuY2xvc2VzdCgnLlJlZ2lzdGVyLkF1ZGllbmNlU2VsZWN0b3ItLWRlZmF1bHQnKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAvLyBjbG9zZU1lbnUoKTtcbiAgICAgICAgICAkKCcuUmVnaXN0ZXIuQXVkaWVuY2VTZWxlY3Rvci0tZGVmYXVsdCcpLmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBHZXR0ZXJzL3NldHRlcnNcblxuICAgIC8qKlxuICAgICAqIEdldHMgY3VycmVudCBzZWxlY3Rpb24gaWR4LCB6ZXJvLWJhc2VkXG4gICAgICogQHJldHVybiBlaXRoZXIgc2VsZWN0aW9uIGlkeCwgb3IgLTEgd2hlbiBub3RoaW5nIGlzIHNlbGVjdGVkXG4gICAgICovXG4gICAgYmFzZS5nZXRDdXJyZW50SWR4ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZGV0ZWN0Q3VycmVudElkeCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGN1cnJlbnQgc2VsZWN0aW9uLCBpZHggcGFyYW0gaXMgemVyby1iYXNlZFxuICAgICAqIEBwYXJhbSBpZHhcbiAgICAgKi9cbiAgICBiYXNlLnNldEN1cnJlbnRJZHggPSBmdW5jdGlvbihpZHgpIHtcbiAgICAgIHNldEN1cnJlbnRJZHgoaWR4KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBjdXJyZW50IHdpZHRoIG9mIHRoZSB0aXRsZSBvZiB0aGUgcHVsbGRvd25cbiAgICAgKi9cbiAgICBiYXNlLmdldFdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJGxpc3RUaXRsZS5vdXRlcldpZHRoKHRydWUpO1xuICAgIH07XG5cbiAgICBiYXNlLmluaXQoKTtcbiAgfTtcblxuICAvLyBzaG91bGQgd2Ugc2VsZWN0IGZpcnN0IGl0ZW0gaWYgbm8gc2VsZWN0aW9uIGhhcyBiZWVuIHBhc3NlZCBpbiBhbnkgd2F5XG4gICQuTGlzdFB1bGxkb3duLmRlZmF1bHRPcHRpb25zID0ge1xuICAgICdkaXNhYmxlRm9yQnJlYWtwb2ludHMnOiBbXSxcbiAgICAnZGVmYXVsdFByb21wdCcgICAgICAgIDogJ3NlbGVjdCBvcHRpb24nLFxuICAgICdmb3JjZVNlbGVjdGlvbicgICAgICAgOiBmYWxzZVxuICB9O1xuXG4gICQuZm4ubGlzdFB1bGxkb3duID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAvKiBqc2hpbnQgbm9uZXc6ZmFsc2UgKi9cbiAgICAgIChuZXcgJC5MaXN0UHVsbGRvd24odGhpcywgb3B0aW9ucykpO1xuICAgIH0pO1xuICB9O1xuXG4gICQuZm4uZ2V0TGlzdFB1bGxkb3duID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YSgnTGlzdFB1bGxkb3duJyk7XG4gIH07XG59KShqUXVlcnkpOyIsIi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qKiBHbG9iYWwgVXRpbGllcyBmb3IgUmVDYXB0Y2hhIFVzZSAqKlxyXG4qKiBDaHJpcyBKZW5raW5zLCBEZXZlbG9wZXIgKDgvMTYvMjAxNylcclxuKiogVXNhZ2U6XHJcbioqIGdldFdpZGdldHM6IGV4cGVjdHMgZW1wdHkgRElWIGNvbnRhaW5lcihzKSBpbiBwYWdlL0RPTSB3aXRoIHVuaXF1ZSBJRCBhbmQgXCJnLXJlY2FwdGNoYVwiIGNsYXNzIG5hbWUuXHJcbioqIChFeDogPGRpdiBpZD1beW91ciB1bmlxdWUgSURdIGNsYXNzPVwiZy1yZWNhcHRjaGFcIj48L2Rpdj4pXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyogZ2xvYmFsIGdyZWNhcHRjaGEgKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBSZUNhcHRjaGFVdGlscyA9IHtcclxuICAgICdnZXRXaWRnZXRzJzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICAgICAgJCgnLmctcmVjYXB0Y2hhJykuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgX3RoaXMuX3JlbmRlcldpZGdldCgkKHRoaXMpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJCh3aW5kb3cpLm9uKCdET01Ob2RlSW5zZXJ0ZWQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJSZUNhcHRjaGFVdGlsczogRE9NIG5vZGUgaW5zZXJ0ZWQhXCIsIGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgIGlmICgkKGV2ZW50LnRhcmdldCkuaGFzQ2xhc3MoJ2ctcmVjYXB0Y2hhJykpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9yZW5kZXJXaWRnZXQoJChldmVudC50YXJnZXQpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5maW5kKCcuZy1yZWNhcHRjaGEnKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9yZW5kZXJXaWRnZXQoJCh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgICdfcmVuZGVyV2lkZ2V0JzogZnVuY3Rpb24od2lkZ2V0KSB7XHJcbiAgICAgICAgaWYgKHdpZGdldC5hdHRyKCdpZCcpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHdpbmRvd1snd2lkZ2V0JyArIHdpZGdldC5hdHRyKCdpZCcpXSA9IGdyZWNhcHRjaGEucmVuZGVyKHdpZGdldC5hdHRyKCdpZCcpLCB7XHJcbiAgICAgICAgICAgICAgICAnc2l0ZWtleSc6ICc2TGVMbUJ3VUFBQUFBQTF3NXF6STRpZHBYQkhQX0VmclVYaHRZRWMtJyxcclxuICAgICAgICAgICAgICAgICd0aGVtZScgIDogJ2xpZ2h0J1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgJ3J3ZFJlQ2FwdGNoYSc6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICB2YXIgaG9zdEZvcm0gPSBkYXRhLmZvcm07XHJcbiAgICAgICAgdmFyIG1xID0gZGF0YS5tcTtcclxuICAgICAgICB2YXIgd2lkdGhDb250YWluZXIgPSBkYXRhLndpZHRoQ29udGFpbmVyO1xyXG4gICAgICAgIHZhciBtYXggPSBkYXRhLm1heFNjYWxlO1xyXG4gICAgICAgIHZhciByZUNhcHRjaGFEaXYgPSBob3N0Rm9ybS5maW5kKCcuZy1yZWNhcHRjaGEnKTtcclxuICAgICAgICB2YXIgZGVmYXVsdEhlaWdodCA9IDc4O1xyXG5cclxuICAgICAgICBpZiAobXEubWF0Y2hlcykge1xyXG4gICAgICAgICAgICB2YXIgc2NhbGVGYWN0b3IgPSBNYXRoLmNlaWwoKHdpZHRoQ29udGFpbmVyLndpZHRoKCkgLyBob3N0Rm9ybS5maW5kKCcuZy1yZWNhcHRjaGEgPiBkaXYnKS53aWR0aCgpKSAqIDEwMCkgLyAxMDA7XHJcblxyXG4gICAgICAgICAgICBpZiAobWF4ICE9PSBudWxsICYmIHNjYWxlRmFjdG9yIDwgbWF4KSB7XHJcbiAgICAgICAgICAgICAgICByZUNhcHRjaGFEaXYuY3NzKCd0cmFuc2Zvcm0nLCAnc2NhbGUoJyArIHNjYWxlRmFjdG9yICsgJyknKTtcclxuICAgICAgICAgICAgICAgIGlmIChzY2FsZUZhY3RvciA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZUNhcHRjaGFEaXYuY3NzKCdoZWlnaHQnLCAoZGVmYXVsdEhlaWdodCAtIChkZWZhdWx0SGVpZ2h0ICogKDEgLSBzY2FsZUZhY3RvcikpKSArICdweCcpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZUNhcHRjaGFEaXYuY3NzKCdoZWlnaHQnLCAoZGVmYXVsdEhlaWdodCArIChkZWZhdWx0SGVpZ2h0ICogKHNjYWxlRmFjdG9yIC0gMSkpKSArICdweCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVDYXB0Y2hhRGl2LmNzcygndHJhbnNmb3JtJywgJ3NjYWxlKCcgKyBtYXggKyAnKScpO1xyXG4gICAgICAgICAgICAgICAgcmVDYXB0Y2hhRGl2LmNzcygnaGVpZ2h0JywgKGRlZmF1bHRIZWlnaHQgKyAoZGVmYXVsdEhlaWdodCAqIChtYXggLSAxKSkpICsgJ3B4Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZUNhcHRjaGFEaXYuY3NzKCd0cmFuc2Zvcm0nLCAnc2NhbGUoMSknKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblxyXG4vKiogY2FsbGVkIGJ5IFJlQ2FwdGNoYSBBUEkgdXBvbiBsb2FkICoqL1xyXG52YXIgZ2xvYmFsUmVDYXB0Y2hhQ2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcclxuICAgIFJlQ2FwdGNoYVV0aWxzLmdldFdpZGdldHMoKTtcclxufTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuICAgIHZhciAkc2luZ2xlQ2Fyb3VzZWxDb250V2lkID0gJCgnLmNhcm91c2VsLXNpbmdsZS1zaWRlbmF2LWNvbnQnKS5wYXJlbnQoKSxcclxuICAgICAgICBzaW5nbGVDb3VudCA9IDAsXHJcbiAgICAgICAgbW9iaWxlV2lkID0gNzY3LFxyXG4gICAgICAgIHRhYmxldFdpZCA9IDEwMjMsXHJcbiAgICAgICAgc2luZ2xlU2hvd0xpc3QsIHNpbmdsZVVwZGF0ZWRXaWQsIHNpbmdsZVNob3dNYXJnLCBzaW5nbGVBcnJQYXJlbnRXaWQsXHJcbiAgICAgICAgJHNpbmdsZUNhcm91c2VsQ29udFdpZExpc3QgPSAkKCcuY2Fyb3VzZWwtc2luZ2xlLXNpZGVuYXYtY29udCBsaScpLmVxKDApLFxyXG4gICAgICAgIHNpbmdsZUNhcm91c2VsQ29udFdpZExpc3RMZW5ndGggPSAkKCcuY2Fyb3VzZWwtc2luZ2xlLXNpZGVuYXYtY29udCBsaScpLmxlbmd0aCxcclxuICAgICAgICBzaW5nbGVDYXJvdXNlbENvbnRVTFdpZDtcclxuXHJcbiAgICBzaW5nbGVDYXJvdXNlbHJlc2l6ZSgpO1xyXG4gICAgJCgnLmNhcm91c2VsLXNpbmdsZS1zaWRlbmF2LWNvdW50JykudmFsKDApO1xyXG4gICAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpIHtcclxuICAgICAgICBzaW5nbGVDYXJvdXNlbHJlc2l6ZSgpO1xyXG4gICAgfSk7XHJcbiAgICAkKCcuY2Fyb3VzZWwtc2luZ2xlLXNpZGVuYXYtcmlnaHQtYXJyb3cnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgJHNpbmdsZVRvdGFsQ2Fyb3VzZWxMaXN0ID0gJCh0aGlzKS5jbG9zZXN0KCcuYmlvU2xpZGVyJykuZmluZChcclxuICAgICAgICAgICAgJy5jYXJvdXNlbC1zaW5nbGUtc2lkZW5hdi1jb250IGxpJyk7XHJcblxyXG4gICAgICAgIHNpbmdsZUNvdW50ID0gcGFyc2VJbnQoJCh0aGlzKS5jbG9zZXN0KCdzcGFuJykuZmluZCgnaW5wdXQnKS52YWwoKSk7XHJcbiAgICAgICAgaWYgKChzaW5nbGVDb3VudCA+PSAwKSAmJiBzaW5nbGVDb3VudCA8ICgoJHNpbmdsZVRvdGFsQ2Fyb3VzZWxMaXN0Lmxlbmd0aCAtIHNpbmdsZVNob3dMaXN0KSkpIHtcclxuICAgICAgICAgICAgc2luZ2xlQ291bnQgPSBwYXJzZUludCgkKHRoaXMpLmNsb3Nlc3QoJ3NwYW4nKS5maW5kKCdpbnB1dCcpLnZhbCgpKSArIDE7XHJcbiAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnc3BhbicpLmZpbmQoJ2lucHV0JykudmFsKHNpbmdsZUNvdW50KTtcclxuICAgICAgICAgICAgdmFyIHNpbmdsZUxlZnRWYWwgPSAoc2luZ2xlQ291bnQgKiBzaW5nbGVVcGRhdGVkV2lkKSArIChzaW5nbGVDb3VudCAqIHBhcnNlSW50KFxyXG4gICAgICAgICAgICAgICAgJHNpbmdsZUNhcm91c2VsQ29udFdpZExpc3QuY3NzKCdtYXJnaW4tcmlnaHQnKSkpICsgKHNpbmdsZUNvdW50ICogcGFyc2VJbnQoXHJcbiAgICAgICAgICAgICAgICAkc2luZ2xlQ2Fyb3VzZWxDb250V2lkTGlzdC5jc3MoJ21hcmdpbi1sZWZ0JykpKTtcclxuXHJcbiAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnLmJpb1NsaWRlcicpLmZpbmQoJy5jYXJvdXNlbC1zaW5nbGUtc2lkZW5hdi1jb250Jykuc3RvcChmYWxzZSwgdHJ1ZSkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAnbGVmdCc6IC1zaW5nbGVMZWZ0VmFsICsgJ3B4J1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgJCh0aGlzKS5wcmV2KCkuYWRkQ2xhc3MoJ2Nhcm91c2VsLXNpbmdsZS1zaWRlbmF2LWxlZnQtYXJyb3cnKTtcclxuICAgICAgICAgICAgaWYgKHNpbmdsZUNvdW50ID49ICgoJHNpbmdsZVRvdGFsQ2Fyb3VzZWxMaXN0Lmxlbmd0aCAtIHNpbmdsZVNob3dMaXN0KSkpIHtcclxuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2Nhcm91c2VsLXNpbmdsZS1zaWRlbmF2LXJpZ2h0LWFycm93Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgICQoJy5jYXJvdXNlbC1zaW5nbGUtc2lkZW5hdi1sZWZ0LWFycm93Jykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgc2luZ2xlQ291bnQgPSBwYXJzZUludCgkKHRoaXMpLmNsb3Nlc3QoJ3NwYW4nKS5maW5kKCdpbnB1dCcpLnZhbCgpKTtcclxuICAgICAgICB2YXIgJHNpbmdsZVRvdGFsQ2Fyb3VzZWxMaXN0ID0gJCh0aGlzKS5jbG9zZXN0KCcuYmlvU2xpZGVyJykuZmluZChcclxuICAgICAgICAgICAgJy5jYXJvdXNlbC1zaW5nbGUtc2lkZW5hdi1jb250IGxpJyk7XHJcblxyXG4gICAgICAgIGlmICgoc2luZ2xlQ291bnQgPiAwKSAmJiBzaW5nbGVDb3VudCA8PSAoJHNpbmdsZVRvdGFsQ2Fyb3VzZWxMaXN0Lmxlbmd0aCAtIHNpbmdsZVNob3dMaXN0KSkge1xyXG4gICAgICAgICAgICBzaW5nbGVDb3VudCA9IHBhcnNlSW50KCQodGhpcykuY2xvc2VzdCgnc3BhbicpLmZpbmQoJ2lucHV0JykudmFsKCkpIC0gMTtcclxuICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCdzcGFuJykuZmluZCgnaW5wdXQnKS52YWwoc2luZ2xlQ291bnQpO1xyXG4gICAgICAgICAgICB2YXIgc2luZ2xlTGVmdFZhbCA9IChzaW5nbGVDb3VudCAqIHNpbmdsZVVwZGF0ZWRXaWQpICsgKHNpbmdsZUNvdW50ICogcGFyc2VJbnQoXHJcbiAgICAgICAgICAgICAgICAkc2luZ2xlQ2Fyb3VzZWxDb250V2lkTGlzdC5jc3MoJ21hcmdpbi1yaWdodCcpKSkgKyAoc2luZ2xlQ291bnQgKiBwYXJzZUludChcclxuICAgICAgICAgICAgICAgICRzaW5nbGVDYXJvdXNlbENvbnRXaWRMaXN0LmNzcygnbWFyZ2luLWxlZnQnKSkpO1xyXG5cclxuICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCcuYmlvU2xpZGVyJykuZmluZCgnLmNhcm91c2VsLXNpbmdsZS1zaWRlbmF2LWNvbnQnKS5zdG9wKGZhbHNlLCB0cnVlKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICdsZWZ0JzogLXNpbmdsZUxlZnRWYWwgKyAncHgnXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAkKHRoaXMpLm5leHQoKS5hZGRDbGFzcygnY2Fyb3VzZWwtc2luZ2xlLXNpZGVuYXYtcmlnaHQtYXJyb3cnKTtcclxuICAgICAgICAgICAgaWYgKHNpbmdsZUNvdW50IDw9IDApIHtcclxuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2Nhcm91c2VsLXNpbmdsZS1zaWRlbmF2LWxlZnQtYXJyb3cnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNpbmdsZUNhcm91c2VscmVzaXplKCkge1xyXG4gICAgICAgIHNpbmdsZUFyclBhcmVudFdpZCA9ICQoJy5jYXJvdXNlbC1zaW5nbGUtc2lkZW5hdi1yaWdodC1hcnJvdycpLnBhcmVudCgpLm91dGVyV2lkdGgoKTtcclxuICAgICAgICB2YXIgc2luZ2xlTWFyZ2luTGVmdCA9IHBhcnNlSW50KCRzaW5nbGVDYXJvdXNlbENvbnRXaWRMaXN0LmNzcygnbWFyZ2luLXJpZ2h0JykpO1xyXG5cclxuICAgICAgICAkKCcubGVmdC5jYXJvdXNlbC1zaW5nbGUtc2lkZW5hdi1jb250cm9sJykucmVtb3ZlQ2xhc3MoJ2Nhcm91c2VsLXNpbmdsZS1zaWRlbmF2LWxlZnQtYXJyb3cnKTtcclxuICAgICAgICAkKCcuY2Fyb3VzZWwtc2luZ2xlLXNpZGVuYXYtY29udCcpLmNzcyh7XHJcbiAgICAgICAgICAgICdsZWZ0JzogJzAnXHJcbiAgICAgICAgfSkucGFyZW50KCkuY3NzKCdvdmVyZmxvdycsICdoaWRkZW4nKTtcclxuICAgICAgICAkKCcuY2Fyb3VzZWwtc2luZ2xlLXNpZGVuYXYtY291bnQnKS52YWwoMCk7XHJcbiAgICAgICAgc2luZ2xlQ291bnQgPSAwO1xyXG4gICAgICAgIHZhciB3aW5kV2lkID0gJCh3aW5kb3cpLndpZHRoKCk7XHJcblxyXG4gICAgICAgICQoJy5sZWZ0LmNhcm91c2VsLXNpbmdsZS1zaWRlbmF2LWNvbnRyb2wnKS5yZW1vdmVDbGFzcygnY2Fyb3VzZWwtc2luZ2xlLXNpZGVuYXYtbGVmdC1hcnJvdycpO1xyXG4gICAgICAgICQoJy5yaWdodC5jYXJvdXNlbC1zaW5nbGUtc2lkZW5hdi1jb250cm9sJykuYWRkQ2xhc3MoJ2Nhcm91c2VsLXNpbmdsZS1zaWRlbmF2LXJpZ2h0LWFycm93Jyk7XHJcbiAgICAgICAgaWYgKHdpbmRXaWQgPD0gbW9iaWxlV2lkKSB7XHJcbiAgICAgICAgICAgIHNpbmdsZVNob3dMaXN0ID0gMTtcclxuICAgICAgICAgICAgc2luZ2xlU2hvd01hcmcgPSBzaW5nbGVBcnJQYXJlbnRXaWQgLyBzaW5nbGVTaG93TGlzdDtcclxuICAgICAgICAgICAgc2luZ2xlTWFyZ2luTGVmdCA9IHBhcnNlSW50KHNpbmdsZU1hcmdpbkxlZnQgKiAoc2luZ2xlU2hvd0xpc3QgLSAxKSk7XHJcbiAgICAgICAgICAgIHNpbmdsZVVwZGF0ZWRXaWQgPSAoJHNpbmdsZUNhcm91c2VsQ29udFdpZC53aWR0aCgpIC0gc2luZ2xlTWFyZ2luTGVmdCkgLyBzaW5nbGVTaG93TGlzdDtcclxuICAgICAgICB9IGVsc2UgaWYgKHdpbmRXaWQgPD0gdGFibGV0V2lkKSB7XHJcbiAgICAgICAgICAgIHNpbmdsZVNob3dMaXN0ID0gMTtcclxuICAgICAgICAgICAgc2luZ2xlU2hvd01hcmcgPSBzaW5nbGVBcnJQYXJlbnRXaWQgLyBzaW5nbGVTaG93TGlzdDtcclxuICAgICAgICAgICAgc2luZ2xlTWFyZ2luTGVmdCA9IHBhcnNlSW50KHNpbmdsZU1hcmdpbkxlZnQgKiAoc2luZ2xlU2hvd0xpc3QgLSAxKSk7XHJcbiAgICAgICAgICAgIHNpbmdsZVVwZGF0ZWRXaWQgPSAoJHNpbmdsZUNhcm91c2VsQ29udFdpZC53aWR0aCgpIC0gc2luZ2xlTWFyZ2luTGVmdCkgLyBzaW5nbGVTaG93TGlzdDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzaW5nbGVTaG93TGlzdCA9IDE7XHJcbiAgICAgICAgICAgIHNpbmdsZVNob3dNYXJnID0gc2luZ2xlQXJyUGFyZW50V2lkIC8gc2luZ2xlU2hvd0xpc3Q7XHJcbiAgICAgICAgICAgIHNpbmdsZU1hcmdpbkxlZnQgPSBwYXJzZUludChzaW5nbGVNYXJnaW5MZWZ0ICogKHNpbmdsZVNob3dMaXN0IC0gMSkpO1xyXG4gICAgICAgICAgICBzaW5nbGVVcGRhdGVkV2lkID0gKCRzaW5nbGVDYXJvdXNlbENvbnRXaWQud2lkdGgoKSAtIHNpbmdsZU1hcmdpbkxlZnQpIC8gc2luZ2xlU2hvd0xpc3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNpbmdsZUNhcm91c2VsQ29udFVMV2lkID0gKHNpbmdsZVVwZGF0ZWRXaWQgKiBzaW5nbGVDYXJvdXNlbENvbnRXaWRMaXN0TGVuZ3RoKSArIChzaW5nbGVNYXJnaW5MZWZ0XHJcbiAgICAgICAgICAgICogc2luZ2xlQ2Fyb3VzZWxDb250V2lkTGlzdExlbmd0aCk7XHJcbiAgICAgICAgJCgnLmNhcm91c2VsLXNpbmdsZS1zaWRlbmF2LWNvbnQnKS5jc3MoJ3dpZHRoJywgc2luZ2xlQ2Fyb3VzZWxDb250VUxXaWQgKyAncHgnKS5maW5kKCdsaScpLmNzcygnd2lkdGgnLFxyXG4gICAgICAgICAgICBzaW5nbGVVcGRhdGVkV2lkICsgJ3B4Jyk7XHJcbiAgICB9XHJcbn0pOyIsIid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWZhdWx0VGlsZXMgPSA2O1xuXG4gICAgaWYgKCQoJy5VSVRhYnNldCAudGFiQmxvY2tCbHVlQnRuJykubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgdGFiQmxvY2sgPSAkKCcuVUlUYWJzZXQgLnRhYkJsb2NrQmx1ZUJ0bicpLnBhcmVudCgpO1xuICAgICAgICB2YXIgdGFiQ29udGVudHMgPSB0YWJCbG9jay5jaGlsZHJlbigpO1xuXG4gICAgICAgICQuZWFjaCh0YWJDb250ZW50cywgZnVuY3Rpb24odGFiSW5kZXgsIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgdGlsZXMgPSAkKHZhbHVlKS5maW5kKCcuZ3JpZC1ibG9jay10aWxlLTJjb2x1bW4gbGknKTtcbiAgICAgICAgICAgIHZhciBub09mVGlsZXMgPSB0aWxlcy5sZW5ndGg7XG5cbiAgICAgICAgICAgIGlmIChub09mVGlsZXMgPiBkZWZhdWx0VGlsZXMpIHtcbiAgICAgICAgICAgICAgICAkKHZhbHVlKS5kYXRhKCd0aWxlcycsIGRlZmF1bHRUaWxlcyk7XG4gICAgICAgICAgICAgICAgJC5lYWNoKHRpbGVzLCBmdW5jdGlvbih0aWxlSW5kZXgsIHRpbGVWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGlsZUluZGV4ID4gKGRlZmF1bHRUaWxlcyAtIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRpbGVWYWx1ZSkuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKHZhbHVlKS5kYXRhKCd0aWxlcycsIG5vT2ZUaWxlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGFiSW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAobm9PZlRpbGVzIDw9IGRlZmF1bHRUaWxlcykge1xuICAgICAgICAgICAgICAgICAgICAkKCcuVUlUYWJzZXQgLnRhYkJsb2NrQmx1ZUJ0bicpLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBUYWIgY2xpY2sgZXZlbnRcbiAgICAgICAgJCgnLlVJVGFic2V0LmJsdWUgbGknKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpblN3aXRjaFRvSWR4ID0gJCh0aGlzKS5kYXRhKCdpZHgnKTtcbiAgICAgICAgICAgIHZhciB0YXJnZXRuYW1lID0gJCh0aGlzKS5wYXJlbnQoKS5hdHRyKCdkYXRhLXRhcmdldCcpO1xuICAgICAgICAgICAgdmFyIGNsaWNrZWRUYWJCbG9jayA9ICQoZG9jdW1lbnQpLmZpbmQoJ1tkYXRhLW5hbWU9JyArIHRhcmdldG5hbWUgKyAnXScpO1xuICAgICAgICAgICAgdmFyIGNsaWNrZWRUYWJDb250ZW50cyA9ICQoZG9jdW1lbnQpLmZpbmQoJ1tkYXRhLW5hbWU9JyArIHRhcmdldG5hbWUgKyAnXScpLmNoaWxkcmVuKCk7XG5cbiAgICAgICAgICAgIGNsaWNrZWRUYWJDb250ZW50cy5lYWNoKGZ1bmN0aW9uKGlkeCkge1xuICAgICAgICAgICAgICAgIGlmIChpZHggPT09IGluU3dpdGNoVG9JZHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpc2libGVUaWxlcyA9IHBhcnNlSW50KCQodGhpcykuZGF0YSgndGlsZXMnKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub09mVGlsZXMgPSAkKHRoaXMpLmZpbmQoJy5ncmlkLWJsb2NrLXRpbGUtMmNvbHVtbiBsaScpLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobm9PZlRpbGVzID4gZGVmYXVsdFRpbGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmlzaWJsZVRpbGVzIDwgbm9PZlRpbGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChjbGlja2VkVGFiQmxvY2spLmZpbmQoJy50YWJCbG9ja0JsdWVCdG4nKS5jc3MoJ2Rpc3BsYXknLCAnaW5saW5lLWJsb2NrJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoY2xpY2tlZFRhYkJsb2NrKS5maW5kKCcudGFiQmxvY2tCbHVlQnRuJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoY2xpY2tlZFRhYkJsb2NrKS5maW5kKCcudGFiQmxvY2tCbHVlQnRuJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBMb2FkIE1vcmUgYnV0dG9uIGNsaWNrIGV2ZW50XG4gICAgICAgICQoJy5VSVRhYnNldCAudGFiQmxvY2tCbHVlQnRuJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY3VyclRhYiA9ICQodGhpcykucGFyZW50KCkuZmluZCgnLmlzLWFjdGl2ZScpO1xuXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgdmlzaWJsZSB0aWxlcyBjb3VudFxuXG4gICAgICAgICAgICB2YXIgdmlzaWJsZVRpbGVzID0gcGFyc2VJbnQoJChjdXJyVGFiKS5kYXRhKCd0aWxlcycpKTtcbiAgICAgICAgICAgIHZhciBub09mVGlsZXMgPSAkKGN1cnJUYWIpLmZpbmQoJy5ncmlkLWJsb2NrLXRpbGUtMmNvbHVtbiBsaScpLmxlbmd0aDtcblxuICAgICAgICAgICAgaWYgKChub09mVGlsZXMgLSB2aXNpYmxlVGlsZXMpID4gZGVmYXVsdFRpbGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRpbGVzTGlzdCA9ICQoY3VyclRhYikuZmluZCgnLmdyaWQtYmxvY2stdGlsZS0yY29sdW1uIHVsJyk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gdmlzaWJsZVRpbGVzOyBpIDwgKHZpc2libGVUaWxlcyArIGRlZmF1bHRUaWxlcyk7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGlsZSA9ICQodGlsZXNMaXN0KS5maW5kKCdsaTplcSgnICsgaSArICcpJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgJCh0aWxlKS5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHZpc2libGUgdGlsZXMgY291bnRcbiAgICAgICAgICAgICAgICAkKGN1cnJUYWIpLmRhdGEoJ3RpbGVzJywgKHZpc2libGVUaWxlcyArIGRlZmF1bHRUaWxlcykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKGN1cnJUYWIpLmZpbmQoJy5ncmlkLWJsb2NrLXRpbGUtMmNvbHVtbiBsaScpLmNzcygnZGlzcGxheScsICdibG9jaycpO1xuICAgICAgICAgICAgICAgICQodGhpcykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcblxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgdmlzaWJsZSB0aWxlcyBjb3VudFxuICAgICAgICAgICAgICAgICQoY3VyclRhYikuZGF0YSgndGlsZXMnLCAodmlzaWJsZVRpbGVzICsgKG5vT2ZUaWxlcyAtIHZpc2libGVUaWxlcykpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufSkoKTsiLCIvKiBVSVRhYlNldCAqL1xuXG4vKlxuIFRhYnMgYmV0d2VlbiBjb250ZW50LlxuIFRhYnMgc2hvdWxkIGJlIGRlZmluZWQgYXMgZm9sbG93czpcblxuIDx1bCBjbGFzcz0nVUlUYWJzZXQgVUlUYWJzZXQtbmF2JyBkYXRhLXRvZ2dsZT0ndGFic2V0JyBkYXRhLXRhcmdldD0nbXktdGFiLXNldD5cbiA8bGk+VGFiIDI8L2xpPlxuIDxsaSBjbGFzcz0naXMtYWN0aXZlJz5UYWIgMjwvbGk+XG4gPC91bD5cblxuIGlmIGNsYXNzPSdpcy1hY3RpdmUnIGlzIGRlZmluZWQsIHRoZSBwbHVnaW4gd2lsbCBhdXRvbWF0aWNhbGx5IHN3aXRjaCB0byB0aGUgY29ycmVzcG9uZGluZyB0YWJcbiBpZiBub3QsIHRoZSBmaXJzdCB0YWIgd2lsbCBiZSBzZWxlY3RlZFxuIGNvcnJlc3BvbmRpbmcgdGFiIGNvbnRlbnRzIHNldCBtdXN0IGJlIGRlZmluZWQgaW4gZGF0YS10YXJnZXQgYXR0cmlidXRlXG5cbiBBbmQgdGFicyBzaG91bGQgYmUgZGVmaW5lZCBhcyBhIGJsb2NrIGVsZW1lbnQgd2l0aCBibG9jayBlbGVtZW50cyBpbnNpZGUsIGFzIGluOlxuXG4gPGRpdiBjbGFzcz0nVUlUYWJzZXQgVUlUYWJzZXQtaG9sZGVyJyBkYXRhLW5hbWU9J215LXRhYi1zZXQnPlxuIDxkaXY+XG4gPCEtLSB0YWIgMSBjb250ZW50IC0tPlxuIDwvZGl2PlxuIDxkaXY+XG4gPCEtLSB0YWIgMiBjb250ZW50IC0tPlxuIDwvZGl2PlxuIDwvZGl2PlxuXG4gU3VwcG9ydHM6XG4gLSBkYXRhLWNhbGxiYWNrIDogYSBjYWxsYmFjayBmdW5jdGlvbiBvbiBhIHdpbmRvdyBsZXZlbCwgY2FsbGVkIHdpdGggMiBwYXJhbXM6IGZ1bmN0aW9uKHNlbGVjdGVkX3RhYl9pZHgsIGN1cnJlbnRfdGFic2V0X2VsZW1lbnQpXG5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbigkKSB7XG4gICAgJC5VSVRhYlNldCA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgIHZhciBiYXNlID0gdGhpcztcblxuICAgICAgICBiYXNlLiRlbCA9ICQoZWwpO1xuICAgICAgICBiYXNlLmVsID0gZWw7XG4gICAgICAgIGJhc2UuY3VyaWR4ID0gLTE7XG5cbiAgICAgICAgYmFzZS4kZWwuZGF0YSgnVUlUYWJTZXQnLCBiYXNlKTtcblxuICAgICAgICBiYXNlLmNhbGxiYWNrRnVuY3Rpb25OYW1lID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGJhc2UuJHRhYnNldFRhYnMgPSBbXTtcbiAgICAgICAgYmFzZS4kdGFic2V0UGFuZWxzID0gW107XG5cbiAgICAgICAgdmFyIGZvY3VzZWRUYWJJZHggPSAtMTtcblxuICAgICAgICBiYXNlLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRuYW1lID0gYmFzZS4kZWwuYXR0cignZGF0YS10YXJnZXQnKTtcblxuICAgICAgICAgICAgYmFzZS5jYWxsYmFja0Z1bmN0aW9uTmFtZSA9IGJhc2UuJGVsLmF0dHIoJ2RhdGEtY2FsbGJhY2snKTtcblxuICAgICAgICAgICAgdmFyIGN1cmlkeCA9IDA7XG5cbiAgICAgICAgICAgIGJhc2UuJHRhYnNldFRhYnMgPSBiYXNlLiRlbC5jaGlsZHJlbigpO1xuICAgICAgICAgICAgYmFzZS4kdGFic2V0UGFuZWxzID0gJChkb2N1bWVudCkuZmluZCgnW2RhdGEtbmFtZT0nICsgdGFyZ2V0bmFtZSArICddJykuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgIGJhc2UuJHRhYnNldFRhYnMuZWFjaChmdW5jdGlvbihpZHgpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ2RhdGEtaWR4JywgaWR4KS5hZGRDbGFzcygnaW50ZXJuYWwtdGFic2V0LXRhYicpO1xuICAgICAgICAgICAgICAgICQodGhpcykuZGF0YSgnaWR4JywgaWR4KTtcblxuICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJpZHggPSBpZHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBiYXNlLiR0YWJzZXRUYWJzLm9uKCdmb2N1cycsIG9uVGFiRm9jdXMpO1xuICAgICAgICAgICAgYmFzZS4kdGFic2V0VGFicy5vbignYmx1cicsIG9uVGFiQmx1cik7XG5cbiAgICAgICAgICAgIC8vIGJhc2UuJGVsLmFwcGVuZCgnPHNwYW4gY2xhc3M9XCJib3R0b20tc3RlbVwiPjwvc3Bhbj4nKTtcblxuICAgICAgICAgICAgLy8gQURBIHNldHVwXG4gICAgICAgICAgICBiYXNlLiRlbC5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKTtcbiAgICAgICAgICAgIGJhc2UuJHRhYnNldFRhYnMuYXR0cigncm9sZScsICd0YWInKTtcbiAgICAgICAgICAgIGJhc2UuJHRhYnNldFBhbmVscy5hdHRyKCdyb2xlJywgJ3RhYnBhbmVsJyk7XG5cbiAgICAgICAgICAgIGJhc2UuJHRhYnNldFRhYnMuZWFjaChmdW5jdGlvbihpZHgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdWlkID0gJChkb2N1bWVudCkuZ2V0VW5pcXVlSUQoKTtcblxuICAgICAgICAgICAgICAgIHZhciAkdGFiID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICB2YXIgJHRhYnBhbmVsID0gYmFzZS4kdGFic2V0UGFuZWxzLmVxKGlkeCk7XG5cbiAgICAgICAgICAgICAgICAkdGFiLmF0dHIoJ2lkJywgJ3RhYnNldC10YWItJyArIHVpZClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtY29udHJvbHMnLCAndGFic2V0LXBhbmVsLScgKyB1aWQpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtc2VsZWN0ZWQnLCAnZmFsc2UnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigndGFiaW5kZXgnLCAoaWR4ID09PSAwKSA/ICcwJyA6ICctMScpO1xuXG4gICAgICAgICAgICAgICAgJHRhYnBhbmVsLmF0dHIoJ2lkJywgJ3RhYnNldC1wYW5lbC0nICsgdWlkKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1sYWJlbGxlZGJ5JywgJ3RhYnNldC10YWItJyArIHVpZClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGJhc2UuJHRhYnNldFBhbmVscy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmNoaWxkcmVuKCkuZmlyc3QoKS5pcygnZGl2JykpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jaGlsZHJlbigpLmZpcnN0KCkuY2hpbGRyZW4oKS5maXJzdCgpLmF0dHIoJ3RhYmluZGV4JywgJzAnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNoaWxkcmVuKCkuZmlyc3QoKS5hdHRyKCd0YWJpbmRleCcsICcwJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGJhc2UuJHRhYnNldFRhYnMub24oJ2NsaWNrJywgYmFzZS50YWJDbGljayk7XG4gICAgICAgICAgICBiYXNlLiR0YWJzZXRUYWJzLmJpbmQoJ2tleWRvd24uc3BhY2UnLCBiYXNlLnRhYlN3aXRjaFRvRm9jdXNlZCk7XG4gICAgICAgICAgICBiYXNlLiR0YWJzZXRUYWJzLmJpbmQoJ2tleWRvd24ucmV0dXJuJywgYmFzZS50YWJTd2l0Y2hUb0ZvY3VzZWQpO1xuICAgICAgICAgICAgYmFzZS4kdGFic2V0VGFicy5iaW5kKCdrZXlkb3duLmxlZnQnLCBiYXNlLnRhYkZvY3VzUHJldik7XG4gICAgICAgICAgICBiYXNlLiR0YWJzZXRUYWJzLmJpbmQoJ2tleWRvd24ucmlnaHQnLCBiYXNlLnRhYkZvY3VzTmV4dCk7XG4gICAgICAgICAgICBiYXNlLiR0YWJzZXRUYWJzLmJpbmQoJ2tleWRvd24udGFiJywgYmFzZS5mb2N1c09uQ3VycmVudFBhbmVsKTtcblxuICAgICAgICAgICAgYmFzZS5zd2l0Y2hUb0lkeChjdXJpZHgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBvblRhYkZvY3VzID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyICRlbHQgPSAkKGUudGFyZ2V0KTtcblxuICAgICAgICAgICAgLy8kZWx0LmFkZENsYXNzKCdmb2N1cycpO1xuICAgICAgICAgICAgZm9jdXNlZFRhYklkeCA9ICRlbHQuZGF0YSgnaWR4Jyk7XG5cbiAgICAgICAgICAgICRlbHQuYXR0cignYXJpYS1zZWxlY3RlZCcsICd0cnVlJyk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBvblRhYkJsdXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgJGVsdCA9ICQoZS50YXJnZXQpO1xuXG4gICAgICAgICAgICAvLyRlbHQucmVtb3ZlQ2xhc3MoJ2ZvY3VzJyk7XG4gICAgICAgICAgICBmb2N1c2VkVGFiSWR4ID0gLTE7XG5cbiAgICAgICAgICAgICRlbHQuYXR0cignYXJpYS1zZWxlY3RlZCcsICdmYWxzZScpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qIGJhc2UuZm9jdXNPbkN1cnJlbnRQYW5lbCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIH07Ki9cblxuICAgICAgICBiYXNlLnRhYkZvY3VzTmV4dCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgdmFyICRlbHQgPSAkKGUudGFyZ2V0KTtcbiAgICAgICAgICAgIHZhciBpZHggPSAkZWx0LmRhdGEoJ2lkeCcpO1xuXG4gICAgICAgICAgICBpZiAoaWR4IDwgKGJhc2UuJHRhYnNldFRhYnMubGVuZ3RoIC0gMSkpIHtcbiAgICAgICAgICAgICAgICBiYXNlLiR0YWJzZXRUYWJzLmVxKGlkeCArIDEpLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgYmFzZS50YWJTd2l0Y2hUb0ZvY3VzZWQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIGlmIChmb2N1c2VkVGFiSWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGJhc2Uuc3dpdGNoVG9JZHgoZm9jdXNlZFRhYklkeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgYmFzZS50YWJGb2N1c1ByZXYgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIHZhciAkZWx0ID0gJChlLnRhcmdldCk7XG4gICAgICAgICAgICB2YXIgaWR4ID0gJGVsdC5kYXRhKCdpZHgnKTtcblxuICAgICAgICAgICAgaWYgKGlkeCA+IDApIHtcbiAgICAgICAgICAgICAgICBiYXNlLiR0YWJzZXRUYWJzLmVxKGlkeCAtIDEpLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgYmFzZS50YWJDbGljayA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciAkZWx0ID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICBpZiAoJGVsdC5kYXRhKCdpZHgnKSAhPT0gdW5kZWZpbmVkICYmICRlbHQuZGF0YSgnaWR4JykgIT09IG51bGwgJiYgJGVsdC5kYXRhKCdpZHgnKSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBiYXNlLnN3aXRjaFRvSWR4KHBhcnNlSW50KCRlbHQuZGF0YSgnaWR4JykpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYmFzZS5zd2l0Y2hUb0lkeChwYXJzZUludCgkZWx0LnBhcmVudCgpLmRhdGEoJ2lkeCcpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgYmFzZS5zd2l0Y2hUb0lkeCA9IGZ1bmN0aW9uKGluU3dpdGNoVG9JZHgpIHtcbiAgICAgICAgICAgIGlmIChiYXNlLmN1cmlkeCA9PT0gaW5Td2l0Y2hUb0lkeCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYmFzZS4kdGFic2V0VGFicy5lYWNoKGZ1bmN0aW9uKGlkeCkge1xuICAgICAgICAgICAgICAgIGlmIChpZHggPT09IGluU3dpdGNoVG9JZHgpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBiYXNlLiR0YWJzZXRQYW5lbHMuZWFjaChmdW5jdGlvbihpZHgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaWR4ID09PSBpblN3aXRjaFRvSWR4KSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBBREFcbiAgICAgICAgICAgIGlmIChiYXNlLmN1cmlkeCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBiYXNlLiR0YWJzZXRUYWJzLmVxKGJhc2UuY3VyaWR4KS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICAgICAgYmFzZS4kdGFic2V0UGFuZWxzLmVxKGJhc2UuY3VyaWR4KS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICAgICAgYmFzZS4kdGFic2V0UGFuZWxzLmVxKGJhc2UuY3VyaWR4KS5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiYXNlLiR0YWJzZXRUYWJzLmVxKGluU3dpdGNoVG9JZHgpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgYmFzZS4kdGFic2V0UGFuZWxzLmVxKGluU3dpdGNoVG9JZHgpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgYmFzZS4kdGFic2V0UGFuZWxzLmVxKGluU3dpdGNoVG9JZHgpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIGJhc2UuY3VyaWR4ID0gaW5Td2l0Y2hUb0lkeDtcbiAgICAgICAgICAgIGJhc2UuZGlzcGF0Y2hDYWxsYmFjayhpblN3aXRjaFRvSWR4LCBiYXNlKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyB0YWIgaW5kZXggYW5kIHRhYnNldCBvYmplY3RcbiAgICAgICAgYmFzZS5kaXNwYXRjaENhbGxiYWNrID0gZnVuY3Rpb24oYXJnLCBhcmcyKSB7XG4gICAgICAgICAgICBpZiAoYmFzZS5jYWxsYmFja0Z1bmN0aW9uTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZm4gPSBiYXNlLmNhbGxiYWNrRnVuY3Rpb25OYW1lO1xuXG4gICAgICAgICAgICAvLyBBbGxvdyBmbiB0byBiZSBhIGZ1bmN0aW9uIG9iamVjdCBvciB0aGUgbmFtZSBvZiBhIGdsb2JhbCBmdW5jdGlvblxuXG4gICAgICAgICAgICBmbiA9ICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpID8gZm4gOiB3aW5kb3dbZm5dO1xuXG4gICAgICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBhcmcsIGFyZzIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGJhc2Uuc2V0U3dpdGNoQ2FsbGJhY2sgPSBmdW5jdGlvbihjYWxsYmFja0Z1bmN0aW9uTmFtZSkge1xuICAgICAgICAgICAgYmFzZS5jYWxsYmFja0Z1bmN0aW9uTmFtZSA9IGNhbGxiYWNrRnVuY3Rpb25OYW1lO1xuICAgICAgICB9O1xuXG4gICAgICAgIGJhc2UuaW5pdCgpO1xuICAgIH07XG5cbiAgICAkLmZuLnVJVGFiU2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvKiBqc2hpbnQgbm9uZXc6ZmFsc2UgKi9cbiAgICAgICAgICAgIChuZXcgJC5VSVRhYlNldCh0aGlzKSk7XG4gICAgICAgIH0pO1xuICAgIH07XG59KShqUXVlcnkpOyJdfQ==
